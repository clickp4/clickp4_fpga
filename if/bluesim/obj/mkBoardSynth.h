/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sun Jun  4 11:11:32 CST 2017
 * 
 */

/* Generation options: */
#ifndef __mkBoardSynth_h__
#define __mkBoardSynth_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkBoardSynth module */
class MOD_mkBoardSynth : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
  tClock __clk_handle_1;
  tClock __clk_handle_2;
  tClock __clk_handle_3;
  tClock __clk_handle_4;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_SyncReset INST__unnamed_;
  MOD_ClockGen INST_clocks_clock156mhz;
  MOD_ClockGen INST_clocks_clock50mhz;
  MOD_ClockGen INST_clocks_clock644mhz;
  MOD_SyncReset INST_clocks_reset156n;
  MOD_SyncReset INST_clocks_reset50n;
  MOD_SyncReset INST_mgmtReset;
  MOD_SyncReset INST_phyReset;
 
 /* Constructor */
 public:
  MOD_mkBoardSynth(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_mgmtReset$OUT_RST;
  tUInt8 PORT_phyReset$OUT_RST;
  tUInt8 PORT__unnamed_$OUT_RST;
  tUInt8 PORT_clocks_reset156n$OUT_RST;
  tUInt8 PORT_clocks_reset50n$OUT_RST;
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_mgmtReset$OUT_RST(tUInt8 ARG_rst_in);
  void reset_phyReset$OUT_RST(tUInt8 ARG_rst_in);
  void reset__unnamed_$OUT_RST(tUInt8 ARG_rst_in);
  void reset_clocks_reset156n$OUT_RST(tUInt8 ARG_rst_in);
  void reset_clocks_reset50n$OUT_RST(tUInt8 ARG_rst_in);
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
  static void static_reset_mgmtReset$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
  static void static_reset_phyReset$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
  static void static_reset__unnamed_$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
  static void static_reset_clocks_reset156n$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
  static void static_reset_clocks_reset50n$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
  tResetFn reset_fn_txReset;
  tResetFn reset_fn_rxReset;
 
 /* Functions for the parent module to register its reset fns */
 public:
  void set_reset_fn_txReset(tResetFn fn);
  void set_reset_fn_rxReset(tResetFn fn);
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
  void set_clk_1(char const *s);
  void set_clk_2(char const *s);
  void set_clk_3(char const *s);
  void set_clk_4(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBoardSynth &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkBoardSynth &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkBoardSynth &backing);
};

#endif /* ifndef __mkBoardSynth_h__ */
