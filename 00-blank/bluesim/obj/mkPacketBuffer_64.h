/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sat Jun  3 15:25:49 CST 2017
 * 
 */

/* Generation options: */
#ifndef __mkPacketBuffer_64_h__
#define __mkPacketBuffer_64_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkPacketBuffer_64 module */
class MOD_mkPacketBuffer_64 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
  std::string const PARAM_param1;
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_badFrame;
  MOD_ConfigReg<tUInt32> INST_cf_verbosity;
  MOD_Wire<tUInt64> INST_data;
  MOD_Wire<tUInt8> INST_eop;
  MOD_Reg<tUInt64> INST_eopDeq;
  MOD_Reg<tUInt64> INST_eopEnq;
  MOD_Fifo<tUInt32> INST_fifoEop;
  MOD_Fifo<tUInt32> INST_fifoLen;
  MOD_Fifo<tUWide> INST_fifoReadData;
  MOD_Fifo<tUInt32> INST_fifoReadReq;
  MOD_Fifo<tUWide> INST_fifoWriteData;
  MOD_Wire<tUInt8> INST_goodFrame;
  MOD_Reg<tUInt8> INST_inPacket;
  MOD_Fifo<tUWide> INST_incomingReqs;
  MOD_SyncReset INST_localReset;
  MOD_BRAM<tUInt8,tUWide,tUInt8> INST_memBuffer_memory;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterA_cnt;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_cnt_1;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_cnt_2;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_cnt_3;
  MOD_Fifo<tUWide> INST_memBuffer_serverAdapterA_outDataCore;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_outData_deqCalled;
  MOD_Wire<tUWide> INST_memBuffer_serverAdapterA_outData_enqData;
  MOD_Wire<tUWide> INST_memBuffer_serverAdapterA_outData_outData;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterA_s1;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_s1_1;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterA_s2;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterA_writeWithResp;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterB_cnt;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_cnt_1;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_cnt_2;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_cnt_3;
  MOD_Fifo<tUWide> INST_memBuffer_serverAdapterB_outDataCore;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_outData_deqCalled;
  MOD_Wire<tUWide> INST_memBuffer_serverAdapterB_outData_enqData;
  MOD_Wire<tUWide> INST_memBuffer_serverAdapterB_outData_outData;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterB_s1;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_s1_1;
  MOD_Reg<tUInt8> INST_memBuffer_serverAdapterB_s2;
  MOD_Wire<tUInt8> INST_memBuffer_serverAdapterB_writeWithResp;
  MOD_Reg<tUInt8> INST_outPacket;
  MOD_Reg<tUInt32> INST_packetLen;
  MOD_Reg<tUInt8> INST_rdCurrPtr;
  MOD_Wire<tUInt8> INST_sop;
  MOD_Reg<tUInt64> INST_sopDeq;
  MOD_Reg<tUInt64> INST_sopEnq;
  MOD_Wire<tUInt8> INST_valid;
  MOD_Reg<tUInt8> INST_wrCurrPtr;
 
 /* Constructor */
 public:
  MOD_mkPacketBuffer_64(tSimStateHdl simHdl,
			char const *name,
			Module *parent,
			std::string ARG_param1);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_localReset$OUT_RST;
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_writeServer_enq_v;
  tUWide PORT_readServer_readData_get;
  tUWide PORT_dbg;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_fifoWriteData_first__33_BIT_0___d134;
  tUWide DEF_fifoWriteData_first____d133;
  tUInt8 DEF_b__h3543;
  tUInt8 DEF_b__h1881;
  tUInt8 DEF_memBuffer_serverAdapterB_s2___d110;
  tUInt8 DEF_memBuffer_serverAdapterB_s1___d108;
  tUInt8 DEF_memBuffer_serverAdapterA_s2___d45;
  tUInt8 DEF_memBuffer_serverAdapterA_s1___d43;
  tUInt8 DEF_memBuffer_serverAdapterB_cnt_3_whas____d88;
  tUInt8 DEF_memBuffer_serverAdapterB_cnt_2_whas____d86;
  tUInt8 DEF_memBuffer_serverAdapterB_cnt_1_whas____d85;
  tUInt8 DEF_memBuffer_serverAdapterA_cnt_3_whas____d23;
  tUInt8 DEF_memBuffer_serverAdapterA_cnt_2_whas____d21;
  tUInt8 DEF_memBuffer_serverAdapterA_cnt_1_whas____d20;
  tUInt8 DEF_memBuffer_serverAdapterB_s2_10_BIT_0___d123;
  tUInt8 DEF_memBuffer_serverAdapterB_s1_08_BIT_1___d109;
  tUInt8 DEF_memBuffer_serverAdapterA_s2_5_BIT_0___d58;
  tUInt8 DEF_memBuffer_serverAdapterA_s1_3_BIT_1___d44;
  tUInt8 DEF_memBuffer_serverAdapterB_outData_outData_wget__ETC___d395;
  tUWide DEF_memBuffer_serverAdapterB_outData_outData_wget____d394;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h5224;
  tUWide DEF_memBuffer_serverAdapterB_outData_enqData_wget____d73;
  tUWide DEF_memBuffer_serverAdapterB_outDataCore_first____d69;
  tUWide DEF_memBuffer_serverAdapterA_outData_enqData_wget____d8;
  tUWide DEF_memBuffer_serverAdapterA_outDataCore_first____d4;
  tUWide DEF_memBuffer_memory_b_read____d128;
  tUWide DEF_memBuffer_memory_a_read____d63;
  tUInt32 DEF_b__h5213;
  tUWide DEF_wrCurrPtr_40_CONCAT_fifoWriteData_first__33___d141;
  tUInt8 DEF_NOT_cf_verbosity_read__43_SLE_3_44___d145;
  tUInt64 DEF_v__h9509;
  tUInt64 DEF_v__h8857;
  tUInt64 DEF_v__h8526;
  tUInt64 DEF_v__h8344;
  tUInt64 DEF_v__h8072;
  tUWide DEF_incomingReqs_first____d356;
  tUInt64 DEF_x__h9815;
  tUInt64 DEF_x__h9814;
  tUInt64 DEF_x__h9813;
  tUInt64 DEF_x__h9808;
  tUInt8 DEF_x__h9458;
  tUWide DEF_incomingReqs_first__56_BITS_609_TO_0___d362;
  tUWide DEF_incomingReqs_first__56_BITS_577_TO_66___d358;
  tUWide DEF_fifoWriteData_first__33_BITS_577_TO_66___d147;
  tUInt32 DEF_incomingReqs_first__56_BITS_609_TO_578___d359;
  tUInt8 DEF_incomingReqs_first__56_BITS_613_TO_610___d357;
  tUInt8 DEF_incomingReqs_first__56_BIT_1___d360;
  tUInt8 DEF_incomingReqs_first__56_BIT_0___d361;
  tUWide DEF_sopDeq_89_CONCAT_eopDeq_01___d409;
  tUInt8 DEF_x__h9448;
  tUWide DEF_readServer_readData_get__avValue1;
 
 /* Rules */
 public:
  void RL_memBuffer_serverAdapterA_outData_setFirstCore();
  void RL_memBuffer_serverAdapterA_outData_setFirstEnq();
  void RL_memBuffer_serverAdapterA_outData_enqOnly();
  void RL_memBuffer_serverAdapterA_outData_deqOnly();
  void RL_memBuffer_serverAdapterA_outData_enqAndDeq();
  void RL_memBuffer_serverAdapterA_cnt_finalAdd();
  void RL_memBuffer_serverAdapterA_s1__dreg_update();
  void RL_memBuffer_serverAdapterA_passRequest();
  void RL_memBuffer_serverAdapterA_stageReadResponseAlways();
  void RL_memBuffer_serverAdapterA_moveToOutFIFO();
  void RL_memBuffer_serverAdapterA_overRun();
  void RL_memBuffer_serverAdapterB_outData_setFirstCore();
  void RL_memBuffer_serverAdapterB_outData_setFirstEnq();
  void RL_memBuffer_serverAdapterB_outData_enqOnly();
  void RL_memBuffer_serverAdapterB_outData_deqOnly();
  void RL_memBuffer_serverAdapterB_outData_enqAndDeq();
  void RL_memBuffer_serverAdapterB_cnt_finalAdd();
  void RL_memBuffer_serverAdapterB_s1__dreg_update();
  void RL_memBuffer_serverAdapterB_passRequest();
  void RL_memBuffer_serverAdapterB_stageReadResponseAlways();
  void RL_memBuffer_serverAdapterB_moveToOutFIFO();
  void RL_memBuffer_serverAdapterB_overRun();
  void RL_enq_stage1();
  void RL_enqueue_first_beat();
  void RL_enqueue_next_beat();
  void RL_commit_packet();
  void RL_dequeue_first_beat();
  void RL_dequeue_next_beat();
 
 /* Methods */
 public:
  void METH_writeServer_enq(tUWide ARG_writeServer_enq_v);
  tUInt8 METH_RDY_writeServer_enq();
  tUInt8 METH_writeServer_notFull();
  tUInt8 METH_RDY_writeServer_notFull();
  tUWide METH_readServer_readData_get();
  tUInt8 METH_RDY_readServer_readData_get();
  tUInt32 METH_readServer_readLen_get();
  tUInt8 METH_RDY_readServer_readLen_get();
  void METH_readServer_readReq_put(tUInt32 ARG_readServer_readReq_put);
  tUInt8 METH_RDY_readServer_readReq_put();
  tUWide METH_dbg();
  tUInt8 METH_RDY_dbg();
  void METH_set_verbosity(tUInt32 ARG_set_verbosity_verbosity);
  tUInt8 METH_RDY_set_verbosity();
 
 /* Reset routines */
 public:
  void reset_localReset$OUT_RST(tUInt8 ARG_rst_in);
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
  static void static_reset_localReset$OUT_RST(void *my_this, tUInt8 ARG_rst_in);
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPacketBuffer_64 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkPacketBuffer_64 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkPacketBuffer_64 &backing);
};

#endif /* ifndef __mkPacketBuffer_64_h__ */
