//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Sun Jun  4 10:28:37 CST 2017
//
// BVI format method schedule info:
// schedule rxchan_0_macRx_put  CF ( rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_0_macRx_put  C ( rxchan_0_macRx_put );
//
// schedule rxchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_0_writeClient_first  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_0_writeClient_deq  C ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_0_writeClient_notEmpty  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_0_next_first  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_0_next_deq  C ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_0_next_notEmpty  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_0_verbose_enq  C ( rxchan_0_verbose_enq, set_verbosity );
//
// schedule rxchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_0_verbose_notFull  SBR ( rxchan_0_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_1_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_1_macRx_put  C ( rxchan_1_macRx_put );
//
// schedule rxchan_1_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_1_writeClient_first  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_1_writeClient_deq  C ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_1_writeClient_notEmpty  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_1_next_first  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_1_next_deq  C ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_1_next_notEmpty  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_1_verbose_enq  C ( rxchan_1_verbose_enq, set_verbosity );
//
// schedule rxchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_1_verbose_notFull  SBR ( rxchan_1_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_2_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_2_macRx_put  C ( rxchan_2_macRx_put );
//
// schedule rxchan_2_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_2_writeClient_first  SB ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_2_writeClient_deq  C ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_2_writeClient_notEmpty  SB ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_2_next_first  SB ( rxchan_2_next_deq );
//
// schedule rxchan_2_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_2_next_deq  C ( rxchan_2_next_deq );
//
// schedule rxchan_2_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_2_next_notEmpty  SB ( rxchan_2_next_deq );
//
// schedule rxchan_2_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_2_verbose_enq  C ( rxchan_2_verbose_enq, set_verbosity );
//
// schedule rxchan_2_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_2_verbose_notFull  SBR ( rxchan_2_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_3_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_3_macRx_put  C ( rxchan_3_macRx_put );
//
// schedule rxchan_3_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_3_writeClient_first  SB ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_3_writeClient_deq  C ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_3_writeClient_notEmpty  SB ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_3_next_first  SB ( rxchan_3_next_deq );
//
// schedule rxchan_3_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_3_next_deq  C ( rxchan_3_next_deq );
//
// schedule rxchan_3_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_3_next_notEmpty  SB ( rxchan_3_next_deq );
//
// schedule rxchan_3_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_3_verbose_enq  C ( rxchan_3_verbose_enq, set_verbosity );
//
// schedule rxchan_3_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_3_verbose_notFull  SBR ( rxchan_3_verbose_enq,
// 					 set_verbosity );
//
// schedule hostchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeServer_enq  C ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					      rxchan_0_writeClient_first,
// 					      rxchan_0_writeClient_deq,
// 					      rxchan_0_writeClient_notEmpty,
// 					      rxchan_0_next_first,
// 					      rxchan_0_next_deq,
// 					      rxchan_0_next_notEmpty,
// 					      rxchan_0_verbose_enq,
// 					      rxchan_0_verbose_notFull,
// 					      rxchan_1_macRx_put,
// 					      rxchan_1_writeClient_first,
// 					      rxchan_1_writeClient_deq,
// 					      rxchan_1_writeClient_notEmpty,
// 					      rxchan_1_next_first,
// 					      rxchan_1_next_deq,
// 					      rxchan_1_next_notEmpty,
// 					      rxchan_1_verbose_enq,
// 					      rxchan_1_verbose_notFull,
// 					      rxchan_2_macRx_put,
// 					      rxchan_2_writeClient_first,
// 					      rxchan_2_writeClient_deq,
// 					      rxchan_2_writeClient_notEmpty,
// 					      rxchan_2_next_first,
// 					      rxchan_2_next_deq,
// 					      rxchan_2_next_notEmpty,
// 					      rxchan_2_verbose_enq,
// 					      rxchan_2_verbose_notFull,
// 					      rxchan_3_macRx_put,
// 					      rxchan_3_writeClient_first,
// 					      rxchan_3_writeClient_deq,
// 					      rxchan_3_writeClient_notEmpty,
// 					      rxchan_3_next_first,
// 					      rxchan_3_next_deq,
// 					      rxchan_3_next_notEmpty,
// 					      rxchan_3_verbose_enq,
// 					      rxchan_3_verbose_notFull,
// 					      hostchan_0_writeServer_notFull,
// 					      hostchan_0_writeClient_first,
// 					      hostchan_0_writeClient_deq,
// 					      hostchan_0_writeClient_notEmpty,
// 					      hostchan_0_next_first,
// 					      hostchan_0_next_deq,
// 					      hostchan_0_next_notEmpty,
// 					      hostchan_0_verbose_enq,
// 					      hostchan_0_verbose_notFull,
// 					      txchan_0_writeServer_enq,
// 					      txchan_0_writeServer_notFull,
// 					      txchan_0_macTx_get,
// 					      txchan_0_verbose_enq,
// 					      txchan_0_verbose_notFull,
// 					      txchan_1_writeServer_enq,
// 					      txchan_1_writeServer_notFull,
// 					      txchan_1_macTx_get,
// 					      txchan_1_verbose_enq,
// 					      txchan_1_verbose_notFull,
// 					      txchan_2_writeServer_enq,
// 					      txchan_2_writeServer_notFull,
// 					      txchan_2_macTx_get,
// 					      txchan_2_verbose_enq,
// 					      txchan_2_verbose_notFull,
// 					      txchan_3_writeServer_enq,
// 					      txchan_3_writeServer_notFull,
// 					      txchan_3_macTx_get,
// 					      txchan_3_verbose_enq,
// 					      txchan_3_verbose_notFull,
// 					      prev_0_enq,
// 					      prev_0_notFull,
// 					      prev_1_enq,
// 					      prev_1_notFull,
// 					      prev_2_enq,
// 					      prev_2_notFull,
// 					      prev_3_enq,
// 					      prev_3_notFull,
// 					      prev_4_enq,
// 					      prev_4_notFull,
// 					      set_verbosity );
// schedule hostchan_0_writeServer_notFull  SB ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule hostchan_0_writeClient_first  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeClient_deq  C ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					       rxchan_0_writeClient_first,
// 					       rxchan_0_writeClient_deq,
// 					       rxchan_0_writeClient_notEmpty,
// 					       rxchan_0_next_first,
// 					       rxchan_0_next_deq,
// 					       rxchan_0_next_notEmpty,
// 					       rxchan_0_verbose_enq,
// 					       rxchan_0_verbose_notFull,
// 					       rxchan_1_macRx_put,
// 					       rxchan_1_writeClient_first,
// 					       rxchan_1_writeClient_deq,
// 					       rxchan_1_writeClient_notEmpty,
// 					       rxchan_1_next_first,
// 					       rxchan_1_next_deq,
// 					       rxchan_1_next_notEmpty,
// 					       rxchan_1_verbose_enq,
// 					       rxchan_1_verbose_notFull,
// 					       rxchan_2_macRx_put,
// 					       rxchan_2_writeClient_first,
// 					       rxchan_2_writeClient_deq,
// 					       rxchan_2_writeClient_notEmpty,
// 					       rxchan_2_next_first,
// 					       rxchan_2_next_deq,
// 					       rxchan_2_next_notEmpty,
// 					       rxchan_2_verbose_enq,
// 					       rxchan_2_verbose_notFull,
// 					       rxchan_3_macRx_put,
// 					       rxchan_3_writeClient_first,
// 					       rxchan_3_writeClient_deq,
// 					       rxchan_3_writeClient_notEmpty,
// 					       rxchan_3_next_first,
// 					       rxchan_3_next_deq,
// 					       rxchan_3_next_notEmpty,
// 					       rxchan_3_verbose_enq,
// 					       rxchan_3_verbose_notFull,
// 					       hostchan_0_writeServer_enq,
// 					       hostchan_0_writeServer_notFull,
// 					       hostchan_0_writeClient_first,
// 					       hostchan_0_writeClient_notEmpty,
// 					       hostchan_0_next_first,
// 					       hostchan_0_next_deq,
// 					       hostchan_0_next_notEmpty,
// 					       hostchan_0_verbose_enq,
// 					       hostchan_0_verbose_notFull,
// 					       txchan_0_writeServer_enq,
// 					       txchan_0_writeServer_notFull,
// 					       txchan_0_macTx_get,
// 					       txchan_0_verbose_enq,
// 					       txchan_0_verbose_notFull,
// 					       txchan_1_writeServer_enq,
// 					       txchan_1_writeServer_notFull,
// 					       txchan_1_macTx_get,
// 					       txchan_1_verbose_enq,
// 					       txchan_1_verbose_notFull,
// 					       txchan_2_writeServer_enq,
// 					       txchan_2_writeServer_notFull,
// 					       txchan_2_macTx_get,
// 					       txchan_2_verbose_enq,
// 					       txchan_2_verbose_notFull,
// 					       txchan_3_writeServer_enq,
// 					       txchan_3_writeServer_notFull,
// 					       txchan_3_macTx_get,
// 					       txchan_3_verbose_enq,
// 					       txchan_3_verbose_notFull,
// 					       prev_0_enq,
// 					       prev_0_notFull,
// 					       prev_1_enq,
// 					       prev_1_notFull,
// 					       prev_2_enq,
// 					       prev_2_notFull,
// 					       prev_3_enq,
// 					       prev_3_notFull,
// 					       prev_4_enq,
// 					       prev_4_notFull,
// 					       set_verbosity );
// schedule hostchan_0_writeClient_notEmpty  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				     rxchan_0_writeClient_first,
// 				     rxchan_0_writeClient_deq,
// 				     rxchan_0_writeClient_notEmpty,
// 				     rxchan_0_next_first,
// 				     rxchan_0_next_deq,
// 				     rxchan_0_next_notEmpty,
// 				     rxchan_0_verbose_enq,
// 				     rxchan_0_verbose_notFull,
// 				     rxchan_1_macRx_put,
// 				     rxchan_1_writeClient_first,
// 				     rxchan_1_writeClient_deq,
// 				     rxchan_1_writeClient_notEmpty,
// 				     rxchan_1_next_first,
// 				     rxchan_1_next_deq,
// 				     rxchan_1_next_notEmpty,
// 				     rxchan_1_verbose_enq,
// 				     rxchan_1_verbose_notFull,
// 				     rxchan_2_macRx_put,
// 				     rxchan_2_writeClient_first,
// 				     rxchan_2_writeClient_deq,
// 				     rxchan_2_writeClient_notEmpty,
// 				     rxchan_2_next_first,
// 				     rxchan_2_next_deq,
// 				     rxchan_2_next_notEmpty,
// 				     rxchan_2_verbose_enq,
// 				     rxchan_2_verbose_notFull,
// 				     rxchan_3_macRx_put,
// 				     rxchan_3_writeClient_first,
// 				     rxchan_3_writeClient_deq,
// 				     rxchan_3_writeClient_notEmpty,
// 				     rxchan_3_next_first,
// 				     rxchan_3_next_deq,
// 				     rxchan_3_next_notEmpty,
// 				     rxchan_3_verbose_enq,
// 				     rxchan_3_verbose_notFull,
// 				     hostchan_0_writeServer_enq,
// 				     hostchan_0_writeServer_notFull,
// 				     hostchan_0_writeClient_first,
// 				     hostchan_0_writeClient_deq,
// 				     hostchan_0_writeClient_notEmpty,
// 				     hostchan_0_next_first,
// 				     hostchan_0_next_notEmpty,
// 				     hostchan_0_verbose_enq,
// 				     hostchan_0_verbose_notFull,
// 				     txchan_0_writeServer_enq,
// 				     txchan_0_writeServer_notFull,
// 				     txchan_0_macTx_get,
// 				     txchan_0_verbose_enq,
// 				     txchan_0_verbose_notFull,
// 				     txchan_1_writeServer_enq,
// 				     txchan_1_writeServer_notFull,
// 				     txchan_1_macTx_get,
// 				     txchan_1_verbose_enq,
// 				     txchan_1_verbose_notFull,
// 				     txchan_2_writeServer_enq,
// 				     txchan_2_writeServer_notFull,
// 				     txchan_2_macTx_get,
// 				     txchan_2_verbose_enq,
// 				     txchan_2_verbose_notFull,
// 				     txchan_3_writeServer_enq,
// 				     txchan_3_writeServer_notFull,
// 				     txchan_3_macTx_get,
// 				     txchan_3_verbose_enq,
// 				     txchan_3_verbose_notFull,
// 				     prev_0_enq,
// 				     prev_0_notFull,
// 				     prev_1_enq,
// 				     prev_1_notFull,
// 				     prev_2_enq,
// 				     prev_2_notFull,
// 				     prev_3_enq,
// 				     prev_3_notFull,
// 				     prev_4_enq,
// 				     prev_4_notFull,
// 				     set_verbosity );
// schedule hostchan_0_next_first  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule hostchan_0_next_deq  C ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule hostchan_0_next_notEmpty  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull );
// schedule hostchan_0_verbose_enq  C ( hostchan_0_verbose_enq, set_verbosity );
//
// schedule hostchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull );
// schedule hostchan_0_verbose_notFull  SBR ( hostchan_0_verbose_enq,
// 					   set_verbosity );
//
// schedule txchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_0_writeServer_enq  C ( txchan_0_writeServer_enq );
//
// schedule txchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_0_writeServer_notFull  SB ( txchan_0_writeServer_enq );
//
// schedule txchan_0_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_0_macTx_get  C ( txchan_0_macTx_get );
//
// schedule txchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_0_verbose_enq  C ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_0_verbose_notFull  SB ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_1_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_1_writeServer_enq  C ( txchan_1_writeServer_enq );
//
// schedule txchan_1_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_1_writeServer_notFull  SB ( txchan_1_writeServer_enq );
//
// schedule txchan_1_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_1_macTx_get  C ( txchan_1_macTx_get );
//
// schedule txchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_1_verbose_enq  C ( txchan_1_verbose_enq, set_verbosity );
//
// schedule txchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_1_verbose_notFull  SB ( txchan_1_verbose_enq, set_verbosity );
//
// schedule txchan_2_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_2_writeServer_enq  C ( txchan_2_writeServer_enq );
//
// schedule txchan_2_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_2_writeServer_notFull  SB ( txchan_2_writeServer_enq );
//
// schedule txchan_2_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_2_macTx_get  C ( txchan_2_macTx_get );
//
// schedule txchan_2_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_2_verbose_enq  C ( txchan_2_verbose_enq, set_verbosity );
//
// schedule txchan_2_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_2_verbose_notFull  SB ( txchan_2_verbose_enq, set_verbosity );
//
// schedule txchan_3_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_3_writeServer_enq  C ( txchan_3_writeServer_enq );
//
// schedule txchan_3_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_3_writeServer_notFull  SB ( txchan_3_writeServer_enq );
//
// schedule txchan_3_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_3_macTx_get  C ( txchan_3_macTx_get );
//
// schedule txchan_3_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_3_verbose_enq  C ( txchan_3_verbose_enq, set_verbosity );
//
// schedule txchan_3_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_3_verbose_notFull  SB ( txchan_3_verbose_enq, set_verbosity );
//
// schedule prev_0_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_0_enq  C ( prev_0_enq );
//
// schedule prev_0_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_0_notFull  SB ( prev_0_enq );
//
// schedule prev_1_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_1_enq  C ( prev_1_enq );
//
// schedule prev_1_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_1_notFull  SB ( prev_1_enq );
//
// schedule prev_2_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_2_enq  C ( prev_2_enq );
//
// schedule prev_2_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_2_notFull  SB ( prev_2_enq );
//
// schedule prev_3_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_3_enq  C ( prev_3_enq );
//
// schedule prev_3_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_3_notFull  SB ( prev_3_enq );
//
// schedule prev_4_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  set_verbosity );
// schedule prev_4_enq  C ( prev_4_enq );
//
// schedule prev_4_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_4_notFull  SB ( prev_4_enq );
//
// schedule set_verbosity  CF ( rxchan_0_macRx_put,
// 			     rxchan_0_writeClient_first,
// 			     rxchan_0_writeClient_deq,
// 			     rxchan_0_writeClient_notEmpty,
// 			     rxchan_0_next_first,
// 			     rxchan_0_next_deq,
// 			     rxchan_0_next_notEmpty,
// 			     rxchan_1_macRx_put,
// 			     rxchan_1_writeClient_first,
// 			     rxchan_1_writeClient_deq,
// 			     rxchan_1_writeClient_notEmpty,
// 			     rxchan_1_next_first,
// 			     rxchan_1_next_deq,
// 			     rxchan_1_next_notEmpty,
// 			     rxchan_2_macRx_put,
// 			     rxchan_2_writeClient_first,
// 			     rxchan_2_writeClient_deq,
// 			     rxchan_2_writeClient_notEmpty,
// 			     rxchan_2_next_first,
// 			     rxchan_2_next_deq,
// 			     rxchan_2_next_notEmpty,
// 			     rxchan_3_macRx_put,
// 			     rxchan_3_writeClient_first,
// 			     rxchan_3_writeClient_deq,
// 			     rxchan_3_writeClient_notEmpty,
// 			     rxchan_3_next_first,
// 			     rxchan_3_next_deq,
// 			     rxchan_3_next_notEmpty,
// 			     hostchan_0_writeServer_enq,
// 			     hostchan_0_writeServer_notFull,
// 			     hostchan_0_writeClient_first,
// 			     hostchan_0_writeClient_deq,
// 			     hostchan_0_writeClient_notEmpty,
// 			     hostchan_0_next_first,
// 			     hostchan_0_next_deq,
// 			     hostchan_0_next_notEmpty,
// 			     txchan_0_writeServer_enq,
// 			     txchan_0_writeServer_notFull,
// 			     txchan_0_macTx_get,
// 			     txchan_1_writeServer_enq,
// 			     txchan_1_writeServer_notFull,
// 			     txchan_1_macTx_get,
// 			     txchan_2_writeServer_enq,
// 			     txchan_2_writeServer_notFull,
// 			     txchan_2_macTx_get,
// 			     txchan_3_writeServer_enq,
// 			     txchan_3_writeServer_notFull,
// 			     txchan_3_macTx_get,
// 			     prev_0_enq,
// 			     prev_0_notFull,
// 			     prev_1_enq,
// 			     prev_1_notFull,
// 			     prev_2_enq,
// 			     prev_2_notFull,
// 			     prev_3_enq,
// 			     prev_3_notFull,
// 			     prev_4_enq,
// 			     prev_4_notFull );
// schedule set_verbosity  C ( rxchan_0_verbose_enq,
// 			    rxchan_1_verbose_enq,
// 			    rxchan_2_verbose_enq,
// 			    rxchan_3_verbose_enq,
// 			    hostchan_0_verbose_enq,
// 			    txchan_0_verbose_enq,
// 			    txchan_1_verbose_enq,
// 			    txchan_2_verbose_enq,
// 			    txchan_3_verbose_enq,
// 			    set_verbosity );
//
//
// Ports:
// Name                         I/O  size props
// RDY_rxchan_0_macRx_put         O     1 reg
// rxchan_0_writeClient_first     O   178 reg
// RDY_rxchan_0_writeClient_first  O     1 reg
// RDY_rxchan_0_writeClient_deq   O     1 reg
// rxchan_0_writeClient_notEmpty  O     1 reg
// RDY_rxchan_0_writeClient_notEmpty  O     1 const
// rxchan_0_next_first            O  1760 reg
// RDY_rxchan_0_next_first        O     1 reg
// RDY_rxchan_0_next_deq          O     1 reg
// rxchan_0_next_notEmpty         O     1 reg
// RDY_rxchan_0_next_notEmpty     O     1 const
// RDY_rxchan_0_verbose_enq       O     1 reg
// rxchan_0_verbose_notFull       O     1 reg
// RDY_rxchan_0_verbose_notFull   O     1 const
// RDY_rxchan_1_macRx_put         O     1 reg
// rxchan_1_writeClient_first     O   178 reg
// RDY_rxchan_1_writeClient_first  O     1 reg
// RDY_rxchan_1_writeClient_deq   O     1 reg
// rxchan_1_writeClient_notEmpty  O     1 reg
// RDY_rxchan_1_writeClient_notEmpty  O     1 const
// rxchan_1_next_first            O  1760 reg
// RDY_rxchan_1_next_first        O     1 reg
// RDY_rxchan_1_next_deq          O     1 reg
// rxchan_1_next_notEmpty         O     1 reg
// RDY_rxchan_1_next_notEmpty     O     1 const
// RDY_rxchan_1_verbose_enq       O     1 reg
// rxchan_1_verbose_notFull       O     1 reg
// RDY_rxchan_1_verbose_notFull   O     1 const
// RDY_rxchan_2_macRx_put         O     1 reg
// rxchan_2_writeClient_first     O   178 reg
// RDY_rxchan_2_writeClient_first  O     1 reg
// RDY_rxchan_2_writeClient_deq   O     1 reg
// rxchan_2_writeClient_notEmpty  O     1 reg
// RDY_rxchan_2_writeClient_notEmpty  O     1 const
// rxchan_2_next_first            O  1760 reg
// RDY_rxchan_2_next_first        O     1 reg
// RDY_rxchan_2_next_deq          O     1 reg
// rxchan_2_next_notEmpty         O     1 reg
// RDY_rxchan_2_next_notEmpty     O     1 const
// RDY_rxchan_2_verbose_enq       O     1 reg
// rxchan_2_verbose_notFull       O     1 reg
// RDY_rxchan_2_verbose_notFull   O     1 const
// RDY_rxchan_3_macRx_put         O     1 reg
// rxchan_3_writeClient_first     O   178 reg
// RDY_rxchan_3_writeClient_first  O     1 reg
// RDY_rxchan_3_writeClient_deq   O     1 reg
// rxchan_3_writeClient_notEmpty  O     1 reg
// RDY_rxchan_3_writeClient_notEmpty  O     1 const
// rxchan_3_next_first            O  1760 reg
// RDY_rxchan_3_next_first        O     1 reg
// RDY_rxchan_3_next_deq          O     1 reg
// rxchan_3_next_notEmpty         O     1 reg
// RDY_rxchan_3_next_notEmpty     O     1 const
// RDY_rxchan_3_verbose_enq       O     1 reg
// rxchan_3_verbose_notFull       O     1 reg
// RDY_rxchan_3_verbose_notFull   O     1 const
// RDY_hostchan_0_writeServer_enq  O     1 reg
// hostchan_0_writeServer_notFull  O     1 reg
// RDY_hostchan_0_writeServer_notFull  O     1 const
// hostchan_0_writeClient_first   O   178 reg
// RDY_hostchan_0_writeClient_first  O     1 reg
// RDY_hostchan_0_writeClient_deq  O     1 reg
// hostchan_0_writeClient_notEmpty  O     1 reg
// RDY_hostchan_0_writeClient_notEmpty  O     1 const
// hostchan_0_next_first          O  1760 reg
// RDY_hostchan_0_next_first      O     1 reg
// RDY_hostchan_0_next_deq        O     1 reg
// hostchan_0_next_notEmpty       O     1 reg
// RDY_hostchan_0_next_notEmpty   O     1 const
// RDY_hostchan_0_verbose_enq     O     1 reg
// hostchan_0_verbose_notFull     O     1 reg
// RDY_hostchan_0_verbose_notFull  O     1 const
// RDY_txchan_0_writeServer_enq   O     1 reg
// txchan_0_writeServer_notFull   O     1 reg
// RDY_txchan_0_writeServer_notFull  O     1 const
// txchan_0_macTx_get             O   106 reg
// RDY_txchan_0_macTx_get         O     1 reg
// RDY_txchan_0_verbose_enq       O     1 reg
// txchan_0_verbose_notFull       O     1 reg
// RDY_txchan_0_verbose_notFull   O     1 const
// RDY_txchan_1_writeServer_enq   O     1 reg
// txchan_1_writeServer_notFull   O     1 reg
// RDY_txchan_1_writeServer_notFull  O     1 const
// txchan_1_macTx_get             O   106 reg
// RDY_txchan_1_macTx_get         O     1 reg
// RDY_txchan_1_verbose_enq       O     1 reg
// txchan_1_verbose_notFull       O     1 reg
// RDY_txchan_1_verbose_notFull   O     1 const
// RDY_txchan_2_writeServer_enq   O     1 reg
// txchan_2_writeServer_notFull   O     1 reg
// RDY_txchan_2_writeServer_notFull  O     1 const
// txchan_2_macTx_get             O   106 reg
// RDY_txchan_2_macTx_get         O     1 reg
// RDY_txchan_2_verbose_enq       O     1 reg
// txchan_2_verbose_notFull       O     1 reg
// RDY_txchan_2_verbose_notFull   O     1 const
// RDY_txchan_3_writeServer_enq   O     1 reg
// txchan_3_writeServer_notFull   O     1 reg
// RDY_txchan_3_writeServer_notFull  O     1 const
// txchan_3_macTx_get             O   106 reg
// RDY_txchan_3_macTx_get         O     1 reg
// RDY_txchan_3_verbose_enq       O     1 reg
// txchan_3_verbose_notFull       O     1 reg
// RDY_txchan_3_verbose_notFull   O     1 const
// RDY_prev_0_enq                 O     1 reg
// prev_0_notFull                 O     1 reg
// RDY_prev_0_notFull             O     1 const
// RDY_prev_1_enq                 O     1 reg
// prev_1_notFull                 O     1 reg
// RDY_prev_1_notFull             O     1 const
// RDY_prev_2_enq                 O     1 reg
// prev_2_notFull                 O     1 reg
// RDY_prev_2_notFull             O     1 const
// RDY_prev_3_enq                 O     1 reg
// prev_3_notFull                 O     1 reg
// RDY_prev_3_notFull             O     1 const
// RDY_prev_4_enq                 O     1 reg
// prev_4_notFull                 O     1 reg
// RDY_prev_4_notFull             O     1 const
// RDY_set_verbosity              O     1
// CLK_p0                         I     1 clock
// RST_N_p1                       I     1 reset
// CLK_p2                         I     1 clock
// RST_N_p3                       I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rxchan_0_macRx_put             I   106 reg
// rxchan_0_verbose_enq_v         I    32
// rxchan_1_macRx_put             I   106 reg
// rxchan_1_verbose_enq_v         I    32
// rxchan_2_macRx_put             I   106 reg
// rxchan_2_verbose_enq_v         I    32
// rxchan_3_macRx_put             I   106 reg
// rxchan_3_verbose_enq_v         I    32
// hostchan_0_writeServer_enq_v   I   178 reg
// hostchan_0_verbose_enq_v       I    32
// txchan_0_writeServer_enq_v     I   178
// txchan_0_verbose_enq_v         I    32
// txchan_1_writeServer_enq_v     I   178
// txchan_1_verbose_enq_v         I    32
// txchan_2_writeServer_enq_v     I   178
// txchan_2_verbose_enq_v         I    32
// txchan_3_writeServer_enq_v     I   178
// txchan_3_verbose_enq_v         I    32
// prev_0_enq_v                   I  1760 reg
// prev_1_enq_v                   I  1760 reg
// prev_2_enq_v                   I  1760 reg
// prev_3_enq_v                   I  1760 reg
// prev_4_enq_v                   I  1760 reg
// set_verbosity_verbosity        I    32
// EN_rxchan_0_macRx_put          I     1
// EN_rxchan_0_writeClient_deq    I     1
// EN_rxchan_0_next_deq           I     1
// EN_rxchan_0_verbose_enq        I     1
// EN_rxchan_1_macRx_put          I     1
// EN_rxchan_1_writeClient_deq    I     1
// EN_rxchan_1_next_deq           I     1
// EN_rxchan_1_verbose_enq        I     1
// EN_rxchan_2_macRx_put          I     1
// EN_rxchan_2_writeClient_deq    I     1
// EN_rxchan_2_next_deq           I     1
// EN_rxchan_2_verbose_enq        I     1
// EN_rxchan_3_macRx_put          I     1
// EN_rxchan_3_writeClient_deq    I     1
// EN_rxchan_3_next_deq           I     1
// EN_rxchan_3_verbose_enq        I     1
// EN_hostchan_0_writeServer_enq  I     1
// EN_hostchan_0_writeClient_deq  I     1
// EN_hostchan_0_next_deq         I     1
// EN_hostchan_0_verbose_enq      I     1
// EN_txchan_0_writeServer_enq    I     1
// EN_txchan_0_verbose_enq        I     1
// EN_txchan_1_writeServer_enq    I     1
// EN_txchan_1_verbose_enq        I     1
// EN_txchan_2_writeServer_enq    I     1
// EN_txchan_2_verbose_enq        I     1
// EN_txchan_3_writeServer_enq    I     1
// EN_txchan_3_verbose_enq        I     1
// EN_prev_0_enq                  I     1
// EN_prev_1_enq                  I     1
// EN_prev_2_enq                  I     1
// EN_prev_3_enq                  I     1
// EN_prev_4_enq                  I     1
// EN_set_verbosity               I     1
// EN_txchan_0_macTx_get          I     1
// EN_txchan_1_macTx_get          I     1
// EN_txchan_2_macTx_get          I     1
// EN_txchan_3_macTx_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRuntime_4_4_1(CLK_p0,
		       RST_N_p1,
		       CLK_p2,
		       RST_N_p3,
		       CLK,
		       RST_N,

		       rxchan_0_macRx_put,
		       EN_rxchan_0_macRx_put,
		       RDY_rxchan_0_macRx_put,

		       rxchan_0_writeClient_first,
		       RDY_rxchan_0_writeClient_first,

		       EN_rxchan_0_writeClient_deq,
		       RDY_rxchan_0_writeClient_deq,

		       rxchan_0_writeClient_notEmpty,
		       RDY_rxchan_0_writeClient_notEmpty,

		       rxchan_0_next_first,
		       RDY_rxchan_0_next_first,

		       EN_rxchan_0_next_deq,
		       RDY_rxchan_0_next_deq,

		       rxchan_0_next_notEmpty,
		       RDY_rxchan_0_next_notEmpty,

		       rxchan_0_verbose_enq_v,
		       EN_rxchan_0_verbose_enq,
		       RDY_rxchan_0_verbose_enq,

		       rxchan_0_verbose_notFull,
		       RDY_rxchan_0_verbose_notFull,

		       rxchan_1_macRx_put,
		       EN_rxchan_1_macRx_put,
		       RDY_rxchan_1_macRx_put,

		       rxchan_1_writeClient_first,
		       RDY_rxchan_1_writeClient_first,

		       EN_rxchan_1_writeClient_deq,
		       RDY_rxchan_1_writeClient_deq,

		       rxchan_1_writeClient_notEmpty,
		       RDY_rxchan_1_writeClient_notEmpty,

		       rxchan_1_next_first,
		       RDY_rxchan_1_next_first,

		       EN_rxchan_1_next_deq,
		       RDY_rxchan_1_next_deq,

		       rxchan_1_next_notEmpty,
		       RDY_rxchan_1_next_notEmpty,

		       rxchan_1_verbose_enq_v,
		       EN_rxchan_1_verbose_enq,
		       RDY_rxchan_1_verbose_enq,

		       rxchan_1_verbose_notFull,
		       RDY_rxchan_1_verbose_notFull,

		       rxchan_2_macRx_put,
		       EN_rxchan_2_macRx_put,
		       RDY_rxchan_2_macRx_put,

		       rxchan_2_writeClient_first,
		       RDY_rxchan_2_writeClient_first,

		       EN_rxchan_2_writeClient_deq,
		       RDY_rxchan_2_writeClient_deq,

		       rxchan_2_writeClient_notEmpty,
		       RDY_rxchan_2_writeClient_notEmpty,

		       rxchan_2_next_first,
		       RDY_rxchan_2_next_first,

		       EN_rxchan_2_next_deq,
		       RDY_rxchan_2_next_deq,

		       rxchan_2_next_notEmpty,
		       RDY_rxchan_2_next_notEmpty,

		       rxchan_2_verbose_enq_v,
		       EN_rxchan_2_verbose_enq,
		       RDY_rxchan_2_verbose_enq,

		       rxchan_2_verbose_notFull,
		       RDY_rxchan_2_verbose_notFull,

		       rxchan_3_macRx_put,
		       EN_rxchan_3_macRx_put,
		       RDY_rxchan_3_macRx_put,

		       rxchan_3_writeClient_first,
		       RDY_rxchan_3_writeClient_first,

		       EN_rxchan_3_writeClient_deq,
		       RDY_rxchan_3_writeClient_deq,

		       rxchan_3_writeClient_notEmpty,
		       RDY_rxchan_3_writeClient_notEmpty,

		       rxchan_3_next_first,
		       RDY_rxchan_3_next_first,

		       EN_rxchan_3_next_deq,
		       RDY_rxchan_3_next_deq,

		       rxchan_3_next_notEmpty,
		       RDY_rxchan_3_next_notEmpty,

		       rxchan_3_verbose_enq_v,
		       EN_rxchan_3_verbose_enq,
		       RDY_rxchan_3_verbose_enq,

		       rxchan_3_verbose_notFull,
		       RDY_rxchan_3_verbose_notFull,

		       hostchan_0_writeServer_enq_v,
		       EN_hostchan_0_writeServer_enq,
		       RDY_hostchan_0_writeServer_enq,

		       hostchan_0_writeServer_notFull,
		       RDY_hostchan_0_writeServer_notFull,

		       hostchan_0_writeClient_first,
		       RDY_hostchan_0_writeClient_first,

		       EN_hostchan_0_writeClient_deq,
		       RDY_hostchan_0_writeClient_deq,

		       hostchan_0_writeClient_notEmpty,
		       RDY_hostchan_0_writeClient_notEmpty,

		       hostchan_0_next_first,
		       RDY_hostchan_0_next_first,

		       EN_hostchan_0_next_deq,
		       RDY_hostchan_0_next_deq,

		       hostchan_0_next_notEmpty,
		       RDY_hostchan_0_next_notEmpty,

		       hostchan_0_verbose_enq_v,
		       EN_hostchan_0_verbose_enq,
		       RDY_hostchan_0_verbose_enq,

		       hostchan_0_verbose_notFull,
		       RDY_hostchan_0_verbose_notFull,

		       txchan_0_writeServer_enq_v,
		       EN_txchan_0_writeServer_enq,
		       RDY_txchan_0_writeServer_enq,

		       txchan_0_writeServer_notFull,
		       RDY_txchan_0_writeServer_notFull,

		       EN_txchan_0_macTx_get,
		       txchan_0_macTx_get,
		       RDY_txchan_0_macTx_get,

		       txchan_0_verbose_enq_v,
		       EN_txchan_0_verbose_enq,
		       RDY_txchan_0_verbose_enq,

		       txchan_0_verbose_notFull,
		       RDY_txchan_0_verbose_notFull,

		       txchan_1_writeServer_enq_v,
		       EN_txchan_1_writeServer_enq,
		       RDY_txchan_1_writeServer_enq,

		       txchan_1_writeServer_notFull,
		       RDY_txchan_1_writeServer_notFull,

		       EN_txchan_1_macTx_get,
		       txchan_1_macTx_get,
		       RDY_txchan_1_macTx_get,

		       txchan_1_verbose_enq_v,
		       EN_txchan_1_verbose_enq,
		       RDY_txchan_1_verbose_enq,

		       txchan_1_verbose_notFull,
		       RDY_txchan_1_verbose_notFull,

		       txchan_2_writeServer_enq_v,
		       EN_txchan_2_writeServer_enq,
		       RDY_txchan_2_writeServer_enq,

		       txchan_2_writeServer_notFull,
		       RDY_txchan_2_writeServer_notFull,

		       EN_txchan_2_macTx_get,
		       txchan_2_macTx_get,
		       RDY_txchan_2_macTx_get,

		       txchan_2_verbose_enq_v,
		       EN_txchan_2_verbose_enq,
		       RDY_txchan_2_verbose_enq,

		       txchan_2_verbose_notFull,
		       RDY_txchan_2_verbose_notFull,

		       txchan_3_writeServer_enq_v,
		       EN_txchan_3_writeServer_enq,
		       RDY_txchan_3_writeServer_enq,

		       txchan_3_writeServer_notFull,
		       RDY_txchan_3_writeServer_notFull,

		       EN_txchan_3_macTx_get,
		       txchan_3_macTx_get,
		       RDY_txchan_3_macTx_get,

		       txchan_3_verbose_enq_v,
		       EN_txchan_3_verbose_enq,
		       RDY_txchan_3_verbose_enq,

		       txchan_3_verbose_notFull,
		       RDY_txchan_3_verbose_notFull,

		       prev_0_enq_v,
		       EN_prev_0_enq,
		       RDY_prev_0_enq,

		       prev_0_notFull,
		       RDY_prev_0_notFull,

		       prev_1_enq_v,
		       EN_prev_1_enq,
		       RDY_prev_1_enq,

		       prev_1_notFull,
		       RDY_prev_1_notFull,

		       prev_2_enq_v,
		       EN_prev_2_enq,
		       RDY_prev_2_enq,

		       prev_2_notFull,
		       RDY_prev_2_notFull,

		       prev_3_enq_v,
		       EN_prev_3_enq,
		       RDY_prev_3_enq,

		       prev_3_notFull,
		       RDY_prev_3_notFull,

		       prev_4_enq_v,
		       EN_prev_4_enq,
		       RDY_prev_4_enq,

		       prev_4_notFull,
		       RDY_prev_4_notFull,

		       set_verbosity_verbosity,
		       EN_set_verbosity,
		       RDY_set_verbosity);
  input  CLK_p0;
  input  RST_N_p1;
  input  CLK_p2;
  input  RST_N_p3;
  input  CLK;
  input  RST_N;

  // action method rxchan_0_macRx_put
  input  [105 : 0] rxchan_0_macRx_put;
  input  EN_rxchan_0_macRx_put;
  output RDY_rxchan_0_macRx_put;

  // value method rxchan_0_writeClient_first
  output [177 : 0] rxchan_0_writeClient_first;
  output RDY_rxchan_0_writeClient_first;

  // action method rxchan_0_writeClient_deq
  input  EN_rxchan_0_writeClient_deq;
  output RDY_rxchan_0_writeClient_deq;

  // value method rxchan_0_writeClient_notEmpty
  output rxchan_0_writeClient_notEmpty;
  output RDY_rxchan_0_writeClient_notEmpty;

  // value method rxchan_0_next_first
  output [1759 : 0] rxchan_0_next_first;
  output RDY_rxchan_0_next_first;

  // action method rxchan_0_next_deq
  input  EN_rxchan_0_next_deq;
  output RDY_rxchan_0_next_deq;

  // value method rxchan_0_next_notEmpty
  output rxchan_0_next_notEmpty;
  output RDY_rxchan_0_next_notEmpty;

  // action method rxchan_0_verbose_enq
  input  [31 : 0] rxchan_0_verbose_enq_v;
  input  EN_rxchan_0_verbose_enq;
  output RDY_rxchan_0_verbose_enq;

  // value method rxchan_0_verbose_notFull
  output rxchan_0_verbose_notFull;
  output RDY_rxchan_0_verbose_notFull;

  // action method rxchan_1_macRx_put
  input  [105 : 0] rxchan_1_macRx_put;
  input  EN_rxchan_1_macRx_put;
  output RDY_rxchan_1_macRx_put;

  // value method rxchan_1_writeClient_first
  output [177 : 0] rxchan_1_writeClient_first;
  output RDY_rxchan_1_writeClient_first;

  // action method rxchan_1_writeClient_deq
  input  EN_rxchan_1_writeClient_deq;
  output RDY_rxchan_1_writeClient_deq;

  // value method rxchan_1_writeClient_notEmpty
  output rxchan_1_writeClient_notEmpty;
  output RDY_rxchan_1_writeClient_notEmpty;

  // value method rxchan_1_next_first
  output [1759 : 0] rxchan_1_next_first;
  output RDY_rxchan_1_next_first;

  // action method rxchan_1_next_deq
  input  EN_rxchan_1_next_deq;
  output RDY_rxchan_1_next_deq;

  // value method rxchan_1_next_notEmpty
  output rxchan_1_next_notEmpty;
  output RDY_rxchan_1_next_notEmpty;

  // action method rxchan_1_verbose_enq
  input  [31 : 0] rxchan_1_verbose_enq_v;
  input  EN_rxchan_1_verbose_enq;
  output RDY_rxchan_1_verbose_enq;

  // value method rxchan_1_verbose_notFull
  output rxchan_1_verbose_notFull;
  output RDY_rxchan_1_verbose_notFull;

  // action method rxchan_2_macRx_put
  input  [105 : 0] rxchan_2_macRx_put;
  input  EN_rxchan_2_macRx_put;
  output RDY_rxchan_2_macRx_put;

  // value method rxchan_2_writeClient_first
  output [177 : 0] rxchan_2_writeClient_first;
  output RDY_rxchan_2_writeClient_first;

  // action method rxchan_2_writeClient_deq
  input  EN_rxchan_2_writeClient_deq;
  output RDY_rxchan_2_writeClient_deq;

  // value method rxchan_2_writeClient_notEmpty
  output rxchan_2_writeClient_notEmpty;
  output RDY_rxchan_2_writeClient_notEmpty;

  // value method rxchan_2_next_first
  output [1759 : 0] rxchan_2_next_first;
  output RDY_rxchan_2_next_first;

  // action method rxchan_2_next_deq
  input  EN_rxchan_2_next_deq;
  output RDY_rxchan_2_next_deq;

  // value method rxchan_2_next_notEmpty
  output rxchan_2_next_notEmpty;
  output RDY_rxchan_2_next_notEmpty;

  // action method rxchan_2_verbose_enq
  input  [31 : 0] rxchan_2_verbose_enq_v;
  input  EN_rxchan_2_verbose_enq;
  output RDY_rxchan_2_verbose_enq;

  // value method rxchan_2_verbose_notFull
  output rxchan_2_verbose_notFull;
  output RDY_rxchan_2_verbose_notFull;

  // action method rxchan_3_macRx_put
  input  [105 : 0] rxchan_3_macRx_put;
  input  EN_rxchan_3_macRx_put;
  output RDY_rxchan_3_macRx_put;

  // value method rxchan_3_writeClient_first
  output [177 : 0] rxchan_3_writeClient_first;
  output RDY_rxchan_3_writeClient_first;

  // action method rxchan_3_writeClient_deq
  input  EN_rxchan_3_writeClient_deq;
  output RDY_rxchan_3_writeClient_deq;

  // value method rxchan_3_writeClient_notEmpty
  output rxchan_3_writeClient_notEmpty;
  output RDY_rxchan_3_writeClient_notEmpty;

  // value method rxchan_3_next_first
  output [1759 : 0] rxchan_3_next_first;
  output RDY_rxchan_3_next_first;

  // action method rxchan_3_next_deq
  input  EN_rxchan_3_next_deq;
  output RDY_rxchan_3_next_deq;

  // value method rxchan_3_next_notEmpty
  output rxchan_3_next_notEmpty;
  output RDY_rxchan_3_next_notEmpty;

  // action method rxchan_3_verbose_enq
  input  [31 : 0] rxchan_3_verbose_enq_v;
  input  EN_rxchan_3_verbose_enq;
  output RDY_rxchan_3_verbose_enq;

  // value method rxchan_3_verbose_notFull
  output rxchan_3_verbose_notFull;
  output RDY_rxchan_3_verbose_notFull;

  // action method hostchan_0_writeServer_enq
  input  [177 : 0] hostchan_0_writeServer_enq_v;
  input  EN_hostchan_0_writeServer_enq;
  output RDY_hostchan_0_writeServer_enq;

  // value method hostchan_0_writeServer_notFull
  output hostchan_0_writeServer_notFull;
  output RDY_hostchan_0_writeServer_notFull;

  // value method hostchan_0_writeClient_first
  output [177 : 0] hostchan_0_writeClient_first;
  output RDY_hostchan_0_writeClient_first;

  // action method hostchan_0_writeClient_deq
  input  EN_hostchan_0_writeClient_deq;
  output RDY_hostchan_0_writeClient_deq;

  // value method hostchan_0_writeClient_notEmpty
  output hostchan_0_writeClient_notEmpty;
  output RDY_hostchan_0_writeClient_notEmpty;

  // value method hostchan_0_next_first
  output [1759 : 0] hostchan_0_next_first;
  output RDY_hostchan_0_next_first;

  // action method hostchan_0_next_deq
  input  EN_hostchan_0_next_deq;
  output RDY_hostchan_0_next_deq;

  // value method hostchan_0_next_notEmpty
  output hostchan_0_next_notEmpty;
  output RDY_hostchan_0_next_notEmpty;

  // action method hostchan_0_verbose_enq
  input  [31 : 0] hostchan_0_verbose_enq_v;
  input  EN_hostchan_0_verbose_enq;
  output RDY_hostchan_0_verbose_enq;

  // value method hostchan_0_verbose_notFull
  output hostchan_0_verbose_notFull;
  output RDY_hostchan_0_verbose_notFull;

  // action method txchan_0_writeServer_enq
  input  [177 : 0] txchan_0_writeServer_enq_v;
  input  EN_txchan_0_writeServer_enq;
  output RDY_txchan_0_writeServer_enq;

  // value method txchan_0_writeServer_notFull
  output txchan_0_writeServer_notFull;
  output RDY_txchan_0_writeServer_notFull;

  // actionvalue method txchan_0_macTx_get
  input  EN_txchan_0_macTx_get;
  output [105 : 0] txchan_0_macTx_get;
  output RDY_txchan_0_macTx_get;

  // action method txchan_0_verbose_enq
  input  [31 : 0] txchan_0_verbose_enq_v;
  input  EN_txchan_0_verbose_enq;
  output RDY_txchan_0_verbose_enq;

  // value method txchan_0_verbose_notFull
  output txchan_0_verbose_notFull;
  output RDY_txchan_0_verbose_notFull;

  // action method txchan_1_writeServer_enq
  input  [177 : 0] txchan_1_writeServer_enq_v;
  input  EN_txchan_1_writeServer_enq;
  output RDY_txchan_1_writeServer_enq;

  // value method txchan_1_writeServer_notFull
  output txchan_1_writeServer_notFull;
  output RDY_txchan_1_writeServer_notFull;

  // actionvalue method txchan_1_macTx_get
  input  EN_txchan_1_macTx_get;
  output [105 : 0] txchan_1_macTx_get;
  output RDY_txchan_1_macTx_get;

  // action method txchan_1_verbose_enq
  input  [31 : 0] txchan_1_verbose_enq_v;
  input  EN_txchan_1_verbose_enq;
  output RDY_txchan_1_verbose_enq;

  // value method txchan_1_verbose_notFull
  output txchan_1_verbose_notFull;
  output RDY_txchan_1_verbose_notFull;

  // action method txchan_2_writeServer_enq
  input  [177 : 0] txchan_2_writeServer_enq_v;
  input  EN_txchan_2_writeServer_enq;
  output RDY_txchan_2_writeServer_enq;

  // value method txchan_2_writeServer_notFull
  output txchan_2_writeServer_notFull;
  output RDY_txchan_2_writeServer_notFull;

  // actionvalue method txchan_2_macTx_get
  input  EN_txchan_2_macTx_get;
  output [105 : 0] txchan_2_macTx_get;
  output RDY_txchan_2_macTx_get;

  // action method txchan_2_verbose_enq
  input  [31 : 0] txchan_2_verbose_enq_v;
  input  EN_txchan_2_verbose_enq;
  output RDY_txchan_2_verbose_enq;

  // value method txchan_2_verbose_notFull
  output txchan_2_verbose_notFull;
  output RDY_txchan_2_verbose_notFull;

  // action method txchan_3_writeServer_enq
  input  [177 : 0] txchan_3_writeServer_enq_v;
  input  EN_txchan_3_writeServer_enq;
  output RDY_txchan_3_writeServer_enq;

  // value method txchan_3_writeServer_notFull
  output txchan_3_writeServer_notFull;
  output RDY_txchan_3_writeServer_notFull;

  // actionvalue method txchan_3_macTx_get
  input  EN_txchan_3_macTx_get;
  output [105 : 0] txchan_3_macTx_get;
  output RDY_txchan_3_macTx_get;

  // action method txchan_3_verbose_enq
  input  [31 : 0] txchan_3_verbose_enq_v;
  input  EN_txchan_3_verbose_enq;
  output RDY_txchan_3_verbose_enq;

  // value method txchan_3_verbose_notFull
  output txchan_3_verbose_notFull;
  output RDY_txchan_3_verbose_notFull;

  // action method prev_0_enq
  input  [1759 : 0] prev_0_enq_v;
  input  EN_prev_0_enq;
  output RDY_prev_0_enq;

  // value method prev_0_notFull
  output prev_0_notFull;
  output RDY_prev_0_notFull;

  // action method prev_1_enq
  input  [1759 : 0] prev_1_enq_v;
  input  EN_prev_1_enq;
  output RDY_prev_1_enq;

  // value method prev_1_notFull
  output prev_1_notFull;
  output RDY_prev_1_notFull;

  // action method prev_2_enq
  input  [1759 : 0] prev_2_enq_v;
  input  EN_prev_2_enq;
  output RDY_prev_2_enq;

  // value method prev_2_notFull
  output prev_2_notFull;
  output RDY_prev_2_notFull;

  // action method prev_3_enq
  input  [1759 : 0] prev_3_enq_v;
  input  EN_prev_3_enq;
  output RDY_prev_3_enq;

  // value method prev_3_notFull
  output prev_3_notFull;
  output RDY_prev_3_notFull;

  // action method prev_4_enq
  input  [1759 : 0] prev_4_enq_v;
  input  EN_prev_4_enq;
  output RDY_prev_4_enq;

  // value method prev_4_notFull
  output prev_4_notFull;
  output RDY_prev_4_notFull;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [1759 : 0] hostchan_0_next_first,
		  rxchan_0_next_first,
		  rxchan_1_next_first,
		  rxchan_2_next_first,
		  rxchan_3_next_first;
  wire [177 : 0] hostchan_0_writeClient_first,
		 rxchan_0_writeClient_first,
		 rxchan_1_writeClient_first,
		 rxchan_2_writeClient_first,
		 rxchan_3_writeClient_first;
  wire [105 : 0] txchan_0_macTx_get,
		 txchan_1_macTx_get,
		 txchan_2_macTx_get,
		 txchan_3_macTx_get;
  wire RDY_hostchan_0_next_deq,
       RDY_hostchan_0_next_first,
       RDY_hostchan_0_next_notEmpty,
       RDY_hostchan_0_verbose_enq,
       RDY_hostchan_0_verbose_notFull,
       RDY_hostchan_0_writeClient_deq,
       RDY_hostchan_0_writeClient_first,
       RDY_hostchan_0_writeClient_notEmpty,
       RDY_hostchan_0_writeServer_enq,
       RDY_hostchan_0_writeServer_notFull,
       RDY_prev_0_enq,
       RDY_prev_0_notFull,
       RDY_prev_1_enq,
       RDY_prev_1_notFull,
       RDY_prev_2_enq,
       RDY_prev_2_notFull,
       RDY_prev_3_enq,
       RDY_prev_3_notFull,
       RDY_prev_4_enq,
       RDY_prev_4_notFull,
       RDY_rxchan_0_macRx_put,
       RDY_rxchan_0_next_deq,
       RDY_rxchan_0_next_first,
       RDY_rxchan_0_next_notEmpty,
       RDY_rxchan_0_verbose_enq,
       RDY_rxchan_0_verbose_notFull,
       RDY_rxchan_0_writeClient_deq,
       RDY_rxchan_0_writeClient_first,
       RDY_rxchan_0_writeClient_notEmpty,
       RDY_rxchan_1_macRx_put,
       RDY_rxchan_1_next_deq,
       RDY_rxchan_1_next_first,
       RDY_rxchan_1_next_notEmpty,
       RDY_rxchan_1_verbose_enq,
       RDY_rxchan_1_verbose_notFull,
       RDY_rxchan_1_writeClient_deq,
       RDY_rxchan_1_writeClient_first,
       RDY_rxchan_1_writeClient_notEmpty,
       RDY_rxchan_2_macRx_put,
       RDY_rxchan_2_next_deq,
       RDY_rxchan_2_next_first,
       RDY_rxchan_2_next_notEmpty,
       RDY_rxchan_2_verbose_enq,
       RDY_rxchan_2_verbose_notFull,
       RDY_rxchan_2_writeClient_deq,
       RDY_rxchan_2_writeClient_first,
       RDY_rxchan_2_writeClient_notEmpty,
       RDY_rxchan_3_macRx_put,
       RDY_rxchan_3_next_deq,
       RDY_rxchan_3_next_first,
       RDY_rxchan_3_next_notEmpty,
       RDY_rxchan_3_verbose_enq,
       RDY_rxchan_3_verbose_notFull,
       RDY_rxchan_3_writeClient_deq,
       RDY_rxchan_3_writeClient_first,
       RDY_rxchan_3_writeClient_notEmpty,
       RDY_set_verbosity,
       RDY_txchan_0_macTx_get,
       RDY_txchan_0_verbose_enq,
       RDY_txchan_0_verbose_notFull,
       RDY_txchan_0_writeServer_enq,
       RDY_txchan_0_writeServer_notFull,
       RDY_txchan_1_macTx_get,
       RDY_txchan_1_verbose_enq,
       RDY_txchan_1_verbose_notFull,
       RDY_txchan_1_writeServer_enq,
       RDY_txchan_1_writeServer_notFull,
       RDY_txchan_2_macTx_get,
       RDY_txchan_2_verbose_enq,
       RDY_txchan_2_verbose_notFull,
       RDY_txchan_2_writeServer_enq,
       RDY_txchan_2_writeServer_notFull,
       RDY_txchan_3_macTx_get,
       RDY_txchan_3_verbose_enq,
       RDY_txchan_3_verbose_notFull,
       RDY_txchan_3_writeServer_enq,
       RDY_txchan_3_writeServer_notFull,
       hostchan_0_next_notEmpty,
       hostchan_0_verbose_notFull,
       hostchan_0_writeClient_notEmpty,
       hostchan_0_writeServer_notFull,
       prev_0_notFull,
       prev_1_notFull,
       prev_2_notFull,
       prev_3_notFull,
       prev_4_notFull,
       rxchan_0_next_notEmpty,
       rxchan_0_verbose_notFull,
       rxchan_0_writeClient_notEmpty,
       rxchan_1_next_notEmpty,
       rxchan_1_verbose_notFull,
       rxchan_1_writeClient_notEmpty,
       rxchan_2_next_notEmpty,
       rxchan_2_verbose_notFull,
       rxchan_2_writeClient_notEmpty,
       rxchan_3_next_notEmpty,
       rxchan_3_verbose_notFull,
       rxchan_3_writeClient_notEmpty,
       txchan_0_verbose_notFull,
       txchan_0_writeServer_notFull,
       txchan_1_verbose_notFull,
       txchan_1_writeServer_notFull,
       txchan_2_verbose_notFull,
       txchan_2_writeServer_notFull,
       txchan_3_verbose_notFull,
       txchan_3_writeServer_notFull;

  // inlined wires
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget;
  wire pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_0_memBuffer_serverAdapterB_s1_1_whas,
       pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas,
       pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas,
       pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register cf_verbosity_0
  reg [31 : 0] cf_verbosity_0;
  wire [31 : 0] cf_verbosity_0_D_IN;
  wire cf_verbosity_0_EN;

  // register cf_verbosity_0_1
  reg [31 : 0] cf_verbosity_0_1;
  wire [31 : 0] cf_verbosity_0_1_D_IN;
  wire cf_verbosity_0_1_EN;

  // register cf_verbosity_0_2
  reg [31 : 0] cf_verbosity_0_2;
  wire [31 : 0] cf_verbosity_0_2_D_IN;
  wire cf_verbosity_0_2_EN;

  // register cf_verbosity_0_3
  reg [31 : 0] cf_verbosity_0_3;
  wire [31 : 0] cf_verbosity_0_3_D_IN;
  wire cf_verbosity_0_3_EN;

  // register cf_verbosity_1
  reg [31 : 0] cf_verbosity_1;
  wire [31 : 0] cf_verbosity_1_D_IN;
  wire cf_verbosity_1_EN;

  // register cf_verbosity_1_1
  reg [31 : 0] cf_verbosity_1_1;
  wire [31 : 0] cf_verbosity_1_1_D_IN;
  wire cf_verbosity_1_1_EN;

  // register cf_verbosity_1_2
  reg [31 : 0] cf_verbosity_1_2;
  wire [31 : 0] cf_verbosity_1_2_D_IN;
  wire cf_verbosity_1_2_EN;

  // register cf_verbosity_2
  reg [31 : 0] cf_verbosity_2;
  wire [31 : 0] cf_verbosity_2_D_IN;
  wire cf_verbosity_2_EN;

  // register cf_verbosity_2_1
  reg [31 : 0] cf_verbosity_2_1;
  wire [31 : 0] cf_verbosity_2_1_D_IN;
  wire cf_verbosity_2_1_EN;

  // register cf_verbosity_2_2
  reg [31 : 0] cf_verbosity_2_2;
  wire [31 : 0] cf_verbosity_2_2_D_IN;
  wire cf_verbosity_2_2_EN;

  // register cf_verbosity_3
  reg [31 : 0] cf_verbosity_3;
  wire [31 : 0] cf_verbosity_3_D_IN;
  wire cf_verbosity_3_EN;

  // register cf_verbosity_3_1
  reg [31 : 0] cf_verbosity_3_1;
  wire [31 : 0] cf_verbosity_3_1_D_IN;
  wire cf_verbosity_3_1_EN;

  // register cf_verbosity_3_2
  reg [31 : 0] cf_verbosity_3_2;
  wire [31 : 0] cf_verbosity_3_2_D_IN;
  wire cf_verbosity_3_2_EN;

  // register cf_verbosity_4
  reg [31 : 0] cf_verbosity_4;
  wire [31 : 0] cf_verbosity_4_D_IN;
  wire cf_verbosity_4_EN;

  // register hostchan_0_cf_verbosity
  reg [31 : 0] hostchan_0_cf_verbosity;
  wire [31 : 0] hostchan_0_cf_verbosity_D_IN;
  wire hostchan_0_cf_verbosity_EN;

  // register hostchan_0_readStarted
  reg hostchan_0_readStarted;
  wire hostchan_0_readStarted_D_IN, hostchan_0_readStarted_EN;

  // register hostchan_1_cf_verbosity
  reg [31 : 0] hostchan_1_cf_verbosity;
  wire [31 : 0] hostchan_1_cf_verbosity_D_IN;
  wire hostchan_1_cf_verbosity_EN;

  // register hostchan_1_readStarted
  reg hostchan_1_readStarted;
  wire hostchan_1_readStarted_D_IN, hostchan_1_readStarted_EN;

  // register hostchan_2_cf_verbosity
  reg [31 : 0] hostchan_2_cf_verbosity;
  wire [31 : 0] hostchan_2_cf_verbosity_D_IN;
  wire hostchan_2_cf_verbosity_EN;

  // register hostchan_2_readStarted
  reg hostchan_2_readStarted;
  wire hostchan_2_readStarted_D_IN, hostchan_2_readStarted_EN;

  // register hostchan_3_cf_verbosity
  reg [31 : 0] hostchan_3_cf_verbosity;
  wire [31 : 0] hostchan_3_cf_verbosity_D_IN;
  wire hostchan_3_cf_verbosity_EN;

  // register hostchan_3_readStarted
  reg hostchan_3_readStarted;
  wire hostchan_3_readStarted_D_IN, hostchan_3_readStarted_EN;

  // register macToRing_0_data_bytes
  reg [63 : 0] macToRing_0_data_bytes;
  wire [63 : 0] macToRing_0_data_bytes_D_IN;
  wire macToRing_0_data_bytes_EN;

  // register macToRing_0_gearbox_data_bytes
  reg [63 : 0] macToRing_0_gearbox_data_bytes;
  wire [63 : 0] macToRing_0_gearbox_data_bytes_D_IN;
  wire macToRing_0_gearbox_data_bytes_EN;

  // register macToRing_0_gearbox_eopCount
  reg [63 : 0] macToRing_0_gearbox_eopCount;
  wire [63 : 0] macToRing_0_gearbox_eopCount_D_IN;
  wire macToRing_0_gearbox_eopCount_EN;

  // register macToRing_0_gearbox_idle_cycles
  reg [63 : 0] macToRing_0_gearbox_idle_cycles;
  wire [63 : 0] macToRing_0_gearbox_idle_cycles_D_IN;
  wire macToRing_0_gearbox_idle_cycles_EN;

  // register macToRing_0_gearbox_inProgress
  reg macToRing_0_gearbox_inProgress;
  wire macToRing_0_gearbox_inProgress_D_IN, macToRing_0_gearbox_inProgress_EN;

  // register macToRing_0_gearbox_oddBeat
  reg macToRing_0_gearbox_oddBeat;
  wire macToRing_0_gearbox_oddBeat_D_IN, macToRing_0_gearbox_oddBeat_EN;

  // register macToRing_0_gearbox_sopCount
  reg [63 : 0] macToRing_0_gearbox_sopCount;
  wire [63 : 0] macToRing_0_gearbox_sopCount_D_IN;
  wire macToRing_0_gearbox_sopCount_EN;

  // register macToRing_0_gearbox_v_prev
  reg [105 : 0] macToRing_0_gearbox_v_prev;
  wire [105 : 0] macToRing_0_gearbox_v_prev_D_IN;
  wire macToRing_0_gearbox_v_prev_EN;

  // register macToRing_0_total_cycles
  reg [63 : 0] macToRing_0_total_cycles;
  wire [63 : 0] macToRing_0_total_cycles_D_IN;
  wire macToRing_0_total_cycles_EN;

  // register macToRing_1_data_bytes
  reg [63 : 0] macToRing_1_data_bytes;
  wire [63 : 0] macToRing_1_data_bytes_D_IN;
  wire macToRing_1_data_bytes_EN;

  // register macToRing_1_gearbox_data_bytes
  reg [63 : 0] macToRing_1_gearbox_data_bytes;
  wire [63 : 0] macToRing_1_gearbox_data_bytes_D_IN;
  wire macToRing_1_gearbox_data_bytes_EN;

  // register macToRing_1_gearbox_eopCount
  reg [63 : 0] macToRing_1_gearbox_eopCount;
  wire [63 : 0] macToRing_1_gearbox_eopCount_D_IN;
  wire macToRing_1_gearbox_eopCount_EN;

  // register macToRing_1_gearbox_idle_cycles
  reg [63 : 0] macToRing_1_gearbox_idle_cycles;
  wire [63 : 0] macToRing_1_gearbox_idle_cycles_D_IN;
  wire macToRing_1_gearbox_idle_cycles_EN;

  // register macToRing_1_gearbox_inProgress
  reg macToRing_1_gearbox_inProgress;
  wire macToRing_1_gearbox_inProgress_D_IN, macToRing_1_gearbox_inProgress_EN;

  // register macToRing_1_gearbox_oddBeat
  reg macToRing_1_gearbox_oddBeat;
  wire macToRing_1_gearbox_oddBeat_D_IN, macToRing_1_gearbox_oddBeat_EN;

  // register macToRing_1_gearbox_sopCount
  reg [63 : 0] macToRing_1_gearbox_sopCount;
  wire [63 : 0] macToRing_1_gearbox_sopCount_D_IN;
  wire macToRing_1_gearbox_sopCount_EN;

  // register macToRing_1_gearbox_v_prev
  reg [105 : 0] macToRing_1_gearbox_v_prev;
  wire [105 : 0] macToRing_1_gearbox_v_prev_D_IN;
  wire macToRing_1_gearbox_v_prev_EN;

  // register macToRing_1_total_cycles
  reg [63 : 0] macToRing_1_total_cycles;
  wire [63 : 0] macToRing_1_total_cycles_D_IN;
  wire macToRing_1_total_cycles_EN;

  // register macToRing_2_data_bytes
  reg [63 : 0] macToRing_2_data_bytes;
  wire [63 : 0] macToRing_2_data_bytes_D_IN;
  wire macToRing_2_data_bytes_EN;

  // register macToRing_2_gearbox_data_bytes
  reg [63 : 0] macToRing_2_gearbox_data_bytes;
  wire [63 : 0] macToRing_2_gearbox_data_bytes_D_IN;
  wire macToRing_2_gearbox_data_bytes_EN;

  // register macToRing_2_gearbox_eopCount
  reg [63 : 0] macToRing_2_gearbox_eopCount;
  wire [63 : 0] macToRing_2_gearbox_eopCount_D_IN;
  wire macToRing_2_gearbox_eopCount_EN;

  // register macToRing_2_gearbox_idle_cycles
  reg [63 : 0] macToRing_2_gearbox_idle_cycles;
  wire [63 : 0] macToRing_2_gearbox_idle_cycles_D_IN;
  wire macToRing_2_gearbox_idle_cycles_EN;

  // register macToRing_2_gearbox_inProgress
  reg macToRing_2_gearbox_inProgress;
  wire macToRing_2_gearbox_inProgress_D_IN, macToRing_2_gearbox_inProgress_EN;

  // register macToRing_2_gearbox_oddBeat
  reg macToRing_2_gearbox_oddBeat;
  wire macToRing_2_gearbox_oddBeat_D_IN, macToRing_2_gearbox_oddBeat_EN;

  // register macToRing_2_gearbox_sopCount
  reg [63 : 0] macToRing_2_gearbox_sopCount;
  wire [63 : 0] macToRing_2_gearbox_sopCount_D_IN;
  wire macToRing_2_gearbox_sopCount_EN;

  // register macToRing_2_gearbox_v_prev
  reg [105 : 0] macToRing_2_gearbox_v_prev;
  wire [105 : 0] macToRing_2_gearbox_v_prev_D_IN;
  wire macToRing_2_gearbox_v_prev_EN;

  // register macToRing_2_total_cycles
  reg [63 : 0] macToRing_2_total_cycles;
  wire [63 : 0] macToRing_2_total_cycles_D_IN;
  wire macToRing_2_total_cycles_EN;

  // register macToRing_3_data_bytes
  reg [63 : 0] macToRing_3_data_bytes;
  wire [63 : 0] macToRing_3_data_bytes_D_IN;
  wire macToRing_3_data_bytes_EN;

  // register macToRing_3_gearbox_data_bytes
  reg [63 : 0] macToRing_3_gearbox_data_bytes;
  wire [63 : 0] macToRing_3_gearbox_data_bytes_D_IN;
  wire macToRing_3_gearbox_data_bytes_EN;

  // register macToRing_3_gearbox_eopCount
  reg [63 : 0] macToRing_3_gearbox_eopCount;
  wire [63 : 0] macToRing_3_gearbox_eopCount_D_IN;
  wire macToRing_3_gearbox_eopCount_EN;

  // register macToRing_3_gearbox_idle_cycles
  reg [63 : 0] macToRing_3_gearbox_idle_cycles;
  wire [63 : 0] macToRing_3_gearbox_idle_cycles_D_IN;
  wire macToRing_3_gearbox_idle_cycles_EN;

  // register macToRing_3_gearbox_inProgress
  reg macToRing_3_gearbox_inProgress;
  wire macToRing_3_gearbox_inProgress_D_IN, macToRing_3_gearbox_inProgress_EN;

  // register macToRing_3_gearbox_oddBeat
  reg macToRing_3_gearbox_oddBeat;
  wire macToRing_3_gearbox_oddBeat_D_IN, macToRing_3_gearbox_oddBeat_EN;

  // register macToRing_3_gearbox_sopCount
  reg [63 : 0] macToRing_3_gearbox_sopCount;
  wire [63 : 0] macToRing_3_gearbox_sopCount_D_IN;
  wire macToRing_3_gearbox_sopCount_EN;

  // register macToRing_3_gearbox_v_prev
  reg [105 : 0] macToRing_3_gearbox_v_prev;
  wire [105 : 0] macToRing_3_gearbox_v_prev_D_IN;
  wire macToRing_3_gearbox_v_prev_EN;

  // register macToRing_3_total_cycles
  reg [63 : 0] macToRing_3_total_cycles;
  wire [63 : 0] macToRing_3_total_cycles_D_IN;
  wire macToRing_3_total_cycles_EN;

  // register pktBuff_0_cf_verbosity
  reg [31 : 0] pktBuff_0_cf_verbosity;
  wire [31 : 0] pktBuff_0_cf_verbosity_D_IN;
  wire pktBuff_0_cf_verbosity_EN;

  // register pktBuff_0_cf_verbosity_1
  reg [31 : 0] pktBuff_0_cf_verbosity_1;
  wire [31 : 0] pktBuff_0_cf_verbosity_1_D_IN;
  wire pktBuff_0_cf_verbosity_1_EN;

  // register pktBuff_0_eopDeq
  reg [63 : 0] pktBuff_0_eopDeq;
  wire [63 : 0] pktBuff_0_eopDeq_D_IN;
  wire pktBuff_0_eopDeq_EN;

  // register pktBuff_0_eopEnq
  reg [63 : 0] pktBuff_0_eopEnq;
  wire [63 : 0] pktBuff_0_eopEnq_D_IN;
  wire pktBuff_0_eopEnq_EN;

  // register pktBuff_0_inPacket
  reg pktBuff_0_inPacket;
  wire pktBuff_0_inPacket_D_IN, pktBuff_0_inPacket_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_0_outPacket
  reg pktBuff_0_outPacket;
  wire pktBuff_0_outPacket_D_IN, pktBuff_0_outPacket_EN;

  // register pktBuff_0_packetLen
  reg [15 : 0] pktBuff_0_packetLen;
  wire [15 : 0] pktBuff_0_packetLen_D_IN;
  wire pktBuff_0_packetLen_EN;

  // register pktBuff_0_rdCurrPtr
  reg [7 : 0] pktBuff_0_rdCurrPtr;
  wire [7 : 0] pktBuff_0_rdCurrPtr_D_IN;
  wire pktBuff_0_rdCurrPtr_EN;

  // register pktBuff_0_readStarted
  reg pktBuff_0_readStarted;
  wire pktBuff_0_readStarted_D_IN, pktBuff_0_readStarted_EN;

  // register pktBuff_0_sopDeq
  reg [63 : 0] pktBuff_0_sopDeq;
  wire [63 : 0] pktBuff_0_sopDeq_D_IN;
  wire pktBuff_0_sopDeq_EN;

  // register pktBuff_0_sopEnq
  reg [63 : 0] pktBuff_0_sopEnq;
  wire [63 : 0] pktBuff_0_sopEnq_D_IN;
  wire pktBuff_0_sopEnq_EN;

  // register pktBuff_0_wrCurrPtr
  reg [7 : 0] pktBuff_0_wrCurrPtr;
  wire [7 : 0] pktBuff_0_wrCurrPtr_D_IN;
  wire pktBuff_0_wrCurrPtr_EN;

  // register pktBuff_1_cf_verbosity
  reg [31 : 0] pktBuff_1_cf_verbosity;
  wire [31 : 0] pktBuff_1_cf_verbosity_D_IN;
  wire pktBuff_1_cf_verbosity_EN;

  // register pktBuff_1_cf_verbosity_1
  reg [31 : 0] pktBuff_1_cf_verbosity_1;
  wire [31 : 0] pktBuff_1_cf_verbosity_1_D_IN;
  wire pktBuff_1_cf_verbosity_1_EN;

  // register pktBuff_1_eopDeq
  reg [63 : 0] pktBuff_1_eopDeq;
  wire [63 : 0] pktBuff_1_eopDeq_D_IN;
  wire pktBuff_1_eopDeq_EN;

  // register pktBuff_1_eopEnq
  reg [63 : 0] pktBuff_1_eopEnq;
  wire [63 : 0] pktBuff_1_eopEnq_D_IN;
  wire pktBuff_1_eopEnq_EN;

  // register pktBuff_1_inPacket
  reg pktBuff_1_inPacket;
  wire pktBuff_1_inPacket_D_IN, pktBuff_1_inPacket_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_1_outPacket
  reg pktBuff_1_outPacket;
  wire pktBuff_1_outPacket_D_IN, pktBuff_1_outPacket_EN;

  // register pktBuff_1_packetLen
  reg [15 : 0] pktBuff_1_packetLen;
  wire [15 : 0] pktBuff_1_packetLen_D_IN;
  wire pktBuff_1_packetLen_EN;

  // register pktBuff_1_rdCurrPtr
  reg [7 : 0] pktBuff_1_rdCurrPtr;
  wire [7 : 0] pktBuff_1_rdCurrPtr_D_IN;
  wire pktBuff_1_rdCurrPtr_EN;

  // register pktBuff_1_readStarted
  reg pktBuff_1_readStarted;
  wire pktBuff_1_readStarted_D_IN, pktBuff_1_readStarted_EN;

  // register pktBuff_1_sopDeq
  reg [63 : 0] pktBuff_1_sopDeq;
  wire [63 : 0] pktBuff_1_sopDeq_D_IN;
  wire pktBuff_1_sopDeq_EN;

  // register pktBuff_1_sopEnq
  reg [63 : 0] pktBuff_1_sopEnq;
  wire [63 : 0] pktBuff_1_sopEnq_D_IN;
  wire pktBuff_1_sopEnq_EN;

  // register pktBuff_1_wrCurrPtr
  reg [7 : 0] pktBuff_1_wrCurrPtr;
  wire [7 : 0] pktBuff_1_wrCurrPtr_D_IN;
  wire pktBuff_1_wrCurrPtr_EN;

  // register pktBuff_2_cf_verbosity
  reg [31 : 0] pktBuff_2_cf_verbosity;
  wire [31 : 0] pktBuff_2_cf_verbosity_D_IN;
  wire pktBuff_2_cf_verbosity_EN;

  // register pktBuff_2_cf_verbosity_1
  reg [31 : 0] pktBuff_2_cf_verbosity_1;
  wire [31 : 0] pktBuff_2_cf_verbosity_1_D_IN;
  wire pktBuff_2_cf_verbosity_1_EN;

  // register pktBuff_2_eopDeq
  reg [63 : 0] pktBuff_2_eopDeq;
  wire [63 : 0] pktBuff_2_eopDeq_D_IN;
  wire pktBuff_2_eopDeq_EN;

  // register pktBuff_2_eopEnq
  reg [63 : 0] pktBuff_2_eopEnq;
  wire [63 : 0] pktBuff_2_eopEnq_D_IN;
  wire pktBuff_2_eopEnq_EN;

  // register pktBuff_2_inPacket
  reg pktBuff_2_inPacket;
  wire pktBuff_2_inPacket_D_IN, pktBuff_2_inPacket_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_2_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_2_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_2_outPacket
  reg pktBuff_2_outPacket;
  wire pktBuff_2_outPacket_D_IN, pktBuff_2_outPacket_EN;

  // register pktBuff_2_packetLen
  reg [15 : 0] pktBuff_2_packetLen;
  wire [15 : 0] pktBuff_2_packetLen_D_IN;
  wire pktBuff_2_packetLen_EN;

  // register pktBuff_2_rdCurrPtr
  reg [7 : 0] pktBuff_2_rdCurrPtr;
  wire [7 : 0] pktBuff_2_rdCurrPtr_D_IN;
  wire pktBuff_2_rdCurrPtr_EN;

  // register pktBuff_2_readStarted
  reg pktBuff_2_readStarted;
  wire pktBuff_2_readStarted_D_IN, pktBuff_2_readStarted_EN;

  // register pktBuff_2_sopDeq
  reg [63 : 0] pktBuff_2_sopDeq;
  wire [63 : 0] pktBuff_2_sopDeq_D_IN;
  wire pktBuff_2_sopDeq_EN;

  // register pktBuff_2_sopEnq
  reg [63 : 0] pktBuff_2_sopEnq;
  wire [63 : 0] pktBuff_2_sopEnq_D_IN;
  wire pktBuff_2_sopEnq_EN;

  // register pktBuff_2_wrCurrPtr
  reg [7 : 0] pktBuff_2_wrCurrPtr;
  wire [7 : 0] pktBuff_2_wrCurrPtr_D_IN;
  wire pktBuff_2_wrCurrPtr_EN;

  // register pktBuff_3_cf_verbosity
  reg [31 : 0] pktBuff_3_cf_verbosity;
  wire [31 : 0] pktBuff_3_cf_verbosity_D_IN;
  wire pktBuff_3_cf_verbosity_EN;

  // register pktBuff_3_cf_verbosity_1
  reg [31 : 0] pktBuff_3_cf_verbosity_1;
  wire [31 : 0] pktBuff_3_cf_verbosity_1_D_IN;
  wire pktBuff_3_cf_verbosity_1_EN;

  // register pktBuff_3_eopDeq
  reg [63 : 0] pktBuff_3_eopDeq;
  wire [63 : 0] pktBuff_3_eopDeq_D_IN;
  wire pktBuff_3_eopDeq_EN;

  // register pktBuff_3_eopEnq
  reg [63 : 0] pktBuff_3_eopEnq;
  wire [63 : 0] pktBuff_3_eopEnq_D_IN;
  wire pktBuff_3_eopEnq_EN;

  // register pktBuff_3_inPacket
  reg pktBuff_3_inPacket;
  wire pktBuff_3_inPacket_D_IN, pktBuff_3_inPacket_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_3_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_3_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_3_outPacket
  reg pktBuff_3_outPacket;
  wire pktBuff_3_outPacket_D_IN, pktBuff_3_outPacket_EN;

  // register pktBuff_3_packetLen
  reg [15 : 0] pktBuff_3_packetLen;
  wire [15 : 0] pktBuff_3_packetLen_D_IN;
  wire pktBuff_3_packetLen_EN;

  // register pktBuff_3_rdCurrPtr
  reg [7 : 0] pktBuff_3_rdCurrPtr;
  wire [7 : 0] pktBuff_3_rdCurrPtr_D_IN;
  wire pktBuff_3_rdCurrPtr_EN;

  // register pktBuff_3_readStarted
  reg pktBuff_3_readStarted;
  wire pktBuff_3_readStarted_D_IN, pktBuff_3_readStarted_EN;

  // register pktBuff_3_sopDeq
  reg [63 : 0] pktBuff_3_sopDeq;
  wire [63 : 0] pktBuff_3_sopDeq_D_IN;
  wire pktBuff_3_sopDeq_EN;

  // register pktBuff_3_sopEnq
  reg [63 : 0] pktBuff_3_sopEnq;
  wire [63 : 0] pktBuff_3_sopEnq_D_IN;
  wire pktBuff_3_sopEnq_EN;

  // register pktBuff_3_wrCurrPtr
  reg [7 : 0] pktBuff_3_wrCurrPtr;
  wire [7 : 0] pktBuff_3_wrCurrPtr_D_IN;
  wire pktBuff_3_wrCurrPtr_EN;

  // register pktBuff_4_cf_verbosity
  reg [31 : 0] pktBuff_4_cf_verbosity;
  wire [31 : 0] pktBuff_4_cf_verbosity_D_IN;
  wire pktBuff_4_cf_verbosity_EN;

  // register pktBuff_4_readStarted
  reg pktBuff_4_readStarted;
  wire pktBuff_4_readStarted_D_IN, pktBuff_4_readStarted_EN;

  // register readStarted_0
  reg readStarted_0;
  wire readStarted_0_D_IN, readStarted_0_EN;

  // register ringToMac_0_cycle_cnt
  reg [63 : 0] ringToMac_0_cycle_cnt;
  wire [63 : 0] ringToMac_0_cycle_cnt_D_IN;
  wire ringToMac_0_cycle_cnt_EN;

  // register ringToMac_0_data_bytes
  reg [63 : 0] ringToMac_0_data_bytes;
  wire [63 : 0] ringToMac_0_data_bytes_D_IN;
  wire ringToMac_0_data_bytes_EN;

  // register ringToMac_0_eopCount
  reg [63 : 0] ringToMac_0_eopCount;
  wire [63 : 0] ringToMac_0_eopCount_D_IN;
  wire ringToMac_0_eopCount_EN;

  // register ringToMac_0_fifoTxData_block0
  reg [211 : 0] ringToMac_0_fifoTxData_block0;
  wire [211 : 0] ringToMac_0_fifoTxData_block0_D_IN;
  wire ringToMac_0_fifoTxData_block0_EN;

  // register ringToMac_0_fifoTxData_block0_status
  reg ringToMac_0_fifoTxData_block0_status;
  wire ringToMac_0_fifoTxData_block0_status_D_IN,
       ringToMac_0_fifoTxData_block0_status_EN;

  // register ringToMac_0_fifoTxData_block1
  reg [211 : 0] ringToMac_0_fifoTxData_block1;
  wire [211 : 0] ringToMac_0_fifoTxData_block1_D_IN;
  wire ringToMac_0_fifoTxData_block1_EN;

  // register ringToMac_0_fifoTxData_block1_status
  reg ringToMac_0_fifoTxData_block1_status;
  wire ringToMac_0_fifoTxData_block1_status_D_IN,
       ringToMac_0_fifoTxData_block1_status_EN;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_elem0_status_0
  reg ringToMac_0_fifoTxData_elem0_status_0;
  wire ringToMac_0_fifoTxData_elem0_status_0_D_IN,
       ringToMac_0_fifoTxData_elem0_status_0_EN;

  // register ringToMac_0_fifoTxData_elem0_status_1
  reg ringToMac_0_fifoTxData_elem0_status_1;
  wire ringToMac_0_fifoTxData_elem0_status_1_D_IN,
       ringToMac_0_fifoTxData_elem0_status_1_EN;

  // register ringToMac_0_fifoTxData_elem1_status_0
  reg ringToMac_0_fifoTxData_elem1_status_0;
  wire ringToMac_0_fifoTxData_elem1_status_0_D_IN,
       ringToMac_0_fifoTxData_elem1_status_0_EN;

  // register ringToMac_0_fifoTxData_elem1_status_1
  reg ringToMac_0_fifoTxData_elem1_status_1;
  wire ringToMac_0_fifoTxData_elem1_status_1_D_IN,
       ringToMac_0_fifoTxData_elem1_status_1_EN;

  // register ringToMac_0_fifoTxData_read_block
  reg ringToMac_0_fifoTxData_read_block;
  wire ringToMac_0_fifoTxData_read_block_D_IN,
       ringToMac_0_fifoTxData_read_block_EN;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_write_block
  reg ringToMac_0_fifoTxData_write_block;
  wire ringToMac_0_fifoTxData_write_block_D_IN,
       ringToMac_0_fifoTxData_write_block_EN;

  // register ringToMac_0_goodputCount
  reg [63 : 0] ringToMac_0_goodputCount;
  wire [63 : 0] ringToMac_0_goodputCount_D_IN;
  wire ringToMac_0_goodputCount_EN;

  // register ringToMac_0_idleCount
  reg [63 : 0] ringToMac_0_idleCount;
  wire [63 : 0] ringToMac_0_idleCount_D_IN;
  wire ringToMac_0_idleCount_EN;

  // register ringToMac_0_idle_cycles
  reg [63 : 0] ringToMac_0_idle_cycles;
  wire [63 : 0] ringToMac_0_idle_cycles_D_IN;
  wire ringToMac_0_idle_cycles_EN;

  // register ringToMac_0_last_endofpacket
  reg [63 : 0] ringToMac_0_last_endofpacket;
  wire [63 : 0] ringToMac_0_last_endofpacket_D_IN;
  wire ringToMac_0_last_endofpacket_EN;

  // register ringToMac_0_last_startofpacket
  reg [63 : 0] ringToMac_0_last_startofpacket;
  wire [63 : 0] ringToMac_0_last_startofpacket_D_IN;
  wire ringToMac_0_last_startofpacket_EN;

  // register ringToMac_0_sopCount
  reg [63 : 0] ringToMac_0_sopCount;
  wire [63 : 0] ringToMac_0_sopCount_D_IN;
  wire ringToMac_0_sopCount_EN;

  // register ringToMac_0_total_cycles
  reg [63 : 0] ringToMac_0_total_cycles;
  wire [63 : 0] ringToMac_0_total_cycles_D_IN;
  wire ringToMac_0_total_cycles_EN;

  // register ringToMac_1_cycle_cnt
  reg [63 : 0] ringToMac_1_cycle_cnt;
  wire [63 : 0] ringToMac_1_cycle_cnt_D_IN;
  wire ringToMac_1_cycle_cnt_EN;

  // register ringToMac_1_data_bytes
  reg [63 : 0] ringToMac_1_data_bytes;
  wire [63 : 0] ringToMac_1_data_bytes_D_IN;
  wire ringToMac_1_data_bytes_EN;

  // register ringToMac_1_eopCount
  reg [63 : 0] ringToMac_1_eopCount;
  wire [63 : 0] ringToMac_1_eopCount_D_IN;
  wire ringToMac_1_eopCount_EN;

  // register ringToMac_1_fifoTxData_block0
  reg [211 : 0] ringToMac_1_fifoTxData_block0;
  wire [211 : 0] ringToMac_1_fifoTxData_block0_D_IN;
  wire ringToMac_1_fifoTxData_block0_EN;

  // register ringToMac_1_fifoTxData_block0_status
  reg ringToMac_1_fifoTxData_block0_status;
  wire ringToMac_1_fifoTxData_block0_status_D_IN,
       ringToMac_1_fifoTxData_block0_status_EN;

  // register ringToMac_1_fifoTxData_block1
  reg [211 : 0] ringToMac_1_fifoTxData_block1;
  wire [211 : 0] ringToMac_1_fifoTxData_block1_D_IN;
  wire ringToMac_1_fifoTxData_block1_EN;

  // register ringToMac_1_fifoTxData_block1_status
  reg ringToMac_1_fifoTxData_block1_status;
  wire ringToMac_1_fifoTxData_block1_status_D_IN,
       ringToMac_1_fifoTxData_block1_status_EN;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_elem0_status_0
  reg ringToMac_1_fifoTxData_elem0_status_0;
  wire ringToMac_1_fifoTxData_elem0_status_0_D_IN,
       ringToMac_1_fifoTxData_elem0_status_0_EN;

  // register ringToMac_1_fifoTxData_elem0_status_1
  reg ringToMac_1_fifoTxData_elem0_status_1;
  wire ringToMac_1_fifoTxData_elem0_status_1_D_IN,
       ringToMac_1_fifoTxData_elem0_status_1_EN;

  // register ringToMac_1_fifoTxData_elem1_status_0
  reg ringToMac_1_fifoTxData_elem1_status_0;
  wire ringToMac_1_fifoTxData_elem1_status_0_D_IN,
       ringToMac_1_fifoTxData_elem1_status_0_EN;

  // register ringToMac_1_fifoTxData_elem1_status_1
  reg ringToMac_1_fifoTxData_elem1_status_1;
  wire ringToMac_1_fifoTxData_elem1_status_1_D_IN,
       ringToMac_1_fifoTxData_elem1_status_1_EN;

  // register ringToMac_1_fifoTxData_read_block
  reg ringToMac_1_fifoTxData_read_block;
  wire ringToMac_1_fifoTxData_read_block_D_IN,
       ringToMac_1_fifoTxData_read_block_EN;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_write_block
  reg ringToMac_1_fifoTxData_write_block;
  wire ringToMac_1_fifoTxData_write_block_D_IN,
       ringToMac_1_fifoTxData_write_block_EN;

  // register ringToMac_1_goodputCount
  reg [63 : 0] ringToMac_1_goodputCount;
  wire [63 : 0] ringToMac_1_goodputCount_D_IN;
  wire ringToMac_1_goodputCount_EN;

  // register ringToMac_1_idleCount
  reg [63 : 0] ringToMac_1_idleCount;
  wire [63 : 0] ringToMac_1_idleCount_D_IN;
  wire ringToMac_1_idleCount_EN;

  // register ringToMac_1_idle_cycles
  reg [63 : 0] ringToMac_1_idle_cycles;
  wire [63 : 0] ringToMac_1_idle_cycles_D_IN;
  wire ringToMac_1_idle_cycles_EN;

  // register ringToMac_1_last_endofpacket
  reg [63 : 0] ringToMac_1_last_endofpacket;
  wire [63 : 0] ringToMac_1_last_endofpacket_D_IN;
  wire ringToMac_1_last_endofpacket_EN;

  // register ringToMac_1_last_startofpacket
  reg [63 : 0] ringToMac_1_last_startofpacket;
  wire [63 : 0] ringToMac_1_last_startofpacket_D_IN;
  wire ringToMac_1_last_startofpacket_EN;

  // register ringToMac_1_sopCount
  reg [63 : 0] ringToMac_1_sopCount;
  wire [63 : 0] ringToMac_1_sopCount_D_IN;
  wire ringToMac_1_sopCount_EN;

  // register ringToMac_1_total_cycles
  reg [63 : 0] ringToMac_1_total_cycles;
  wire [63 : 0] ringToMac_1_total_cycles_D_IN;
  wire ringToMac_1_total_cycles_EN;

  // register ringToMac_2_cycle_cnt
  reg [63 : 0] ringToMac_2_cycle_cnt;
  wire [63 : 0] ringToMac_2_cycle_cnt_D_IN;
  wire ringToMac_2_cycle_cnt_EN;

  // register ringToMac_2_data_bytes
  reg [63 : 0] ringToMac_2_data_bytes;
  wire [63 : 0] ringToMac_2_data_bytes_D_IN;
  wire ringToMac_2_data_bytes_EN;

  // register ringToMac_2_eopCount
  reg [63 : 0] ringToMac_2_eopCount;
  wire [63 : 0] ringToMac_2_eopCount_D_IN;
  wire ringToMac_2_eopCount_EN;

  // register ringToMac_2_fifoTxData_block0
  reg [211 : 0] ringToMac_2_fifoTxData_block0;
  wire [211 : 0] ringToMac_2_fifoTxData_block0_D_IN;
  wire ringToMac_2_fifoTxData_block0_EN;

  // register ringToMac_2_fifoTxData_block0_status
  reg ringToMac_2_fifoTxData_block0_status;
  wire ringToMac_2_fifoTxData_block0_status_D_IN,
       ringToMac_2_fifoTxData_block0_status_EN;

  // register ringToMac_2_fifoTxData_block1
  reg [211 : 0] ringToMac_2_fifoTxData_block1;
  wire [211 : 0] ringToMac_2_fifoTxData_block1_D_IN;
  wire ringToMac_2_fifoTxData_block1_EN;

  // register ringToMac_2_fifoTxData_block1_status
  reg ringToMac_2_fifoTxData_block1_status;
  wire ringToMac_2_fifoTxData_block1_status_D_IN,
       ringToMac_2_fifoTxData_block1_status_EN;

  // register ringToMac_2_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_2_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_2_fifoTxData_elem0_status_0
  reg ringToMac_2_fifoTxData_elem0_status_0;
  wire ringToMac_2_fifoTxData_elem0_status_0_D_IN,
       ringToMac_2_fifoTxData_elem0_status_0_EN;

  // register ringToMac_2_fifoTxData_elem0_status_1
  reg ringToMac_2_fifoTxData_elem0_status_1;
  wire ringToMac_2_fifoTxData_elem0_status_1_D_IN,
       ringToMac_2_fifoTxData_elem0_status_1_EN;

  // register ringToMac_2_fifoTxData_elem1_status_0
  reg ringToMac_2_fifoTxData_elem1_status_0;
  wire ringToMac_2_fifoTxData_elem1_status_0_D_IN,
       ringToMac_2_fifoTxData_elem1_status_0_EN;

  // register ringToMac_2_fifoTxData_elem1_status_1
  reg ringToMac_2_fifoTxData_elem1_status_1;
  wire ringToMac_2_fifoTxData_elem1_status_1_D_IN,
       ringToMac_2_fifoTxData_elem1_status_1_EN;

  // register ringToMac_2_fifoTxData_read_block
  reg ringToMac_2_fifoTxData_read_block;
  wire ringToMac_2_fifoTxData_read_block_D_IN,
       ringToMac_2_fifoTxData_read_block_EN;

  // register ringToMac_2_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_2_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_2_fifoTxData_write_block
  reg ringToMac_2_fifoTxData_write_block;
  wire ringToMac_2_fifoTxData_write_block_D_IN,
       ringToMac_2_fifoTxData_write_block_EN;

  // register ringToMac_2_goodputCount
  reg [63 : 0] ringToMac_2_goodputCount;
  wire [63 : 0] ringToMac_2_goodputCount_D_IN;
  wire ringToMac_2_goodputCount_EN;

  // register ringToMac_2_idleCount
  reg [63 : 0] ringToMac_2_idleCount;
  wire [63 : 0] ringToMac_2_idleCount_D_IN;
  wire ringToMac_2_idleCount_EN;

  // register ringToMac_2_idle_cycles
  reg [63 : 0] ringToMac_2_idle_cycles;
  wire [63 : 0] ringToMac_2_idle_cycles_D_IN;
  wire ringToMac_2_idle_cycles_EN;

  // register ringToMac_2_last_endofpacket
  reg [63 : 0] ringToMac_2_last_endofpacket;
  wire [63 : 0] ringToMac_2_last_endofpacket_D_IN;
  wire ringToMac_2_last_endofpacket_EN;

  // register ringToMac_2_last_startofpacket
  reg [63 : 0] ringToMac_2_last_startofpacket;
  wire [63 : 0] ringToMac_2_last_startofpacket_D_IN;
  wire ringToMac_2_last_startofpacket_EN;

  // register ringToMac_2_sopCount
  reg [63 : 0] ringToMac_2_sopCount;
  wire [63 : 0] ringToMac_2_sopCount_D_IN;
  wire ringToMac_2_sopCount_EN;

  // register ringToMac_2_total_cycles
  reg [63 : 0] ringToMac_2_total_cycles;
  wire [63 : 0] ringToMac_2_total_cycles_D_IN;
  wire ringToMac_2_total_cycles_EN;

  // register ringToMac_3_cycle_cnt
  reg [63 : 0] ringToMac_3_cycle_cnt;
  wire [63 : 0] ringToMac_3_cycle_cnt_D_IN;
  wire ringToMac_3_cycle_cnt_EN;

  // register ringToMac_3_data_bytes
  reg [63 : 0] ringToMac_3_data_bytes;
  wire [63 : 0] ringToMac_3_data_bytes_D_IN;
  wire ringToMac_3_data_bytes_EN;

  // register ringToMac_3_eopCount
  reg [63 : 0] ringToMac_3_eopCount;
  wire [63 : 0] ringToMac_3_eopCount_D_IN;
  wire ringToMac_3_eopCount_EN;

  // register ringToMac_3_fifoTxData_block0
  reg [211 : 0] ringToMac_3_fifoTxData_block0;
  wire [211 : 0] ringToMac_3_fifoTxData_block0_D_IN;
  wire ringToMac_3_fifoTxData_block0_EN;

  // register ringToMac_3_fifoTxData_block0_status
  reg ringToMac_3_fifoTxData_block0_status;
  wire ringToMac_3_fifoTxData_block0_status_D_IN,
       ringToMac_3_fifoTxData_block0_status_EN;

  // register ringToMac_3_fifoTxData_block1
  reg [211 : 0] ringToMac_3_fifoTxData_block1;
  wire [211 : 0] ringToMac_3_fifoTxData_block1_D_IN;
  wire ringToMac_3_fifoTxData_block1_EN;

  // register ringToMac_3_fifoTxData_block1_status
  reg ringToMac_3_fifoTxData_block1_status;
  wire ringToMac_3_fifoTxData_block1_status_D_IN,
       ringToMac_3_fifoTxData_block1_status_EN;

  // register ringToMac_3_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_3_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_3_fifoTxData_elem0_status_0
  reg ringToMac_3_fifoTxData_elem0_status_0;
  wire ringToMac_3_fifoTxData_elem0_status_0_D_IN,
       ringToMac_3_fifoTxData_elem0_status_0_EN;

  // register ringToMac_3_fifoTxData_elem0_status_1
  reg ringToMac_3_fifoTxData_elem0_status_1;
  wire ringToMac_3_fifoTxData_elem0_status_1_D_IN,
       ringToMac_3_fifoTxData_elem0_status_1_EN;

  // register ringToMac_3_fifoTxData_elem1_status_0
  reg ringToMac_3_fifoTxData_elem1_status_0;
  wire ringToMac_3_fifoTxData_elem1_status_0_D_IN,
       ringToMac_3_fifoTxData_elem1_status_0_EN;

  // register ringToMac_3_fifoTxData_elem1_status_1
  reg ringToMac_3_fifoTxData_elem1_status_1;
  wire ringToMac_3_fifoTxData_elem1_status_1_D_IN,
       ringToMac_3_fifoTxData_elem1_status_1_EN;

  // register ringToMac_3_fifoTxData_read_block
  reg ringToMac_3_fifoTxData_read_block;
  wire ringToMac_3_fifoTxData_read_block_D_IN,
       ringToMac_3_fifoTxData_read_block_EN;

  // register ringToMac_3_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_3_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_3_fifoTxData_write_block
  reg ringToMac_3_fifoTxData_write_block;
  wire ringToMac_3_fifoTxData_write_block_D_IN,
       ringToMac_3_fifoTxData_write_block_EN;

  // register ringToMac_3_goodputCount
  reg [63 : 0] ringToMac_3_goodputCount;
  wire [63 : 0] ringToMac_3_goodputCount_D_IN;
  wire ringToMac_3_goodputCount_EN;

  // register ringToMac_3_idleCount
  reg [63 : 0] ringToMac_3_idleCount;
  wire [63 : 0] ringToMac_3_idleCount_D_IN;
  wire ringToMac_3_idleCount_EN;

  // register ringToMac_3_idle_cycles
  reg [63 : 0] ringToMac_3_idle_cycles;
  wire [63 : 0] ringToMac_3_idle_cycles_D_IN;
  wire ringToMac_3_idle_cycles_EN;

  // register ringToMac_3_last_endofpacket
  reg [63 : 0] ringToMac_3_last_endofpacket;
  wire [63 : 0] ringToMac_3_last_endofpacket_D_IN;
  wire ringToMac_3_last_endofpacket_EN;

  // register ringToMac_3_last_startofpacket
  reg [63 : 0] ringToMac_3_last_startofpacket;
  wire [63 : 0] ringToMac_3_last_startofpacket_D_IN;
  wire ringToMac_3_last_startofpacket_EN;

  // register ringToMac_3_sopCount
  reg [63 : 0] ringToMac_3_sopCount;
  wire [63 : 0] ringToMac_3_sopCount_D_IN;
  wire ringToMac_3_sopCount_EN;

  // register ringToMac_3_total_cycles
  reg [63 : 0] ringToMac_3_total_cycles;
  wire [63 : 0] ringToMac_3_total_cycles_D_IN;
  wire ringToMac_3_total_cycles_EN;

  // register xbar_lower_lower_merges_1_fi0HasPrio
  reg xbar_lower_lower_merges_1_fi0HasPrio;
  reg xbar_lower_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_lower_merges_1_fi0HasPrio_EN;

  // register xbar_lower_lower_merges_1_routeFrom
  reg [1 : 0] xbar_lower_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_lower_merges_1_routeFrom_D_IN;
  wire xbar_lower_lower_merges_1_routeFrom_EN;

  // register xbar_lower_lower_merges_fi0HasPrio
  reg xbar_lower_lower_merges_fi0HasPrio;
  reg xbar_lower_lower_merges_fi0HasPrio_D_IN;
  wire xbar_lower_lower_merges_fi0HasPrio_EN;

  // register xbar_lower_lower_merges_routeFrom
  reg [1 : 0] xbar_lower_lower_merges_routeFrom;
  wire [1 : 0] xbar_lower_lower_merges_routeFrom_D_IN;
  wire xbar_lower_lower_merges_routeFrom_EN;

  // register xbar_lower_merges_1_fi0HasPrio
  reg xbar_lower_merges_1_fi0HasPrio;
  reg xbar_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_merges_1_fi0HasPrio_EN;

  // register xbar_lower_merges_1_routeFrom
  reg [1 : 0] xbar_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_merges_1_routeFrom_D_IN;
  wire xbar_lower_merges_1_routeFrom_EN;

  // register xbar_lower_merges_2_fi0HasPrio
  reg xbar_lower_merges_2_fi0HasPrio;
  reg xbar_lower_merges_2_fi0HasPrio_D_IN;
  wire xbar_lower_merges_2_fi0HasPrio_EN;

  // register xbar_lower_merges_2_routeFrom
  reg [1 : 0] xbar_lower_merges_2_routeFrom;
  wire [1 : 0] xbar_lower_merges_2_routeFrom_D_IN;
  wire xbar_lower_merges_2_routeFrom_EN;

  // register xbar_lower_merges_3_fi0HasPrio
  reg xbar_lower_merges_3_fi0HasPrio;
  reg xbar_lower_merges_3_fi0HasPrio_D_IN;
  wire xbar_lower_merges_3_fi0HasPrio_EN;

  // register xbar_lower_merges_3_routeFrom
  reg [1 : 0] xbar_lower_merges_3_routeFrom;
  wire [1 : 0] xbar_lower_merges_3_routeFrom_D_IN;
  wire xbar_lower_merges_3_routeFrom_EN;

  // register xbar_lower_merges_fi0HasPrio
  reg xbar_lower_merges_fi0HasPrio;
  reg xbar_lower_merges_fi0HasPrio_D_IN;
  wire xbar_lower_merges_fi0HasPrio_EN;

  // register xbar_lower_merges_routeFrom
  reg [1 : 0] xbar_lower_merges_routeFrom;
  wire [1 : 0] xbar_lower_merges_routeFrom_D_IN;
  wire xbar_lower_merges_routeFrom_EN;

  // register xbar_lower_upper_merges_1_fi0HasPrio
  reg xbar_lower_upper_merges_1_fi0HasPrio;
  reg xbar_lower_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_upper_merges_1_fi0HasPrio_EN;

  // register xbar_lower_upper_merges_1_routeFrom
  reg [1 : 0] xbar_lower_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_upper_merges_1_routeFrom_D_IN;
  wire xbar_lower_upper_merges_1_routeFrom_EN;

  // register xbar_lower_upper_merges_fi0HasPrio
  reg xbar_lower_upper_merges_fi0HasPrio;
  reg xbar_lower_upper_merges_fi0HasPrio_D_IN;
  wire xbar_lower_upper_merges_fi0HasPrio_EN;

  // register xbar_lower_upper_merges_routeFrom
  reg [1 : 0] xbar_lower_upper_merges_routeFrom;
  wire [1 : 0] xbar_lower_upper_merges_routeFrom_D_IN;
  wire xbar_lower_upper_merges_routeFrom_EN;

  // register xbar_merges_1_fi0HasPrio
  reg xbar_merges_1_fi0HasPrio;
  reg xbar_merges_1_fi0HasPrio_D_IN;
  wire xbar_merges_1_fi0HasPrio_EN;

  // register xbar_merges_1_routeFrom
  reg [1 : 0] xbar_merges_1_routeFrom;
  wire [1 : 0] xbar_merges_1_routeFrom_D_IN;
  wire xbar_merges_1_routeFrom_EN;

  // register xbar_merges_2_fi0HasPrio
  reg xbar_merges_2_fi0HasPrio;
  reg xbar_merges_2_fi0HasPrio_D_IN;
  wire xbar_merges_2_fi0HasPrio_EN;

  // register xbar_merges_2_routeFrom
  reg [1 : 0] xbar_merges_2_routeFrom;
  wire [1 : 0] xbar_merges_2_routeFrom_D_IN;
  wire xbar_merges_2_routeFrom_EN;

  // register xbar_merges_3_fi0HasPrio
  reg xbar_merges_3_fi0HasPrio;
  reg xbar_merges_3_fi0HasPrio_D_IN;
  wire xbar_merges_3_fi0HasPrio_EN;

  // register xbar_merges_3_routeFrom
  reg [1 : 0] xbar_merges_3_routeFrom;
  wire [1 : 0] xbar_merges_3_routeFrom_D_IN;
  wire xbar_merges_3_routeFrom_EN;

  // register xbar_merges_4_fi0HasPrio
  reg xbar_merges_4_fi0HasPrio;
  reg xbar_merges_4_fi0HasPrio_D_IN;
  wire xbar_merges_4_fi0HasPrio_EN;

  // register xbar_merges_4_routeFrom
  reg [1 : 0] xbar_merges_4_routeFrom;
  wire [1 : 0] xbar_merges_4_routeFrom_D_IN;
  wire xbar_merges_4_routeFrom_EN;

  // register xbar_merges_5_fi0HasPrio
  reg xbar_merges_5_fi0HasPrio;
  reg xbar_merges_5_fi0HasPrio_D_IN;
  wire xbar_merges_5_fi0HasPrio_EN;

  // register xbar_merges_5_routeFrom
  reg [1 : 0] xbar_merges_5_routeFrom;
  wire [1 : 0] xbar_merges_5_routeFrom_D_IN;
  wire xbar_merges_5_routeFrom_EN;

  // register xbar_merges_6_fi0HasPrio
  reg xbar_merges_6_fi0HasPrio;
  reg xbar_merges_6_fi0HasPrio_D_IN;
  wire xbar_merges_6_fi0HasPrio_EN;

  // register xbar_merges_6_routeFrom
  reg [1 : 0] xbar_merges_6_routeFrom;
  wire [1 : 0] xbar_merges_6_routeFrom_D_IN;
  wire xbar_merges_6_routeFrom_EN;

  // register xbar_merges_7_fi0HasPrio
  reg xbar_merges_7_fi0HasPrio;
  reg xbar_merges_7_fi0HasPrio_D_IN;
  wire xbar_merges_7_fi0HasPrio_EN;

  // register xbar_merges_7_routeFrom
  reg [1 : 0] xbar_merges_7_routeFrom;
  wire [1 : 0] xbar_merges_7_routeFrom_D_IN;
  wire xbar_merges_7_routeFrom_EN;

  // register xbar_merges_fi0HasPrio
  reg xbar_merges_fi0HasPrio;
  reg xbar_merges_fi0HasPrio_D_IN;
  wire xbar_merges_fi0HasPrio_EN;

  // register xbar_merges_routeFrom
  reg [1 : 0] xbar_merges_routeFrom;
  wire [1 : 0] xbar_merges_routeFrom_D_IN;
  wire xbar_merges_routeFrom_EN;

  // register xbar_upper_lower_merges_1_fi0HasPrio
  reg xbar_upper_lower_merges_1_fi0HasPrio;
  reg xbar_upper_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_lower_merges_1_fi0HasPrio_EN;

  // register xbar_upper_lower_merges_1_routeFrom
  reg [1 : 0] xbar_upper_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_lower_merges_1_routeFrom_D_IN;
  wire xbar_upper_lower_merges_1_routeFrom_EN;

  // register xbar_upper_lower_merges_fi0HasPrio
  reg xbar_upper_lower_merges_fi0HasPrio;
  reg xbar_upper_lower_merges_fi0HasPrio_D_IN;
  wire xbar_upper_lower_merges_fi0HasPrio_EN;

  // register xbar_upper_lower_merges_routeFrom
  reg [1 : 0] xbar_upper_lower_merges_routeFrom;
  wire [1 : 0] xbar_upper_lower_merges_routeFrom_D_IN;
  wire xbar_upper_lower_merges_routeFrom_EN;

  // register xbar_upper_merges_1_fi0HasPrio
  reg xbar_upper_merges_1_fi0HasPrio;
  reg xbar_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_merges_1_fi0HasPrio_EN;

  // register xbar_upper_merges_1_routeFrom
  reg [1 : 0] xbar_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_merges_1_routeFrom_D_IN;
  wire xbar_upper_merges_1_routeFrom_EN;

  // register xbar_upper_merges_2_fi0HasPrio
  reg xbar_upper_merges_2_fi0HasPrio;
  reg xbar_upper_merges_2_fi0HasPrio_D_IN;
  wire xbar_upper_merges_2_fi0HasPrio_EN;

  // register xbar_upper_merges_2_routeFrom
  reg [1 : 0] xbar_upper_merges_2_routeFrom;
  wire [1 : 0] xbar_upper_merges_2_routeFrom_D_IN;
  wire xbar_upper_merges_2_routeFrom_EN;

  // register xbar_upper_merges_3_fi0HasPrio
  reg xbar_upper_merges_3_fi0HasPrio;
  reg xbar_upper_merges_3_fi0HasPrio_D_IN;
  wire xbar_upper_merges_3_fi0HasPrio_EN;

  // register xbar_upper_merges_3_routeFrom
  reg [1 : 0] xbar_upper_merges_3_routeFrom;
  wire [1 : 0] xbar_upper_merges_3_routeFrom_D_IN;
  wire xbar_upper_merges_3_routeFrom_EN;

  // register xbar_upper_merges_fi0HasPrio
  reg xbar_upper_merges_fi0HasPrio;
  reg xbar_upper_merges_fi0HasPrio_D_IN;
  wire xbar_upper_merges_fi0HasPrio_EN;

  // register xbar_upper_merges_routeFrom
  reg [1 : 0] xbar_upper_merges_routeFrom;
  wire [1 : 0] xbar_upper_merges_routeFrom_D_IN;
  wire xbar_upper_merges_routeFrom_EN;

  // register xbar_upper_upper_merges_1_fi0HasPrio
  reg xbar_upper_upper_merges_1_fi0HasPrio;
  reg xbar_upper_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_upper_merges_1_fi0HasPrio_EN;

  // register xbar_upper_upper_merges_1_routeFrom
  reg [1 : 0] xbar_upper_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_upper_merges_1_routeFrom_D_IN;
  wire xbar_upper_upper_merges_1_routeFrom_EN;

  // register xbar_upper_upper_merges_fi0HasPrio
  reg xbar_upper_upper_merges_fi0HasPrio;
  reg xbar_upper_upper_merges_fi0HasPrio_D_IN;
  wire xbar_upper_upper_merges_fi0HasPrio_EN;

  // register xbar_upper_upper_merges_routeFrom
  reg [1 : 0] xbar_upper_upper_merges_routeFrom;
  wire [1 : 0] xbar_upper_upper_merges_routeFrom_D_IN;
  wire xbar_upper_upper_merges_routeFrom_EN;

  // ports of submodule gearbox_dn_16_0
  wire [321 : 0] gearbox_dn_16_0_datain_put;
  wire [177 : 0] gearbox_dn_16_0_dataout_get;
  wire gearbox_dn_16_0_EN_datain_put,
       gearbox_dn_16_0_EN_dataout_get,
       gearbox_dn_16_0_RDY_datain_put,
       gearbox_dn_16_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_1
  wire [321 : 0] gearbox_dn_16_1_datain_put;
  wire [177 : 0] gearbox_dn_16_1_dataout_get;
  wire gearbox_dn_16_1_EN_datain_put,
       gearbox_dn_16_1_EN_dataout_get,
       gearbox_dn_16_1_RDY_datain_put,
       gearbox_dn_16_1_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_2
  wire [321 : 0] gearbox_dn_16_2_datain_put;
  wire [177 : 0] gearbox_dn_16_2_dataout_get;
  wire gearbox_dn_16_2_EN_datain_put,
       gearbox_dn_16_2_EN_dataout_get,
       gearbox_dn_16_2_RDY_datain_put,
       gearbox_dn_16_2_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_3
  wire [321 : 0] gearbox_dn_16_3_datain_put;
  wire [177 : 0] gearbox_dn_16_3_dataout_get;
  wire gearbox_dn_16_3_EN_datain_put,
       gearbox_dn_16_3_EN_dataout_get,
       gearbox_dn_16_3_RDY_datain_put,
       gearbox_dn_16_3_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_0
  wire [609 : 0] gearbox_dn_32_0_datain_put;
  wire [321 : 0] gearbox_dn_32_0_dataout_get;
  wire gearbox_dn_32_0_EN_datain_put,
       gearbox_dn_32_0_EN_dataout_get,
       gearbox_dn_32_0_RDY_datain_put,
       gearbox_dn_32_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_1
  wire [609 : 0] gearbox_dn_32_1_datain_put;
  wire [321 : 0] gearbox_dn_32_1_dataout_get;
  wire gearbox_dn_32_1_EN_datain_put,
       gearbox_dn_32_1_EN_dataout_get,
       gearbox_dn_32_1_RDY_datain_put,
       gearbox_dn_32_1_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_2
  wire [609 : 0] gearbox_dn_32_2_datain_put;
  wire [321 : 0] gearbox_dn_32_2_dataout_get;
  wire gearbox_dn_32_2_EN_datain_put,
       gearbox_dn_32_2_EN_dataout_get,
       gearbox_dn_32_2_RDY_datain_put,
       gearbox_dn_32_2_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_3
  wire [609 : 0] gearbox_dn_32_3_datain_put;
  wire [321 : 0] gearbox_dn_32_3_dataout_get;
  wire gearbox_dn_32_3_EN_datain_put,
       gearbox_dn_32_3_EN_dataout_get,
       gearbox_dn_32_3_RDY_datain_put,
       gearbox_dn_32_3_RDY_dataout_get;

  // ports of submodule gearbox_up_16_0
  wire [321 : 0] gearbox_up_16_0_dataout_get;
  wire [177 : 0] gearbox_up_16_0_datain_put;
  wire gearbox_up_16_0_EN_datain_put,
       gearbox_up_16_0_EN_dataout_get,
       gearbox_up_16_0_RDY_datain_put,
       gearbox_up_16_0_RDY_dataout_get;

  // ports of submodule gearbox_up_16_1
  wire [321 : 0] gearbox_up_16_1_dataout_get;
  wire [177 : 0] gearbox_up_16_1_datain_put;
  wire gearbox_up_16_1_EN_datain_put,
       gearbox_up_16_1_EN_dataout_get,
       gearbox_up_16_1_RDY_datain_put,
       gearbox_up_16_1_RDY_dataout_get;

  // ports of submodule gearbox_up_16_2
  wire [321 : 0] gearbox_up_16_2_dataout_get;
  wire [177 : 0] gearbox_up_16_2_datain_put;
  wire gearbox_up_16_2_EN_datain_put,
       gearbox_up_16_2_EN_dataout_get,
       gearbox_up_16_2_RDY_datain_put,
       gearbox_up_16_2_RDY_dataout_get;

  // ports of submodule gearbox_up_16_3
  wire [321 : 0] gearbox_up_16_3_dataout_get;
  wire [177 : 0] gearbox_up_16_3_datain_put;
  wire gearbox_up_16_3_EN_datain_put,
       gearbox_up_16_3_EN_dataout_get,
       gearbox_up_16_3_RDY_datain_put,
       gearbox_up_16_3_RDY_dataout_get;

  // ports of submodule gearbox_up_16_4
  wire [321 : 0] gearbox_up_16_4_dataout_get;
  wire [177 : 0] gearbox_up_16_4_datain_put;
  wire gearbox_up_16_4_EN_datain_put,
       gearbox_up_16_4_EN_dataout_get,
       gearbox_up_16_4_RDY_datain_put,
       gearbox_up_16_4_RDY_dataout_get;

  // ports of submodule gearbox_up_32_0
  wire [609 : 0] gearbox_up_32_0_dataout_get;
  wire [321 : 0] gearbox_up_32_0_datain_put;
  wire gearbox_up_32_0_EN_datain_put,
       gearbox_up_32_0_EN_dataout_get,
       gearbox_up_32_0_RDY_datain_put,
       gearbox_up_32_0_RDY_dataout_get;

  // ports of submodule gearbox_up_32_1
  wire [609 : 0] gearbox_up_32_1_dataout_get;
  wire [321 : 0] gearbox_up_32_1_datain_put;
  wire gearbox_up_32_1_EN_datain_put,
       gearbox_up_32_1_EN_dataout_get,
       gearbox_up_32_1_RDY_datain_put,
       gearbox_up_32_1_RDY_dataout_get;

  // ports of submodule gearbox_up_32_2
  wire [609 : 0] gearbox_up_32_2_dataout_get;
  wire [321 : 0] gearbox_up_32_2_datain_put;
  wire gearbox_up_32_2_EN_datain_put,
       gearbox_up_32_2_EN_dataout_get,
       gearbox_up_32_2_RDY_datain_put,
       gearbox_up_32_2_RDY_dataout_get;

  // ports of submodule gearbox_up_32_3
  wire [609 : 0] gearbox_up_32_3_dataout_get;
  wire [321 : 0] gearbox_up_32_3_datain_put;
  wire gearbox_up_32_3_EN_datain_put,
       gearbox_up_32_3_EN_dataout_get,
       gearbox_up_32_3_RDY_datain_put,
       gearbox_up_32_3_RDY_dataout_get;

  // ports of submodule gearbox_up_32_4
  wire [609 : 0] gearbox_up_32_4_dataout_get;
  wire [321 : 0] gearbox_up_32_4_datain_put;
  wire gearbox_up_32_4_EN_datain_put,
       gearbox_up_32_4_EN_dataout_get,
       gearbox_up_32_4_RDY_datain_put,
       gearbox_up_32_4_RDY_dataout_get;

  // ports of submodule hostchan_0_outReqFifo
  wire [1759 : 0] hostchan_0_outReqFifo_D_IN, hostchan_0_outReqFifo_D_OUT;
  wire hostchan_0_outReqFifo_CLR,
       hostchan_0_outReqFifo_DEQ,
       hostchan_0_outReqFifo_EMPTY_N,
       hostchan_0_outReqFifo_ENQ,
       hostchan_0_outReqFifo_FULL_N;

  // ports of submodule hostchan_0_parser
  wire [1738 : 0] hostchan_0_parser_meta_get;
  wire [177 : 0] hostchan_0_parser_frameIn_put;
  wire [31 : 0] hostchan_0_parser_set_verbosity_verbosity;
  wire hostchan_0_parser_EN_frameIn_put,
       hostchan_0_parser_EN_meta_get,
       hostchan_0_parser_EN_set_verbosity,
       hostchan_0_parser_RDY_frameIn_put,
       hostchan_0_parser_RDY_meta_get;

  // ports of submodule hostchan_0_pktBuff
  wire [177 : 0] hostchan_0_pktBuff_readServer_readData_get,
		 hostchan_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_0_pktBuff_readServer_readLen_get,
		hostchan_0_pktBuff_readServer_readReq_put;
  wire hostchan_0_pktBuff_EN_readServer_readData_get,
       hostchan_0_pktBuff_EN_readServer_readLen_get,
       hostchan_0_pktBuff_EN_readServer_readReq_put,
       hostchan_0_pktBuff_EN_set_verbosity,
       hostchan_0_pktBuff_EN_writeServer_enq,
       hostchan_0_pktBuff_RDY_readServer_readData_get,
       hostchan_0_pktBuff_RDY_readServer_readLen_get,
       hostchan_0_pktBuff_RDY_readServer_readReq_put,
       hostchan_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_0_pktLenFifo
  wire [15 : 0] hostchan_0_pktLenFifo_D_IN, hostchan_0_pktLenFifo_D_OUT;
  wire hostchan_0_pktLenFifo_CLR,
       hostchan_0_pktLenFifo_DEQ,
       hostchan_0_pktLenFifo_EMPTY_N,
       hostchan_0_pktLenFifo_ENQ,
       hostchan_0_pktLenFifo_FULL_N;

  // ports of submodule hostchan_0_readDataFifo
  wire [177 : 0] hostchan_0_readDataFifo_D_IN, hostchan_0_readDataFifo_D_OUT;
  wire hostchan_0_readDataFifo_CLR,
       hostchan_0_readDataFifo_DEQ,
       hostchan_0_readDataFifo_EMPTY_N,
       hostchan_0_readDataFifo_ENQ,
       hostchan_0_readDataFifo_FULL_N;

  // ports of submodule hostchan_0_readLenFifo
  wire [15 : 0] hostchan_0_readLenFifo_D_IN, hostchan_0_readLenFifo_D_OUT;
  wire hostchan_0_readLenFifo_CLR,
       hostchan_0_readLenFifo_DEQ,
       hostchan_0_readLenFifo_EMPTY_N,
       hostchan_0_readLenFifo_ENQ,
       hostchan_0_readLenFifo_FULL_N;

  // ports of submodule hostchan_0_readReqFifo
  wire [15 : 0] hostchan_0_readReqFifo_D_IN, hostchan_0_readReqFifo_D_OUT;
  wire hostchan_0_readReqFifo_CLR,
       hostchan_0_readReqFifo_DEQ,
       hostchan_0_readReqFifo_EMPTY_N,
       hostchan_0_readReqFifo_ENQ,
       hostchan_0_readReqFifo_FULL_N;

  // ports of submodule hostchan_0_verbose_ff
  wire [31 : 0] hostchan_0_verbose_ff_D_IN, hostchan_0_verbose_ff_D_OUT;
  wire hostchan_0_verbose_ff_CLR,
       hostchan_0_verbose_ff_DEQ,
       hostchan_0_verbose_ff_EMPTY_N,
       hostchan_0_verbose_ff_ENQ;

  // ports of submodule hostchan_0_writeDataFifo
  wire [177 : 0] hostchan_0_writeDataFifo_D_IN,
		 hostchan_0_writeDataFifo_D_OUT;
  wire hostchan_0_writeDataFifo_CLR,
       hostchan_0_writeDataFifo_DEQ,
       hostchan_0_writeDataFifo_EMPTY_N,
       hostchan_0_writeDataFifo_ENQ,
       hostchan_0_writeDataFifo_FULL_N;

  // ports of submodule hostchan_1_outReqFifo
  wire [1759 : 0] hostchan_1_outReqFifo_D_IN, hostchan_1_outReqFifo_D_OUT;
  wire hostchan_1_outReqFifo_CLR,
       hostchan_1_outReqFifo_DEQ,
       hostchan_1_outReqFifo_EMPTY_N,
       hostchan_1_outReqFifo_ENQ,
       hostchan_1_outReqFifo_FULL_N;

  // ports of submodule hostchan_1_parser
  wire [1738 : 0] hostchan_1_parser_meta_get;
  wire [177 : 0] hostchan_1_parser_frameIn_put;
  wire [31 : 0] hostchan_1_parser_set_verbosity_verbosity;
  wire hostchan_1_parser_EN_frameIn_put,
       hostchan_1_parser_EN_meta_get,
       hostchan_1_parser_EN_set_verbosity,
       hostchan_1_parser_RDY_frameIn_put,
       hostchan_1_parser_RDY_meta_get;

  // ports of submodule hostchan_1_pktBuff
  wire [177 : 0] hostchan_1_pktBuff_readServer_readData_get,
		 hostchan_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_1_pktBuff_readServer_readLen_get,
		hostchan_1_pktBuff_readServer_readReq_put;
  wire hostchan_1_pktBuff_EN_readServer_readData_get,
       hostchan_1_pktBuff_EN_readServer_readLen_get,
       hostchan_1_pktBuff_EN_readServer_readReq_put,
       hostchan_1_pktBuff_EN_set_verbosity,
       hostchan_1_pktBuff_EN_writeServer_enq,
       hostchan_1_pktBuff_RDY_readServer_readData_get,
       hostchan_1_pktBuff_RDY_readServer_readLen_get,
       hostchan_1_pktBuff_RDY_readServer_readReq_put,
       hostchan_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_1_pktLenFifo
  wire [15 : 0] hostchan_1_pktLenFifo_D_IN, hostchan_1_pktLenFifo_D_OUT;
  wire hostchan_1_pktLenFifo_CLR,
       hostchan_1_pktLenFifo_DEQ,
       hostchan_1_pktLenFifo_EMPTY_N,
       hostchan_1_pktLenFifo_ENQ,
       hostchan_1_pktLenFifo_FULL_N;

  // ports of submodule hostchan_1_readDataFifo
  wire [177 : 0] hostchan_1_readDataFifo_D_IN, hostchan_1_readDataFifo_D_OUT;
  wire hostchan_1_readDataFifo_CLR,
       hostchan_1_readDataFifo_DEQ,
       hostchan_1_readDataFifo_EMPTY_N,
       hostchan_1_readDataFifo_ENQ,
       hostchan_1_readDataFifo_FULL_N;

  // ports of submodule hostchan_1_readLenFifo
  wire [15 : 0] hostchan_1_readLenFifo_D_IN, hostchan_1_readLenFifo_D_OUT;
  wire hostchan_1_readLenFifo_CLR,
       hostchan_1_readLenFifo_DEQ,
       hostchan_1_readLenFifo_EMPTY_N,
       hostchan_1_readLenFifo_ENQ,
       hostchan_1_readLenFifo_FULL_N;

  // ports of submodule hostchan_1_readReqFifo
  wire [15 : 0] hostchan_1_readReqFifo_D_IN, hostchan_1_readReqFifo_D_OUT;
  wire hostchan_1_readReqFifo_CLR,
       hostchan_1_readReqFifo_DEQ,
       hostchan_1_readReqFifo_EMPTY_N,
       hostchan_1_readReqFifo_ENQ,
       hostchan_1_readReqFifo_FULL_N;

  // ports of submodule hostchan_1_verbose_ff
  wire [31 : 0] hostchan_1_verbose_ff_D_IN, hostchan_1_verbose_ff_D_OUT;
  wire hostchan_1_verbose_ff_CLR,
       hostchan_1_verbose_ff_DEQ,
       hostchan_1_verbose_ff_EMPTY_N,
       hostchan_1_verbose_ff_ENQ;

  // ports of submodule hostchan_1_writeDataFifo
  wire [177 : 0] hostchan_1_writeDataFifo_D_IN,
		 hostchan_1_writeDataFifo_D_OUT;
  wire hostchan_1_writeDataFifo_CLR,
       hostchan_1_writeDataFifo_DEQ,
       hostchan_1_writeDataFifo_EMPTY_N,
       hostchan_1_writeDataFifo_ENQ,
       hostchan_1_writeDataFifo_FULL_N;

  // ports of submodule hostchan_2_outReqFifo
  wire [1759 : 0] hostchan_2_outReqFifo_D_IN, hostchan_2_outReqFifo_D_OUT;
  wire hostchan_2_outReqFifo_CLR,
       hostchan_2_outReqFifo_DEQ,
       hostchan_2_outReqFifo_EMPTY_N,
       hostchan_2_outReqFifo_ENQ,
       hostchan_2_outReqFifo_FULL_N;

  // ports of submodule hostchan_2_parser
  wire [1738 : 0] hostchan_2_parser_meta_get;
  wire [177 : 0] hostchan_2_parser_frameIn_put;
  wire [31 : 0] hostchan_2_parser_set_verbosity_verbosity;
  wire hostchan_2_parser_EN_frameIn_put,
       hostchan_2_parser_EN_meta_get,
       hostchan_2_parser_EN_set_verbosity,
       hostchan_2_parser_RDY_frameIn_put,
       hostchan_2_parser_RDY_meta_get;

  // ports of submodule hostchan_2_pktBuff
  wire [177 : 0] hostchan_2_pktBuff_readServer_readData_get,
		 hostchan_2_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_2_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_2_pktBuff_readServer_readLen_get,
		hostchan_2_pktBuff_readServer_readReq_put;
  wire hostchan_2_pktBuff_EN_readServer_readData_get,
       hostchan_2_pktBuff_EN_readServer_readLen_get,
       hostchan_2_pktBuff_EN_readServer_readReq_put,
       hostchan_2_pktBuff_EN_set_verbosity,
       hostchan_2_pktBuff_EN_writeServer_enq,
       hostchan_2_pktBuff_RDY_readServer_readData_get,
       hostchan_2_pktBuff_RDY_readServer_readLen_get,
       hostchan_2_pktBuff_RDY_readServer_readReq_put,
       hostchan_2_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_2_pktLenFifo
  wire [15 : 0] hostchan_2_pktLenFifo_D_IN, hostchan_2_pktLenFifo_D_OUT;
  wire hostchan_2_pktLenFifo_CLR,
       hostchan_2_pktLenFifo_DEQ,
       hostchan_2_pktLenFifo_EMPTY_N,
       hostchan_2_pktLenFifo_ENQ,
       hostchan_2_pktLenFifo_FULL_N;

  // ports of submodule hostchan_2_readDataFifo
  wire [177 : 0] hostchan_2_readDataFifo_D_IN, hostchan_2_readDataFifo_D_OUT;
  wire hostchan_2_readDataFifo_CLR,
       hostchan_2_readDataFifo_DEQ,
       hostchan_2_readDataFifo_EMPTY_N,
       hostchan_2_readDataFifo_ENQ,
       hostchan_2_readDataFifo_FULL_N;

  // ports of submodule hostchan_2_readLenFifo
  wire [15 : 0] hostchan_2_readLenFifo_D_IN, hostchan_2_readLenFifo_D_OUT;
  wire hostchan_2_readLenFifo_CLR,
       hostchan_2_readLenFifo_DEQ,
       hostchan_2_readLenFifo_EMPTY_N,
       hostchan_2_readLenFifo_ENQ,
       hostchan_2_readLenFifo_FULL_N;

  // ports of submodule hostchan_2_readReqFifo
  wire [15 : 0] hostchan_2_readReqFifo_D_IN, hostchan_2_readReqFifo_D_OUT;
  wire hostchan_2_readReqFifo_CLR,
       hostchan_2_readReqFifo_DEQ,
       hostchan_2_readReqFifo_EMPTY_N,
       hostchan_2_readReqFifo_ENQ,
       hostchan_2_readReqFifo_FULL_N;

  // ports of submodule hostchan_2_verbose_ff
  wire [31 : 0] hostchan_2_verbose_ff_D_IN, hostchan_2_verbose_ff_D_OUT;
  wire hostchan_2_verbose_ff_CLR,
       hostchan_2_verbose_ff_DEQ,
       hostchan_2_verbose_ff_EMPTY_N,
       hostchan_2_verbose_ff_ENQ;

  // ports of submodule hostchan_2_writeDataFifo
  wire [177 : 0] hostchan_2_writeDataFifo_D_IN,
		 hostchan_2_writeDataFifo_D_OUT;
  wire hostchan_2_writeDataFifo_CLR,
       hostchan_2_writeDataFifo_DEQ,
       hostchan_2_writeDataFifo_EMPTY_N,
       hostchan_2_writeDataFifo_ENQ,
       hostchan_2_writeDataFifo_FULL_N;

  // ports of submodule hostchan_3_outReqFifo
  wire [1759 : 0] hostchan_3_outReqFifo_D_IN, hostchan_3_outReqFifo_D_OUT;
  wire hostchan_3_outReqFifo_CLR,
       hostchan_3_outReqFifo_DEQ,
       hostchan_3_outReqFifo_EMPTY_N,
       hostchan_3_outReqFifo_ENQ,
       hostchan_3_outReqFifo_FULL_N;

  // ports of submodule hostchan_3_parser
  wire [1738 : 0] hostchan_3_parser_meta_get;
  wire [177 : 0] hostchan_3_parser_frameIn_put;
  wire [31 : 0] hostchan_3_parser_set_verbosity_verbosity;
  wire hostchan_3_parser_EN_frameIn_put,
       hostchan_3_parser_EN_meta_get,
       hostchan_3_parser_EN_set_verbosity,
       hostchan_3_parser_RDY_frameIn_put,
       hostchan_3_parser_RDY_meta_get;

  // ports of submodule hostchan_3_pktBuff
  wire [177 : 0] hostchan_3_pktBuff_readServer_readData_get,
		 hostchan_3_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_3_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_3_pktBuff_readServer_readLen_get,
		hostchan_3_pktBuff_readServer_readReq_put;
  wire hostchan_3_pktBuff_EN_readServer_readData_get,
       hostchan_3_pktBuff_EN_readServer_readLen_get,
       hostchan_3_pktBuff_EN_readServer_readReq_put,
       hostchan_3_pktBuff_EN_set_verbosity,
       hostchan_3_pktBuff_EN_writeServer_enq,
       hostchan_3_pktBuff_RDY_readServer_readData_get,
       hostchan_3_pktBuff_RDY_readServer_readLen_get,
       hostchan_3_pktBuff_RDY_readServer_readReq_put,
       hostchan_3_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_3_pktLenFifo
  wire [15 : 0] hostchan_3_pktLenFifo_D_IN, hostchan_3_pktLenFifo_D_OUT;
  wire hostchan_3_pktLenFifo_CLR,
       hostchan_3_pktLenFifo_DEQ,
       hostchan_3_pktLenFifo_EMPTY_N,
       hostchan_3_pktLenFifo_ENQ,
       hostchan_3_pktLenFifo_FULL_N;

  // ports of submodule hostchan_3_readDataFifo
  wire [177 : 0] hostchan_3_readDataFifo_D_IN, hostchan_3_readDataFifo_D_OUT;
  wire hostchan_3_readDataFifo_CLR,
       hostchan_3_readDataFifo_DEQ,
       hostchan_3_readDataFifo_EMPTY_N,
       hostchan_3_readDataFifo_ENQ,
       hostchan_3_readDataFifo_FULL_N;

  // ports of submodule hostchan_3_readLenFifo
  wire [15 : 0] hostchan_3_readLenFifo_D_IN, hostchan_3_readLenFifo_D_OUT;
  wire hostchan_3_readLenFifo_CLR,
       hostchan_3_readLenFifo_DEQ,
       hostchan_3_readLenFifo_EMPTY_N,
       hostchan_3_readLenFifo_ENQ,
       hostchan_3_readLenFifo_FULL_N;

  // ports of submodule hostchan_3_readReqFifo
  wire [15 : 0] hostchan_3_readReqFifo_D_IN, hostchan_3_readReqFifo_D_OUT;
  wire hostchan_3_readReqFifo_CLR,
       hostchan_3_readReqFifo_DEQ,
       hostchan_3_readReqFifo_EMPTY_N,
       hostchan_3_readReqFifo_ENQ,
       hostchan_3_readReqFifo_FULL_N;

  // ports of submodule hostchan_3_verbose_ff
  wire [31 : 0] hostchan_3_verbose_ff_D_IN, hostchan_3_verbose_ff_D_OUT;
  wire hostchan_3_verbose_ff_CLR,
       hostchan_3_verbose_ff_DEQ,
       hostchan_3_verbose_ff_EMPTY_N,
       hostchan_3_verbose_ff_ENQ;

  // ports of submodule hostchan_3_writeDataFifo
  wire [177 : 0] hostchan_3_writeDataFifo_D_IN,
		 hostchan_3_writeDataFifo_D_OUT;
  wire hostchan_3_writeDataFifo_CLR,
       hostchan_3_writeDataFifo_DEQ,
       hostchan_3_writeDataFifo_EMPTY_N,
       hostchan_3_writeDataFifo_ENQ,
       hostchan_3_writeDataFifo_FULL_N;

  // ports of submodule input_queues_0
  wire [609 : 0] input_queues_0_readServer_readData_get,
		 input_queues_0_writeServer_enq_v;
  wire [31 : 0] input_queues_0_set_verbosity_verbosity;
  wire [15 : 0] input_queues_0_readServer_readLen_get,
		input_queues_0_readServer_readReq_put;
  wire input_queues_0_EN_readServer_readData_get,
       input_queues_0_EN_readServer_readLen_get,
       input_queues_0_EN_readServer_readReq_put,
       input_queues_0_EN_set_verbosity,
       input_queues_0_EN_writeServer_enq,
       input_queues_0_RDY_readServer_readData_get,
       input_queues_0_RDY_readServer_readLen_get,
       input_queues_0_RDY_readServer_readReq_put,
       input_queues_0_RDY_writeServer_enq;

  // ports of submodule input_queues_1
  wire [609 : 0] input_queues_1_readServer_readData_get,
		 input_queues_1_writeServer_enq_v;
  wire [31 : 0] input_queues_1_set_verbosity_verbosity;
  wire [15 : 0] input_queues_1_readServer_readLen_get,
		input_queues_1_readServer_readReq_put;
  wire input_queues_1_EN_readServer_readData_get,
       input_queues_1_EN_readServer_readLen_get,
       input_queues_1_EN_readServer_readReq_put,
       input_queues_1_EN_set_verbosity,
       input_queues_1_EN_writeServer_enq,
       input_queues_1_RDY_readServer_readData_get,
       input_queues_1_RDY_readServer_readLen_get,
       input_queues_1_RDY_readServer_readReq_put,
       input_queues_1_RDY_writeServer_enq;

  // ports of submodule input_queues_2
  wire [609 : 0] input_queues_2_readServer_readData_get,
		 input_queues_2_writeServer_enq_v;
  wire [31 : 0] input_queues_2_set_verbosity_verbosity;
  wire [15 : 0] input_queues_2_readServer_readLen_get,
		input_queues_2_readServer_readReq_put;
  wire input_queues_2_EN_readServer_readData_get,
       input_queues_2_EN_readServer_readLen_get,
       input_queues_2_EN_readServer_readReq_put,
       input_queues_2_EN_set_verbosity,
       input_queues_2_EN_writeServer_enq,
       input_queues_2_RDY_readServer_readData_get,
       input_queues_2_RDY_readServer_readLen_get,
       input_queues_2_RDY_readServer_readReq_put,
       input_queues_2_RDY_writeServer_enq;

  // ports of submodule input_queues_3
  wire [609 : 0] input_queues_3_readServer_readData_get,
		 input_queues_3_writeServer_enq_v;
  wire [31 : 0] input_queues_3_set_verbosity_verbosity;
  wire [15 : 0] input_queues_3_readServer_readLen_get,
		input_queues_3_readServer_readReq_put;
  wire input_queues_3_EN_readServer_readData_get,
       input_queues_3_EN_readServer_readLen_get,
       input_queues_3_EN_readServer_readReq_put,
       input_queues_3_EN_set_verbosity,
       input_queues_3_EN_writeServer_enq,
       input_queues_3_RDY_readServer_readData_get,
       input_queues_3_RDY_readServer_readLen_get,
       input_queues_3_RDY_readServer_readReq_put,
       input_queues_3_RDY_writeServer_enq;

  // ports of submodule input_queues_4
  wire [609 : 0] input_queues_4_readServer_readData_get,
		 input_queues_4_writeServer_enq_v;
  wire [31 : 0] input_queues_4_set_verbosity_verbosity;
  wire [15 : 0] input_queues_4_readServer_readLen_get,
		input_queues_4_readServer_readReq_put;
  wire input_queues_4_EN_readServer_readData_get,
       input_queues_4_EN_readServer_readLen_get,
       input_queues_4_EN_readServer_readReq_put,
       input_queues_4_EN_set_verbosity,
       input_queues_4_EN_writeServer_enq,
       input_queues_4_RDY_readServer_readData_get,
       input_queues_4_RDY_readServer_readLen_get,
       input_queues_4_RDY_readServer_readReq_put,
       input_queues_4_RDY_writeServer_enq;

  // ports of submodule localReset
  wire localReset_OUT_RST;

  // ports of submodule macToRing_0_gearbox_in_ff
  wire [105 : 0] macToRing_0_gearbox_in_ff_D_IN,
		 macToRing_0_gearbox_in_ff_D_OUT;
  wire macToRing_0_gearbox_in_ff_CLR,
       macToRing_0_gearbox_in_ff_DEQ,
       macToRing_0_gearbox_in_ff_EMPTY_N,
       macToRing_0_gearbox_in_ff_ENQ,
       macToRing_0_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_0_gearbox_out_ff
  wire [177 : 0] macToRing_0_gearbox_out_ff_D_IN,
		 macToRing_0_gearbox_out_ff_D_OUT;
  wire macToRing_0_gearbox_out_ff_CLR,
       macToRing_0_gearbox_out_ff_DEQ,
       macToRing_0_gearbox_out_ff_EMPTY_N,
       macToRing_0_gearbox_out_ff_ENQ,
       macToRing_0_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_0_writeDataFifo
  wire [177 : 0] macToRing_0_writeDataFifo_dD_OUT,
		 macToRing_0_writeDataFifo_sD_IN;
  wire macToRing_0_writeDataFifo_dDEQ,
       macToRing_0_writeDataFifo_dEMPTY_N,
       macToRing_0_writeDataFifo_sENQ,
       macToRing_0_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_1_gearbox_in_ff
  wire [105 : 0] macToRing_1_gearbox_in_ff_D_IN,
		 macToRing_1_gearbox_in_ff_D_OUT;
  wire macToRing_1_gearbox_in_ff_CLR,
       macToRing_1_gearbox_in_ff_DEQ,
       macToRing_1_gearbox_in_ff_EMPTY_N,
       macToRing_1_gearbox_in_ff_ENQ,
       macToRing_1_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_1_gearbox_out_ff
  wire [177 : 0] macToRing_1_gearbox_out_ff_D_IN,
		 macToRing_1_gearbox_out_ff_D_OUT;
  wire macToRing_1_gearbox_out_ff_CLR,
       macToRing_1_gearbox_out_ff_DEQ,
       macToRing_1_gearbox_out_ff_EMPTY_N,
       macToRing_1_gearbox_out_ff_ENQ,
       macToRing_1_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_1_writeDataFifo
  wire [177 : 0] macToRing_1_writeDataFifo_dD_OUT,
		 macToRing_1_writeDataFifo_sD_IN;
  wire macToRing_1_writeDataFifo_dDEQ,
       macToRing_1_writeDataFifo_dEMPTY_N,
       macToRing_1_writeDataFifo_sENQ,
       macToRing_1_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_2_gearbox_in_ff
  wire [105 : 0] macToRing_2_gearbox_in_ff_D_IN,
		 macToRing_2_gearbox_in_ff_D_OUT;
  wire macToRing_2_gearbox_in_ff_CLR,
       macToRing_2_gearbox_in_ff_DEQ,
       macToRing_2_gearbox_in_ff_EMPTY_N,
       macToRing_2_gearbox_in_ff_ENQ,
       macToRing_2_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_2_gearbox_out_ff
  wire [177 : 0] macToRing_2_gearbox_out_ff_D_IN,
		 macToRing_2_gearbox_out_ff_D_OUT;
  wire macToRing_2_gearbox_out_ff_CLR,
       macToRing_2_gearbox_out_ff_DEQ,
       macToRing_2_gearbox_out_ff_EMPTY_N,
       macToRing_2_gearbox_out_ff_ENQ,
       macToRing_2_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_2_writeDataFifo
  wire [177 : 0] macToRing_2_writeDataFifo_dD_OUT,
		 macToRing_2_writeDataFifo_sD_IN;
  wire macToRing_2_writeDataFifo_dDEQ,
       macToRing_2_writeDataFifo_dEMPTY_N,
       macToRing_2_writeDataFifo_sENQ,
       macToRing_2_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_3_gearbox_in_ff
  wire [105 : 0] macToRing_3_gearbox_in_ff_D_IN,
		 macToRing_3_gearbox_in_ff_D_OUT;
  wire macToRing_3_gearbox_in_ff_CLR,
       macToRing_3_gearbox_in_ff_DEQ,
       macToRing_3_gearbox_in_ff_EMPTY_N,
       macToRing_3_gearbox_in_ff_ENQ,
       macToRing_3_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_3_gearbox_out_ff
  wire [177 : 0] macToRing_3_gearbox_out_ff_D_IN,
		 macToRing_3_gearbox_out_ff_D_OUT;
  wire macToRing_3_gearbox_out_ff_CLR,
       macToRing_3_gearbox_out_ff_DEQ,
       macToRing_3_gearbox_out_ff_EMPTY_N,
       macToRing_3_gearbox_out_ff_ENQ,
       macToRing_3_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_3_writeDataFifo
  wire [177 : 0] macToRing_3_writeDataFifo_dD_OUT,
		 macToRing_3_writeDataFifo_sD_IN;
  wire macToRing_3_writeDataFifo_dDEQ,
       macToRing_3_writeDataFifo_dEMPTY_N,
       macToRing_3_writeDataFifo_sENQ,
       macToRing_3_writeDataFifo_sFULL_N;

  // ports of submodule meta_ff_0
  wire [1759 : 0] meta_ff_0_D_IN, meta_ff_0_D_OUT;
  wire meta_ff_0_CLR,
       meta_ff_0_DEQ,
       meta_ff_0_EMPTY_N,
       meta_ff_0_ENQ,
       meta_ff_0_FULL_N;

  // ports of submodule meta_ff_0_1
  wire [1759 : 0] meta_ff_0_1_D_IN, meta_ff_0_1_D_OUT;
  wire meta_ff_0_1_CLR,
       meta_ff_0_1_DEQ,
       meta_ff_0_1_EMPTY_N,
       meta_ff_0_1_ENQ,
       meta_ff_0_1_FULL_N;

  // ports of submodule meta_ff_1
  wire [1759 : 0] meta_ff_1_D_IN, meta_ff_1_D_OUT;
  wire meta_ff_1_CLR,
       meta_ff_1_DEQ,
       meta_ff_1_EMPTY_N,
       meta_ff_1_ENQ,
       meta_ff_1_FULL_N;

  // ports of submodule meta_ff_1_1
  wire [1759 : 0] meta_ff_1_1_D_IN, meta_ff_1_1_D_OUT;
  wire meta_ff_1_1_CLR,
       meta_ff_1_1_DEQ,
       meta_ff_1_1_EMPTY_N,
       meta_ff_1_1_ENQ,
       meta_ff_1_1_FULL_N;

  // ports of submodule meta_ff_2
  wire [1759 : 0] meta_ff_2_D_IN, meta_ff_2_D_OUT;
  wire meta_ff_2_CLR,
       meta_ff_2_DEQ,
       meta_ff_2_EMPTY_N,
       meta_ff_2_ENQ,
       meta_ff_2_FULL_N;

  // ports of submodule meta_ff_2_1
  wire [1759 : 0] meta_ff_2_1_D_IN, meta_ff_2_1_D_OUT;
  wire meta_ff_2_1_CLR,
       meta_ff_2_1_DEQ,
       meta_ff_2_1_EMPTY_N,
       meta_ff_2_1_ENQ,
       meta_ff_2_1_FULL_N;

  // ports of submodule meta_ff_3
  wire [1759 : 0] meta_ff_3_D_IN, meta_ff_3_D_OUT;
  wire meta_ff_3_CLR,
       meta_ff_3_DEQ,
       meta_ff_3_EMPTY_N,
       meta_ff_3_ENQ,
       meta_ff_3_FULL_N;

  // ports of submodule meta_ff_3_1
  wire [1759 : 0] meta_ff_3_1_D_IN, meta_ff_3_1_D_OUT;
  wire meta_ff_3_1_CLR,
       meta_ff_3_1_DEQ,
       meta_ff_3_1_EMPTY_N,
       meta_ff_3_1_ENQ,
       meta_ff_3_1_FULL_N;

  // ports of submodule meta_ff_4
  wire [1759 : 0] meta_ff_4_D_IN, meta_ff_4_D_OUT;
  wire meta_ff_4_CLR,
       meta_ff_4_DEQ,
       meta_ff_4_EMPTY_N,
       meta_ff_4_ENQ,
       meta_ff_4_FULL_N;

  // ports of submodule meta_ff_4_1
  wire [1759 : 0] meta_ff_4_1_D_IN, meta_ff_4_1_D_OUT;
  wire meta_ff_4_1_CLR,
       meta_ff_4_1_DEQ,
       meta_ff_4_1_EMPTY_N,
       meta_ff_4_1_ENQ,
       meta_ff_4_1_FULL_N;

  // ports of submodule modifier_0
  wire [1759 : 0] modifier_0_prev_enq_v;
  wire [177 : 0] modifier_0_writeClient_first, modifier_0_writeServer_enq_v;
  wire [31 : 0] modifier_0_set_verbosity_verbosity;
  wire modifier_0_EN_prev_enq,
       modifier_0_EN_set_verbosity,
       modifier_0_EN_writeClient_deq,
       modifier_0_EN_writeServer_enq,
       modifier_0_RDY_prev_enq,
       modifier_0_RDY_writeClient_deq,
       modifier_0_RDY_writeClient_first,
       modifier_0_RDY_writeServer_enq;

  // ports of submodule modifier_1
  wire [1759 : 0] modifier_1_prev_enq_v;
  wire [177 : 0] modifier_1_writeClient_first, modifier_1_writeServer_enq_v;
  wire [31 : 0] modifier_1_set_verbosity_verbosity;
  wire modifier_1_EN_prev_enq,
       modifier_1_EN_set_verbosity,
       modifier_1_EN_writeClient_deq,
       modifier_1_EN_writeServer_enq,
       modifier_1_RDY_prev_enq,
       modifier_1_RDY_writeClient_deq,
       modifier_1_RDY_writeClient_first,
       modifier_1_RDY_writeServer_enq;

  // ports of submodule modifier_2
  wire [1759 : 0] modifier_2_prev_enq_v;
  wire [177 : 0] modifier_2_writeClient_first, modifier_2_writeServer_enq_v;
  wire [31 : 0] modifier_2_set_verbosity_verbosity;
  wire modifier_2_EN_prev_enq,
       modifier_2_EN_set_verbosity,
       modifier_2_EN_writeClient_deq,
       modifier_2_EN_writeServer_enq,
       modifier_2_RDY_prev_enq,
       modifier_2_RDY_writeClient_deq,
       modifier_2_RDY_writeClient_first,
       modifier_2_RDY_writeServer_enq;

  // ports of submodule modifier_3
  wire [1759 : 0] modifier_3_prev_enq_v;
  wire [177 : 0] modifier_3_writeClient_first, modifier_3_writeServer_enq_v;
  wire [31 : 0] modifier_3_set_verbosity_verbosity;
  wire modifier_3_EN_prev_enq,
       modifier_3_EN_set_verbosity,
       modifier_3_EN_writeClient_deq,
       modifier_3_EN_writeServer_enq,
       modifier_3_RDY_prev_enq,
       modifier_3_RDY_writeClient_deq,
       modifier_3_RDY_writeClient_first,
       modifier_3_RDY_writeServer_enq;

  // ports of submodule modifier_4
  wire [1759 : 0] modifier_4_prev_enq_v;
  wire [177 : 0] modifier_4_writeClient_first, modifier_4_writeServer_enq_v;
  wire [31 : 0] modifier_4_set_verbosity_verbosity;
  wire modifier_4_EN_prev_enq,
       modifier_4_EN_set_verbosity,
       modifier_4_EN_writeClient_deq,
       modifier_4_EN_writeServer_enq,
       modifier_4_RDY_prev_enq,
       modifier_4_RDY_writeClient_deq,
       modifier_4_RDY_writeClient_first,
       modifier_4_RDY_writeServer_enq;

  // ports of submodule outReqFifo_0
  wire [1759 : 0] outReqFifo_0_D_IN, outReqFifo_0_D_OUT;
  wire outReqFifo_0_CLR,
       outReqFifo_0_DEQ,
       outReqFifo_0_EMPTY_N,
       outReqFifo_0_ENQ,
       outReqFifo_0_FULL_N;

  // ports of submodule output_queues_0
  wire [609 : 0] output_queues_0_readServer_readData_get,
		 output_queues_0_writeServer_enq_v;
  wire [31 : 0] output_queues_0_set_verbosity_verbosity;
  wire [15 : 0] output_queues_0_readServer_readLen_get,
		output_queues_0_readServer_readReq_put;
  wire output_queues_0_EN_readServer_readData_get,
       output_queues_0_EN_readServer_readLen_get,
       output_queues_0_EN_readServer_readReq_put,
       output_queues_0_EN_set_verbosity,
       output_queues_0_EN_writeServer_enq,
       output_queues_0_RDY_readServer_readData_get,
       output_queues_0_RDY_readServer_readLen_get,
       output_queues_0_RDY_readServer_readReq_put,
       output_queues_0_RDY_writeServer_enq;

  // ports of submodule output_queues_1
  wire [609 : 0] output_queues_1_readServer_readData_get,
		 output_queues_1_writeServer_enq_v;
  wire [31 : 0] output_queues_1_set_verbosity_verbosity;
  wire [15 : 0] output_queues_1_readServer_readLen_get,
		output_queues_1_readServer_readReq_put;
  wire output_queues_1_EN_readServer_readData_get,
       output_queues_1_EN_readServer_readLen_get,
       output_queues_1_EN_readServer_readReq_put,
       output_queues_1_EN_set_verbosity,
       output_queues_1_EN_writeServer_enq,
       output_queues_1_RDY_readServer_readData_get,
       output_queues_1_RDY_readServer_readLen_get,
       output_queues_1_RDY_readServer_readReq_put,
       output_queues_1_RDY_writeServer_enq;

  // ports of submodule output_queues_2
  wire [609 : 0] output_queues_2_readServer_readData_get,
		 output_queues_2_writeServer_enq_v;
  wire [31 : 0] output_queues_2_set_verbosity_verbosity;
  wire [15 : 0] output_queues_2_readServer_readLen_get,
		output_queues_2_readServer_readReq_put;
  wire output_queues_2_EN_readServer_readData_get,
       output_queues_2_EN_readServer_readLen_get,
       output_queues_2_EN_readServer_readReq_put,
       output_queues_2_EN_set_verbosity,
       output_queues_2_EN_writeServer_enq,
       output_queues_2_RDY_readServer_readData_get,
       output_queues_2_RDY_readServer_readLen_get,
       output_queues_2_RDY_readServer_readReq_put,
       output_queues_2_RDY_writeServer_enq;

  // ports of submodule output_queues_3
  wire [609 : 0] output_queues_3_readServer_readData_get,
		 output_queues_3_writeServer_enq_v;
  wire [31 : 0] output_queues_3_set_verbosity_verbosity;
  wire [15 : 0] output_queues_3_readServer_readLen_get,
		output_queues_3_readServer_readReq_put;
  wire output_queues_3_EN_readServer_readData_get,
       output_queues_3_EN_readServer_readLen_get,
       output_queues_3_EN_readServer_readReq_put,
       output_queues_3_EN_set_verbosity,
       output_queues_3_EN_writeServer_enq,
       output_queues_3_RDY_readServer_readData_get,
       output_queues_3_RDY_readServer_readLen_get,
       output_queues_3_RDY_readServer_readReq_put,
       output_queues_3_RDY_writeServer_enq;

  // ports of submodule output_queues_4
  wire [609 : 0] output_queues_4_readServer_readData_get,
		 output_queues_4_writeServer_enq_v;
  wire [31 : 0] output_queues_4_set_verbosity_verbosity;
  wire [15 : 0] output_queues_4_readServer_readLen_get,
		output_queues_4_readServer_readReq_put;
  wire output_queues_4_EN_readServer_readData_get,
       output_queues_4_EN_readServer_readLen_get,
       output_queues_4_EN_readServer_readReq_put,
       output_queues_4_EN_set_verbosity,
       output_queues_4_EN_writeServer_enq,
       output_queues_4_RDY_readServer_readData_get,
       output_queues_4_RDY_readServer_readLen_get,
       output_queues_4_RDY_readServer_readReq_put,
       output_queues_4_RDY_writeServer_enq;

  // ports of submodule output_queues_5
  wire [609 : 0] output_queues_5_readServer_readData_get,
		 output_queues_5_writeServer_enq_v;
  wire [31 : 0] output_queues_5_set_verbosity_verbosity;
  wire [15 : 0] output_queues_5_readServer_readLen_get,
		output_queues_5_readServer_readReq_put;
  wire output_queues_5_EN_readServer_readData_get,
       output_queues_5_EN_readServer_readLen_get,
       output_queues_5_EN_readServer_readReq_put,
       output_queues_5_EN_set_verbosity,
       output_queues_5_EN_writeServer_enq,
       output_queues_5_RDY_readServer_readData_get,
       output_queues_5_RDY_readServer_readLen_get,
       output_queues_5_RDY_readServer_readReq_put,
       output_queues_5_RDY_writeServer_enq;

  // ports of submodule output_queues_6
  wire [609 : 0] output_queues_6_readServer_readData_get,
		 output_queues_6_writeServer_enq_v;
  wire [31 : 0] output_queues_6_set_verbosity_verbosity;
  wire [15 : 0] output_queues_6_readServer_readLen_get,
		output_queues_6_readServer_readReq_put;
  wire output_queues_6_EN_readServer_readData_get,
       output_queues_6_EN_readServer_readLen_get,
       output_queues_6_EN_readServer_readReq_put,
       output_queues_6_EN_set_verbosity,
       output_queues_6_EN_writeServer_enq,
       output_queues_6_RDY_readServer_readData_get,
       output_queues_6_RDY_readServer_readLen_get,
       output_queues_6_RDY_readServer_readReq_put,
       output_queues_6_RDY_writeServer_enq;

  // ports of submodule output_queues_7
  wire [609 : 0] output_queues_7_readServer_readData_get,
		 output_queues_7_writeServer_enq_v;
  wire [31 : 0] output_queues_7_set_verbosity_verbosity;
  wire [15 : 0] output_queues_7_readServer_readLen_get,
		output_queues_7_readServer_readReq_put;
  wire output_queues_7_EN_readServer_readData_get,
       output_queues_7_EN_readServer_readLen_get,
       output_queues_7_EN_readServer_readReq_put,
       output_queues_7_EN_set_verbosity,
       output_queues_7_EN_writeServer_enq,
       output_queues_7_RDY_readServer_readData_get,
       output_queues_7_RDY_readServer_readLen_get,
       output_queues_7_RDY_readServer_readReq_put,
       output_queues_7_RDY_writeServer_enq;

  // ports of submodule parser_0
  wire [1738 : 0] parser_0_meta_get;
  wire [177 : 0] parser_0_frameIn_put;
  wire [31 : 0] parser_0_set_verbosity_verbosity;
  wire parser_0_EN_frameIn_put,
       parser_0_EN_meta_get,
       parser_0_EN_set_verbosity,
       parser_0_RDY_frameIn_put,
       parser_0_RDY_meta_get;

  // ports of submodule pktBuff_0
  wire [177 : 0] pktBuff_0_readServer_readData_get,
		 pktBuff_0_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_readServer_readLen_get,
		pktBuff_0_readServer_readReq_put;
  wire pktBuff_0_EN_readServer_readData_get,
       pktBuff_0_EN_readServer_readLen_get,
       pktBuff_0_EN_readServer_readReq_put,
       pktBuff_0_EN_set_verbosity,
       pktBuff_0_EN_writeServer_enq,
       pktBuff_0_RDY_readServer_readData_get,
       pktBuff_0_RDY_readServer_readLen_get,
       pktBuff_0_RDY_readServer_readReq_put,
       pktBuff_0_RDY_writeServer_enq,
       pktBuff_0_writeServer_notFull;

  // ports of submodule pktBuff_0_fifoEop
  wire [15 : 0] pktBuff_0_fifoEop_D_IN, pktBuff_0_fifoEop_D_OUT;
  wire pktBuff_0_fifoEop_CLR,
       pktBuff_0_fifoEop_DEQ,
       pktBuff_0_fifoEop_EMPTY_N,
       pktBuff_0_fifoEop_ENQ,
       pktBuff_0_fifoEop_FULL_N;

  // ports of submodule pktBuff_0_fifoLen
  wire [15 : 0] pktBuff_0_fifoLen_D_IN, pktBuff_0_fifoLen_D_OUT;
  wire pktBuff_0_fifoLen_CLR,
       pktBuff_0_fifoLen_DEQ,
       pktBuff_0_fifoLen_EMPTY_N,
       pktBuff_0_fifoLen_ENQ,
       pktBuff_0_fifoLen_FULL_N;

  // ports of submodule pktBuff_0_fifoReadData
  wire [177 : 0] pktBuff_0_fifoReadData_D_IN, pktBuff_0_fifoReadData_D_OUT;
  wire pktBuff_0_fifoReadData_CLR,
       pktBuff_0_fifoReadData_DEQ,
       pktBuff_0_fifoReadData_EMPTY_N,
       pktBuff_0_fifoReadData_ENQ,
       pktBuff_0_fifoReadData_FULL_N;

  // ports of submodule pktBuff_0_fifoReadReq
  wire [15 : 0] pktBuff_0_fifoReadReq_D_IN;
  wire pktBuff_0_fifoReadReq_CLR,
       pktBuff_0_fifoReadReq_DEQ,
       pktBuff_0_fifoReadReq_EMPTY_N,
       pktBuff_0_fifoReadReq_ENQ,
       pktBuff_0_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_0_fifoWriteData
  wire [177 : 0] pktBuff_0_fifoWriteData_D_IN, pktBuff_0_fifoWriteData_D_OUT;
  wire pktBuff_0_fifoWriteData_CLR,
       pktBuff_0_fifoWriteData_DEQ,
       pktBuff_0_fifoWriteData_EMPTY_N,
       pktBuff_0_fifoWriteData_ENQ,
       pktBuff_0_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_0_incomingReqs
  wire [185 : 0] pktBuff_0_incomingReqs_D_IN, pktBuff_0_incomingReqs_D_OUT;
  wire pktBuff_0_incomingReqs_CLR,
       pktBuff_0_incomingReqs_DEQ,
       pktBuff_0_incomingReqs_EMPTY_N,
       pktBuff_0_incomingReqs_ENQ,
       pktBuff_0_incomingReqs_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_memory
  wire [177 : 0] pktBuff_0_memBuffer_memory_DIA,
		 pktBuff_0_memBuffer_memory_DIB,
		 pktBuff_0_memBuffer_memory_DOA,
		 pktBuff_0_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_0_memBuffer_memory_ADDRA,
	       pktBuff_0_memBuffer_memory_ADDRB;
  wire pktBuff_0_memBuffer_memory_ENA,
       pktBuff_0_memBuffer_memory_ENB,
       pktBuff_0_memBuffer_memory_WEA,
       pktBuff_0_memBuffer_memory_WEB;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_meta_ff
  wire [1759 : 0] pktBuff_0_meta_ff_D_IN;
  wire pktBuff_0_meta_ff_CLR,
       pktBuff_0_meta_ff_DEQ,
       pktBuff_0_meta_ff_EMPTY_N,
       pktBuff_0_meta_ff_ENQ,
       pktBuff_0_meta_ff_FULL_N;

  // ports of submodule pktBuff_0_pktBuff
  wire [177 : 0] pktBuff_0_pktBuff_readServer_readData_get,
		 pktBuff_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_pktBuff_readServer_readLen_get,
		pktBuff_0_pktBuff_readServer_readReq_put;
  wire pktBuff_0_pktBuff_EN_readServer_readData_get,
       pktBuff_0_pktBuff_EN_readServer_readLen_get,
       pktBuff_0_pktBuff_EN_readServer_readReq_put,
       pktBuff_0_pktBuff_EN_set_verbosity,
       pktBuff_0_pktBuff_EN_writeServer_enq,
       pktBuff_0_pktBuff_RDY_readServer_readData_get,
       pktBuff_0_pktBuff_RDY_readServer_readLen_get,
       pktBuff_0_pktBuff_RDY_readServer_readReq_put,
       pktBuff_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_0_readDataFifo
  wire [177 : 0] pktBuff_0_readDataFifo_D_IN, pktBuff_0_readDataFifo_D_OUT;
  wire pktBuff_0_readDataFifo_CLR,
       pktBuff_0_readDataFifo_DEQ,
       pktBuff_0_readDataFifo_EMPTY_N,
       pktBuff_0_readDataFifo_ENQ,
       pktBuff_0_readDataFifo_FULL_N;

  // ports of submodule pktBuff_0_readLenFifo
  wire [15 : 0] pktBuff_0_readLenFifo_D_IN, pktBuff_0_readLenFifo_D_OUT;
  wire pktBuff_0_readLenFifo_CLR,
       pktBuff_0_readLenFifo_DEQ,
       pktBuff_0_readLenFifo_EMPTY_N,
       pktBuff_0_readLenFifo_ENQ,
       pktBuff_0_readLenFifo_FULL_N;

  // ports of submodule pktBuff_0_readReqFifo
  wire [15 : 0] pktBuff_0_readReqFifo_D_IN, pktBuff_0_readReqFifo_D_OUT;
  wire pktBuff_0_readReqFifo_CLR,
       pktBuff_0_readReqFifo_DEQ,
       pktBuff_0_readReqFifo_EMPTY_N,
       pktBuff_0_readReqFifo_ENQ,
       pktBuff_0_readReqFifo_FULL_N;

  // ports of submodule pktBuff_0_writeDataFifo
  wire [177 : 0] pktBuff_0_writeDataFifo_D_IN, pktBuff_0_writeDataFifo_D_OUT;
  wire pktBuff_0_writeDataFifo_CLR,
       pktBuff_0_writeDataFifo_DEQ,
       pktBuff_0_writeDataFifo_EMPTY_N,
       pktBuff_0_writeDataFifo_ENQ,
       pktBuff_0_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_1_fifoEop
  wire [15 : 0] pktBuff_1_fifoEop_D_IN, pktBuff_1_fifoEop_D_OUT;
  wire pktBuff_1_fifoEop_CLR,
       pktBuff_1_fifoEop_DEQ,
       pktBuff_1_fifoEop_EMPTY_N,
       pktBuff_1_fifoEop_ENQ,
       pktBuff_1_fifoEop_FULL_N;

  // ports of submodule pktBuff_1_fifoLen
  wire [15 : 0] pktBuff_1_fifoLen_D_IN, pktBuff_1_fifoLen_D_OUT;
  wire pktBuff_1_fifoLen_CLR,
       pktBuff_1_fifoLen_DEQ,
       pktBuff_1_fifoLen_EMPTY_N,
       pktBuff_1_fifoLen_ENQ,
       pktBuff_1_fifoLen_FULL_N;

  // ports of submodule pktBuff_1_fifoReadData
  wire [177 : 0] pktBuff_1_fifoReadData_D_IN, pktBuff_1_fifoReadData_D_OUT;
  wire pktBuff_1_fifoReadData_CLR,
       pktBuff_1_fifoReadData_DEQ,
       pktBuff_1_fifoReadData_EMPTY_N,
       pktBuff_1_fifoReadData_ENQ,
       pktBuff_1_fifoReadData_FULL_N;

  // ports of submodule pktBuff_1_fifoReadReq
  wire [15 : 0] pktBuff_1_fifoReadReq_D_IN;
  wire pktBuff_1_fifoReadReq_CLR,
       pktBuff_1_fifoReadReq_DEQ,
       pktBuff_1_fifoReadReq_EMPTY_N,
       pktBuff_1_fifoReadReq_ENQ,
       pktBuff_1_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_1_fifoWriteData
  wire [177 : 0] pktBuff_1_fifoWriteData_D_IN, pktBuff_1_fifoWriteData_D_OUT;
  wire pktBuff_1_fifoWriteData_CLR,
       pktBuff_1_fifoWriteData_DEQ,
       pktBuff_1_fifoWriteData_EMPTY_N,
       pktBuff_1_fifoWriteData_ENQ,
       pktBuff_1_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_1_incomingReqs
  wire [185 : 0] pktBuff_1_incomingReqs_D_IN, pktBuff_1_incomingReqs_D_OUT;
  wire pktBuff_1_incomingReqs_CLR,
       pktBuff_1_incomingReqs_DEQ,
       pktBuff_1_incomingReqs_EMPTY_N,
       pktBuff_1_incomingReqs_ENQ,
       pktBuff_1_incomingReqs_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_memory
  wire [177 : 0] pktBuff_1_memBuffer_memory_DIA,
		 pktBuff_1_memBuffer_memory_DIB,
		 pktBuff_1_memBuffer_memory_DOA,
		 pktBuff_1_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_1_memBuffer_memory_ADDRA,
	       pktBuff_1_memBuffer_memory_ADDRB;
  wire pktBuff_1_memBuffer_memory_ENA,
       pktBuff_1_memBuffer_memory_ENB,
       pktBuff_1_memBuffer_memory_WEA,
       pktBuff_1_memBuffer_memory_WEB;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_meta_ff
  wire [1759 : 0] pktBuff_1_meta_ff_D_IN;
  wire pktBuff_1_meta_ff_CLR,
       pktBuff_1_meta_ff_DEQ,
       pktBuff_1_meta_ff_EMPTY_N,
       pktBuff_1_meta_ff_ENQ,
       pktBuff_1_meta_ff_FULL_N;

  // ports of submodule pktBuff_1_pktBuff
  wire [177 : 0] pktBuff_1_pktBuff_readServer_readData_get,
		 pktBuff_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_1_pktBuff_readServer_readLen_get,
		pktBuff_1_pktBuff_readServer_readReq_put;
  wire pktBuff_1_pktBuff_EN_readServer_readData_get,
       pktBuff_1_pktBuff_EN_readServer_readLen_get,
       pktBuff_1_pktBuff_EN_readServer_readReq_put,
       pktBuff_1_pktBuff_EN_set_verbosity,
       pktBuff_1_pktBuff_EN_writeServer_enq,
       pktBuff_1_pktBuff_RDY_readServer_readData_get,
       pktBuff_1_pktBuff_RDY_readServer_readLen_get,
       pktBuff_1_pktBuff_RDY_readServer_readReq_put,
       pktBuff_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_1_readDataFifo
  wire [177 : 0] pktBuff_1_readDataFifo_D_IN, pktBuff_1_readDataFifo_D_OUT;
  wire pktBuff_1_readDataFifo_CLR,
       pktBuff_1_readDataFifo_DEQ,
       pktBuff_1_readDataFifo_EMPTY_N,
       pktBuff_1_readDataFifo_ENQ,
       pktBuff_1_readDataFifo_FULL_N;

  // ports of submodule pktBuff_1_readLenFifo
  wire [15 : 0] pktBuff_1_readLenFifo_D_IN, pktBuff_1_readLenFifo_D_OUT;
  wire pktBuff_1_readLenFifo_CLR,
       pktBuff_1_readLenFifo_DEQ,
       pktBuff_1_readLenFifo_EMPTY_N,
       pktBuff_1_readLenFifo_ENQ,
       pktBuff_1_readLenFifo_FULL_N;

  // ports of submodule pktBuff_1_readReqFifo
  wire [15 : 0] pktBuff_1_readReqFifo_D_IN, pktBuff_1_readReqFifo_D_OUT;
  wire pktBuff_1_readReqFifo_CLR,
       pktBuff_1_readReqFifo_DEQ,
       pktBuff_1_readReqFifo_EMPTY_N,
       pktBuff_1_readReqFifo_ENQ,
       pktBuff_1_readReqFifo_FULL_N;

  // ports of submodule pktBuff_1_writeDataFifo
  wire [177 : 0] pktBuff_1_writeDataFifo_D_IN, pktBuff_1_writeDataFifo_D_OUT;
  wire pktBuff_1_writeDataFifo_CLR,
       pktBuff_1_writeDataFifo_DEQ,
       pktBuff_1_writeDataFifo_EMPTY_N,
       pktBuff_1_writeDataFifo_ENQ,
       pktBuff_1_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_2_fifoEop
  wire [15 : 0] pktBuff_2_fifoEop_D_IN, pktBuff_2_fifoEop_D_OUT;
  wire pktBuff_2_fifoEop_CLR,
       pktBuff_2_fifoEop_DEQ,
       pktBuff_2_fifoEop_EMPTY_N,
       pktBuff_2_fifoEop_ENQ,
       pktBuff_2_fifoEop_FULL_N;

  // ports of submodule pktBuff_2_fifoLen
  wire [15 : 0] pktBuff_2_fifoLen_D_IN, pktBuff_2_fifoLen_D_OUT;
  wire pktBuff_2_fifoLen_CLR,
       pktBuff_2_fifoLen_DEQ,
       pktBuff_2_fifoLen_EMPTY_N,
       pktBuff_2_fifoLen_ENQ,
       pktBuff_2_fifoLen_FULL_N;

  // ports of submodule pktBuff_2_fifoReadData
  wire [177 : 0] pktBuff_2_fifoReadData_D_IN, pktBuff_2_fifoReadData_D_OUT;
  wire pktBuff_2_fifoReadData_CLR,
       pktBuff_2_fifoReadData_DEQ,
       pktBuff_2_fifoReadData_EMPTY_N,
       pktBuff_2_fifoReadData_ENQ,
       pktBuff_2_fifoReadData_FULL_N;

  // ports of submodule pktBuff_2_fifoReadReq
  wire [15 : 0] pktBuff_2_fifoReadReq_D_IN;
  wire pktBuff_2_fifoReadReq_CLR,
       pktBuff_2_fifoReadReq_DEQ,
       pktBuff_2_fifoReadReq_EMPTY_N,
       pktBuff_2_fifoReadReq_ENQ,
       pktBuff_2_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_2_fifoWriteData
  wire [177 : 0] pktBuff_2_fifoWriteData_D_IN, pktBuff_2_fifoWriteData_D_OUT;
  wire pktBuff_2_fifoWriteData_CLR,
       pktBuff_2_fifoWriteData_DEQ,
       pktBuff_2_fifoWriteData_EMPTY_N,
       pktBuff_2_fifoWriteData_ENQ,
       pktBuff_2_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_2_incomingReqs
  wire [185 : 0] pktBuff_2_incomingReqs_D_IN, pktBuff_2_incomingReqs_D_OUT;
  wire pktBuff_2_incomingReqs_CLR,
       pktBuff_2_incomingReqs_DEQ,
       pktBuff_2_incomingReqs_EMPTY_N,
       pktBuff_2_incomingReqs_ENQ,
       pktBuff_2_incomingReqs_FULL_N;

  // ports of submodule pktBuff_2_memBuffer_memory
  wire [177 : 0] pktBuff_2_memBuffer_memory_DIA,
		 pktBuff_2_memBuffer_memory_DIB,
		 pktBuff_2_memBuffer_memory_DOA,
		 pktBuff_2_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_2_memBuffer_memory_ADDRA,
	       pktBuff_2_memBuffer_memory_ADDRB;
  wire pktBuff_2_memBuffer_memory_ENA,
       pktBuff_2_memBuffer_memory_ENB,
       pktBuff_2_memBuffer_memory_WEA,
       pktBuff_2_memBuffer_memory_WEB;

  // ports of submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_2_meta_ff
  wire [1759 : 0] pktBuff_2_meta_ff_D_IN;
  wire pktBuff_2_meta_ff_CLR,
       pktBuff_2_meta_ff_DEQ,
       pktBuff_2_meta_ff_EMPTY_N,
       pktBuff_2_meta_ff_ENQ,
       pktBuff_2_meta_ff_FULL_N;

  // ports of submodule pktBuff_2_pktBuff
  wire [177 : 0] pktBuff_2_pktBuff_readServer_readData_get,
		 pktBuff_2_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_2_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_2_pktBuff_readServer_readLen_get,
		pktBuff_2_pktBuff_readServer_readReq_put;
  wire pktBuff_2_pktBuff_EN_readServer_readData_get,
       pktBuff_2_pktBuff_EN_readServer_readLen_get,
       pktBuff_2_pktBuff_EN_readServer_readReq_put,
       pktBuff_2_pktBuff_EN_set_verbosity,
       pktBuff_2_pktBuff_EN_writeServer_enq,
       pktBuff_2_pktBuff_RDY_readServer_readData_get,
       pktBuff_2_pktBuff_RDY_readServer_readLen_get,
       pktBuff_2_pktBuff_RDY_readServer_readReq_put,
       pktBuff_2_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_2_readDataFifo
  wire [177 : 0] pktBuff_2_readDataFifo_D_IN, pktBuff_2_readDataFifo_D_OUT;
  wire pktBuff_2_readDataFifo_CLR,
       pktBuff_2_readDataFifo_DEQ,
       pktBuff_2_readDataFifo_EMPTY_N,
       pktBuff_2_readDataFifo_ENQ,
       pktBuff_2_readDataFifo_FULL_N;

  // ports of submodule pktBuff_2_readLenFifo
  wire [15 : 0] pktBuff_2_readLenFifo_D_IN, pktBuff_2_readLenFifo_D_OUT;
  wire pktBuff_2_readLenFifo_CLR,
       pktBuff_2_readLenFifo_DEQ,
       pktBuff_2_readLenFifo_EMPTY_N,
       pktBuff_2_readLenFifo_ENQ,
       pktBuff_2_readLenFifo_FULL_N;

  // ports of submodule pktBuff_2_readReqFifo
  wire [15 : 0] pktBuff_2_readReqFifo_D_IN, pktBuff_2_readReqFifo_D_OUT;
  wire pktBuff_2_readReqFifo_CLR,
       pktBuff_2_readReqFifo_DEQ,
       pktBuff_2_readReqFifo_EMPTY_N,
       pktBuff_2_readReqFifo_ENQ,
       pktBuff_2_readReqFifo_FULL_N;

  // ports of submodule pktBuff_2_writeDataFifo
  wire [177 : 0] pktBuff_2_writeDataFifo_D_IN, pktBuff_2_writeDataFifo_D_OUT;
  wire pktBuff_2_writeDataFifo_CLR,
       pktBuff_2_writeDataFifo_DEQ,
       pktBuff_2_writeDataFifo_EMPTY_N,
       pktBuff_2_writeDataFifo_ENQ,
       pktBuff_2_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_3_fifoEop
  wire [15 : 0] pktBuff_3_fifoEop_D_IN, pktBuff_3_fifoEop_D_OUT;
  wire pktBuff_3_fifoEop_CLR,
       pktBuff_3_fifoEop_DEQ,
       pktBuff_3_fifoEop_EMPTY_N,
       pktBuff_3_fifoEop_ENQ,
       pktBuff_3_fifoEop_FULL_N;

  // ports of submodule pktBuff_3_fifoLen
  wire [15 : 0] pktBuff_3_fifoLen_D_IN, pktBuff_3_fifoLen_D_OUT;
  wire pktBuff_3_fifoLen_CLR,
       pktBuff_3_fifoLen_DEQ,
       pktBuff_3_fifoLen_EMPTY_N,
       pktBuff_3_fifoLen_ENQ,
       pktBuff_3_fifoLen_FULL_N;

  // ports of submodule pktBuff_3_fifoReadData
  wire [177 : 0] pktBuff_3_fifoReadData_D_IN, pktBuff_3_fifoReadData_D_OUT;
  wire pktBuff_3_fifoReadData_CLR,
       pktBuff_3_fifoReadData_DEQ,
       pktBuff_3_fifoReadData_EMPTY_N,
       pktBuff_3_fifoReadData_ENQ,
       pktBuff_3_fifoReadData_FULL_N;

  // ports of submodule pktBuff_3_fifoReadReq
  wire [15 : 0] pktBuff_3_fifoReadReq_D_IN;
  wire pktBuff_3_fifoReadReq_CLR,
       pktBuff_3_fifoReadReq_DEQ,
       pktBuff_3_fifoReadReq_EMPTY_N,
       pktBuff_3_fifoReadReq_ENQ,
       pktBuff_3_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_3_fifoWriteData
  wire [177 : 0] pktBuff_3_fifoWriteData_D_IN, pktBuff_3_fifoWriteData_D_OUT;
  wire pktBuff_3_fifoWriteData_CLR,
       pktBuff_3_fifoWriteData_DEQ,
       pktBuff_3_fifoWriteData_EMPTY_N,
       pktBuff_3_fifoWriteData_ENQ,
       pktBuff_3_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_3_incomingReqs
  wire [185 : 0] pktBuff_3_incomingReqs_D_IN, pktBuff_3_incomingReqs_D_OUT;
  wire pktBuff_3_incomingReqs_CLR,
       pktBuff_3_incomingReqs_DEQ,
       pktBuff_3_incomingReqs_EMPTY_N,
       pktBuff_3_incomingReqs_ENQ,
       pktBuff_3_incomingReqs_FULL_N;

  // ports of submodule pktBuff_3_memBuffer_memory
  wire [177 : 0] pktBuff_3_memBuffer_memory_DIA,
		 pktBuff_3_memBuffer_memory_DIB,
		 pktBuff_3_memBuffer_memory_DOA,
		 pktBuff_3_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_3_memBuffer_memory_ADDRA,
	       pktBuff_3_memBuffer_memory_ADDRB;
  wire pktBuff_3_memBuffer_memory_ENA,
       pktBuff_3_memBuffer_memory_ENB,
       pktBuff_3_memBuffer_memory_WEA,
       pktBuff_3_memBuffer_memory_WEB;

  // ports of submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_3_meta_ff
  wire [1759 : 0] pktBuff_3_meta_ff_D_IN;
  wire pktBuff_3_meta_ff_CLR,
       pktBuff_3_meta_ff_DEQ,
       pktBuff_3_meta_ff_EMPTY_N,
       pktBuff_3_meta_ff_ENQ,
       pktBuff_3_meta_ff_FULL_N;

  // ports of submodule pktBuff_3_pktBuff
  wire [177 : 0] pktBuff_3_pktBuff_readServer_readData_get,
		 pktBuff_3_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_3_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_3_pktBuff_readServer_readLen_get,
		pktBuff_3_pktBuff_readServer_readReq_put;
  wire pktBuff_3_pktBuff_EN_readServer_readData_get,
       pktBuff_3_pktBuff_EN_readServer_readLen_get,
       pktBuff_3_pktBuff_EN_readServer_readReq_put,
       pktBuff_3_pktBuff_EN_set_verbosity,
       pktBuff_3_pktBuff_EN_writeServer_enq,
       pktBuff_3_pktBuff_RDY_readServer_readData_get,
       pktBuff_3_pktBuff_RDY_readServer_readLen_get,
       pktBuff_3_pktBuff_RDY_readServer_readReq_put,
       pktBuff_3_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_3_readDataFifo
  wire [177 : 0] pktBuff_3_readDataFifo_D_IN, pktBuff_3_readDataFifo_D_OUT;
  wire pktBuff_3_readDataFifo_CLR,
       pktBuff_3_readDataFifo_DEQ,
       pktBuff_3_readDataFifo_EMPTY_N,
       pktBuff_3_readDataFifo_ENQ,
       pktBuff_3_readDataFifo_FULL_N;

  // ports of submodule pktBuff_3_readLenFifo
  wire [15 : 0] pktBuff_3_readLenFifo_D_IN, pktBuff_3_readLenFifo_D_OUT;
  wire pktBuff_3_readLenFifo_CLR,
       pktBuff_3_readLenFifo_DEQ,
       pktBuff_3_readLenFifo_EMPTY_N,
       pktBuff_3_readLenFifo_ENQ,
       pktBuff_3_readLenFifo_FULL_N;

  // ports of submodule pktBuff_3_readReqFifo
  wire [15 : 0] pktBuff_3_readReqFifo_D_IN, pktBuff_3_readReqFifo_D_OUT;
  wire pktBuff_3_readReqFifo_CLR,
       pktBuff_3_readReqFifo_DEQ,
       pktBuff_3_readReqFifo_EMPTY_N,
       pktBuff_3_readReqFifo_ENQ,
       pktBuff_3_readReqFifo_FULL_N;

  // ports of submodule pktBuff_3_writeDataFifo
  wire [177 : 0] pktBuff_3_writeDataFifo_D_IN, pktBuff_3_writeDataFifo_D_OUT;
  wire pktBuff_3_writeDataFifo_CLR,
       pktBuff_3_writeDataFifo_DEQ,
       pktBuff_3_writeDataFifo_EMPTY_N,
       pktBuff_3_writeDataFifo_ENQ,
       pktBuff_3_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_4_meta_ff
  wire [1759 : 0] pktBuff_4_meta_ff_D_IN;
  wire pktBuff_4_meta_ff_CLR,
       pktBuff_4_meta_ff_DEQ,
       pktBuff_4_meta_ff_EMPTY_N,
       pktBuff_4_meta_ff_ENQ,
       pktBuff_4_meta_ff_FULL_N;

  // ports of submodule pktBuff_4_pktBuff
  wire [177 : 0] pktBuff_4_pktBuff_readServer_readData_get,
		 pktBuff_4_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_4_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_4_pktBuff_readServer_readLen_get,
		pktBuff_4_pktBuff_readServer_readReq_put;
  wire pktBuff_4_pktBuff_EN_readServer_readData_get,
       pktBuff_4_pktBuff_EN_readServer_readLen_get,
       pktBuff_4_pktBuff_EN_readServer_readReq_put,
       pktBuff_4_pktBuff_EN_set_verbosity,
       pktBuff_4_pktBuff_EN_writeServer_enq,
       pktBuff_4_pktBuff_RDY_readServer_readData_get,
       pktBuff_4_pktBuff_RDY_readServer_readLen_get,
       pktBuff_4_pktBuff_RDY_readServer_readReq_put,
       pktBuff_4_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_4_readDataFifo
  wire [177 : 0] pktBuff_4_readDataFifo_D_IN, pktBuff_4_readDataFifo_D_OUT;
  wire pktBuff_4_readDataFifo_CLR,
       pktBuff_4_readDataFifo_DEQ,
       pktBuff_4_readDataFifo_EMPTY_N,
       pktBuff_4_readDataFifo_ENQ,
       pktBuff_4_readDataFifo_FULL_N;

  // ports of submodule pktBuff_4_readLenFifo
  wire [15 : 0] pktBuff_4_readLenFifo_D_IN, pktBuff_4_readLenFifo_D_OUT;
  wire pktBuff_4_readLenFifo_CLR,
       pktBuff_4_readLenFifo_DEQ,
       pktBuff_4_readLenFifo_EMPTY_N,
       pktBuff_4_readLenFifo_ENQ,
       pktBuff_4_readLenFifo_FULL_N;

  // ports of submodule pktBuff_4_readReqFifo
  wire [15 : 0] pktBuff_4_readReqFifo_D_IN, pktBuff_4_readReqFifo_D_OUT;
  wire pktBuff_4_readReqFifo_CLR,
       pktBuff_4_readReqFifo_DEQ,
       pktBuff_4_readReqFifo_EMPTY_N,
       pktBuff_4_readReqFifo_ENQ,
       pktBuff_4_readReqFifo_FULL_N;

  // ports of submodule pktBuff_4_writeDataFifo
  wire [177 : 0] pktBuff_4_writeDataFifo_D_IN, pktBuff_4_writeDataFifo_D_OUT;
  wire pktBuff_4_writeDataFifo_CLR,
       pktBuff_4_writeDataFifo_DEQ,
       pktBuff_4_writeDataFifo_EMPTY_N,
       pktBuff_4_writeDataFifo_ENQ,
       pktBuff_4_writeDataFifo_FULL_N;

  // ports of submodule pktLenFifo_0
  wire [15 : 0] pktLenFifo_0_D_IN, pktLenFifo_0_D_OUT;
  wire pktLenFifo_0_CLR,
       pktLenFifo_0_DEQ,
       pktLenFifo_0_EMPTY_N,
       pktLenFifo_0_ENQ,
       pktLenFifo_0_FULL_N;

  // ports of submodule readDataFifo_0
  wire [177 : 0] readDataFifo_0_D_IN, readDataFifo_0_D_OUT;
  wire readDataFifo_0_CLR,
       readDataFifo_0_DEQ,
       readDataFifo_0_EMPTY_N,
       readDataFifo_0_ENQ,
       readDataFifo_0_FULL_N;

  // ports of submodule readLenFifo_0
  wire [15 : 0] readLenFifo_0_D_IN, readLenFifo_0_D_OUT;
  wire readLenFifo_0_CLR,
       readLenFifo_0_DEQ,
       readLenFifo_0_EMPTY_N,
       readLenFifo_0_ENQ,
       readLenFifo_0_FULL_N;

  // ports of submodule readReqFifo_0
  wire [15 : 0] readReqFifo_0_D_IN, readReqFifo_0_D_OUT;
  wire readReqFifo_0_CLR,
       readReqFifo_0_DEQ,
       readReqFifo_0_EMPTY_N,
       readReqFifo_0_ENQ,
       readReqFifo_0_FULL_N;

  // ports of submodule ringToMac_0_fifoTxData_dCombinedReset
  wire ringToMac_0_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_dCrossedsReset
  wire ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_0_fifoTxData_sCombinedReset
  wire ringToMac_0_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_sCrosseddReset
  wire ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_0_readDataFifo
  wire [177 : 0] ringToMac_0_readDataFifo_D_IN,
		 ringToMac_0_readDataFifo_D_OUT;
  wire ringToMac_0_readDataFifo_CLR,
       ringToMac_0_readDataFifo_DEQ,
       ringToMac_0_readDataFifo_EMPTY_N,
       ringToMac_0_readDataFifo_ENQ,
       ringToMac_0_readDataFifo_FULL_N;

  // ports of submodule ringToMac_0_readLenFifo
  wire [15 : 0] ringToMac_0_readLenFifo_D_IN, ringToMac_0_readLenFifo_D_OUT;
  wire ringToMac_0_readLenFifo_CLR,
       ringToMac_0_readLenFifo_DEQ,
       ringToMac_0_readLenFifo_EMPTY_N,
       ringToMac_0_readLenFifo_ENQ,
       ringToMac_0_readLenFifo_FULL_N;

  // ports of submodule ringToMac_0_readReqFifo
  wire [15 : 0] ringToMac_0_readReqFifo_D_IN, ringToMac_0_readReqFifo_D_OUT;
  wire ringToMac_0_readReqFifo_CLR,
       ringToMac_0_readReqFifo_DEQ,
       ringToMac_0_readReqFifo_EMPTY_N,
       ringToMac_0_readReqFifo_ENQ,
       ringToMac_0_readReqFifo_FULL_N;

  // ports of submodule ringToMac_0_tx_fifo
  wire [177 : 0] ringToMac_0_tx_fifo_dD_OUT, ringToMac_0_tx_fifo_sD_IN;
  wire ringToMac_0_tx_fifo_dDEQ,
       ringToMac_0_tx_fifo_dEMPTY_N,
       ringToMac_0_tx_fifo_sENQ,
       ringToMac_0_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_0_writeMacFifo
  wire [105 : 0] ringToMac_0_writeMacFifo_D_IN,
		 ringToMac_0_writeMacFifo_D_OUT;
  wire ringToMac_0_writeMacFifo_CLR,
       ringToMac_0_writeMacFifo_DEQ,
       ringToMac_0_writeMacFifo_EMPTY_N,
       ringToMac_0_writeMacFifo_ENQ,
       ringToMac_0_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_1_fifoTxData_dCombinedReset
  wire ringToMac_1_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_dCrossedsReset
  wire ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_1_fifoTxData_sCombinedReset
  wire ringToMac_1_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_sCrosseddReset
  wire ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_1_readDataFifo
  wire [177 : 0] ringToMac_1_readDataFifo_D_IN,
		 ringToMac_1_readDataFifo_D_OUT;
  wire ringToMac_1_readDataFifo_CLR,
       ringToMac_1_readDataFifo_DEQ,
       ringToMac_1_readDataFifo_EMPTY_N,
       ringToMac_1_readDataFifo_ENQ,
       ringToMac_1_readDataFifo_FULL_N;

  // ports of submodule ringToMac_1_readLenFifo
  wire [15 : 0] ringToMac_1_readLenFifo_D_IN, ringToMac_1_readLenFifo_D_OUT;
  wire ringToMac_1_readLenFifo_CLR,
       ringToMac_1_readLenFifo_DEQ,
       ringToMac_1_readLenFifo_EMPTY_N,
       ringToMac_1_readLenFifo_ENQ,
       ringToMac_1_readLenFifo_FULL_N;

  // ports of submodule ringToMac_1_readReqFifo
  wire [15 : 0] ringToMac_1_readReqFifo_D_IN, ringToMac_1_readReqFifo_D_OUT;
  wire ringToMac_1_readReqFifo_CLR,
       ringToMac_1_readReqFifo_DEQ,
       ringToMac_1_readReqFifo_EMPTY_N,
       ringToMac_1_readReqFifo_ENQ,
       ringToMac_1_readReqFifo_FULL_N;

  // ports of submodule ringToMac_1_tx_fifo
  wire [177 : 0] ringToMac_1_tx_fifo_dD_OUT, ringToMac_1_tx_fifo_sD_IN;
  wire ringToMac_1_tx_fifo_dDEQ,
       ringToMac_1_tx_fifo_dEMPTY_N,
       ringToMac_1_tx_fifo_sENQ,
       ringToMac_1_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_1_writeMacFifo
  wire [105 : 0] ringToMac_1_writeMacFifo_D_IN,
		 ringToMac_1_writeMacFifo_D_OUT;
  wire ringToMac_1_writeMacFifo_CLR,
       ringToMac_1_writeMacFifo_DEQ,
       ringToMac_1_writeMacFifo_EMPTY_N,
       ringToMac_1_writeMacFifo_ENQ,
       ringToMac_1_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_2_fifoTxData_dCombinedReset
  wire ringToMac_2_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_2_fifoTxData_dCrossedsReset
  wire ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_2_fifoTxData_sCombinedReset
  wire ringToMac_2_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_2_fifoTxData_sCrosseddReset
  wire ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_2_readDataFifo
  wire [177 : 0] ringToMac_2_readDataFifo_D_IN,
		 ringToMac_2_readDataFifo_D_OUT;
  wire ringToMac_2_readDataFifo_CLR,
       ringToMac_2_readDataFifo_DEQ,
       ringToMac_2_readDataFifo_EMPTY_N,
       ringToMac_2_readDataFifo_ENQ,
       ringToMac_2_readDataFifo_FULL_N;

  // ports of submodule ringToMac_2_readLenFifo
  wire [15 : 0] ringToMac_2_readLenFifo_D_IN, ringToMac_2_readLenFifo_D_OUT;
  wire ringToMac_2_readLenFifo_CLR,
       ringToMac_2_readLenFifo_DEQ,
       ringToMac_2_readLenFifo_EMPTY_N,
       ringToMac_2_readLenFifo_ENQ,
       ringToMac_2_readLenFifo_FULL_N;

  // ports of submodule ringToMac_2_readReqFifo
  wire [15 : 0] ringToMac_2_readReqFifo_D_IN, ringToMac_2_readReqFifo_D_OUT;
  wire ringToMac_2_readReqFifo_CLR,
       ringToMac_2_readReqFifo_DEQ,
       ringToMac_2_readReqFifo_EMPTY_N,
       ringToMac_2_readReqFifo_ENQ,
       ringToMac_2_readReqFifo_FULL_N;

  // ports of submodule ringToMac_2_tx_fifo
  wire [177 : 0] ringToMac_2_tx_fifo_dD_OUT, ringToMac_2_tx_fifo_sD_IN;
  wire ringToMac_2_tx_fifo_dDEQ,
       ringToMac_2_tx_fifo_dEMPTY_N,
       ringToMac_2_tx_fifo_sENQ,
       ringToMac_2_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_2_writeMacFifo
  wire [105 : 0] ringToMac_2_writeMacFifo_D_IN,
		 ringToMac_2_writeMacFifo_D_OUT;
  wire ringToMac_2_writeMacFifo_CLR,
       ringToMac_2_writeMacFifo_DEQ,
       ringToMac_2_writeMacFifo_EMPTY_N,
       ringToMac_2_writeMacFifo_ENQ,
       ringToMac_2_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_3_fifoTxData_dCombinedReset
  wire ringToMac_3_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_3_fifoTxData_dCrossedsReset
  wire ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_3_fifoTxData_sCombinedReset
  wire ringToMac_3_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_3_fifoTxData_sCrosseddReset
  wire ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_3_readDataFifo
  wire [177 : 0] ringToMac_3_readDataFifo_D_IN,
		 ringToMac_3_readDataFifo_D_OUT;
  wire ringToMac_3_readDataFifo_CLR,
       ringToMac_3_readDataFifo_DEQ,
       ringToMac_3_readDataFifo_EMPTY_N,
       ringToMac_3_readDataFifo_ENQ,
       ringToMac_3_readDataFifo_FULL_N;

  // ports of submodule ringToMac_3_readLenFifo
  wire [15 : 0] ringToMac_3_readLenFifo_D_IN, ringToMac_3_readLenFifo_D_OUT;
  wire ringToMac_3_readLenFifo_CLR,
       ringToMac_3_readLenFifo_DEQ,
       ringToMac_3_readLenFifo_EMPTY_N,
       ringToMac_3_readLenFifo_ENQ,
       ringToMac_3_readLenFifo_FULL_N;

  // ports of submodule ringToMac_3_readReqFifo
  wire [15 : 0] ringToMac_3_readReqFifo_D_IN, ringToMac_3_readReqFifo_D_OUT;
  wire ringToMac_3_readReqFifo_CLR,
       ringToMac_3_readReqFifo_DEQ,
       ringToMac_3_readReqFifo_EMPTY_N,
       ringToMac_3_readReqFifo_ENQ,
       ringToMac_3_readReqFifo_FULL_N;

  // ports of submodule ringToMac_3_tx_fifo
  wire [177 : 0] ringToMac_3_tx_fifo_dD_OUT, ringToMac_3_tx_fifo_sD_IN;
  wire ringToMac_3_tx_fifo_dDEQ,
       ringToMac_3_tx_fifo_dEMPTY_N,
       ringToMac_3_tx_fifo_sENQ,
       ringToMac_3_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_3_writeMacFifo
  wire [105 : 0] ringToMac_3_writeMacFifo_D_IN,
		 ringToMac_3_writeMacFifo_D_OUT;
  wire ringToMac_3_writeMacFifo_CLR,
       ringToMac_3_writeMacFifo_DEQ,
       ringToMac_3_writeMacFifo_EMPTY_N,
       ringToMac_3_writeMacFifo_ENQ,
       ringToMac_3_writeMacFifo_FULL_N;

  // ports of submodule verbose_ff_0
  wire [31 : 0] verbose_ff_0_D_IN, verbose_ff_0_D_OUT;
  wire verbose_ff_0_CLR,
       verbose_ff_0_DEQ,
       verbose_ff_0_EMPTY_N,
       verbose_ff_0_ENQ,
       verbose_ff_0_FULL_N;

  // ports of submodule verbose_ff_0_1
  wire [31 : 0] verbose_ff_0_1_D_IN, verbose_ff_0_1_D_OUT;
  wire verbose_ff_0_1_CLR,
       verbose_ff_0_1_DEQ,
       verbose_ff_0_1_EMPTY_N,
       verbose_ff_0_1_ENQ,
       verbose_ff_0_1_FULL_N;

  // ports of submodule verbose_ff_0_2
  wire [31 : 0] verbose_ff_0_2_D_IN, verbose_ff_0_2_D_OUT;
  wire verbose_ff_0_2_CLR,
       verbose_ff_0_2_DEQ,
       verbose_ff_0_2_EMPTY_N,
       verbose_ff_0_2_ENQ,
       verbose_ff_0_2_FULL_N;

  // ports of submodule verbose_ff_0_3
  wire [31 : 0] verbose_ff_0_3_D_IN;
  wire verbose_ff_0_3_CLR,
       verbose_ff_0_3_DEQ,
       verbose_ff_0_3_ENQ,
       verbose_ff_0_3_FULL_N;

  // ports of submodule verbose_ff_1
  wire [31 : 0] verbose_ff_1_D_IN, verbose_ff_1_D_OUT;
  wire verbose_ff_1_CLR,
       verbose_ff_1_DEQ,
       verbose_ff_1_EMPTY_N,
       verbose_ff_1_ENQ,
       verbose_ff_1_FULL_N;

  // ports of submodule verbose_ff_1_1
  wire [31 : 0] verbose_ff_1_1_D_IN, verbose_ff_1_1_D_OUT;
  wire verbose_ff_1_1_CLR,
       verbose_ff_1_1_DEQ,
       verbose_ff_1_1_EMPTY_N,
       verbose_ff_1_1_ENQ,
       verbose_ff_1_1_FULL_N;

  // ports of submodule verbose_ff_1_2
  wire [31 : 0] verbose_ff_1_2_D_IN;
  wire verbose_ff_1_2_CLR,
       verbose_ff_1_2_DEQ,
       verbose_ff_1_2_ENQ,
       verbose_ff_1_2_FULL_N;

  // ports of submodule verbose_ff_2
  wire [31 : 0] verbose_ff_2_D_IN, verbose_ff_2_D_OUT;
  wire verbose_ff_2_CLR,
       verbose_ff_2_DEQ,
       verbose_ff_2_EMPTY_N,
       verbose_ff_2_ENQ,
       verbose_ff_2_FULL_N;

  // ports of submodule verbose_ff_2_1
  wire [31 : 0] verbose_ff_2_1_D_IN, verbose_ff_2_1_D_OUT;
  wire verbose_ff_2_1_CLR,
       verbose_ff_2_1_DEQ,
       verbose_ff_2_1_EMPTY_N,
       verbose_ff_2_1_ENQ,
       verbose_ff_2_1_FULL_N;

  // ports of submodule verbose_ff_2_2
  wire [31 : 0] verbose_ff_2_2_D_IN;
  wire verbose_ff_2_2_CLR,
       verbose_ff_2_2_DEQ,
       verbose_ff_2_2_ENQ,
       verbose_ff_2_2_FULL_N;

  // ports of submodule verbose_ff_3
  wire [31 : 0] verbose_ff_3_D_IN, verbose_ff_3_D_OUT;
  wire verbose_ff_3_CLR,
       verbose_ff_3_DEQ,
       verbose_ff_3_EMPTY_N,
       verbose_ff_3_ENQ,
       verbose_ff_3_FULL_N;

  // ports of submodule verbose_ff_3_1
  wire [31 : 0] verbose_ff_3_1_D_IN, verbose_ff_3_1_D_OUT;
  wire verbose_ff_3_1_CLR,
       verbose_ff_3_1_DEQ,
       verbose_ff_3_1_EMPTY_N,
       verbose_ff_3_1_ENQ,
       verbose_ff_3_1_FULL_N;

  // ports of submodule verbose_ff_3_2
  wire [31 : 0] verbose_ff_3_2_D_IN;
  wire verbose_ff_3_2_CLR,
       verbose_ff_3_2_DEQ,
       verbose_ff_3_2_ENQ,
       verbose_ff_3_2_FULL_N;

  // ports of submodule verbose_ff_4
  wire [31 : 0] verbose_ff_4_D_IN, verbose_ff_4_D_OUT;
  wire verbose_ff_4_CLR,
       verbose_ff_4_DEQ,
       verbose_ff_4_EMPTY_N,
       verbose_ff_4_ENQ,
       verbose_ff_4_FULL_N;

  // ports of submodule writeDataFifo_0
  wire [177 : 0] writeDataFifo_0_D_IN, writeDataFifo_0_D_OUT;
  wire writeDataFifo_0_CLR,
       writeDataFifo_0_DEQ,
       writeDataFifo_0_EMPTY_N,
       writeDataFifo_0_ENQ,
       writeDataFifo_0_FULL_N;

  // ports of submodule xbar_lower_lower_lower_f
  wire [609 : 0] xbar_lower_lower_lower_f_D_IN,
		 xbar_lower_lower_lower_f_D_OUT;
  wire xbar_lower_lower_lower_f_CLR,
       xbar_lower_lower_lower_f_DEQ,
       xbar_lower_lower_lower_f_EMPTY_N,
       xbar_lower_lower_lower_f_ENQ;

  // ports of submodule xbar_lower_lower_merges_1_fi0
  wire [609 : 0] xbar_lower_lower_merges_1_fi0_D_IN,
		 xbar_lower_lower_merges_1_fi0_D_OUT;
  wire xbar_lower_lower_merges_1_fi0_CLR,
       xbar_lower_lower_merges_1_fi0_DEQ,
       xbar_lower_lower_merges_1_fi0_EMPTY_N,
       xbar_lower_lower_merges_1_fi0_ENQ,
       xbar_lower_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_lower_merges_1_fi1
  wire [609 : 0] xbar_lower_lower_merges_1_fi1_D_IN,
		 xbar_lower_lower_merges_1_fi1_D_OUT;
  wire xbar_lower_lower_merges_1_fi1_CLR,
       xbar_lower_lower_merges_1_fi1_DEQ,
       xbar_lower_lower_merges_1_fi1_EMPTY_N,
       xbar_lower_lower_merges_1_fi1_ENQ,
       xbar_lower_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_lower_merges_1_fo
  reg [609 : 0] xbar_lower_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_lower_merges_1_fo_D_OUT;
  wire xbar_lower_lower_merges_1_fo_CLR,
       xbar_lower_lower_merges_1_fo_DEQ,
       xbar_lower_lower_merges_1_fo_EMPTY_N,
       xbar_lower_lower_merges_1_fo_ENQ,
       xbar_lower_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fi0
  wire [609 : 0] xbar_lower_lower_merges_fi0_D_IN,
		 xbar_lower_lower_merges_fi0_D_OUT;
  wire xbar_lower_lower_merges_fi0_CLR,
       xbar_lower_lower_merges_fi0_DEQ,
       xbar_lower_lower_merges_fi0_EMPTY_N,
       xbar_lower_lower_merges_fi0_ENQ,
       xbar_lower_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fi1
  wire [609 : 0] xbar_lower_lower_merges_fi1_D_IN,
		 xbar_lower_lower_merges_fi1_D_OUT;
  wire xbar_lower_lower_merges_fi1_CLR,
       xbar_lower_lower_merges_fi1_DEQ,
       xbar_lower_lower_merges_fi1_EMPTY_N,
       xbar_lower_lower_merges_fi1_ENQ,
       xbar_lower_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fo
  reg [609 : 0] xbar_lower_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_lower_merges_fo_D_OUT;
  wire xbar_lower_lower_merges_fo_CLR,
       xbar_lower_lower_merges_fo_DEQ,
       xbar_lower_lower_merges_fo_EMPTY_N,
       xbar_lower_lower_merges_fo_ENQ,
       xbar_lower_lower_merges_fo_FULL_N;

  // ports of submodule xbar_lower_lower_upper_f
  wire [609 : 0] xbar_lower_lower_upper_f_D_IN,
		 xbar_lower_lower_upper_f_D_OUT;
  wire xbar_lower_lower_upper_f_CLR,
       xbar_lower_lower_upper_f_DEQ,
       xbar_lower_lower_upper_f_EMPTY_N,
       xbar_lower_lower_upper_f_ENQ;

  // ports of submodule xbar_lower_merges_1_fi0
  wire [609 : 0] xbar_lower_merges_1_fi0_D_IN, xbar_lower_merges_1_fi0_D_OUT;
  wire xbar_lower_merges_1_fi0_CLR,
       xbar_lower_merges_1_fi0_DEQ,
       xbar_lower_merges_1_fi0_EMPTY_N,
       xbar_lower_merges_1_fi0_ENQ,
       xbar_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_1_fi1
  wire [609 : 0] xbar_lower_merges_1_fi1_D_IN, xbar_lower_merges_1_fi1_D_OUT;
  wire xbar_lower_merges_1_fi1_CLR,
       xbar_lower_merges_1_fi1_DEQ,
       xbar_lower_merges_1_fi1_EMPTY_N,
       xbar_lower_merges_1_fi1_ENQ,
       xbar_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_1_fo
  reg [609 : 0] xbar_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_1_fo_D_OUT;
  wire xbar_lower_merges_1_fo_CLR,
       xbar_lower_merges_1_fo_DEQ,
       xbar_lower_merges_1_fo_EMPTY_N,
       xbar_lower_merges_1_fo_ENQ,
       xbar_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_merges_2_fi0
  wire [609 : 0] xbar_lower_merges_2_fi0_D_IN, xbar_lower_merges_2_fi0_D_OUT;
  wire xbar_lower_merges_2_fi0_CLR,
       xbar_lower_merges_2_fi0_DEQ,
       xbar_lower_merges_2_fi0_EMPTY_N,
       xbar_lower_merges_2_fi0_ENQ,
       xbar_lower_merges_2_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_2_fi1
  wire [609 : 0] xbar_lower_merges_2_fi1_D_IN, xbar_lower_merges_2_fi1_D_OUT;
  wire xbar_lower_merges_2_fi1_CLR,
       xbar_lower_merges_2_fi1_DEQ,
       xbar_lower_merges_2_fi1_EMPTY_N,
       xbar_lower_merges_2_fi1_ENQ,
       xbar_lower_merges_2_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_2_fo
  reg [609 : 0] xbar_lower_merges_2_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_2_fo_D_OUT;
  wire xbar_lower_merges_2_fo_CLR,
       xbar_lower_merges_2_fo_DEQ,
       xbar_lower_merges_2_fo_EMPTY_N,
       xbar_lower_merges_2_fo_ENQ,
       xbar_lower_merges_2_fo_FULL_N;

  // ports of submodule xbar_lower_merges_3_fi0
  wire [609 : 0] xbar_lower_merges_3_fi0_D_IN, xbar_lower_merges_3_fi0_D_OUT;
  wire xbar_lower_merges_3_fi0_CLR,
       xbar_lower_merges_3_fi0_DEQ,
       xbar_lower_merges_3_fi0_EMPTY_N,
       xbar_lower_merges_3_fi0_ENQ,
       xbar_lower_merges_3_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_3_fi1
  wire [609 : 0] xbar_lower_merges_3_fi1_D_IN, xbar_lower_merges_3_fi1_D_OUT;
  wire xbar_lower_merges_3_fi1_CLR,
       xbar_lower_merges_3_fi1_DEQ,
       xbar_lower_merges_3_fi1_EMPTY_N,
       xbar_lower_merges_3_fi1_ENQ,
       xbar_lower_merges_3_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_3_fo
  reg [609 : 0] xbar_lower_merges_3_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_3_fo_D_OUT;
  wire xbar_lower_merges_3_fo_CLR,
       xbar_lower_merges_3_fo_DEQ,
       xbar_lower_merges_3_fo_EMPTY_N,
       xbar_lower_merges_3_fo_ENQ,
       xbar_lower_merges_3_fo_FULL_N;

  // ports of submodule xbar_lower_merges_fi0
  wire [609 : 0] xbar_lower_merges_fi0_D_IN, xbar_lower_merges_fi0_D_OUT;
  wire xbar_lower_merges_fi0_CLR,
       xbar_lower_merges_fi0_DEQ,
       xbar_lower_merges_fi0_EMPTY_N,
       xbar_lower_merges_fi0_ENQ,
       xbar_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_fi1
  wire [609 : 0] xbar_lower_merges_fi1_D_IN, xbar_lower_merges_fi1_D_OUT;
  wire xbar_lower_merges_fi1_CLR,
       xbar_lower_merges_fi1_DEQ,
       xbar_lower_merges_fi1_EMPTY_N,
       xbar_lower_merges_fi1_ENQ,
       xbar_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_fo
  reg [609 : 0] xbar_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_fo_D_OUT;
  wire xbar_lower_merges_fo_CLR,
       xbar_lower_merges_fo_DEQ,
       xbar_lower_merges_fo_EMPTY_N,
       xbar_lower_merges_fo_ENQ,
       xbar_lower_merges_fo_FULL_N;

  // ports of submodule xbar_lower_upper_lower_f
  wire [609 : 0] xbar_lower_upper_lower_f_D_IN,
		 xbar_lower_upper_lower_f_D_OUT;
  wire xbar_lower_upper_lower_f_CLR,
       xbar_lower_upper_lower_f_DEQ,
       xbar_lower_upper_lower_f_EMPTY_N,
       xbar_lower_upper_lower_f_ENQ;

  // ports of submodule xbar_lower_upper_merges_1_fi0
  wire [609 : 0] xbar_lower_upper_merges_1_fi0_D_IN,
		 xbar_lower_upper_merges_1_fi0_D_OUT;
  wire xbar_lower_upper_merges_1_fi0_CLR,
       xbar_lower_upper_merges_1_fi0_DEQ,
       xbar_lower_upper_merges_1_fi0_EMPTY_N,
       xbar_lower_upper_merges_1_fi0_ENQ,
       xbar_lower_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_upper_merges_1_fi1
  wire [609 : 0] xbar_lower_upper_merges_1_fi1_D_IN,
		 xbar_lower_upper_merges_1_fi1_D_OUT;
  wire xbar_lower_upper_merges_1_fi1_CLR,
       xbar_lower_upper_merges_1_fi1_DEQ,
       xbar_lower_upper_merges_1_fi1_EMPTY_N,
       xbar_lower_upper_merges_1_fi1_ENQ,
       xbar_lower_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_upper_merges_1_fo
  reg [609 : 0] xbar_lower_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_upper_merges_1_fo_D_OUT;
  wire xbar_lower_upper_merges_1_fo_CLR,
       xbar_lower_upper_merges_1_fo_DEQ,
       xbar_lower_upper_merges_1_fo_EMPTY_N,
       xbar_lower_upper_merges_1_fo_ENQ,
       xbar_lower_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fi0
  wire [609 : 0] xbar_lower_upper_merges_fi0_D_IN,
		 xbar_lower_upper_merges_fi0_D_OUT;
  wire xbar_lower_upper_merges_fi0_CLR,
       xbar_lower_upper_merges_fi0_DEQ,
       xbar_lower_upper_merges_fi0_EMPTY_N,
       xbar_lower_upper_merges_fi0_ENQ,
       xbar_lower_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fi1
  wire [609 : 0] xbar_lower_upper_merges_fi1_D_IN,
		 xbar_lower_upper_merges_fi1_D_OUT;
  wire xbar_lower_upper_merges_fi1_CLR,
       xbar_lower_upper_merges_fi1_DEQ,
       xbar_lower_upper_merges_fi1_EMPTY_N,
       xbar_lower_upper_merges_fi1_ENQ,
       xbar_lower_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fo
  reg [609 : 0] xbar_lower_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_upper_merges_fo_D_OUT;
  wire xbar_lower_upper_merges_fo_CLR,
       xbar_lower_upper_merges_fo_DEQ,
       xbar_lower_upper_merges_fo_EMPTY_N,
       xbar_lower_upper_merges_fo_ENQ,
       xbar_lower_upper_merges_fo_FULL_N;

  // ports of submodule xbar_lower_upper_upper_f
  wire [609 : 0] xbar_lower_upper_upper_f_D_IN,
		 xbar_lower_upper_upper_f_D_OUT;
  wire xbar_lower_upper_upper_f_CLR,
       xbar_lower_upper_upper_f_DEQ,
       xbar_lower_upper_upper_f_EMPTY_N,
       xbar_lower_upper_upper_f_ENQ,
       xbar_lower_upper_upper_f_FULL_N;

  // ports of submodule xbar_merges_1_fi0
  wire [609 : 0] xbar_merges_1_fi0_D_IN, xbar_merges_1_fi0_D_OUT;
  wire xbar_merges_1_fi0_CLR,
       xbar_merges_1_fi0_DEQ,
       xbar_merges_1_fi0_EMPTY_N,
       xbar_merges_1_fi0_ENQ,
       xbar_merges_1_fi0_FULL_N;

  // ports of submodule xbar_merges_1_fi1
  wire [609 : 0] xbar_merges_1_fi1_D_IN, xbar_merges_1_fi1_D_OUT;
  wire xbar_merges_1_fi1_CLR,
       xbar_merges_1_fi1_DEQ,
       xbar_merges_1_fi1_EMPTY_N,
       xbar_merges_1_fi1_ENQ,
       xbar_merges_1_fi1_FULL_N;

  // ports of submodule xbar_merges_1_fo
  reg [609 : 0] xbar_merges_1_fo_D_IN;
  wire [609 : 0] xbar_merges_1_fo_D_OUT;
  wire xbar_merges_1_fo_CLR,
       xbar_merges_1_fo_DEQ,
       xbar_merges_1_fo_EMPTY_N,
       xbar_merges_1_fo_ENQ,
       xbar_merges_1_fo_FULL_N;

  // ports of submodule xbar_merges_2_fi0
  wire [609 : 0] xbar_merges_2_fi0_D_IN, xbar_merges_2_fi0_D_OUT;
  wire xbar_merges_2_fi0_CLR,
       xbar_merges_2_fi0_DEQ,
       xbar_merges_2_fi0_EMPTY_N,
       xbar_merges_2_fi0_ENQ,
       xbar_merges_2_fi0_FULL_N;

  // ports of submodule xbar_merges_2_fi1
  wire [609 : 0] xbar_merges_2_fi1_D_IN, xbar_merges_2_fi1_D_OUT;
  wire xbar_merges_2_fi1_CLR,
       xbar_merges_2_fi1_DEQ,
       xbar_merges_2_fi1_EMPTY_N,
       xbar_merges_2_fi1_ENQ,
       xbar_merges_2_fi1_FULL_N;

  // ports of submodule xbar_merges_2_fo
  reg [609 : 0] xbar_merges_2_fo_D_IN;
  wire [609 : 0] xbar_merges_2_fo_D_OUT;
  wire xbar_merges_2_fo_CLR,
       xbar_merges_2_fo_DEQ,
       xbar_merges_2_fo_EMPTY_N,
       xbar_merges_2_fo_ENQ,
       xbar_merges_2_fo_FULL_N;

  // ports of submodule xbar_merges_3_fi0
  wire [609 : 0] xbar_merges_3_fi0_D_IN, xbar_merges_3_fi0_D_OUT;
  wire xbar_merges_3_fi0_CLR,
       xbar_merges_3_fi0_DEQ,
       xbar_merges_3_fi0_EMPTY_N,
       xbar_merges_3_fi0_ENQ,
       xbar_merges_3_fi0_FULL_N;

  // ports of submodule xbar_merges_3_fi1
  wire [609 : 0] xbar_merges_3_fi1_D_IN, xbar_merges_3_fi1_D_OUT;
  wire xbar_merges_3_fi1_CLR,
       xbar_merges_3_fi1_DEQ,
       xbar_merges_3_fi1_EMPTY_N,
       xbar_merges_3_fi1_ENQ,
       xbar_merges_3_fi1_FULL_N;

  // ports of submodule xbar_merges_3_fo
  reg [609 : 0] xbar_merges_3_fo_D_IN;
  wire [609 : 0] xbar_merges_3_fo_D_OUT;
  wire xbar_merges_3_fo_CLR,
       xbar_merges_3_fo_DEQ,
       xbar_merges_3_fo_EMPTY_N,
       xbar_merges_3_fo_ENQ,
       xbar_merges_3_fo_FULL_N;

  // ports of submodule xbar_merges_4_fi0
  wire [609 : 0] xbar_merges_4_fi0_D_IN, xbar_merges_4_fi0_D_OUT;
  wire xbar_merges_4_fi0_CLR,
       xbar_merges_4_fi0_DEQ,
       xbar_merges_4_fi0_EMPTY_N,
       xbar_merges_4_fi0_ENQ,
       xbar_merges_4_fi0_FULL_N;

  // ports of submodule xbar_merges_4_fi1
  wire [609 : 0] xbar_merges_4_fi1_D_IN, xbar_merges_4_fi1_D_OUT;
  wire xbar_merges_4_fi1_CLR,
       xbar_merges_4_fi1_DEQ,
       xbar_merges_4_fi1_EMPTY_N,
       xbar_merges_4_fi1_ENQ,
       xbar_merges_4_fi1_FULL_N;

  // ports of submodule xbar_merges_4_fo
  reg [609 : 0] xbar_merges_4_fo_D_IN;
  wire [609 : 0] xbar_merges_4_fo_D_OUT;
  wire xbar_merges_4_fo_CLR,
       xbar_merges_4_fo_DEQ,
       xbar_merges_4_fo_EMPTY_N,
       xbar_merges_4_fo_ENQ,
       xbar_merges_4_fo_FULL_N;

  // ports of submodule xbar_merges_5_fi0
  wire [609 : 0] xbar_merges_5_fi0_D_IN, xbar_merges_5_fi0_D_OUT;
  wire xbar_merges_5_fi0_CLR,
       xbar_merges_5_fi0_DEQ,
       xbar_merges_5_fi0_EMPTY_N,
       xbar_merges_5_fi0_ENQ,
       xbar_merges_5_fi0_FULL_N;

  // ports of submodule xbar_merges_5_fi1
  wire [609 : 0] xbar_merges_5_fi1_D_IN, xbar_merges_5_fi1_D_OUT;
  wire xbar_merges_5_fi1_CLR,
       xbar_merges_5_fi1_DEQ,
       xbar_merges_5_fi1_EMPTY_N,
       xbar_merges_5_fi1_ENQ,
       xbar_merges_5_fi1_FULL_N;

  // ports of submodule xbar_merges_5_fo
  reg [609 : 0] xbar_merges_5_fo_D_IN;
  wire [609 : 0] xbar_merges_5_fo_D_OUT;
  wire xbar_merges_5_fo_CLR,
       xbar_merges_5_fo_DEQ,
       xbar_merges_5_fo_EMPTY_N,
       xbar_merges_5_fo_ENQ,
       xbar_merges_5_fo_FULL_N;

  // ports of submodule xbar_merges_6_fi0
  wire [609 : 0] xbar_merges_6_fi0_D_IN, xbar_merges_6_fi0_D_OUT;
  wire xbar_merges_6_fi0_CLR,
       xbar_merges_6_fi0_DEQ,
       xbar_merges_6_fi0_EMPTY_N,
       xbar_merges_6_fi0_ENQ,
       xbar_merges_6_fi0_FULL_N;

  // ports of submodule xbar_merges_6_fi1
  wire [609 : 0] xbar_merges_6_fi1_D_IN, xbar_merges_6_fi1_D_OUT;
  wire xbar_merges_6_fi1_CLR,
       xbar_merges_6_fi1_DEQ,
       xbar_merges_6_fi1_EMPTY_N,
       xbar_merges_6_fi1_ENQ,
       xbar_merges_6_fi1_FULL_N;

  // ports of submodule xbar_merges_6_fo
  reg [609 : 0] xbar_merges_6_fo_D_IN;
  wire [609 : 0] xbar_merges_6_fo_D_OUT;
  wire xbar_merges_6_fo_CLR,
       xbar_merges_6_fo_DEQ,
       xbar_merges_6_fo_EMPTY_N,
       xbar_merges_6_fo_ENQ,
       xbar_merges_6_fo_FULL_N;

  // ports of submodule xbar_merges_7_fi0
  wire [609 : 0] xbar_merges_7_fi0_D_IN, xbar_merges_7_fi0_D_OUT;
  wire xbar_merges_7_fi0_CLR,
       xbar_merges_7_fi0_DEQ,
       xbar_merges_7_fi0_EMPTY_N,
       xbar_merges_7_fi0_ENQ,
       xbar_merges_7_fi0_FULL_N;

  // ports of submodule xbar_merges_7_fi1
  wire [609 : 0] xbar_merges_7_fi1_D_IN, xbar_merges_7_fi1_D_OUT;
  wire xbar_merges_7_fi1_CLR,
       xbar_merges_7_fi1_DEQ,
       xbar_merges_7_fi1_EMPTY_N,
       xbar_merges_7_fi1_ENQ,
       xbar_merges_7_fi1_FULL_N;

  // ports of submodule xbar_merges_7_fo
  reg [609 : 0] xbar_merges_7_fo_D_IN;
  wire [609 : 0] xbar_merges_7_fo_D_OUT;
  wire xbar_merges_7_fo_CLR,
       xbar_merges_7_fo_DEQ,
       xbar_merges_7_fo_EMPTY_N,
       xbar_merges_7_fo_ENQ,
       xbar_merges_7_fo_FULL_N;

  // ports of submodule xbar_merges_fi0
  wire [609 : 0] xbar_merges_fi0_D_IN, xbar_merges_fi0_D_OUT;
  wire xbar_merges_fi0_CLR,
       xbar_merges_fi0_DEQ,
       xbar_merges_fi0_EMPTY_N,
       xbar_merges_fi0_ENQ,
       xbar_merges_fi0_FULL_N;

  // ports of submodule xbar_merges_fi1
  wire [609 : 0] xbar_merges_fi1_D_IN, xbar_merges_fi1_D_OUT;
  wire xbar_merges_fi1_CLR,
       xbar_merges_fi1_DEQ,
       xbar_merges_fi1_EMPTY_N,
       xbar_merges_fi1_ENQ,
       xbar_merges_fi1_FULL_N;

  // ports of submodule xbar_merges_fo
  reg [609 : 0] xbar_merges_fo_D_IN;
  wire [609 : 0] xbar_merges_fo_D_OUT;
  wire xbar_merges_fo_CLR,
       xbar_merges_fo_DEQ,
       xbar_merges_fo_EMPTY_N,
       xbar_merges_fo_ENQ,
       xbar_merges_fo_FULL_N;

  // ports of submodule xbar_upper_lower_lower_f
  wire [609 : 0] xbar_upper_lower_lower_f_D_IN,
		 xbar_upper_lower_lower_f_D_OUT;
  wire xbar_upper_lower_lower_f_CLR,
       xbar_upper_lower_lower_f_DEQ,
       xbar_upper_lower_lower_f_EMPTY_N,
       xbar_upper_lower_lower_f_ENQ,
       xbar_upper_lower_lower_f_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fi0
  wire [609 : 0] xbar_upper_lower_merges_1_fi0_D_IN,
		 xbar_upper_lower_merges_1_fi0_D_OUT;
  wire xbar_upper_lower_merges_1_fi0_CLR,
       xbar_upper_lower_merges_1_fi0_DEQ,
       xbar_upper_lower_merges_1_fi0_EMPTY_N,
       xbar_upper_lower_merges_1_fi0_ENQ,
       xbar_upper_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fi1
  wire [609 : 0] xbar_upper_lower_merges_1_fi1_D_IN,
		 xbar_upper_lower_merges_1_fi1_D_OUT;
  wire xbar_upper_lower_merges_1_fi1_CLR,
       xbar_upper_lower_merges_1_fi1_DEQ,
       xbar_upper_lower_merges_1_fi1_EMPTY_N,
       xbar_upper_lower_merges_1_fi1_ENQ,
       xbar_upper_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fo
  reg [609 : 0] xbar_upper_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_lower_merges_1_fo_D_OUT;
  wire xbar_upper_lower_merges_1_fo_CLR,
       xbar_upper_lower_merges_1_fo_DEQ,
       xbar_upper_lower_merges_1_fo_EMPTY_N,
       xbar_upper_lower_merges_1_fo_ENQ,
       xbar_upper_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fi0
  wire [609 : 0] xbar_upper_lower_merges_fi0_D_IN,
		 xbar_upper_lower_merges_fi0_D_OUT;
  wire xbar_upper_lower_merges_fi0_CLR,
       xbar_upper_lower_merges_fi0_DEQ,
       xbar_upper_lower_merges_fi0_EMPTY_N,
       xbar_upper_lower_merges_fi0_ENQ,
       xbar_upper_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fi1
  wire [609 : 0] xbar_upper_lower_merges_fi1_D_IN,
		 xbar_upper_lower_merges_fi1_D_OUT;
  wire xbar_upper_lower_merges_fi1_CLR,
       xbar_upper_lower_merges_fi1_DEQ,
       xbar_upper_lower_merges_fi1_EMPTY_N,
       xbar_upper_lower_merges_fi1_ENQ,
       xbar_upper_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fo
  reg [609 : 0] xbar_upper_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_lower_merges_fo_D_OUT;
  wire xbar_upper_lower_merges_fo_CLR,
       xbar_upper_lower_merges_fo_DEQ,
       xbar_upper_lower_merges_fo_EMPTY_N,
       xbar_upper_lower_merges_fo_ENQ,
       xbar_upper_lower_merges_fo_FULL_N;

  // ports of submodule xbar_upper_lower_upper_f
  wire [609 : 0] xbar_upper_lower_upper_f_D_IN,
		 xbar_upper_lower_upper_f_D_OUT;
  wire xbar_upper_lower_upper_f_CLR,
       xbar_upper_lower_upper_f_DEQ,
       xbar_upper_lower_upper_f_EMPTY_N,
       xbar_upper_lower_upper_f_ENQ,
       xbar_upper_lower_upper_f_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi0
  wire [609 : 0] xbar_upper_merges_1_fi0_D_IN, xbar_upper_merges_1_fi0_D_OUT;
  wire xbar_upper_merges_1_fi0_CLR,
       xbar_upper_merges_1_fi0_DEQ,
       xbar_upper_merges_1_fi0_EMPTY_N,
       xbar_upper_merges_1_fi0_ENQ,
       xbar_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi1
  wire [609 : 0] xbar_upper_merges_1_fi1_D_IN, xbar_upper_merges_1_fi1_D_OUT;
  wire xbar_upper_merges_1_fi1_CLR,
       xbar_upper_merges_1_fi1_DEQ,
       xbar_upper_merges_1_fi1_EMPTY_N,
       xbar_upper_merges_1_fi1_ENQ,
       xbar_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_1_fo
  reg [609 : 0] xbar_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_1_fo_D_OUT;
  wire xbar_upper_merges_1_fo_CLR,
       xbar_upper_merges_1_fo_DEQ,
       xbar_upper_merges_1_fo_EMPTY_N,
       xbar_upper_merges_1_fo_ENQ,
       xbar_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_merges_2_fi0
  wire [609 : 0] xbar_upper_merges_2_fi0_D_IN, xbar_upper_merges_2_fi0_D_OUT;
  wire xbar_upper_merges_2_fi0_CLR,
       xbar_upper_merges_2_fi0_DEQ,
       xbar_upper_merges_2_fi0_EMPTY_N,
       xbar_upper_merges_2_fi0_ENQ,
       xbar_upper_merges_2_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_2_fi1
  wire [609 : 0] xbar_upper_merges_2_fi1_D_IN, xbar_upper_merges_2_fi1_D_OUT;
  wire xbar_upper_merges_2_fi1_CLR,
       xbar_upper_merges_2_fi1_DEQ,
       xbar_upper_merges_2_fi1_EMPTY_N,
       xbar_upper_merges_2_fi1_ENQ,
       xbar_upper_merges_2_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_2_fo
  reg [609 : 0] xbar_upper_merges_2_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_2_fo_D_OUT;
  wire xbar_upper_merges_2_fo_CLR,
       xbar_upper_merges_2_fo_DEQ,
       xbar_upper_merges_2_fo_EMPTY_N,
       xbar_upper_merges_2_fo_ENQ,
       xbar_upper_merges_2_fo_FULL_N;

  // ports of submodule xbar_upper_merges_3_fi0
  wire [609 : 0] xbar_upper_merges_3_fi0_D_IN, xbar_upper_merges_3_fi0_D_OUT;
  wire xbar_upper_merges_3_fi0_CLR,
       xbar_upper_merges_3_fi0_DEQ,
       xbar_upper_merges_3_fi0_EMPTY_N,
       xbar_upper_merges_3_fi0_ENQ,
       xbar_upper_merges_3_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_3_fi1
  wire [609 : 0] xbar_upper_merges_3_fi1_D_IN, xbar_upper_merges_3_fi1_D_OUT;
  wire xbar_upper_merges_3_fi1_CLR,
       xbar_upper_merges_3_fi1_DEQ,
       xbar_upper_merges_3_fi1_EMPTY_N,
       xbar_upper_merges_3_fi1_ENQ,
       xbar_upper_merges_3_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_3_fo
  reg [609 : 0] xbar_upper_merges_3_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_3_fo_D_OUT;
  wire xbar_upper_merges_3_fo_CLR,
       xbar_upper_merges_3_fo_DEQ,
       xbar_upper_merges_3_fo_EMPTY_N,
       xbar_upper_merges_3_fo_ENQ,
       xbar_upper_merges_3_fo_FULL_N;

  // ports of submodule xbar_upper_merges_fi0
  wire [609 : 0] xbar_upper_merges_fi0_D_IN, xbar_upper_merges_fi0_D_OUT;
  wire xbar_upper_merges_fi0_CLR,
       xbar_upper_merges_fi0_DEQ,
       xbar_upper_merges_fi0_EMPTY_N,
       xbar_upper_merges_fi0_ENQ,
       xbar_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_fi1
  wire [609 : 0] xbar_upper_merges_fi1_D_IN, xbar_upper_merges_fi1_D_OUT;
  wire xbar_upper_merges_fi1_CLR,
       xbar_upper_merges_fi1_DEQ,
       xbar_upper_merges_fi1_EMPTY_N,
       xbar_upper_merges_fi1_ENQ,
       xbar_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_fo
  reg [609 : 0] xbar_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_fo_D_OUT;
  wire xbar_upper_merges_fo_CLR,
       xbar_upper_merges_fo_DEQ,
       xbar_upper_merges_fo_EMPTY_N,
       xbar_upper_merges_fo_ENQ,
       xbar_upper_merges_fo_FULL_N;

  // ports of submodule xbar_upper_upper_lower_f
  wire [609 : 0] xbar_upper_upper_lower_f_D_IN,
		 xbar_upper_upper_lower_f_D_OUT;
  wire xbar_upper_upper_lower_f_CLR,
       xbar_upper_upper_lower_f_DEQ,
       xbar_upper_upper_lower_f_EMPTY_N,
       xbar_upper_upper_lower_f_ENQ,
       xbar_upper_upper_lower_f_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fi0
  wire [609 : 0] xbar_upper_upper_merges_1_fi0_D_IN,
		 xbar_upper_upper_merges_1_fi0_D_OUT;
  wire xbar_upper_upper_merges_1_fi0_CLR,
       xbar_upper_upper_merges_1_fi0_DEQ,
       xbar_upper_upper_merges_1_fi0_EMPTY_N,
       xbar_upper_upper_merges_1_fi0_ENQ,
       xbar_upper_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fi1
  wire [609 : 0] xbar_upper_upper_merges_1_fi1_D_IN,
		 xbar_upper_upper_merges_1_fi1_D_OUT;
  wire xbar_upper_upper_merges_1_fi1_CLR,
       xbar_upper_upper_merges_1_fi1_DEQ,
       xbar_upper_upper_merges_1_fi1_EMPTY_N,
       xbar_upper_upper_merges_1_fi1_ENQ,
       xbar_upper_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fo
  reg [609 : 0] xbar_upper_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_upper_merges_1_fo_D_OUT;
  wire xbar_upper_upper_merges_1_fo_CLR,
       xbar_upper_upper_merges_1_fo_DEQ,
       xbar_upper_upper_merges_1_fo_EMPTY_N,
       xbar_upper_upper_merges_1_fo_ENQ,
       xbar_upper_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fi0
  wire [609 : 0] xbar_upper_upper_merges_fi0_D_IN,
		 xbar_upper_upper_merges_fi0_D_OUT;
  wire xbar_upper_upper_merges_fi0_CLR,
       xbar_upper_upper_merges_fi0_DEQ,
       xbar_upper_upper_merges_fi0_EMPTY_N,
       xbar_upper_upper_merges_fi0_ENQ,
       xbar_upper_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fi1
  wire [609 : 0] xbar_upper_upper_merges_fi1_D_IN,
		 xbar_upper_upper_merges_fi1_D_OUT;
  wire xbar_upper_upper_merges_fi1_CLR,
       xbar_upper_upper_merges_fi1_DEQ,
       xbar_upper_upper_merges_fi1_EMPTY_N,
       xbar_upper_upper_merges_fi1_ENQ,
       xbar_upper_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fo
  reg [609 : 0] xbar_upper_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_upper_merges_fo_D_OUT;
  wire xbar_upper_upper_merges_fo_CLR,
       xbar_upper_upper_merges_fo_DEQ,
       xbar_upper_upper_merges_fo_EMPTY_N,
       xbar_upper_upper_merges_fo_ENQ,
       xbar_upper_upper_merges_fo_FULL_N;

  // ports of submodule xbar_upper_upper_upper_f
  wire [609 : 0] xbar_upper_upper_upper_f_D_IN,
		 xbar_upper_upper_upper_f_D_OUT;
  wire xbar_upper_upper_upper_f_CLR,
       xbar_upper_upper_upper_f_DEQ,
       xbar_upper_upper_upper_f_EMPTY_N,
       xbar_upper_upper_upper_f_ENQ,
       xbar_upper_upper_upper_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut_15,
       CAN_FIRE_RL_mkConnectionGetPut_16,
       CAN_FIRE_RL_mkConnectionGetPut_17,
       CAN_FIRE_RL_mkConnectionGetPut_18,
       CAN_FIRE_RL_mkConnectionGetPut_19,
       CAN_FIRE_RL_mkConnectionGetPut_69,
       CAN_FIRE_RL_mkConnectionGetPut_70,
       CAN_FIRE_RL_mkConnectionGetPut_71,
       CAN_FIRE_RL_mkConnectionGetPut_72,
       WILL_FIRE_RL_hostchan_0_packetReadInProgress,
       WILL_FIRE_RL_hostchan_1_packetReadInProgress,
       WILL_FIRE_RL_hostchan_2_packetReadInProgress,
       WILL_FIRE_RL_hostchan_3_packetReadInProgress,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_0_writeData,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_1_writeData,
       WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_2_writeData,
       WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_3_writeData,
       WILL_FIRE_RL_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_0_commit_packet,
       WILL_FIRE_RL_pktBuff_0_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_0_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_0_enq_stage1,
       WILL_FIRE_RL_pktBuff_0_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_0_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_1_commit_packet,
       WILL_FIRE_RL_pktBuff_1_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_1_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_1_enq_stage1,
       WILL_FIRE_RL_pktBuff_1_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_1_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_2_commit_packet,
       WILL_FIRE_RL_pktBuff_2_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_2_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_2_enq_stage1,
       WILL_FIRE_RL_pktBuff_2_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_2_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_3_commit_packet,
       WILL_FIRE_RL_pktBuff_3_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_3_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_3_enq_stage1,
       WILL_FIRE_RL_pktBuff_3_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_3_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_4_packetReadInProgress,
       WILL_FIRE_RL_ringToMac_0_cross_clocking,
       WILL_FIRE_RL_ringToMac_0_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_0_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_1_cross_clocking,
       WILL_FIRE_RL_ringToMac_1_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_1_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_2_cross_clocking,
       WILL_FIRE_RL_ringToMac_2_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_2_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_3_cross_clocking,
       WILL_FIRE_RL_ringToMac_3_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_3_process_outgoing_packet,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_route,
       WILL_FIRE_RL_xbar_lower_lower_route_1,
       WILL_FIRE_RL_xbar_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_route,
       WILL_FIRE_RL_xbar_lower_route_1,
       WILL_FIRE_RL_xbar_lower_route_2,
       WILL_FIRE_RL_xbar_lower_route_3,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_route,
       WILL_FIRE_RL_xbar_lower_upper_route_1,
       WILL_FIRE_RL_xbar_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_4_both_have_data,
       WILL_FIRE_RL_xbar_merges_4_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_4_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_5_both_have_data,
       WILL_FIRE_RL_xbar_merges_5_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_5_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_6_both_have_data,
       WILL_FIRE_RL_xbar_merges_6_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_6_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_7_both_have_data,
       WILL_FIRE_RL_xbar_merges_7_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_7_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_both_have_data,
       WILL_FIRE_RL_xbar_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_route,
       WILL_FIRE_RL_xbar_route_1,
       WILL_FIRE_RL_xbar_route_2,
       WILL_FIRE_RL_xbar_route_3,
       WILL_FIRE_RL_xbar_route_4,
       WILL_FIRE_RL_xbar_route_5,
       WILL_FIRE_RL_xbar_route_6,
       WILL_FIRE_RL_xbar_route_7,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_route,
       WILL_FIRE_RL_xbar_upper_lower_route_1,
       WILL_FIRE_RL_xbar_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_route,
       WILL_FIRE_RL_xbar_upper_route_1,
       WILL_FIRE_RL_xbar_upper_route_2,
       WILL_FIRE_RL_xbar_upper_route_3,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_route,
       WILL_FIRE_RL_xbar_upper_upper_route_1;

  // inputs to muxes for submodule ports
  wire [609 : 0] MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1,
		 MUX_xbar_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_merges_4_fo_enq_1__VAL_1,
		 MUX_xbar_merges_5_fo_enq_1__VAL_1,
		 MUX_xbar_merges_6_fo_enq_1__VAL_1,
		 MUX_xbar_merges_7_fo_enq_1__VAL_1,
		 MUX_xbar_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1;
  wire [177 : 0] MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2;
  wire [63 : 0] MUX_ringToMac_0_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_1_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_2_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_3_idle_cycles_write_1__VAL_1;
  wire [7 : 0] MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1;
  wire MUX_hostchan_0_readStarted_write_1__SEL_1,
       MUX_hostchan_0_readStarted_write_1__SEL_2,
       MUX_hostchan_1_readStarted_write_1__SEL_1,
       MUX_hostchan_1_readStarted_write_1__SEL_2,
       MUX_hostchan_2_readStarted_write_1__SEL_1,
       MUX_hostchan_2_readStarted_write_1__SEL_2,
       MUX_hostchan_3_readStarted_write_1__SEL_1,
       MUX_hostchan_3_readStarted_write_1__SEL_2,
       MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1,
       MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_0_outPacket_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_2,
       MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_1_outPacket_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_2,
       MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_2_outPacket_write_1__SEL_1,
       MUX_pktBuff_2_readStarted_write_1__SEL_1,
       MUX_pktBuff_2_readStarted_write_1__SEL_2,
       MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_3_outPacket_write_1__SEL_1,
       MUX_pktBuff_3_readStarted_write_1__SEL_1,
       MUX_pktBuff_3_readStarted_write_1__SEL_2,
       MUX_pktBuff_4_readStarted_write_1__SEL_1,
       MUX_pktBuff_4_readStarted_write_1__SEL_2,
       MUX_readStarted_0_write_1__SEL_1,
       MUX_readStarted_0_write_1__SEL_2,
       MUX_ringToMac_0_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_1_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_2_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_3_idle_cycles_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1,
       MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_4_fo_enq_1__SEL_1,
       MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_5_fo_enq_1__SEL_1,
       MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_6_fo_enq_1__SEL_1,
       MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_7_fo_enq_1__SEL_1,
       MUX_xbar_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v___1__h230463,
	       v___1__h230720,
	       v___1__h230980,
	       v___1__h231240,
	       v__h14551,
	       v__h182579,
	       v__h182646,
	       v__h183626,
	       v__h183692,
	       v__h184275,
	       v__h184334,
	       v__h184691,
	       v__h184744,
	       v__h185786,
	       v__h185852,
	       v__h186832,
	       v__h186898,
	       v__h187481,
	       v__h187540,
	       v__h187897,
	       v__h187950,
	       v__h188754,
	       v__h188820,
	       v__h189800,
	       v__h189866,
	       v__h190846,
	       v__h190912,
	       v__h191892,
	       v__h191958,
	       v__h192572,
	       v__h192631,
	       v__h193005,
	       v__h193059,
	       v__h193453,
	       v__h193506,
	       v__h193879,
	       v__h193932,
	       v__h194999,
	       v__h195065,
	       v__h196045,
	       v__h196111,
	       v__h196694,
	       v__h196753,
	       v__h197110,
	       v__h197163,
	       v__h198205,
	       v__h198271,
	       v__h199251,
	       v__h199317,
	       v__h199900,
	       v__h199959,
	       v__h200316,
	       v__h200369,
	       v__h201173,
	       v__h201239,
	       v__h202219,
	       v__h202285,
	       v__h203265,
	       v__h203331,
	       v__h204311,
	       v__h204377,
	       v__h204991,
	       v__h205050,
	       v__h205424,
	       v__h205478,
	       v__h205872,
	       v__h205925,
	       v__h206298,
	       v__h206351,
	       v__h207164,
	       v__h207230,
	       v__h208210,
	       v__h208276,
	       v__h209256,
	       v__h209322,
	       v__h210302,
	       v__h210368,
	       v__h211348,
	       v__h211414,
	       v__h212394,
	       v__h212460,
	       v__h213440,
	       v__h213506,
	       v__h214486,
	       v__h214552,
	       v__h215190,
	       v__h215249,
	       v__h215629,
	       v__h215683,
	       v__h216075,
	       v__h216129,
	       v__h216533,
	       v__h216587,
	       v__h217017,
	       v__h217070,
	       v__h217455,
	       v__h217508,
	       v__h217905,
	       v__h217958,
	       v__h218367,
	       v__h218420,
	       v__h23182,
	       v__h267393,
	       v__h31813,
	       v__h40444;
  wire [127 : 0] x_data__h12861,
		 x_data__h13819,
		 x_data__h21492,
		 x_data__h22450,
		 x_data__h30123,
		 x_data__h31081,
		 x_data__h38754,
		 x_data__h39712;
  wire [63 : 0] y__h108451,
		y__h108538,
		y__h115483,
		y__h12437,
		y__h127085,
		y__h127172,
		y__h134117,
		y__h145719,
		y__h145806,
		y__h152751,
		y__h21068,
		y__h29699,
		y__h38330,
		y__h89814,
		y__h89901,
		y__h96849;
  wire [15 : 0] newPacketLen__h102996,
		newPacketLen__h121630,
		newPacketLen__h140264,
		newPacketLen__h84359,
		x_mask__h13820,
		x_mask__h22451,
		x_mask__h31082,
		x_mask__h39713;
  wire [7 : 0] IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709,
	       mask__h115121,
	       mask__h115230,
	       mask__h133755,
	       mask__h133864,
	       mask__h152389,
	       mask__h152498,
	       mask__h96487,
	       mask__h96596;
  wire [4 : 0] x__h103085,
	       x__h103100,
	       x__h103112,
	       x__h103124,
	       x__h103136,
	       x__h103148,
	       x__h103160,
	       x__h103172,
	       x__h103184,
	       x__h103196,
	       x__h103208,
	       x__h103220,
	       x__h103232,
	       x__h103244,
	       x__h103256,
	       x__h103268,
	       x__h121719,
	       x__h121734,
	       x__h121746,
	       x__h121758,
	       x__h121770,
	       x__h121782,
	       x__h121794,
	       x__h121806,
	       x__h121818,
	       x__h121830,
	       x__h121842,
	       x__h121854,
	       x__h121866,
	       x__h121878,
	       x__h121890,
	       x__h121902,
	       x__h140353,
	       x__h140368,
	       x__h140380,
	       x__h140392,
	       x__h140404,
	       x__h140416,
	       x__h140428,
	       x__h140440,
	       x__h140452,
	       x__h140464,
	       x__h140476,
	       x__h140488,
	       x__h140500,
	       x__h140512,
	       x__h140524,
	       x__h140536,
	       x__h84448,
	       x__h84463,
	       x__h84475,
	       x__h84487,
	       x__h84499,
	       x__h84511,
	       x__h84523,
	       x__h84535,
	       x__h84547,
	       x__h84559,
	       x__h84571,
	       x__h84583,
	       x__h84595,
	       x__h84607,
	       x__h84619,
	       x__h84631,
	       y__h103101,
	       y__h103113,
	       y__h103125,
	       y__h103137,
	       y__h103149,
	       y__h103161,
	       y__h103173,
	       y__h103185,
	       y__h103197,
	       y__h103209,
	       y__h103221,
	       y__h103233,
	       y__h103245,
	       y__h103257,
	       y__h103269,
	       y__h121735,
	       y__h121747,
	       y__h121759,
	       y__h121771,
	       y__h121783,
	       y__h121795,
	       y__h121807,
	       y__h121819,
	       y__h121831,
	       y__h121843,
	       y__h121855,
	       y__h121867,
	       y__h121879,
	       y__h121891,
	       y__h121903,
	       y__h140369,
	       y__h140381,
	       y__h140393,
	       y__h140405,
	       y__h140417,
	       y__h140429,
	       y__h140441,
	       y__h140453,
	       y__h140465,
	       y__h140477,
	       y__h140489,
	       y__h140501,
	       y__h140513,
	       y__h140525,
	       y__h140537,
	       y__h84464,
	       y__h84476,
	       y__h84488,
	       y__h84500,
	       y__h84512,
	       y__h84524,
	       y__h84536,
	       y__h84548,
	       y__h84560,
	       y__h84572,
	       y__h84584,
	       y__h84596,
	       y__h84608,
	       y__h84620,
	       y__h84632;
  wire [3 : 0] x__h115487,
	       x__h115503,
	       x__h115515,
	       x__h115527,
	       x__h115539,
	       x__h115551,
	       x__h115563,
	       x__h115575,
	       x__h12440,
	       x__h12455,
	       x__h12467,
	       x__h12479,
	       x__h12491,
	       x__h12503,
	       x__h12515,
	       x__h12527,
	       x__h134121,
	       x__h134137,
	       x__h134149,
	       x__h134161,
	       x__h134173,
	       x__h134185,
	       x__h134197,
	       x__h134209,
	       x__h152755,
	       x__h152771,
	       x__h152783,
	       x__h152795,
	       x__h152807,
	       x__h152819,
	       x__h152831,
	       x__h152843,
	       x__h21071,
	       x__h21086,
	       x__h21098,
	       x__h21110,
	       x__h21122,
	       x__h21134,
	       x__h21146,
	       x__h21158,
	       x__h29702,
	       x__h29717,
	       x__h29729,
	       x__h29741,
	       x__h29753,
	       x__h29765,
	       x__h29777,
	       x__h29789,
	       x__h38333,
	       x__h38348,
	       x__h38360,
	       x__h38372,
	       x__h38384,
	       x__h38396,
	       x__h38408,
	       x__h38420,
	       x__h96853,
	       x__h96869,
	       x__h96881,
	       x__h96893,
	       x__h96905,
	       x__h96917,
	       x__h96929,
	       x__h96941,
	       y__h115504,
	       y__h115516,
	       y__h115528,
	       y__h115540,
	       y__h115552,
	       y__h115564,
	       y__h115576,
	       y__h12456,
	       y__h12468,
	       y__h12480,
	       y__h12492,
	       y__h12504,
	       y__h12516,
	       y__h12528,
	       y__h134138,
	       y__h134150,
	       y__h134162,
	       y__h134174,
	       y__h134186,
	       y__h134198,
	       y__h134210,
	       y__h152772,
	       y__h152784,
	       y__h152796,
	       y__h152808,
	       y__h152820,
	       y__h152832,
	       y__h152844,
	       y__h21087,
	       y__h21099,
	       y__h21111,
	       y__h21123,
	       y__h21135,
	       y__h21147,
	       y__h21159,
	       y__h29718,
	       y__h29730,
	       y__h29742,
	       y__h29754,
	       y__h29766,
	       y__h29778,
	       y__h29790,
	       y__h38349,
	       y__h38361,
	       y__h38373,
	       y__h38385,
	       y__h38397,
	       y__h38409,
	       y__h38421,
	       y__h96870,
	       y__h96882,
	       y__h96894,
	       y__h96906,
	       y__h96918,
	       y__h96930,
	       y__h96942;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_119_PLU_ETC___d2125,
	       pktBuff_1_memBuffer_serverAdapterB_cnt_563_PLU_ETC___d2569,
	       pktBuff_2_memBuffer_serverAdapterB_cnt_007_PLU_ETC___d3013,
	       pktBuff_3_memBuffer_serverAdapterB_cnt_451_PLU_ETC___d3457;
  wire [1 : 0] ab__h102026,
	       ab__h120660,
	       ab__h139294,
	       ab__h83389,
	       x__h108623,
	       x__h109075,
	       x__h112868,
	       x__h113247,
	       x__h127257,
	       x__h127709,
	       x__h131502,
	       x__h131881,
	       x__h145891,
	       x__h146343,
	       x__h150136,
	       x__h150515,
	       x__h89986,
	       x__h90441,
	       x__h94234,
	       x__h94613;
  wire IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5549,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5550,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5575,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5580,
       IF_xbar_lower_lower_merges_1_routeFrom_537_BIT_ETC___d5570,
       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5474,
       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5475,
       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488,
       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5500,
       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5505,
       IF_xbar_lower_lower_merges_routeFrom_462_BIT_0_ETC___d5495,
       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_NOT_ETC___d5721,
       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5722,
       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735,
       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5747,
       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5752,
       IF_xbar_lower_merges_1_routeFrom_709_BIT_0_711_ETC___d5742,
       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_NOT_ETC___d5796,
       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5797,
       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810,
       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5822,
       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5827,
       IF_xbar_lower_merges_2_routeFrom_784_BIT_0_786_ETC___d5817,
       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_NOT_ETC___d5871,
       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5872,
       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885,
       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5897,
       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5902,
       IF_xbar_lower_merges_3_routeFrom_859_BIT_0_861_ETC___d5892,
       IF_xbar_lower_merges_fi0HasPrio_639_THEN_NOT_x_ETC___d5646,
       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5647,
       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660,
       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5672,
       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5677,
       IF_xbar_lower_merges_routeFrom_634_BIT_0_636_T_ETC___d5667,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5377,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5378,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5403,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5408,
       IF_xbar_lower_upper_merges_1_routeFrom_365_BIT_ETC___d5398,
       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5302,
       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5303,
       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316,
       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5328,
       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5333,
       IF_xbar_lower_upper_merges_routeFrom_290_BIT_0_ETC___d5323,
       IF_xbar_merges_1_fi0HasPrio_058_THEN_NOT_xbar__ETC___d6065,
       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6066,
       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079,
       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6091,
       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6096,
       IF_xbar_merges_1_routeFrom_053_BIT_0_055_THEN__ETC___d6086,
       IF_xbar_merges_2_fi0HasPrio_133_THEN_NOT_xbar__ETC___d6140,
       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6141,
       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154,
       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6166,
       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6171,
       IF_xbar_merges_2_routeFrom_128_BIT_0_130_THEN__ETC___d6161,
       IF_xbar_merges_3_fi0HasPrio_208_THEN_NOT_xbar__ETC___d6215,
       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6216,
       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229,
       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6241,
       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6246,
       IF_xbar_merges_3_routeFrom_203_BIT_0_205_THEN__ETC___d6236,
       IF_xbar_merges_4_fi0HasPrio_283_THEN_NOT_xbar__ETC___d6290,
       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6291,
       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304,
       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6316,
       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6321,
       IF_xbar_merges_4_routeFrom_278_BIT_0_280_THEN__ETC___d6311,
       IF_xbar_merges_5_fi0HasPrio_358_THEN_NOT_xbar__ETC___d6365,
       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6366,
       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379,
       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6391,
       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6396,
       IF_xbar_merges_5_routeFrom_353_BIT_0_355_THEN__ETC___d6386,
       IF_xbar_merges_6_fi0HasPrio_433_THEN_NOT_xbar__ETC___d6440,
       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6441,
       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454,
       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6466,
       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6471,
       IF_xbar_merges_6_routeFrom_428_BIT_0_430_THEN__ETC___d6461,
       IF_xbar_merges_7_fi0HasPrio_508_THEN_NOT_xbar__ETC___d6515,
       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6516,
       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529,
       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6541,
       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6546,
       IF_xbar_merges_7_routeFrom_503_BIT_0_505_THEN__ETC___d6536,
       IF_xbar_merges_fi0HasPrio_983_THEN_NOT_xbar_me_ETC___d5990,
       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d5991,
       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004,
       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6016,
       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6021,
       IF_xbar_merges_routeFrom_978_BIT_0_980_THEN_xb_ETC___d6011,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4859,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4860,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4885,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4890,
       IF_xbar_upper_lower_merges_1_routeFrom_847_BIT_ETC___d4880,
       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4784,
       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4785,
       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798,
       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4810,
       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4815,
       IF_xbar_upper_lower_merges_routeFrom_772_BIT_0_ETC___d4805,
       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_NOT_ETC___d5031,
       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5032,
       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045,
       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5057,
       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5062,
       IF_xbar_upper_merges_1_routeFrom_019_BIT_0_021_ETC___d5052,
       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_NOT_ETC___d5106,
       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5107,
       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120,
       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5132,
       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5137,
       IF_xbar_upper_merges_2_routeFrom_094_BIT_0_096_ETC___d5127,
       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_NOT_ETC___d5181,
       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5182,
       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195,
       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5207,
       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5212,
       IF_xbar_upper_merges_3_routeFrom_169_BIT_0_171_ETC___d5202,
       IF_xbar_upper_merges_fi0HasPrio_949_THEN_NOT_x_ETC___d4956,
       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4957,
       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970,
       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4982,
       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4987,
       IF_xbar_upper_merges_routeFrom_944_BIT_0_946_T_ETC___d4977,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4685,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4686,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4711,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4716,
       IF_xbar_upper_upper_merges_1_routeFrom_673_BIT_ETC___d4706,
       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4610,
       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4611,
       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624,
       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4636,
       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4641,
       IF_xbar_upper_upper_merges_routeFrom_598_BIT_0_ETC___d4631,
       NOT_IF_ringToMac_0_fifoTxData_read_block_339_T_ETC___d2434,
       NOT_IF_ringToMac_1_fifoTxData_read_block_783_T_ETC___d2878,
       NOT_IF_ringToMac_2_fifoTxData_read_block_227_T_ETC___d3322,
       NOT_IF_ringToMac_3_fifoTxData_read_block_671_T_ETC___d3766,
       NOT_ringToMac_0_fifoTxData_read_block_339_340__ETC___d2362,
       NOT_ringToMac_0_fifoTxData_write_block_299_300_ETC___d2320,
       NOT_ringToMac_1_fifoTxData_read_block_783_784__ETC___d2806,
       NOT_ringToMac_1_fifoTxData_write_block_743_744_ETC___d2764,
       NOT_ringToMac_2_fifoTxData_read_block_227_228__ETC___d3250,
       NOT_ringToMac_2_fifoTxData_write_block_187_188_ETC___d3208,
       NOT_ringToMac_3_fifoTxData_read_block_671_672__ETC___d3694,
       NOT_ringToMac_3_fifoTxData_write_block_631_632_ETC___d3652,
       pktBuff_0_memBuffer_serverAdapterA_cnt_054_SLT_3___d2223,
       pktBuff_0_memBuffer_serverAdapterB_cnt_119_SLT_3___d2249,
       pktBuff_1_memBuffer_serverAdapterA_cnt_498_SLT_3___d2667,
       pktBuff_1_memBuffer_serverAdapterB_cnt_563_SLT_3___d2693,
       pktBuff_2_memBuffer_serverAdapterA_cnt_942_SLT_3___d3111,
       pktBuff_2_memBuffer_serverAdapterB_cnt_007_SLT_3___d3137,
       pktBuff_3_memBuffer_serverAdapterA_cnt_386_SLT_3___d3555,
       pktBuff_3_memBuffer_serverAdapterB_cnt_451_SLT_3___d3581,
       ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345,
       ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343,
       ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354,
       ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352,
       ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789,
       ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787,
       ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798,
       ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796,
       ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233,
       ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231,
       ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242,
       ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240,
       ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677,
       ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675,
       ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686,
       ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684,
       verbose_ff_1_i_notFull__084_AND_verbose_ff_2_i_ETC___d8153,
       verbose_ff_2_2_i_notFull__483_AND_verbose_ff_3_ETC___d8147,
       xbar_lower_lower_merges_1_fo_i_notFull__525_AN_ETC___d5541,
       xbar_lower_lower_merges_1_routeFrom_537_BIT_1__ETC___d5583,
       xbar_lower_lower_merges_fo_i_notFull__450_AND__ETC___d5466,
       xbar_lower_lower_merges_routeFrom_462_BIT_1_46_ETC___d5508,
       xbar_lower_merges_1_fo_i_notFull__697_AND_IF_x_ETC___d5713,
       xbar_lower_merges_1_routeFrom_709_BIT_1_710_AN_ETC___d5755,
       xbar_lower_merges_2_fo_i_notFull__772_AND_IF_x_ETC___d5788,
       xbar_lower_merges_2_routeFrom_784_BIT_1_785_AN_ETC___d5830,
       xbar_lower_merges_3_fo_i_notFull__847_AND_IF_x_ETC___d5863,
       xbar_lower_merges_3_routeFrom_859_BIT_1_860_AN_ETC___d5905,
       xbar_lower_merges_fo_i_notFull__622_AND_IF_xba_ETC___d5638,
       xbar_lower_merges_routeFrom_634_BIT_1_635_AND__ETC___d5680,
       xbar_lower_upper_merges_1_fo_i_notFull__353_AN_ETC___d5369,
       xbar_lower_upper_merges_1_routeFrom_365_BIT_1__ETC___d5411,
       xbar_lower_upper_merges_fo_i_notFull__278_AND__ETC___d5294,
       xbar_lower_upper_merges_routeFrom_290_BIT_1_29_ETC___d5336,
       xbar_merges_1_fo_i_notFull__041_AND_IF_xbar_me_ETC___d6057,
       xbar_merges_1_routeFrom_053_BIT_1_054_AND_IF_x_ETC___d6099,
       xbar_merges_2_fo_i_notFull__116_AND_IF_xbar_me_ETC___d6132,
       xbar_merges_2_routeFrom_128_BIT_1_129_AND_IF_x_ETC___d6174,
       xbar_merges_3_fo_i_notFull__191_AND_IF_xbar_me_ETC___d6207,
       xbar_merges_3_routeFrom_203_BIT_1_204_AND_IF_x_ETC___d6249,
       xbar_merges_4_fo_i_notFull__266_AND_IF_xbar_me_ETC___d6282,
       xbar_merges_4_routeFrom_278_BIT_1_279_AND_IF_x_ETC___d6324,
       xbar_merges_5_fo_i_notFull__341_AND_IF_xbar_me_ETC___d6357,
       xbar_merges_5_routeFrom_353_BIT_1_354_AND_IF_x_ETC___d6399,
       xbar_merges_6_fo_i_notFull__416_AND_IF_xbar_me_ETC___d6432,
       xbar_merges_6_routeFrom_428_BIT_1_429_AND_IF_x_ETC___d6474,
       xbar_merges_7_fo_i_notFull__491_AND_IF_xbar_me_ETC___d6507,
       xbar_merges_7_routeFrom_503_BIT_1_504_AND_IF_x_ETC___d6549,
       xbar_merges_fo_i_notFull__966_AND_IF_xbar_merg_ETC___d5982,
       xbar_merges_routeFrom_978_BIT_1_979_AND_IF_xba_ETC___d6024,
       xbar_upper_lower_merges_1_fo_i_notFull__835_AN_ETC___d4851,
       xbar_upper_lower_merges_1_routeFrom_847_BIT_1__ETC___d4893,
       xbar_upper_lower_merges_fo_i_notFull__760_AND__ETC___d4776,
       xbar_upper_lower_merges_routeFrom_772_BIT_1_77_ETC___d4818,
       xbar_upper_merges_1_fo_i_notFull__007_AND_IF_x_ETC___d5023,
       xbar_upper_merges_1_routeFrom_019_BIT_1_020_AN_ETC___d5065,
       xbar_upper_merges_2_fo_i_notFull__082_AND_IF_x_ETC___d5098,
       xbar_upper_merges_2_routeFrom_094_BIT_1_095_AN_ETC___d5140,
       xbar_upper_merges_3_fo_i_notFull__157_AND_IF_x_ETC___d5173,
       xbar_upper_merges_3_routeFrom_169_BIT_1_170_AN_ETC___d5215,
       xbar_upper_merges_fo_i_notFull__932_AND_IF_xba_ETC___d4948,
       xbar_upper_merges_routeFrom_944_BIT_1_945_AND__ETC___d4990,
       xbar_upper_upper_merges_1_fo_i_notFull__661_AN_ETC___d4677,
       xbar_upper_upper_merges_1_routeFrom_673_BIT_1__ETC___d4719,
       xbar_upper_upper_merges_fo_i_notFull__586_AND__ETC___d4602,
       xbar_upper_upper_merges_routeFrom_598_BIT_1_59_ETC___d4644;

  // action method rxchan_0_macRx_put
  assign RDY_rxchan_0_macRx_put = macToRing_0_gearbox_in_ff_FULL_N ;

  // value method rxchan_0_writeClient_first
  assign rxchan_0_writeClient_first = hostchan_0_writeDataFifo_D_OUT ;
  assign RDY_rxchan_0_writeClient_first = hostchan_0_writeDataFifo_EMPTY_N ;

  // action method rxchan_0_writeClient_deq
  assign RDY_rxchan_0_writeClient_deq = hostchan_0_writeDataFifo_EMPTY_N ;

  // value method rxchan_0_writeClient_notEmpty
  assign rxchan_0_writeClient_notEmpty = hostchan_0_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_0_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_0_next_first
  assign rxchan_0_next_first = hostchan_0_outReqFifo_D_OUT ;
  assign RDY_rxchan_0_next_first = hostchan_0_outReqFifo_EMPTY_N ;

  // action method rxchan_0_next_deq
  assign RDY_rxchan_0_next_deq = hostchan_0_outReqFifo_EMPTY_N ;

  // value method rxchan_0_next_notEmpty
  assign rxchan_0_next_notEmpty = hostchan_0_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_0_next_notEmpty = 1'd1 ;

  // action method rxchan_0_verbose_enq
  assign RDY_rxchan_0_verbose_enq = verbose_ff_0_1_FULL_N ;

  // value method rxchan_0_verbose_notFull
  assign rxchan_0_verbose_notFull = verbose_ff_0_1_FULL_N ;
  assign RDY_rxchan_0_verbose_notFull = 1'd1 ;

  // action method rxchan_1_macRx_put
  assign RDY_rxchan_1_macRx_put = macToRing_1_gearbox_in_ff_FULL_N ;

  // value method rxchan_1_writeClient_first
  assign rxchan_1_writeClient_first = hostchan_1_writeDataFifo_D_OUT ;
  assign RDY_rxchan_1_writeClient_first = hostchan_1_writeDataFifo_EMPTY_N ;

  // action method rxchan_1_writeClient_deq
  assign RDY_rxchan_1_writeClient_deq = hostchan_1_writeDataFifo_EMPTY_N ;

  // value method rxchan_1_writeClient_notEmpty
  assign rxchan_1_writeClient_notEmpty = hostchan_1_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_1_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_1_next_first
  assign rxchan_1_next_first = hostchan_1_outReqFifo_D_OUT ;
  assign RDY_rxchan_1_next_first = hostchan_1_outReqFifo_EMPTY_N ;

  // action method rxchan_1_next_deq
  assign RDY_rxchan_1_next_deq = hostchan_1_outReqFifo_EMPTY_N ;

  // value method rxchan_1_next_notEmpty
  assign rxchan_1_next_notEmpty = hostchan_1_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_1_next_notEmpty = 1'd1 ;

  // action method rxchan_1_verbose_enq
  assign RDY_rxchan_1_verbose_enq = verbose_ff_1_FULL_N ;

  // value method rxchan_1_verbose_notFull
  assign rxchan_1_verbose_notFull = verbose_ff_1_FULL_N ;
  assign RDY_rxchan_1_verbose_notFull = 1'd1 ;

  // action method rxchan_2_macRx_put
  assign RDY_rxchan_2_macRx_put = macToRing_2_gearbox_in_ff_FULL_N ;

  // value method rxchan_2_writeClient_first
  assign rxchan_2_writeClient_first = hostchan_2_writeDataFifo_D_OUT ;
  assign RDY_rxchan_2_writeClient_first = hostchan_2_writeDataFifo_EMPTY_N ;

  // action method rxchan_2_writeClient_deq
  assign RDY_rxchan_2_writeClient_deq = hostchan_2_writeDataFifo_EMPTY_N ;

  // value method rxchan_2_writeClient_notEmpty
  assign rxchan_2_writeClient_notEmpty = hostchan_2_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_2_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_2_next_first
  assign rxchan_2_next_first = hostchan_2_outReqFifo_D_OUT ;
  assign RDY_rxchan_2_next_first = hostchan_2_outReqFifo_EMPTY_N ;

  // action method rxchan_2_next_deq
  assign RDY_rxchan_2_next_deq = hostchan_2_outReqFifo_EMPTY_N ;

  // value method rxchan_2_next_notEmpty
  assign rxchan_2_next_notEmpty = hostchan_2_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_2_next_notEmpty = 1'd1 ;

  // action method rxchan_2_verbose_enq
  assign RDY_rxchan_2_verbose_enq = verbose_ff_2_FULL_N ;

  // value method rxchan_2_verbose_notFull
  assign rxchan_2_verbose_notFull = verbose_ff_2_FULL_N ;
  assign RDY_rxchan_2_verbose_notFull = 1'd1 ;

  // action method rxchan_3_macRx_put
  assign RDY_rxchan_3_macRx_put = macToRing_3_gearbox_in_ff_FULL_N ;

  // value method rxchan_3_writeClient_first
  assign rxchan_3_writeClient_first = hostchan_3_writeDataFifo_D_OUT ;
  assign RDY_rxchan_3_writeClient_first = hostchan_3_writeDataFifo_EMPTY_N ;

  // action method rxchan_3_writeClient_deq
  assign RDY_rxchan_3_writeClient_deq = hostchan_3_writeDataFifo_EMPTY_N ;

  // value method rxchan_3_writeClient_notEmpty
  assign rxchan_3_writeClient_notEmpty = hostchan_3_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_3_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_3_next_first
  assign rxchan_3_next_first = hostchan_3_outReqFifo_D_OUT ;
  assign RDY_rxchan_3_next_first = hostchan_3_outReqFifo_EMPTY_N ;

  // action method rxchan_3_next_deq
  assign RDY_rxchan_3_next_deq = hostchan_3_outReqFifo_EMPTY_N ;

  // value method rxchan_3_next_notEmpty
  assign rxchan_3_next_notEmpty = hostchan_3_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_3_next_notEmpty = 1'd1 ;

  // action method rxchan_3_verbose_enq
  assign RDY_rxchan_3_verbose_enq = verbose_ff_3_FULL_N ;

  // value method rxchan_3_verbose_notFull
  assign rxchan_3_verbose_notFull = verbose_ff_3_FULL_N ;
  assign RDY_rxchan_3_verbose_notFull = 1'd1 ;

  // action method hostchan_0_writeServer_enq
  assign RDY_hostchan_0_writeServer_enq = pktBuff_0_RDY_writeServer_enq ;

  // value method hostchan_0_writeServer_notFull
  assign hostchan_0_writeServer_notFull = pktBuff_0_writeServer_notFull ;
  assign RDY_hostchan_0_writeServer_notFull = 1'd1 ;

  // value method hostchan_0_writeClient_first
  assign hostchan_0_writeClient_first = writeDataFifo_0_D_OUT ;
  assign RDY_hostchan_0_writeClient_first = writeDataFifo_0_EMPTY_N ;

  // action method hostchan_0_writeClient_deq
  assign RDY_hostchan_0_writeClient_deq = writeDataFifo_0_EMPTY_N ;

  // value method hostchan_0_writeClient_notEmpty
  assign hostchan_0_writeClient_notEmpty = writeDataFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_writeClient_notEmpty = 1'd1 ;

  // value method hostchan_0_next_first
  assign hostchan_0_next_first = outReqFifo_0_D_OUT ;
  assign RDY_hostchan_0_next_first = outReqFifo_0_EMPTY_N ;

  // action method hostchan_0_next_deq
  assign RDY_hostchan_0_next_deq = outReqFifo_0_EMPTY_N ;

  // value method hostchan_0_next_notEmpty
  assign hostchan_0_next_notEmpty = outReqFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_next_notEmpty = 1'd1 ;

  // action method hostchan_0_verbose_enq
  assign RDY_hostchan_0_verbose_enq = verbose_ff_0_FULL_N ;

  // value method hostchan_0_verbose_notFull
  assign hostchan_0_verbose_notFull = verbose_ff_0_FULL_N ;
  assign RDY_hostchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_0_writeServer_enq
  assign RDY_txchan_0_writeServer_enq = pktBuff_0_fifoWriteData_FULL_N ;

  // value method txchan_0_writeServer_notFull
  assign txchan_0_writeServer_notFull = pktBuff_0_fifoWriteData_FULL_N ;
  assign RDY_txchan_0_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_0_macTx_get
  assign txchan_0_macTx_get = ringToMac_0_writeMacFifo_D_OUT ;
  assign RDY_txchan_0_macTx_get = ringToMac_0_writeMacFifo_EMPTY_N ;

  // action method txchan_0_verbose_enq
  assign RDY_txchan_0_verbose_enq = verbose_ff_0_3_FULL_N ;

  // value method txchan_0_verbose_notFull
  assign txchan_0_verbose_notFull = verbose_ff_0_3_FULL_N ;
  assign RDY_txchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_1_writeServer_enq
  assign RDY_txchan_1_writeServer_enq = pktBuff_1_fifoWriteData_FULL_N ;

  // value method txchan_1_writeServer_notFull
  assign txchan_1_writeServer_notFull = pktBuff_1_fifoWriteData_FULL_N ;
  assign RDY_txchan_1_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_1_macTx_get
  assign txchan_1_macTx_get = ringToMac_1_writeMacFifo_D_OUT ;
  assign RDY_txchan_1_macTx_get = ringToMac_1_writeMacFifo_EMPTY_N ;

  // action method txchan_1_verbose_enq
  assign RDY_txchan_1_verbose_enq = verbose_ff_1_2_FULL_N ;

  // value method txchan_1_verbose_notFull
  assign txchan_1_verbose_notFull = verbose_ff_1_2_FULL_N ;
  assign RDY_txchan_1_verbose_notFull = 1'd1 ;

  // action method txchan_2_writeServer_enq
  assign RDY_txchan_2_writeServer_enq = pktBuff_2_fifoWriteData_FULL_N ;

  // value method txchan_2_writeServer_notFull
  assign txchan_2_writeServer_notFull = pktBuff_2_fifoWriteData_FULL_N ;
  assign RDY_txchan_2_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_2_macTx_get
  assign txchan_2_macTx_get = ringToMac_2_writeMacFifo_D_OUT ;
  assign RDY_txchan_2_macTx_get = ringToMac_2_writeMacFifo_EMPTY_N ;

  // action method txchan_2_verbose_enq
  assign RDY_txchan_2_verbose_enq = verbose_ff_2_2_FULL_N ;

  // value method txchan_2_verbose_notFull
  assign txchan_2_verbose_notFull = verbose_ff_2_2_FULL_N ;
  assign RDY_txchan_2_verbose_notFull = 1'd1 ;

  // action method txchan_3_writeServer_enq
  assign RDY_txchan_3_writeServer_enq = pktBuff_3_fifoWriteData_FULL_N ;

  // value method txchan_3_writeServer_notFull
  assign txchan_3_writeServer_notFull = pktBuff_3_fifoWriteData_FULL_N ;
  assign RDY_txchan_3_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_3_macTx_get
  assign txchan_3_macTx_get = ringToMac_3_writeMacFifo_D_OUT ;
  assign RDY_txchan_3_macTx_get = ringToMac_3_writeMacFifo_EMPTY_N ;

  // action method txchan_3_verbose_enq
  assign RDY_txchan_3_verbose_enq = verbose_ff_3_2_FULL_N ;

  // value method txchan_3_verbose_notFull
  assign txchan_3_verbose_notFull = verbose_ff_3_2_FULL_N ;
  assign RDY_txchan_3_verbose_notFull = 1'd1 ;

  // action method prev_0_enq
  assign RDY_prev_0_enq = meta_ff_0_FULL_N ;

  // value method prev_0_notFull
  assign prev_0_notFull = meta_ff_0_FULL_N ;
  assign RDY_prev_0_notFull = 1'd1 ;

  // action method prev_1_enq
  assign RDY_prev_1_enq = meta_ff_1_FULL_N ;

  // value method prev_1_notFull
  assign prev_1_notFull = meta_ff_1_FULL_N ;
  assign RDY_prev_1_notFull = 1'd1 ;

  // action method prev_2_enq
  assign RDY_prev_2_enq = meta_ff_2_FULL_N ;

  // value method prev_2_notFull
  assign prev_2_notFull = meta_ff_2_FULL_N ;
  assign RDY_prev_2_notFull = 1'd1 ;

  // action method prev_3_enq
  assign RDY_prev_3_enq = meta_ff_3_FULL_N ;

  // value method prev_3_notFull
  assign prev_3_notFull = meta_ff_3_FULL_N ;
  assign RDY_prev_3_notFull = 1'd1 ;

  // action method prev_4_enq
  assign RDY_prev_4_enq = meta_ff_4_FULL_N ;

  // value method prev_4_notFull
  assign prev_4_notFull = meta_ff_4_FULL_N ;
  assign RDY_prev_4_notFull = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity =
	     verbose_ff_0_1_FULL_N &&
	     verbose_ff_1_i_notFull__084_AND_verbose_ff_2_i_ETC___d8153 ;

  // submodule gearbox_dn_16_0
  mkStreamGearboxDn_32_16 gearbox_dn_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_0_datain_put),
					  .EN_datain_put(gearbox_dn_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_1
  mkStreamGearboxDn_32_16 gearbox_dn_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_1_datain_put),
					  .EN_datain_put(gearbox_dn_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_2
  mkStreamGearboxDn_32_16 gearbox_dn_16_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_2_datain_put),
					  .EN_datain_put(gearbox_dn_16_2_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_2_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_2_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_3
  mkStreamGearboxDn_32_16 gearbox_dn_16_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_3_datain_put),
					  .EN_datain_put(gearbox_dn_16_3_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_3_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_3_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_0
  mkStreamGearboxDn_64_32 gearbox_dn_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_0_datain_put),
					  .EN_datain_put(gearbox_dn_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_1
  mkStreamGearboxDn_64_32 gearbox_dn_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_1_datain_put),
					  .EN_datain_put(gearbox_dn_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_2
  mkStreamGearboxDn_64_32 gearbox_dn_32_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_2_datain_put),
					  .EN_datain_put(gearbox_dn_32_2_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_2_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_2_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_3
  mkStreamGearboxDn_64_32 gearbox_dn_32_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_3_datain_put),
					  .EN_datain_put(gearbox_dn_32_3_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_3_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_3_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_0
  mkStreamGearboxUp_16_32 gearbox_up_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_0_datain_put),
					  .EN_datain_put(gearbox_up_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_0_RDY_datain_put),
					  .dataout_get(gearbox_up_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_1
  mkStreamGearboxUp_16_32 gearbox_up_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_1_datain_put),
					  .EN_datain_put(gearbox_up_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_1_RDY_datain_put),
					  .dataout_get(gearbox_up_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_2
  mkStreamGearboxUp_16_32 gearbox_up_16_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_2_datain_put),
					  .EN_datain_put(gearbox_up_16_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_2_RDY_datain_put),
					  .dataout_get(gearbox_up_16_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_3
  mkStreamGearboxUp_16_32 gearbox_up_16_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_3_datain_put),
					  .EN_datain_put(gearbox_up_16_3_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_3_RDY_datain_put),
					  .dataout_get(gearbox_up_16_3_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_4
  mkStreamGearboxUp_16_32 gearbox_up_16_4(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_4_datain_put),
					  .EN_datain_put(gearbox_up_16_4_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_4_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_4_RDY_datain_put),
					  .dataout_get(gearbox_up_16_4_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_4_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_0
  mkStreamGearboxUp_32_64 gearbox_up_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_0_datain_put),
					  .EN_datain_put(gearbox_up_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_0_RDY_datain_put),
					  .dataout_get(gearbox_up_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_1
  mkStreamGearboxUp_32_64 gearbox_up_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_1_datain_put),
					  .EN_datain_put(gearbox_up_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_1_RDY_datain_put),
					  .dataout_get(gearbox_up_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_2
  mkStreamGearboxUp_32_64 gearbox_up_32_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_2_datain_put),
					  .EN_datain_put(gearbox_up_32_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_2_RDY_datain_put),
					  .dataout_get(gearbox_up_32_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_3
  mkStreamGearboxUp_32_64 gearbox_up_32_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_3_datain_put),
					  .EN_datain_put(gearbox_up_32_3_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_3_RDY_datain_put),
					  .dataout_get(gearbox_up_32_3_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_4
  mkStreamGearboxUp_32_64 gearbox_up_32_4(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_4_datain_put),
					  .EN_datain_put(gearbox_up_32_4_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_4_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_4_RDY_datain_put),
					  .dataout_get(gearbox_up_32_4_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_4_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule hostchan_0_outReqFifo
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) hostchan_0_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_outReqFifo_D_IN),
						 .ENQ(hostchan_0_outReqFifo_ENQ),
						 .DEQ(hostchan_0_outReqFifo_DEQ),
						 .CLR(hostchan_0_outReqFifo_CLR),
						 .D_OUT(hostchan_0_outReqFifo_D_OUT),
						 .FULL_N(hostchan_0_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_0_outReqFifo_EMPTY_N));

  // submodule hostchan_0_parser
  mkParser hostchan_0_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_0_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_0_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_0_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_0_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_0_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_0_parser_RDY_frameIn_put),
			     .meta_get(hostchan_0_parser_meta_get),
			     .RDY_meta_get(hostchan_0_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_0_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_0_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_0_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_0_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_0_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_0_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_0_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_0_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_0_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_0_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_0_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_0_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_0_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_0_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_0_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_0_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_0_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_pktLenFifo_D_IN),
						 .ENQ(hostchan_0_pktLenFifo_ENQ),
						 .DEQ(hostchan_0_pktLenFifo_DEQ),
						 .CLR(hostchan_0_pktLenFifo_CLR),
						 .D_OUT(hostchan_0_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_0_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_0_pktLenFifo_EMPTY_N));

  // submodule hostchan_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_0_readDataFifo_D_IN),
						   .ENQ(hostchan_0_readDataFifo_ENQ),
						   .DEQ(hostchan_0_readDataFifo_DEQ),
						   .CLR(hostchan_0_readDataFifo_CLR),
						   .D_OUT(hostchan_0_readDataFifo_D_OUT),
						   .FULL_N(hostchan_0_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_0_readDataFifo_EMPTY_N));

  // submodule hostchan_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readLenFifo_D_IN),
						  .ENQ(hostchan_0_readLenFifo_ENQ),
						  .DEQ(hostchan_0_readLenFifo_DEQ),
						  .CLR(hostchan_0_readLenFifo_CLR),
						  .D_OUT(hostchan_0_readLenFifo_D_OUT),
						  .FULL_N(hostchan_0_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readLenFifo_EMPTY_N));

  // submodule hostchan_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readReqFifo_D_IN),
						  .ENQ(hostchan_0_readReqFifo_ENQ),
						  .DEQ(hostchan_0_readReqFifo_DEQ),
						  .CLR(hostchan_0_readReqFifo_CLR),
						  .D_OUT(hostchan_0_readReqFifo_D_OUT),
						  .FULL_N(hostchan_0_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readReqFifo_EMPTY_N));

  // submodule hostchan_0_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_0_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_verbose_ff_D_IN),
						 .ENQ(hostchan_0_verbose_ff_ENQ),
						 .DEQ(hostchan_0_verbose_ff_DEQ),
						 .CLR(hostchan_0_verbose_ff_CLR),
						 .D_OUT(hostchan_0_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_0_verbose_ff_EMPTY_N));

  // submodule hostchan_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_0_writeDataFifo_D_IN),
						    .ENQ(hostchan_0_writeDataFifo_ENQ),
						    .DEQ(hostchan_0_writeDataFifo_DEQ),
						    .CLR(hostchan_0_writeDataFifo_CLR),
						    .D_OUT(hostchan_0_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_0_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_0_writeDataFifo_EMPTY_N));

  // submodule hostchan_1_outReqFifo
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) hostchan_1_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_outReqFifo_D_IN),
						 .ENQ(hostchan_1_outReqFifo_ENQ),
						 .DEQ(hostchan_1_outReqFifo_DEQ),
						 .CLR(hostchan_1_outReqFifo_CLR),
						 .D_OUT(hostchan_1_outReqFifo_D_OUT),
						 .FULL_N(hostchan_1_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_1_outReqFifo_EMPTY_N));

  // submodule hostchan_1_parser
  mkParser hostchan_1_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_1_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_1_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_1_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_1_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_1_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_1_parser_RDY_frameIn_put),
			     .meta_get(hostchan_1_parser_meta_get),
			     .RDY_meta_get(hostchan_1_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_1_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_1_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_1_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_1_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_1_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_1_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_1_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_1_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_1_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_1_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_1_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_1_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_1_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_1_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_1_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_1_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_1_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_pktLenFifo_D_IN),
						 .ENQ(hostchan_1_pktLenFifo_ENQ),
						 .DEQ(hostchan_1_pktLenFifo_DEQ),
						 .CLR(hostchan_1_pktLenFifo_CLR),
						 .D_OUT(hostchan_1_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_1_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_1_pktLenFifo_EMPTY_N));

  // submodule hostchan_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_1_readDataFifo_D_IN),
						   .ENQ(hostchan_1_readDataFifo_ENQ),
						   .DEQ(hostchan_1_readDataFifo_DEQ),
						   .CLR(hostchan_1_readDataFifo_CLR),
						   .D_OUT(hostchan_1_readDataFifo_D_OUT),
						   .FULL_N(hostchan_1_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_1_readDataFifo_EMPTY_N));

  // submodule hostchan_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readLenFifo_D_IN),
						  .ENQ(hostchan_1_readLenFifo_ENQ),
						  .DEQ(hostchan_1_readLenFifo_DEQ),
						  .CLR(hostchan_1_readLenFifo_CLR),
						  .D_OUT(hostchan_1_readLenFifo_D_OUT),
						  .FULL_N(hostchan_1_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readLenFifo_EMPTY_N));

  // submodule hostchan_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readReqFifo_D_IN),
						  .ENQ(hostchan_1_readReqFifo_ENQ),
						  .DEQ(hostchan_1_readReqFifo_DEQ),
						  .CLR(hostchan_1_readReqFifo_CLR),
						  .D_OUT(hostchan_1_readReqFifo_D_OUT),
						  .FULL_N(hostchan_1_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readReqFifo_EMPTY_N));

  // submodule hostchan_1_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_1_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_verbose_ff_D_IN),
						 .ENQ(hostchan_1_verbose_ff_ENQ),
						 .DEQ(hostchan_1_verbose_ff_DEQ),
						 .CLR(hostchan_1_verbose_ff_CLR),
						 .D_OUT(hostchan_1_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_1_verbose_ff_EMPTY_N));

  // submodule hostchan_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_1_writeDataFifo_D_IN),
						    .ENQ(hostchan_1_writeDataFifo_ENQ),
						    .DEQ(hostchan_1_writeDataFifo_DEQ),
						    .CLR(hostchan_1_writeDataFifo_CLR),
						    .D_OUT(hostchan_1_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_1_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_1_writeDataFifo_EMPTY_N));

  // submodule hostchan_2_outReqFifo
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) hostchan_2_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_outReqFifo_D_IN),
						 .ENQ(hostchan_2_outReqFifo_ENQ),
						 .DEQ(hostchan_2_outReqFifo_DEQ),
						 .CLR(hostchan_2_outReqFifo_CLR),
						 .D_OUT(hostchan_2_outReqFifo_D_OUT),
						 .FULL_N(hostchan_2_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_2_outReqFifo_EMPTY_N));

  // submodule hostchan_2_parser
  mkParser hostchan_2_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_2_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_2_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_2_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_2_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_2_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_2_parser_RDY_frameIn_put),
			     .meta_get(hostchan_2_parser_meta_get),
			     .RDY_meta_get(hostchan_2_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_2_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_2_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_2_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_2_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_2_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_2_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_2_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_2_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_2_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_2_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_2_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_2_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_2_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_2_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_2_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_2_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_2_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_pktLenFifo_D_IN),
						 .ENQ(hostchan_2_pktLenFifo_ENQ),
						 .DEQ(hostchan_2_pktLenFifo_DEQ),
						 .CLR(hostchan_2_pktLenFifo_CLR),
						 .D_OUT(hostchan_2_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_2_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_2_pktLenFifo_EMPTY_N));

  // submodule hostchan_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_2_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_2_readDataFifo_D_IN),
						   .ENQ(hostchan_2_readDataFifo_ENQ),
						   .DEQ(hostchan_2_readDataFifo_DEQ),
						   .CLR(hostchan_2_readDataFifo_CLR),
						   .D_OUT(hostchan_2_readDataFifo_D_OUT),
						   .FULL_N(hostchan_2_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_2_readDataFifo_EMPTY_N));

  // submodule hostchan_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_2_readLenFifo_D_IN),
						  .ENQ(hostchan_2_readLenFifo_ENQ),
						  .DEQ(hostchan_2_readLenFifo_DEQ),
						  .CLR(hostchan_2_readLenFifo_CLR),
						  .D_OUT(hostchan_2_readLenFifo_D_OUT),
						  .FULL_N(hostchan_2_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_2_readLenFifo_EMPTY_N));

  // submodule hostchan_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_2_readReqFifo_D_IN),
						  .ENQ(hostchan_2_readReqFifo_ENQ),
						  .DEQ(hostchan_2_readReqFifo_DEQ),
						  .CLR(hostchan_2_readReqFifo_CLR),
						  .D_OUT(hostchan_2_readReqFifo_D_OUT),
						  .FULL_N(hostchan_2_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_2_readReqFifo_EMPTY_N));

  // submodule hostchan_2_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_2_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_verbose_ff_D_IN),
						 .ENQ(hostchan_2_verbose_ff_ENQ),
						 .DEQ(hostchan_2_verbose_ff_DEQ),
						 .CLR(hostchan_2_verbose_ff_CLR),
						 .D_OUT(hostchan_2_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_2_verbose_ff_EMPTY_N));

  // submodule hostchan_2_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_2_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_2_writeDataFifo_D_IN),
						    .ENQ(hostchan_2_writeDataFifo_ENQ),
						    .DEQ(hostchan_2_writeDataFifo_DEQ),
						    .CLR(hostchan_2_writeDataFifo_CLR),
						    .D_OUT(hostchan_2_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_2_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_2_writeDataFifo_EMPTY_N));

  // submodule hostchan_3_outReqFifo
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) hostchan_3_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_outReqFifo_D_IN),
						 .ENQ(hostchan_3_outReqFifo_ENQ),
						 .DEQ(hostchan_3_outReqFifo_DEQ),
						 .CLR(hostchan_3_outReqFifo_CLR),
						 .D_OUT(hostchan_3_outReqFifo_D_OUT),
						 .FULL_N(hostchan_3_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_3_outReqFifo_EMPTY_N));

  // submodule hostchan_3_parser
  mkParser hostchan_3_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_3_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_3_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_3_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_3_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_3_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_3_parser_RDY_frameIn_put),
			     .meta_get(hostchan_3_parser_meta_get),
			     .RDY_meta_get(hostchan_3_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_3_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_3_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_3_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_3_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_3_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_3_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_3_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_3_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_3_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_3_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_3_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_3_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_3_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_3_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_3_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_3_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_3_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_pktLenFifo_D_IN),
						 .ENQ(hostchan_3_pktLenFifo_ENQ),
						 .DEQ(hostchan_3_pktLenFifo_DEQ),
						 .CLR(hostchan_3_pktLenFifo_CLR),
						 .D_OUT(hostchan_3_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_3_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_3_pktLenFifo_EMPTY_N));

  // submodule hostchan_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_3_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_3_readDataFifo_D_IN),
						   .ENQ(hostchan_3_readDataFifo_ENQ),
						   .DEQ(hostchan_3_readDataFifo_DEQ),
						   .CLR(hostchan_3_readDataFifo_CLR),
						   .D_OUT(hostchan_3_readDataFifo_D_OUT),
						   .FULL_N(hostchan_3_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_3_readDataFifo_EMPTY_N));

  // submodule hostchan_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_3_readLenFifo_D_IN),
						  .ENQ(hostchan_3_readLenFifo_ENQ),
						  .DEQ(hostchan_3_readLenFifo_DEQ),
						  .CLR(hostchan_3_readLenFifo_CLR),
						  .D_OUT(hostchan_3_readLenFifo_D_OUT),
						  .FULL_N(hostchan_3_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_3_readLenFifo_EMPTY_N));

  // submodule hostchan_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_3_readReqFifo_D_IN),
						  .ENQ(hostchan_3_readReqFifo_ENQ),
						  .DEQ(hostchan_3_readReqFifo_DEQ),
						  .CLR(hostchan_3_readReqFifo_CLR),
						  .D_OUT(hostchan_3_readReqFifo_D_OUT),
						  .FULL_N(hostchan_3_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_3_readReqFifo_EMPTY_N));

  // submodule hostchan_3_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_3_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_verbose_ff_D_IN),
						 .ENQ(hostchan_3_verbose_ff_ENQ),
						 .DEQ(hostchan_3_verbose_ff_DEQ),
						 .CLR(hostchan_3_verbose_ff_CLR),
						 .D_OUT(hostchan_3_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_3_verbose_ff_EMPTY_N));

  // submodule hostchan_3_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_3_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_3_writeDataFifo_D_IN),
						    .ENQ(hostchan_3_writeDataFifo_ENQ),
						    .DEQ(hostchan_3_writeDataFifo_DEQ),
						    .CLR(hostchan_3_writeDataFifo_CLR),
						    .D_OUT(hostchan_3_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_3_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_3_writeDataFifo_EMPTY_N));

  // submodule input_queues_0
  mkPacketBuffer_64 #(.param1("inputQ 0")) input_queues_0(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_0_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_0_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_0_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_0_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_0_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_0_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_0_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_0_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_0_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_0_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_0_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_0_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_0_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_0_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_1
  mkPacketBuffer_64 #(.param1("inputQ 1")) input_queues_1(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_1_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_1_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_1_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_1_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_1_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_1_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_1_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_1_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_1_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_1_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_1_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_1_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_1_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_1_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_2
  mkPacketBuffer_64 #(.param1("inputQ 2")) input_queues_2(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_2_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_2_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_2_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_2_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_2_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_2_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_2_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_2_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_2_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_2_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_2_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_2_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_2_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_2_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_3
  mkPacketBuffer_64 #(.param1("inputQ 3")) input_queues_3(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_3_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_3_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_3_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_3_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_3_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_3_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_3_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_3_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_3_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_3_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_3_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_3_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_3_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_3_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_4
  mkPacketBuffer_64 #(.param1("inputQ 4")) input_queues_4(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_4_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_4_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_4_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_4_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_4_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_4_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_4_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_4_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_4_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_4_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_4_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_4_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_4_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_4_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule localReset
  SyncReset #(.RSTDELAY(32'd1)) localReset(.CLK(CLK),
					   .IN_RST(RST_N),
					   .OUT_RST(localReset_OUT_RST));

  // submodule macToRing_0_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_0_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_0_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_0_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_0_gearbox_in_ff_DEQ),
						     .CLR(macToRing_0_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_0_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_0_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_0_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_0_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_0_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_0_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_0_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_0_gearbox_out_ff_DEQ),
						      .CLR(macToRing_0_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_0_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_0_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_0_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_0_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_0_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_0_writeDataFifo_sD_IN),
							  .sENQ(macToRing_0_writeDataFifo_sENQ),
							  .dDEQ(macToRing_0_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_0_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_0_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_0_writeDataFifo_dD_OUT));

  // submodule macToRing_1_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_1_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_1_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_1_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_1_gearbox_in_ff_DEQ),
						     .CLR(macToRing_1_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_1_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_1_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_1_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_1_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_1_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_1_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_1_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_1_gearbox_out_ff_DEQ),
						      .CLR(macToRing_1_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_1_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_1_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_1_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_1_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_1_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_1_writeDataFifo_sD_IN),
							  .sENQ(macToRing_1_writeDataFifo_sENQ),
							  .dDEQ(macToRing_1_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_1_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_1_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_1_writeDataFifo_dD_OUT));

  // submodule macToRing_2_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_2_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_2_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_2_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_2_gearbox_in_ff_DEQ),
						     .CLR(macToRing_2_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_2_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_2_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_2_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_2_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_2_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_2_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_2_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_2_gearbox_out_ff_DEQ),
						      .CLR(macToRing_2_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_2_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_2_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_2_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_2_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_2_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_2_writeDataFifo_sD_IN),
							  .sENQ(macToRing_2_writeDataFifo_sENQ),
							  .dDEQ(macToRing_2_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_2_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_2_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_2_writeDataFifo_dD_OUT));

  // submodule macToRing_3_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_3_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_3_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_3_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_3_gearbox_in_ff_DEQ),
						     .CLR(macToRing_3_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_3_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_3_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_3_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_3_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_3_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_3_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_3_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_3_gearbox_out_ff_DEQ),
						      .CLR(macToRing_3_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_3_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_3_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_3_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_3_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_3_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_3_writeDataFifo_sD_IN),
							  .sENQ(macToRing_3_writeDataFifo_sENQ),
							  .dDEQ(macToRing_3_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_3_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_3_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_3_writeDataFifo_dD_OUT));

  // submodule meta_ff_0
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_0(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_0_D_IN),
				     .ENQ(meta_ff_0_ENQ),
				     .DEQ(meta_ff_0_DEQ),
				     .CLR(meta_ff_0_CLR),
				     .D_OUT(meta_ff_0_D_OUT),
				     .FULL_N(meta_ff_0_FULL_N),
				     .EMPTY_N(meta_ff_0_EMPTY_N));

  // submodule meta_ff_0_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_0_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_0_1_D_IN),
				       .ENQ(meta_ff_0_1_ENQ),
				       .DEQ(meta_ff_0_1_DEQ),
				       .CLR(meta_ff_0_1_CLR),
				       .D_OUT(meta_ff_0_1_D_OUT),
				       .FULL_N(meta_ff_0_1_FULL_N),
				       .EMPTY_N(meta_ff_0_1_EMPTY_N));

  // submodule meta_ff_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_1(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_1_D_IN),
				     .ENQ(meta_ff_1_ENQ),
				     .DEQ(meta_ff_1_DEQ),
				     .CLR(meta_ff_1_CLR),
				     .D_OUT(meta_ff_1_D_OUT),
				     .FULL_N(meta_ff_1_FULL_N),
				     .EMPTY_N(meta_ff_1_EMPTY_N));

  // submodule meta_ff_1_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_1_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_1_1_D_IN),
				       .ENQ(meta_ff_1_1_ENQ),
				       .DEQ(meta_ff_1_1_DEQ),
				       .CLR(meta_ff_1_1_CLR),
				       .D_OUT(meta_ff_1_1_D_OUT),
				       .FULL_N(meta_ff_1_1_FULL_N),
				       .EMPTY_N(meta_ff_1_1_EMPTY_N));

  // submodule meta_ff_2
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_2(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_2_D_IN),
				     .ENQ(meta_ff_2_ENQ),
				     .DEQ(meta_ff_2_DEQ),
				     .CLR(meta_ff_2_CLR),
				     .D_OUT(meta_ff_2_D_OUT),
				     .FULL_N(meta_ff_2_FULL_N),
				     .EMPTY_N(meta_ff_2_EMPTY_N));

  // submodule meta_ff_2_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_2_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_2_1_D_IN),
				       .ENQ(meta_ff_2_1_ENQ),
				       .DEQ(meta_ff_2_1_DEQ),
				       .CLR(meta_ff_2_1_CLR),
				       .D_OUT(meta_ff_2_1_D_OUT),
				       .FULL_N(meta_ff_2_1_FULL_N),
				       .EMPTY_N(meta_ff_2_1_EMPTY_N));

  // submodule meta_ff_3
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_3(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_3_D_IN),
				     .ENQ(meta_ff_3_ENQ),
				     .DEQ(meta_ff_3_DEQ),
				     .CLR(meta_ff_3_CLR),
				     .D_OUT(meta_ff_3_D_OUT),
				     .FULL_N(meta_ff_3_FULL_N),
				     .EMPTY_N(meta_ff_3_EMPTY_N));

  // submodule meta_ff_3_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_3_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_3_1_D_IN),
				       .ENQ(meta_ff_3_1_ENQ),
				       .DEQ(meta_ff_3_1_DEQ),
				       .CLR(meta_ff_3_1_CLR),
				       .D_OUT(meta_ff_3_1_D_OUT),
				       .FULL_N(meta_ff_3_1_FULL_N),
				       .EMPTY_N(meta_ff_3_1_EMPTY_N));

  // submodule meta_ff_4
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_4(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_4_D_IN),
				     .ENQ(meta_ff_4_ENQ),
				     .DEQ(meta_ff_4_DEQ),
				     .CLR(meta_ff_4_CLR),
				     .D_OUT(meta_ff_4_D_OUT),
				     .FULL_N(meta_ff_4_FULL_N),
				     .EMPTY_N(meta_ff_4_EMPTY_N));

  // submodule meta_ff_4_1
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) meta_ff_4_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_4_1_D_IN),
				       .ENQ(meta_ff_4_1_ENQ),
				       .DEQ(meta_ff_4_1_DEQ),
				       .CLR(meta_ff_4_1_CLR),
				       .D_OUT(meta_ff_4_1_D_OUT),
				       .FULL_N(meta_ff_4_1_FULL_N),
				       .EMPTY_N(meta_ff_4_1_EMPTY_N));

  // submodule modifier_0
  mkPacketModifier modifier_0(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_0_prev_enq_v),
			      .set_verbosity_verbosity(modifier_0_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_0_writeServer_enq_v),
			      .EN_prev_enq(modifier_0_EN_prev_enq),
			      .EN_writeServer_enq(modifier_0_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_0_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_0_EN_set_verbosity),
			      .RDY_prev_enq(modifier_0_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_0_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_0_writeClient_first),
			      .RDY_writeClient_first(modifier_0_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_0_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_1
  mkPacketModifier modifier_1(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_1_prev_enq_v),
			      .set_verbosity_verbosity(modifier_1_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_1_writeServer_enq_v),
			      .EN_prev_enq(modifier_1_EN_prev_enq),
			      .EN_writeServer_enq(modifier_1_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_1_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_1_EN_set_verbosity),
			      .RDY_prev_enq(modifier_1_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_1_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_1_writeClient_first),
			      .RDY_writeClient_first(modifier_1_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_1_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_2
  mkPacketModifier modifier_2(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_2_prev_enq_v),
			      .set_verbosity_verbosity(modifier_2_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_2_writeServer_enq_v),
			      .EN_prev_enq(modifier_2_EN_prev_enq),
			      .EN_writeServer_enq(modifier_2_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_2_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_2_EN_set_verbosity),
			      .RDY_prev_enq(modifier_2_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_2_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_2_writeClient_first),
			      .RDY_writeClient_first(modifier_2_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_2_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_3
  mkPacketModifier modifier_3(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_3_prev_enq_v),
			      .set_verbosity_verbosity(modifier_3_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_3_writeServer_enq_v),
			      .EN_prev_enq(modifier_3_EN_prev_enq),
			      .EN_writeServer_enq(modifier_3_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_3_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_3_EN_set_verbosity),
			      .RDY_prev_enq(modifier_3_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_3_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_3_writeClient_first),
			      .RDY_writeClient_first(modifier_3_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_3_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_4
  mkPacketModifier modifier_4(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_4_prev_enq_v),
			      .set_verbosity_verbosity(modifier_4_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_4_writeServer_enq_v),
			      .EN_prev_enq(modifier_4_EN_prev_enq),
			      .EN_writeServer_enq(modifier_4_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_4_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_4_EN_set_verbosity),
			      .RDY_prev_enq(modifier_4_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_4_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_4_writeClient_first),
			      .RDY_writeClient_first(modifier_4_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_4_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule outReqFifo_0
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) outReqFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(outReqFifo_0_D_IN),
					.ENQ(outReqFifo_0_ENQ),
					.DEQ(outReqFifo_0_DEQ),
					.CLR(outReqFifo_0_CLR),
					.D_OUT(outReqFifo_0_D_OUT),
					.FULL_N(outReqFifo_0_FULL_N),
					.EMPTY_N(outReqFifo_0_EMPTY_N));

  // submodule output_queues_0
  mkPacketBuffer_64 #(.param1("outputQ 0")) output_queues_0(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_0_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_0_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_0_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_0_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_0_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_0_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_0_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_0_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_0_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_0_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_0_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_0_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_0_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_0_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_1
  mkPacketBuffer_64 #(.param1("outputQ 1")) output_queues_1(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_1_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_1_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_1_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_1_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_1_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_1_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_1_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_1_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_1_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_1_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_1_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_1_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_1_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_1_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_2
  mkPacketBuffer_64 #(.param1("outputQ 2")) output_queues_2(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_2_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_2_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_2_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_2_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_2_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_2_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_2_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_2_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_2_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_2_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_2_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_2_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_2_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_2_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_3
  mkPacketBuffer_64 #(.param1("outputQ 3")) output_queues_3(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_3_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_3_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_3_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_3_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_3_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_3_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_3_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_3_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_3_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_3_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_3_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_3_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_3_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_3_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_4
  mkPacketBuffer_64 #(.param1("outputQ 4")) output_queues_4(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_4_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_4_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_4_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_4_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_4_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_4_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_4_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_4_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_4_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_4_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_4_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_4_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_4_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_4_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_5
  mkPacketBuffer_64 #(.param1("outputQ 5")) output_queues_5(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_5_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_5_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_5_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_5_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_5_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_5_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_5_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_5_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_5_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_5_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_5_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_5_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_5_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_5_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_6
  mkPacketBuffer_64 #(.param1("outputQ 6")) output_queues_6(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_6_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_6_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_6_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_6_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_6_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_6_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_6_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_6_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_6_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_6_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_6_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_6_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_6_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_6_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_7
  mkPacketBuffer_64 #(.param1("outputQ 7")) output_queues_7(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_7_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_7_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_7_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_7_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_7_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_7_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_7_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_7_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_7_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_7_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_7_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_7_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_7_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_7_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule parser_0
  mkParser parser_0(.CLK(CLK),
		    .RST_N(localReset_OUT_RST),
		    .frameIn_put(parser_0_frameIn_put),
		    .set_verbosity_verbosity(parser_0_set_verbosity_verbosity),
		    .EN_frameIn_put(parser_0_EN_frameIn_put),
		    .EN_meta_get(parser_0_EN_meta_get),
		    .EN_set_verbosity(parser_0_EN_set_verbosity),
		    .RDY_frameIn_put(parser_0_RDY_frameIn_put),
		    .meta_get(parser_0_meta_get),
		    .RDY_meta_get(parser_0_RDY_meta_get),
		    .RDY_set_verbosity(),
		    .read_perf_info(),
		    .RDY_read_perf_info());

  // submodule pktBuff_0
  mkPacketBuffer_16 #(.param1("streamIn channel")) pktBuff_0(.CLK(CLK),
							     .RST_N(localReset_OUT_RST),
							     .readServer_readReq_put(pktBuff_0_readServer_readReq_put),
							     .set_verbosity_verbosity(pktBuff_0_set_verbosity_verbosity),
							     .writeServer_enq_v(pktBuff_0_writeServer_enq_v),
							     .EN_writeServer_enq(pktBuff_0_EN_writeServer_enq),
							     .EN_readServer_readData_get(pktBuff_0_EN_readServer_readData_get),
							     .EN_readServer_readLen_get(pktBuff_0_EN_readServer_readLen_get),
							     .EN_readServer_readReq_put(pktBuff_0_EN_readServer_readReq_put),
							     .EN_set_verbosity(pktBuff_0_EN_set_verbosity),
							     .RDY_writeServer_enq(pktBuff_0_RDY_writeServer_enq),
							     .writeServer_notFull(pktBuff_0_writeServer_notFull),
							     .RDY_writeServer_notFull(),
							     .readServer_readData_get(pktBuff_0_readServer_readData_get),
							     .RDY_readServer_readData_get(pktBuff_0_RDY_readServer_readData_get),
							     .readServer_readLen_get(pktBuff_0_readServer_readLen_get),
							     .RDY_readServer_readLen_get(pktBuff_0_RDY_readServer_readLen_get),
							     .RDY_readServer_readReq_put(pktBuff_0_RDY_readServer_readReq_put),
							     .dbg(),
							     .RDY_dbg(),
							     .RDY_set_verbosity());

  // submodule pktBuff_0_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_fifoEop_D_IN),
					     .ENQ(pktBuff_0_fifoEop_ENQ),
					     .DEQ(pktBuff_0_fifoEop_DEQ),
					     .CLR(pktBuff_0_fifoEop_CLR),
					     .D_OUT(pktBuff_0_fifoEop_D_OUT),
					     .FULL_N(pktBuff_0_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_0_fifoEop_EMPTY_N));

  // submodule pktBuff_0_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_0_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoLen_D_IN),
						 .ENQ(pktBuff_0_fifoLen_ENQ),
						 .DEQ(pktBuff_0_fifoLen_DEQ),
						 .CLR(pktBuff_0_fifoLen_CLR),
						 .D_OUT(pktBuff_0_fifoLen_D_OUT),
						 .FULL_N(pktBuff_0_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoLen_EMPTY_N));

  // submodule pktBuff_0_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_fifoReadData_D_IN),
						  .ENQ(pktBuff_0_fifoReadData_ENQ),
						  .DEQ(pktBuff_0_fifoReadData_DEQ),
						  .CLR(pktBuff_0_fifoReadData_CLR),
						  .D_OUT(pktBuff_0_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_0_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_0_fifoReadData_EMPTY_N));

  // submodule pktBuff_0_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoReadReq_D_IN),
						 .ENQ(pktBuff_0_fifoReadReq_ENQ),
						 .DEQ(pktBuff_0_fifoReadReq_DEQ),
						 .CLR(pktBuff_0_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_0_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoReadReq_EMPTY_N));

  // submodule pktBuff_0_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_fifoWriteData_D_IN),
						   .ENQ(pktBuff_0_fifoWriteData_ENQ),
						   .DEQ(pktBuff_0_fifoWriteData_DEQ),
						   .CLR(pktBuff_0_fifoWriteData_CLR),
						   .D_OUT(pktBuff_0_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_0_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_0_fifoWriteData_EMPTY_N));

  // submodule pktBuff_0_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_0_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_incomingReqs_D_IN),
						  .ENQ(pktBuff_0_incomingReqs_ENQ),
						  .DEQ(pktBuff_0_incomingReqs_DEQ),
						  .CLR(pktBuff_0_incomingReqs_CLR),
						  .D_OUT(pktBuff_0_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_0_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_0_incomingReqs_EMPTY_N));

  // submodule pktBuff_0_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_0_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_0_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_0_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_0_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_0_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_0_memBuffer_memory_DIA),
						       .DIB(pktBuff_0_memBuffer_memory_DIB),
						       .WEA(pktBuff_0_memBuffer_memory_WEA),
						       .WEB(pktBuff_0_memBuffer_memory_WEB),
						       .ENA(pktBuff_0_memBuffer_memory_ENA),
						       .ENB(pktBuff_0_memBuffer_memory_ENB),
						       .DOA(pktBuff_0_memBuffer_memory_DOA),
						       .DOB(pktBuff_0_memBuffer_memory_DOB));

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_0_meta_ff
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) pktBuff_0_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_meta_ff_D_IN),
					     .ENQ(pktBuff_0_meta_ff_ENQ),
					     .DEQ(pktBuff_0_meta_ff_DEQ),
					     .CLR(pktBuff_0_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_0_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_0_meta_ff_EMPTY_N));

  // submodule pktBuff_0_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 0")) pktBuff_0_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_0_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_0_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_0_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_0_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_0_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_0_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_0_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_0_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_0_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_0_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_0_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_0_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_0_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_0_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_readDataFifo_D_IN),
						  .ENQ(pktBuff_0_readDataFifo_ENQ),
						  .DEQ(pktBuff_0_readDataFifo_DEQ),
						  .CLR(pktBuff_0_readDataFifo_CLR),
						  .D_OUT(pktBuff_0_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_0_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_0_readDataFifo_EMPTY_N));

  // submodule pktBuff_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readLenFifo_D_IN),
						 .ENQ(pktBuff_0_readLenFifo_ENQ),
						 .DEQ(pktBuff_0_readLenFifo_DEQ),
						 .CLR(pktBuff_0_readLenFifo_CLR),
						 .D_OUT(pktBuff_0_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_0_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readLenFifo_EMPTY_N));

  // submodule pktBuff_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readReqFifo_D_IN),
						 .ENQ(pktBuff_0_readReqFifo_ENQ),
						 .DEQ(pktBuff_0_readReqFifo_DEQ),
						 .CLR(pktBuff_0_readReqFifo_CLR),
						 .D_OUT(pktBuff_0_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_0_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readReqFifo_EMPTY_N));

  // submodule pktBuff_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_writeDataFifo_D_IN),
						   .ENQ(pktBuff_0_writeDataFifo_ENQ),
						   .DEQ(pktBuff_0_writeDataFifo_DEQ),
						   .CLR(pktBuff_0_writeDataFifo_CLR),
						   .D_OUT(pktBuff_0_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_0_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_0_writeDataFifo_EMPTY_N));

  // submodule pktBuff_1_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_fifoEop_D_IN),
					     .ENQ(pktBuff_1_fifoEop_ENQ),
					     .DEQ(pktBuff_1_fifoEop_DEQ),
					     .CLR(pktBuff_1_fifoEop_CLR),
					     .D_OUT(pktBuff_1_fifoEop_D_OUT),
					     .FULL_N(pktBuff_1_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_1_fifoEop_EMPTY_N));

  // submodule pktBuff_1_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_1_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoLen_D_IN),
						 .ENQ(pktBuff_1_fifoLen_ENQ),
						 .DEQ(pktBuff_1_fifoLen_DEQ),
						 .CLR(pktBuff_1_fifoLen_CLR),
						 .D_OUT(pktBuff_1_fifoLen_D_OUT),
						 .FULL_N(pktBuff_1_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoLen_EMPTY_N));

  // submodule pktBuff_1_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_fifoReadData_D_IN),
						  .ENQ(pktBuff_1_fifoReadData_ENQ),
						  .DEQ(pktBuff_1_fifoReadData_DEQ),
						  .CLR(pktBuff_1_fifoReadData_CLR),
						  .D_OUT(pktBuff_1_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_1_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_1_fifoReadData_EMPTY_N));

  // submodule pktBuff_1_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoReadReq_D_IN),
						 .ENQ(pktBuff_1_fifoReadReq_ENQ),
						 .DEQ(pktBuff_1_fifoReadReq_DEQ),
						 .CLR(pktBuff_1_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_1_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoReadReq_EMPTY_N));

  // submodule pktBuff_1_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_fifoWriteData_D_IN),
						   .ENQ(pktBuff_1_fifoWriteData_ENQ),
						   .DEQ(pktBuff_1_fifoWriteData_DEQ),
						   .CLR(pktBuff_1_fifoWriteData_CLR),
						   .D_OUT(pktBuff_1_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_1_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_1_fifoWriteData_EMPTY_N));

  // submodule pktBuff_1_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_1_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_incomingReqs_D_IN),
						  .ENQ(pktBuff_1_incomingReqs_ENQ),
						  .DEQ(pktBuff_1_incomingReqs_DEQ),
						  .CLR(pktBuff_1_incomingReqs_CLR),
						  .D_OUT(pktBuff_1_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_1_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_1_incomingReqs_EMPTY_N));

  // submodule pktBuff_1_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_1_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_1_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_1_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_1_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_1_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_1_memBuffer_memory_DIA),
						       .DIB(pktBuff_1_memBuffer_memory_DIB),
						       .WEA(pktBuff_1_memBuffer_memory_WEA),
						       .WEB(pktBuff_1_memBuffer_memory_WEB),
						       .ENA(pktBuff_1_memBuffer_memory_ENA),
						       .ENB(pktBuff_1_memBuffer_memory_ENB),
						       .DOA(pktBuff_1_memBuffer_memory_DOA),
						       .DOB(pktBuff_1_memBuffer_memory_DOB));

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_1_meta_ff
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) pktBuff_1_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_meta_ff_D_IN),
					     .ENQ(pktBuff_1_meta_ff_ENQ),
					     .DEQ(pktBuff_1_meta_ff_DEQ),
					     .CLR(pktBuff_1_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_1_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_1_meta_ff_EMPTY_N));

  // submodule pktBuff_1_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 1")) pktBuff_1_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_1_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_1_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_1_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_1_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_1_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_1_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_1_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_1_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_1_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_1_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_1_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_1_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_1_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_1_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_readDataFifo_D_IN),
						  .ENQ(pktBuff_1_readDataFifo_ENQ),
						  .DEQ(pktBuff_1_readDataFifo_DEQ),
						  .CLR(pktBuff_1_readDataFifo_CLR),
						  .D_OUT(pktBuff_1_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_1_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_1_readDataFifo_EMPTY_N));

  // submodule pktBuff_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readLenFifo_D_IN),
						 .ENQ(pktBuff_1_readLenFifo_ENQ),
						 .DEQ(pktBuff_1_readLenFifo_DEQ),
						 .CLR(pktBuff_1_readLenFifo_CLR),
						 .D_OUT(pktBuff_1_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_1_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readLenFifo_EMPTY_N));

  // submodule pktBuff_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readReqFifo_D_IN),
						 .ENQ(pktBuff_1_readReqFifo_ENQ),
						 .DEQ(pktBuff_1_readReqFifo_DEQ),
						 .CLR(pktBuff_1_readReqFifo_CLR),
						 .D_OUT(pktBuff_1_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_1_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readReqFifo_EMPTY_N));

  // submodule pktBuff_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_writeDataFifo_D_IN),
						   .ENQ(pktBuff_1_writeDataFifo_ENQ),
						   .DEQ(pktBuff_1_writeDataFifo_DEQ),
						   .CLR(pktBuff_1_writeDataFifo_CLR),
						   .D_OUT(pktBuff_1_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_1_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_1_writeDataFifo_EMPTY_N));

  // submodule pktBuff_2_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_2_fifoEop_D_IN),
					     .ENQ(pktBuff_2_fifoEop_ENQ),
					     .DEQ(pktBuff_2_fifoEop_DEQ),
					     .CLR(pktBuff_2_fifoEop_CLR),
					     .D_OUT(pktBuff_2_fifoEop_D_OUT),
					     .FULL_N(pktBuff_2_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_2_fifoEop_EMPTY_N));

  // submodule pktBuff_2_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_2_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_fifoLen_D_IN),
						 .ENQ(pktBuff_2_fifoLen_ENQ),
						 .DEQ(pktBuff_2_fifoLen_DEQ),
						 .CLR(pktBuff_2_fifoLen_CLR),
						 .D_OUT(pktBuff_2_fifoLen_D_OUT),
						 .FULL_N(pktBuff_2_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_2_fifoLen_EMPTY_N));

  // submodule pktBuff_2_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_fifoReadData_D_IN),
						  .ENQ(pktBuff_2_fifoReadData_ENQ),
						  .DEQ(pktBuff_2_fifoReadData_DEQ),
						  .CLR(pktBuff_2_fifoReadData_CLR),
						  .D_OUT(pktBuff_2_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_2_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_2_fifoReadData_EMPTY_N));

  // submodule pktBuff_2_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_fifoReadReq_D_IN),
						 .ENQ(pktBuff_2_fifoReadReq_ENQ),
						 .DEQ(pktBuff_2_fifoReadReq_DEQ),
						 .CLR(pktBuff_2_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_2_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_2_fifoReadReq_EMPTY_N));

  // submodule pktBuff_2_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_2_fifoWriteData_D_IN),
						   .ENQ(pktBuff_2_fifoWriteData_ENQ),
						   .DEQ(pktBuff_2_fifoWriteData_DEQ),
						   .CLR(pktBuff_2_fifoWriteData_CLR),
						   .D_OUT(pktBuff_2_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_2_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_2_fifoWriteData_EMPTY_N));

  // submodule pktBuff_2_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_2_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_incomingReqs_D_IN),
						  .ENQ(pktBuff_2_incomingReqs_ENQ),
						  .DEQ(pktBuff_2_incomingReqs_DEQ),
						  .CLR(pktBuff_2_incomingReqs_CLR),
						  .D_OUT(pktBuff_2_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_2_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_2_incomingReqs_EMPTY_N));

  // submodule pktBuff_2_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_2_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_2_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_2_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_2_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_2_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_2_memBuffer_memory_DIA),
						       .DIB(pktBuff_2_memBuffer_memory_DIB),
						       .WEA(pktBuff_2_memBuffer_memory_WEA),
						       .WEB(pktBuff_2_memBuffer_memory_WEB),
						       .ENA(pktBuff_2_memBuffer_memory_ENA),
						       .ENB(pktBuff_2_memBuffer_memory_ENB),
						       .DOA(pktBuff_2_memBuffer_memory_DOA),
						       .DOB(pktBuff_2_memBuffer_memory_DOB));

  // submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_2_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_2_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_2_meta_ff
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) pktBuff_2_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_2_meta_ff_D_IN),
					     .ENQ(pktBuff_2_meta_ff_ENQ),
					     .DEQ(pktBuff_2_meta_ff_DEQ),
					     .CLR(pktBuff_2_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_2_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_2_meta_ff_EMPTY_N));

  // submodule pktBuff_2_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 2")) pktBuff_2_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_2_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_2_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_2_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_2_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_2_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_2_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_2_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_2_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_2_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_2_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_2_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_2_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_2_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_2_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_readDataFifo_D_IN),
						  .ENQ(pktBuff_2_readDataFifo_ENQ),
						  .DEQ(pktBuff_2_readDataFifo_DEQ),
						  .CLR(pktBuff_2_readDataFifo_CLR),
						  .D_OUT(pktBuff_2_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_2_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_2_readDataFifo_EMPTY_N));

  // submodule pktBuff_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readLenFifo_D_IN),
						 .ENQ(pktBuff_2_readLenFifo_ENQ),
						 .DEQ(pktBuff_2_readLenFifo_DEQ),
						 .CLR(pktBuff_2_readLenFifo_CLR),
						 .D_OUT(pktBuff_2_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_2_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readLenFifo_EMPTY_N));

  // submodule pktBuff_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readReqFifo_D_IN),
						 .ENQ(pktBuff_2_readReqFifo_ENQ),
						 .DEQ(pktBuff_2_readReqFifo_DEQ),
						 .CLR(pktBuff_2_readReqFifo_CLR),
						 .D_OUT(pktBuff_2_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_2_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readReqFifo_EMPTY_N));

  // submodule pktBuff_2_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_2_writeDataFifo_D_IN),
						   .ENQ(pktBuff_2_writeDataFifo_ENQ),
						   .DEQ(pktBuff_2_writeDataFifo_DEQ),
						   .CLR(pktBuff_2_writeDataFifo_CLR),
						   .D_OUT(pktBuff_2_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_2_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_2_writeDataFifo_EMPTY_N));

  // submodule pktBuff_3_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_3_fifoEop_D_IN),
					     .ENQ(pktBuff_3_fifoEop_ENQ),
					     .DEQ(pktBuff_3_fifoEop_DEQ),
					     .CLR(pktBuff_3_fifoEop_CLR),
					     .D_OUT(pktBuff_3_fifoEop_D_OUT),
					     .FULL_N(pktBuff_3_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_3_fifoEop_EMPTY_N));

  // submodule pktBuff_3_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_3_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_fifoLen_D_IN),
						 .ENQ(pktBuff_3_fifoLen_ENQ),
						 .DEQ(pktBuff_3_fifoLen_DEQ),
						 .CLR(pktBuff_3_fifoLen_CLR),
						 .D_OUT(pktBuff_3_fifoLen_D_OUT),
						 .FULL_N(pktBuff_3_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_3_fifoLen_EMPTY_N));

  // submodule pktBuff_3_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_fifoReadData_D_IN),
						  .ENQ(pktBuff_3_fifoReadData_ENQ),
						  .DEQ(pktBuff_3_fifoReadData_DEQ),
						  .CLR(pktBuff_3_fifoReadData_CLR),
						  .D_OUT(pktBuff_3_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_3_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_3_fifoReadData_EMPTY_N));

  // submodule pktBuff_3_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_fifoReadReq_D_IN),
						 .ENQ(pktBuff_3_fifoReadReq_ENQ),
						 .DEQ(pktBuff_3_fifoReadReq_DEQ),
						 .CLR(pktBuff_3_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_3_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_3_fifoReadReq_EMPTY_N));

  // submodule pktBuff_3_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_3_fifoWriteData_D_IN),
						   .ENQ(pktBuff_3_fifoWriteData_ENQ),
						   .DEQ(pktBuff_3_fifoWriteData_DEQ),
						   .CLR(pktBuff_3_fifoWriteData_CLR),
						   .D_OUT(pktBuff_3_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_3_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_3_fifoWriteData_EMPTY_N));

  // submodule pktBuff_3_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_3_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_incomingReqs_D_IN),
						  .ENQ(pktBuff_3_incomingReqs_ENQ),
						  .DEQ(pktBuff_3_incomingReqs_DEQ),
						  .CLR(pktBuff_3_incomingReqs_CLR),
						  .D_OUT(pktBuff_3_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_3_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_3_incomingReqs_EMPTY_N));

  // submodule pktBuff_3_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_3_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_3_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_3_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_3_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_3_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_3_memBuffer_memory_DIA),
						       .DIB(pktBuff_3_memBuffer_memory_DIB),
						       .WEA(pktBuff_3_memBuffer_memory_WEA),
						       .WEB(pktBuff_3_memBuffer_memory_WEB),
						       .ENA(pktBuff_3_memBuffer_memory_ENA),
						       .ENB(pktBuff_3_memBuffer_memory_ENB),
						       .DOA(pktBuff_3_memBuffer_memory_DOA),
						       .DOB(pktBuff_3_memBuffer_memory_DOB));

  // submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_3_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_3_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_3_meta_ff
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) pktBuff_3_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_3_meta_ff_D_IN),
					     .ENQ(pktBuff_3_meta_ff_ENQ),
					     .DEQ(pktBuff_3_meta_ff_DEQ),
					     .CLR(pktBuff_3_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_3_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_3_meta_ff_EMPTY_N));

  // submodule pktBuff_3_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 3")) pktBuff_3_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_3_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_3_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_3_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_3_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_3_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_3_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_3_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_3_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_3_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_3_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_3_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_3_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_3_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_3_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_readDataFifo_D_IN),
						  .ENQ(pktBuff_3_readDataFifo_ENQ),
						  .DEQ(pktBuff_3_readDataFifo_DEQ),
						  .CLR(pktBuff_3_readDataFifo_CLR),
						  .D_OUT(pktBuff_3_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_3_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_3_readDataFifo_EMPTY_N));

  // submodule pktBuff_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_readLenFifo_D_IN),
						 .ENQ(pktBuff_3_readLenFifo_ENQ),
						 .DEQ(pktBuff_3_readLenFifo_DEQ),
						 .CLR(pktBuff_3_readLenFifo_CLR),
						 .D_OUT(pktBuff_3_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_3_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_3_readLenFifo_EMPTY_N));

  // submodule pktBuff_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_readReqFifo_D_IN),
						 .ENQ(pktBuff_3_readReqFifo_ENQ),
						 .DEQ(pktBuff_3_readReqFifo_DEQ),
						 .CLR(pktBuff_3_readReqFifo_CLR),
						 .D_OUT(pktBuff_3_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_3_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_3_readReqFifo_EMPTY_N));

  // submodule pktBuff_3_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_3_writeDataFifo_D_IN),
						   .ENQ(pktBuff_3_writeDataFifo_ENQ),
						   .DEQ(pktBuff_3_writeDataFifo_DEQ),
						   .CLR(pktBuff_3_writeDataFifo_CLR),
						   .D_OUT(pktBuff_3_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_3_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_3_writeDataFifo_EMPTY_N));

  // submodule pktBuff_4_meta_ff
  FIFO2 #(.width(32'd1760),
	  .guarded(32'd1)) pktBuff_4_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_4_meta_ff_D_IN),
					     .ENQ(pktBuff_4_meta_ff_ENQ),
					     .DEQ(pktBuff_4_meta_ff_DEQ),
					     .CLR(pktBuff_4_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_4_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_4_meta_ff_EMPTY_N));

  // submodule pktBuff_4_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 4")) pktBuff_4_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_4_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_4_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_4_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_4_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_4_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_4_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_4_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_4_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_4_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_4_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_4_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_4_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_4_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_4_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_4_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_4_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_4_readDataFifo_D_IN),
						  .ENQ(pktBuff_4_readDataFifo_ENQ),
						  .DEQ(pktBuff_4_readDataFifo_DEQ),
						  .CLR(pktBuff_4_readDataFifo_CLR),
						  .D_OUT(pktBuff_4_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_4_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_4_readDataFifo_EMPTY_N));

  // submodule pktBuff_4_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_4_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_4_readLenFifo_D_IN),
						 .ENQ(pktBuff_4_readLenFifo_ENQ),
						 .DEQ(pktBuff_4_readLenFifo_DEQ),
						 .CLR(pktBuff_4_readLenFifo_CLR),
						 .D_OUT(pktBuff_4_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_4_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_4_readLenFifo_EMPTY_N));

  // submodule pktBuff_4_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_4_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_4_readReqFifo_D_IN),
						 .ENQ(pktBuff_4_readReqFifo_ENQ),
						 .DEQ(pktBuff_4_readReqFifo_DEQ),
						 .CLR(pktBuff_4_readReqFifo_CLR),
						 .D_OUT(pktBuff_4_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_4_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_4_readReqFifo_EMPTY_N));

  // submodule pktBuff_4_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_4_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_4_writeDataFifo_D_IN),
						   .ENQ(pktBuff_4_writeDataFifo_ENQ),
						   .DEQ(pktBuff_4_writeDataFifo_DEQ),
						   .CLR(pktBuff_4_writeDataFifo_CLR),
						   .D_OUT(pktBuff_4_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_4_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_4_writeDataFifo_EMPTY_N));

  // submodule pktLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktLenFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(pktLenFifo_0_D_IN),
					.ENQ(pktLenFifo_0_ENQ),
					.DEQ(pktLenFifo_0_DEQ),
					.CLR(pktLenFifo_0_CLR),
					.D_OUT(pktLenFifo_0_D_OUT),
					.FULL_N(pktLenFifo_0_FULL_N),
					.EMPTY_N(pktLenFifo_0_EMPTY_N));

  // submodule readDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) readDataFifo_0(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(readDataFifo_0_D_IN),
					  .ENQ(readDataFifo_0_ENQ),
					  .DEQ(readDataFifo_0_DEQ),
					  .CLR(readDataFifo_0_CLR),
					  .D_OUT(readDataFifo_0_D_OUT),
					  .FULL_N(readDataFifo_0_FULL_N),
					  .EMPTY_N(readDataFifo_0_EMPTY_N));

  // submodule readLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readLenFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readLenFifo_0_D_IN),
					 .ENQ(readLenFifo_0_ENQ),
					 .DEQ(readLenFifo_0_DEQ),
					 .CLR(readLenFifo_0_CLR),
					 .D_OUT(readLenFifo_0_D_OUT),
					 .FULL_N(readLenFifo_0_FULL_N),
					 .EMPTY_N(readLenFifo_0_EMPTY_N));

  // submodule readReqFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readReqFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readReqFifo_0_D_IN),
					 .ENQ(readReqFifo_0_ENQ),
					 .DEQ(readReqFifo_0_DEQ),
					 .CLR(readReqFifo_0_CLR),
					 .D_OUT(readReqFifo_0_D_OUT),
					 .FULL_N(readReqFifo_0_FULL_N),
					 .EMPTY_N(readReqFifo_0_EMPTY_N));

  // submodule ringToMac_0_fifoTxData_dCombinedReset
  ResetEither ringToMac_0_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_0_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_0_fifoTxData_sCombinedReset
  ResetEither ringToMac_0_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_0_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_0_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_0_readDataFifo_D_IN),
						    .ENQ(ringToMac_0_readDataFifo_ENQ),
						    .DEQ(ringToMac_0_readDataFifo_DEQ),
						    .CLR(ringToMac_0_readDataFifo_CLR),
						    .D_OUT(ringToMac_0_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_0_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_readDataFifo_EMPTY_N));

  // submodule ringToMac_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readLenFifo_D_IN),
						   .ENQ(ringToMac_0_readLenFifo_ENQ),
						   .DEQ(ringToMac_0_readLenFifo_DEQ),
						   .CLR(ringToMac_0_readLenFifo_CLR),
						   .D_OUT(ringToMac_0_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_0_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readLenFifo_EMPTY_N));

  // submodule ringToMac_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readReqFifo_D_IN),
						   .ENQ(ringToMac_0_readReqFifo_ENQ),
						   .DEQ(ringToMac_0_readReqFifo_DEQ),
						   .CLR(ringToMac_0_readReqFifo_CLR),
						   .D_OUT(ringToMac_0_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_0_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readReqFifo_EMPTY_N));

  // submodule ringToMac_0_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_0_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_0_tx_fifo_sD_IN),
						    .sENQ(ringToMac_0_tx_fifo_sENQ),
						    .dDEQ(ringToMac_0_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_0_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_0_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_0_tx_fifo_dD_OUT));

  // submodule ringToMac_0_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_0_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_0_writeMacFifo_D_IN),
						    .ENQ(ringToMac_0_writeMacFifo_ENQ),
						    .DEQ(ringToMac_0_writeMacFifo_DEQ),
						    .CLR(ringToMac_0_writeMacFifo_CLR),
						    .D_OUT(ringToMac_0_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_0_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_writeMacFifo_EMPTY_N));

  // submodule ringToMac_1_fifoTxData_dCombinedReset
  ResetEither ringToMac_1_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_1_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_1_fifoTxData_sCombinedReset
  ResetEither ringToMac_1_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_1_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_1_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_1_readDataFifo_D_IN),
						    .ENQ(ringToMac_1_readDataFifo_ENQ),
						    .DEQ(ringToMac_1_readDataFifo_DEQ),
						    .CLR(ringToMac_1_readDataFifo_CLR),
						    .D_OUT(ringToMac_1_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_1_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_readDataFifo_EMPTY_N));

  // submodule ringToMac_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readLenFifo_D_IN),
						   .ENQ(ringToMac_1_readLenFifo_ENQ),
						   .DEQ(ringToMac_1_readLenFifo_DEQ),
						   .CLR(ringToMac_1_readLenFifo_CLR),
						   .D_OUT(ringToMac_1_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_1_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readLenFifo_EMPTY_N));

  // submodule ringToMac_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readReqFifo_D_IN),
						   .ENQ(ringToMac_1_readReqFifo_ENQ),
						   .DEQ(ringToMac_1_readReqFifo_DEQ),
						   .CLR(ringToMac_1_readReqFifo_CLR),
						   .D_OUT(ringToMac_1_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_1_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readReqFifo_EMPTY_N));

  // submodule ringToMac_1_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_1_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_1_tx_fifo_sD_IN),
						    .sENQ(ringToMac_1_tx_fifo_sENQ),
						    .dDEQ(ringToMac_1_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_1_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_1_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_1_tx_fifo_dD_OUT));

  // submodule ringToMac_1_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_1_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_1_writeMacFifo_D_IN),
						    .ENQ(ringToMac_1_writeMacFifo_ENQ),
						    .DEQ(ringToMac_1_writeMacFifo_DEQ),
						    .CLR(ringToMac_1_writeMacFifo_CLR),
						    .D_OUT(ringToMac_1_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_1_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_writeMacFifo_EMPTY_N));

  // submodule ringToMac_2_fifoTxData_dCombinedReset
  ResetEither ringToMac_2_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_2_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_2_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_2_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_2_fifoTxData_sCombinedReset
  ResetEither ringToMac_2_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_2_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_2_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_2_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_2_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_2_readDataFifo_D_IN),
						    .ENQ(ringToMac_2_readDataFifo_ENQ),
						    .DEQ(ringToMac_2_readDataFifo_DEQ),
						    .CLR(ringToMac_2_readDataFifo_CLR),
						    .D_OUT(ringToMac_2_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_2_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_2_readDataFifo_EMPTY_N));

  // submodule ringToMac_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_2_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_2_readLenFifo_D_IN),
						   .ENQ(ringToMac_2_readLenFifo_ENQ),
						   .DEQ(ringToMac_2_readLenFifo_DEQ),
						   .CLR(ringToMac_2_readLenFifo_CLR),
						   .D_OUT(ringToMac_2_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_2_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_2_readLenFifo_EMPTY_N));

  // submodule ringToMac_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_2_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_2_readReqFifo_D_IN),
						   .ENQ(ringToMac_2_readReqFifo_ENQ),
						   .DEQ(ringToMac_2_readReqFifo_DEQ),
						   .CLR(ringToMac_2_readReqFifo_CLR),
						   .D_OUT(ringToMac_2_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_2_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_2_readReqFifo_EMPTY_N));

  // submodule ringToMac_2_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_2_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_2_tx_fifo_sD_IN),
						    .sENQ(ringToMac_2_tx_fifo_sENQ),
						    .dDEQ(ringToMac_2_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_2_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_2_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_2_tx_fifo_dD_OUT));

  // submodule ringToMac_2_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_2_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_2_writeMacFifo_D_IN),
						    .ENQ(ringToMac_2_writeMacFifo_ENQ),
						    .DEQ(ringToMac_2_writeMacFifo_DEQ),
						    .CLR(ringToMac_2_writeMacFifo_CLR),
						    .D_OUT(ringToMac_2_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_2_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_2_writeMacFifo_EMPTY_N));

  // submodule ringToMac_3_fifoTxData_dCombinedReset
  ResetEither ringToMac_3_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_3_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_3_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_3_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_3_fifoTxData_sCombinedReset
  ResetEither ringToMac_3_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_3_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_3_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_3_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_3_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_3_readDataFifo_D_IN),
						    .ENQ(ringToMac_3_readDataFifo_ENQ),
						    .DEQ(ringToMac_3_readDataFifo_DEQ),
						    .CLR(ringToMac_3_readDataFifo_CLR),
						    .D_OUT(ringToMac_3_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_3_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_3_readDataFifo_EMPTY_N));

  // submodule ringToMac_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_3_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_3_readLenFifo_D_IN),
						   .ENQ(ringToMac_3_readLenFifo_ENQ),
						   .DEQ(ringToMac_3_readLenFifo_DEQ),
						   .CLR(ringToMac_3_readLenFifo_CLR),
						   .D_OUT(ringToMac_3_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_3_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_3_readLenFifo_EMPTY_N));

  // submodule ringToMac_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_3_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_3_readReqFifo_D_IN),
						   .ENQ(ringToMac_3_readReqFifo_ENQ),
						   .DEQ(ringToMac_3_readReqFifo_DEQ),
						   .CLR(ringToMac_3_readReqFifo_CLR),
						   .D_OUT(ringToMac_3_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_3_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_3_readReqFifo_EMPTY_N));

  // submodule ringToMac_3_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_3_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_3_tx_fifo_sD_IN),
						    .sENQ(ringToMac_3_tx_fifo_sENQ),
						    .dDEQ(ringToMac_3_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_3_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_3_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_3_tx_fifo_dD_OUT));

  // submodule ringToMac_3_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_3_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_3_writeMacFifo_D_IN),
						    .ENQ(ringToMac_3_writeMacFifo_ENQ),
						    .DEQ(ringToMac_3_writeMacFifo_DEQ),
						    .CLR(ringToMac_3_writeMacFifo_CLR),
						    .D_OUT(ringToMac_3_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_3_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_3_writeMacFifo_EMPTY_N));

  // submodule verbose_ff_0
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_0_D_IN),
					.ENQ(verbose_ff_0_ENQ),
					.DEQ(verbose_ff_0_DEQ),
					.CLR(verbose_ff_0_CLR),
					.D_OUT(verbose_ff_0_D_OUT),
					.FULL_N(verbose_ff_0_FULL_N),
					.EMPTY_N(verbose_ff_0_EMPTY_N));

  // submodule verbose_ff_0_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_1_D_IN),
					  .ENQ(verbose_ff_0_1_ENQ),
					  .DEQ(verbose_ff_0_1_DEQ),
					  .CLR(verbose_ff_0_1_CLR),
					  .D_OUT(verbose_ff_0_1_D_OUT),
					  .FULL_N(verbose_ff_0_1_FULL_N),
					  .EMPTY_N(verbose_ff_0_1_EMPTY_N));

  // submodule verbose_ff_0_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_2_D_IN),
					  .ENQ(verbose_ff_0_2_ENQ),
					  .DEQ(verbose_ff_0_2_DEQ),
					  .CLR(verbose_ff_0_2_CLR),
					  .D_OUT(verbose_ff_0_2_D_OUT),
					  .FULL_N(verbose_ff_0_2_FULL_N),
					  .EMPTY_N(verbose_ff_0_2_EMPTY_N));

  // submodule verbose_ff_0_3
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_3(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_3_D_IN),
					  .ENQ(verbose_ff_0_3_ENQ),
					  .DEQ(verbose_ff_0_3_DEQ),
					  .CLR(verbose_ff_0_3_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_0_3_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_1_D_IN),
					.ENQ(verbose_ff_1_ENQ),
					.DEQ(verbose_ff_1_DEQ),
					.CLR(verbose_ff_1_CLR),
					.D_OUT(verbose_ff_1_D_OUT),
					.FULL_N(verbose_ff_1_FULL_N),
					.EMPTY_N(verbose_ff_1_EMPTY_N));

  // submodule verbose_ff_1_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_1_D_IN),
					  .ENQ(verbose_ff_1_1_ENQ),
					  .DEQ(verbose_ff_1_1_DEQ),
					  .CLR(verbose_ff_1_1_CLR),
					  .D_OUT(verbose_ff_1_1_D_OUT),
					  .FULL_N(verbose_ff_1_1_FULL_N),
					  .EMPTY_N(verbose_ff_1_1_EMPTY_N));

  // submodule verbose_ff_1_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_2_D_IN),
					  .ENQ(verbose_ff_1_2_ENQ),
					  .DEQ(verbose_ff_1_2_DEQ),
					  .CLR(verbose_ff_1_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_1_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_2_D_IN),
					.ENQ(verbose_ff_2_ENQ),
					.DEQ(verbose_ff_2_DEQ),
					.CLR(verbose_ff_2_CLR),
					.D_OUT(verbose_ff_2_D_OUT),
					.FULL_N(verbose_ff_2_FULL_N),
					.EMPTY_N(verbose_ff_2_EMPTY_N));

  // submodule verbose_ff_2_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_2_1_D_IN),
					  .ENQ(verbose_ff_2_1_ENQ),
					  .DEQ(verbose_ff_2_1_DEQ),
					  .CLR(verbose_ff_2_1_CLR),
					  .D_OUT(verbose_ff_2_1_D_OUT),
					  .FULL_N(verbose_ff_2_1_FULL_N),
					  .EMPTY_N(verbose_ff_2_1_EMPTY_N));

  // submodule verbose_ff_2_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_2_2_D_IN),
					  .ENQ(verbose_ff_2_2_ENQ),
					  .DEQ(verbose_ff_2_2_DEQ),
					  .CLR(verbose_ff_2_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_2_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_3
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_3_D_IN),
					.ENQ(verbose_ff_3_ENQ),
					.DEQ(verbose_ff_3_DEQ),
					.CLR(verbose_ff_3_CLR),
					.D_OUT(verbose_ff_3_D_OUT),
					.FULL_N(verbose_ff_3_FULL_N),
					.EMPTY_N(verbose_ff_3_EMPTY_N));

  // submodule verbose_ff_3_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_3_1_D_IN),
					  .ENQ(verbose_ff_3_1_ENQ),
					  .DEQ(verbose_ff_3_1_DEQ),
					  .CLR(verbose_ff_3_1_CLR),
					  .D_OUT(verbose_ff_3_1_D_OUT),
					  .FULL_N(verbose_ff_3_1_FULL_N),
					  .EMPTY_N(verbose_ff_3_1_EMPTY_N));

  // submodule verbose_ff_3_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_3_2_D_IN),
					  .ENQ(verbose_ff_3_2_ENQ),
					  .DEQ(verbose_ff_3_2_DEQ),
					  .CLR(verbose_ff_3_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_3_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_4
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_4(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_4_D_IN),
					.ENQ(verbose_ff_4_ENQ),
					.DEQ(verbose_ff_4_DEQ),
					.CLR(verbose_ff_4_CLR),
					.D_OUT(verbose_ff_4_D_OUT),
					.FULL_N(verbose_ff_4_FULL_N),
					.EMPTY_N(verbose_ff_4_EMPTY_N));

  // submodule writeDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) writeDataFifo_0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(writeDataFifo_0_D_IN),
					   .ENQ(writeDataFifo_0_ENQ),
					   .DEQ(writeDataFifo_0_DEQ),
					   .CLR(writeDataFifo_0_CLR),
					   .D_OUT(writeDataFifo_0_D_OUT),
					   .FULL_N(writeDataFifo_0_FULL_N),
					   .EMPTY_N(writeDataFifo_0_EMPTY_N));

  // submodule xbar_lower_lower_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_lower_lower_f_D_IN),
						    .ENQ(xbar_lower_lower_lower_f_ENQ),
						    .DEQ(xbar_lower_lower_lower_f_DEQ),
						    .CLR(xbar_lower_lower_lower_f_CLR),
						    .D_OUT(xbar_lower_lower_lower_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_lower_lower_f_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_lower_merges_1_fi0_D_IN),
							 .ENQ(xbar_lower_lower_merges_1_fi0_ENQ),
							 .DEQ(xbar_lower_lower_merges_1_fi0_DEQ),
							 .CLR(xbar_lower_lower_merges_1_fi0_CLR),
							 .D_OUT(xbar_lower_lower_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_lower_lower_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_lower_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_lower_merges_1_fi1_D_IN),
							 .ENQ(xbar_lower_lower_merges_1_fi1_ENQ),
							 .DEQ(xbar_lower_lower_merges_1_fi1_DEQ),
							 .CLR(xbar_lower_lower_merges_1_fi1_CLR),
							 .D_OUT(xbar_lower_lower_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_lower_lower_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_lower_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_lower_lower_merges_1_fo_D_IN),
							.ENQ(xbar_lower_lower_merges_1_fo_ENQ),
							.DEQ(xbar_lower_lower_merges_1_fo_DEQ),
							.CLR(xbar_lower_lower_merges_1_fo_CLR),
							.D_OUT(xbar_lower_lower_merges_1_fo_D_OUT),
							.FULL_N(xbar_lower_lower_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_lower_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_lower_merges_fi0_D_IN),
						       .ENQ(xbar_lower_lower_merges_fi0_ENQ),
						       .DEQ(xbar_lower_lower_merges_fi0_DEQ),
						       .CLR(xbar_lower_lower_merges_fi0_CLR),
						       .D_OUT(xbar_lower_lower_merges_fi0_D_OUT),
						       .FULL_N(xbar_lower_lower_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_lower_lower_merges_fi0_EMPTY_N));

  // submodule xbar_lower_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_lower_merges_fi1_D_IN),
						       .ENQ(xbar_lower_lower_merges_fi1_ENQ),
						       .DEQ(xbar_lower_lower_merges_fi1_DEQ),
						       .CLR(xbar_lower_lower_merges_fi1_CLR),
						       .D_OUT(xbar_lower_lower_merges_fi1_D_OUT),
						       .FULL_N(xbar_lower_lower_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_lower_lower_merges_fi1_EMPTY_N));

  // submodule xbar_lower_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_lower_lower_merges_fo_D_IN),
						      .ENQ(xbar_lower_lower_merges_fo_ENQ),
						      .DEQ(xbar_lower_lower_merges_fo_DEQ),
						      .CLR(xbar_lower_lower_merges_fo_CLR),
						      .D_OUT(xbar_lower_lower_merges_fo_D_OUT),
						      .FULL_N(xbar_lower_lower_merges_fo_FULL_N),
						      .EMPTY_N(xbar_lower_lower_merges_fo_EMPTY_N));

  // submodule xbar_lower_lower_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_lower_upper_f_D_IN),
						    .ENQ(xbar_lower_lower_upper_f_ENQ),
						    .DEQ(xbar_lower_lower_upper_f_DEQ),
						    .CLR(xbar_lower_lower_upper_f_CLR),
						    .D_OUT(xbar_lower_lower_upper_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_lower_upper_f_EMPTY_N));

  // submodule xbar_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi0_D_IN),
						   .ENQ(xbar_lower_merges_1_fi0_ENQ),
						   .DEQ(xbar_lower_merges_1_fi0_DEQ),
						   .CLR(xbar_lower_merges_1_fi0_CLR),
						   .D_OUT(xbar_lower_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi1_D_IN),
						   .ENQ(xbar_lower_merges_1_fi1_ENQ),
						   .DEQ(xbar_lower_merges_1_fi1_DEQ),
						   .CLR(xbar_lower_merges_1_fi1_CLR),
						   .D_OUT(xbar_lower_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_1_fo_D_IN),
						  .ENQ(xbar_lower_merges_1_fo_ENQ),
						  .DEQ(xbar_lower_merges_1_fo_DEQ),
						  .CLR(xbar_lower_merges_1_fo_CLR),
						  .D_OUT(xbar_lower_merges_1_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_2_fi0_D_IN),
						   .ENQ(xbar_lower_merges_2_fi0_ENQ),
						   .DEQ(xbar_lower_merges_2_fi0_DEQ),
						   .CLR(xbar_lower_merges_2_fi0_CLR),
						   .D_OUT(xbar_lower_merges_2_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_2_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_2_fi0_EMPTY_N));

  // submodule xbar_lower_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_2_fi1_D_IN),
						   .ENQ(xbar_lower_merges_2_fi1_ENQ),
						   .DEQ(xbar_lower_merges_2_fi1_DEQ),
						   .CLR(xbar_lower_merges_2_fi1_CLR),
						   .D_OUT(xbar_lower_merges_2_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_2_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_2_fi1_EMPTY_N));

  // submodule xbar_lower_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_2_fo_D_IN),
						  .ENQ(xbar_lower_merges_2_fo_ENQ),
						  .DEQ(xbar_lower_merges_2_fo_DEQ),
						  .CLR(xbar_lower_merges_2_fo_CLR),
						  .D_OUT(xbar_lower_merges_2_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_2_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_2_fo_EMPTY_N));

  // submodule xbar_lower_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_3_fi0_D_IN),
						   .ENQ(xbar_lower_merges_3_fi0_ENQ),
						   .DEQ(xbar_lower_merges_3_fi0_DEQ),
						   .CLR(xbar_lower_merges_3_fi0_CLR),
						   .D_OUT(xbar_lower_merges_3_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_3_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_3_fi0_EMPTY_N));

  // submodule xbar_lower_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_3_fi1_D_IN),
						   .ENQ(xbar_lower_merges_3_fi1_ENQ),
						   .DEQ(xbar_lower_merges_3_fi1_DEQ),
						   .CLR(xbar_lower_merges_3_fi1_CLR),
						   .D_OUT(xbar_lower_merges_3_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_3_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_3_fi1_EMPTY_N));

  // submodule xbar_lower_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_3_fo_D_IN),
						  .ENQ(xbar_lower_merges_3_fo_ENQ),
						  .DEQ(xbar_lower_merges_3_fo_DEQ),
						  .CLR(xbar_lower_merges_3_fo_CLR),
						  .D_OUT(xbar_lower_merges_3_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_3_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_3_fo_EMPTY_N));

  // submodule xbar_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi0_D_IN),
						 .ENQ(xbar_lower_merges_fi0_ENQ),
						 .DEQ(xbar_lower_merges_fi0_DEQ),
						 .CLR(xbar_lower_merges_fi0_CLR),
						 .D_OUT(xbar_lower_merges_fi0_D_OUT),
						 .FULL_N(xbar_lower_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi0_EMPTY_N));

  // submodule xbar_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi1_D_IN),
						 .ENQ(xbar_lower_merges_fi1_ENQ),
						 .DEQ(xbar_lower_merges_fi1_DEQ),
						 .CLR(xbar_lower_merges_fi1_CLR),
						 .D_OUT(xbar_lower_merges_fi1_D_OUT),
						 .FULL_N(xbar_lower_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi1_EMPTY_N));

  // submodule xbar_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_lower_merges_fo_D_IN),
						.ENQ(xbar_lower_merges_fo_ENQ),
						.DEQ(xbar_lower_merges_fo_DEQ),
						.CLR(xbar_lower_merges_fo_CLR),
						.D_OUT(xbar_lower_merges_fo_D_OUT),
						.FULL_N(xbar_lower_merges_fo_FULL_N),
						.EMPTY_N(xbar_lower_merges_fo_EMPTY_N));

  // submodule xbar_lower_upper_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_upper_lower_f_D_IN),
						    .ENQ(xbar_lower_upper_lower_f_ENQ),
						    .DEQ(xbar_lower_upper_lower_f_DEQ),
						    .CLR(xbar_lower_upper_lower_f_CLR),
						    .D_OUT(xbar_lower_upper_lower_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_upper_lower_f_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_upper_merges_1_fi0_D_IN),
							 .ENQ(xbar_lower_upper_merges_1_fi0_ENQ),
							 .DEQ(xbar_lower_upper_merges_1_fi0_DEQ),
							 .CLR(xbar_lower_upper_merges_1_fi0_CLR),
							 .D_OUT(xbar_lower_upper_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_lower_upper_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_lower_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_upper_merges_1_fi1_D_IN),
							 .ENQ(xbar_lower_upper_merges_1_fi1_ENQ),
							 .DEQ(xbar_lower_upper_merges_1_fi1_DEQ),
							 .CLR(xbar_lower_upper_merges_1_fi1_CLR),
							 .D_OUT(xbar_lower_upper_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_lower_upper_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_lower_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_lower_upper_merges_1_fo_D_IN),
							.ENQ(xbar_lower_upper_merges_1_fo_ENQ),
							.DEQ(xbar_lower_upper_merges_1_fo_DEQ),
							.CLR(xbar_lower_upper_merges_1_fo_CLR),
							.D_OUT(xbar_lower_upper_merges_1_fo_D_OUT),
							.FULL_N(xbar_lower_upper_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_lower_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_upper_merges_fi0_D_IN),
						       .ENQ(xbar_lower_upper_merges_fi0_ENQ),
						       .DEQ(xbar_lower_upper_merges_fi0_DEQ),
						       .CLR(xbar_lower_upper_merges_fi0_CLR),
						       .D_OUT(xbar_lower_upper_merges_fi0_D_OUT),
						       .FULL_N(xbar_lower_upper_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_lower_upper_merges_fi0_EMPTY_N));

  // submodule xbar_lower_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_upper_merges_fi1_D_IN),
						       .ENQ(xbar_lower_upper_merges_fi1_ENQ),
						       .DEQ(xbar_lower_upper_merges_fi1_DEQ),
						       .CLR(xbar_lower_upper_merges_fi1_CLR),
						       .D_OUT(xbar_lower_upper_merges_fi1_D_OUT),
						       .FULL_N(xbar_lower_upper_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_lower_upper_merges_fi1_EMPTY_N));

  // submodule xbar_lower_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_lower_upper_merges_fo_D_IN),
						      .ENQ(xbar_lower_upper_merges_fo_ENQ),
						      .DEQ(xbar_lower_upper_merges_fo_DEQ),
						      .CLR(xbar_lower_upper_merges_fo_CLR),
						      .D_OUT(xbar_lower_upper_merges_fo_D_OUT),
						      .FULL_N(xbar_lower_upper_merges_fo_FULL_N),
						      .EMPTY_N(xbar_lower_upper_merges_fo_EMPTY_N));

  // submodule xbar_lower_upper_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_upper_upper_f_D_IN),
						    .ENQ(xbar_lower_upper_upper_f_ENQ),
						    .DEQ(xbar_lower_upper_upper_f_DEQ),
						    .CLR(xbar_lower_upper_upper_f_CLR),
						    .D_OUT(xbar_lower_upper_upper_f_D_OUT),
						    .FULL_N(xbar_lower_upper_upper_f_FULL_N),
						    .EMPTY_N(xbar_lower_upper_upper_f_EMPTY_N));

  // submodule xbar_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi0_D_IN),
					     .ENQ(xbar_merges_1_fi0_ENQ),
					     .DEQ(xbar_merges_1_fi0_DEQ),
					     .CLR(xbar_merges_1_fi0_CLR),
					     .D_OUT(xbar_merges_1_fi0_D_OUT),
					     .FULL_N(xbar_merges_1_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi0_EMPTY_N));

  // submodule xbar_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi1_D_IN),
					     .ENQ(xbar_merges_1_fi1_ENQ),
					     .DEQ(xbar_merges_1_fi1_DEQ),
					     .CLR(xbar_merges_1_fi1_CLR),
					     .D_OUT(xbar_merges_1_fi1_D_OUT),
					     .FULL_N(xbar_merges_1_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi1_EMPTY_N));

  // submodule xbar_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_1_fo_D_IN),
					    .ENQ(xbar_merges_1_fo_ENQ),
					    .DEQ(xbar_merges_1_fo_DEQ),
					    .CLR(xbar_merges_1_fo_CLR),
					    .D_OUT(xbar_merges_1_fo_D_OUT),
					    .FULL_N(xbar_merges_1_fo_FULL_N),
					    .EMPTY_N(xbar_merges_1_fo_EMPTY_N));

  // submodule xbar_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi0_D_IN),
					     .ENQ(xbar_merges_2_fi0_ENQ),
					     .DEQ(xbar_merges_2_fi0_DEQ),
					     .CLR(xbar_merges_2_fi0_CLR),
					     .D_OUT(xbar_merges_2_fi0_D_OUT),
					     .FULL_N(xbar_merges_2_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi0_EMPTY_N));

  // submodule xbar_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi1_D_IN),
					     .ENQ(xbar_merges_2_fi1_ENQ),
					     .DEQ(xbar_merges_2_fi1_DEQ),
					     .CLR(xbar_merges_2_fi1_CLR),
					     .D_OUT(xbar_merges_2_fi1_D_OUT),
					     .FULL_N(xbar_merges_2_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi1_EMPTY_N));

  // submodule xbar_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_2_fo_D_IN),
					    .ENQ(xbar_merges_2_fo_ENQ),
					    .DEQ(xbar_merges_2_fo_DEQ),
					    .CLR(xbar_merges_2_fo_CLR),
					    .D_OUT(xbar_merges_2_fo_D_OUT),
					    .FULL_N(xbar_merges_2_fo_FULL_N),
					    .EMPTY_N(xbar_merges_2_fo_EMPTY_N));

  // submodule xbar_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi0_D_IN),
					     .ENQ(xbar_merges_3_fi0_ENQ),
					     .DEQ(xbar_merges_3_fi0_DEQ),
					     .CLR(xbar_merges_3_fi0_CLR),
					     .D_OUT(xbar_merges_3_fi0_D_OUT),
					     .FULL_N(xbar_merges_3_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi0_EMPTY_N));

  // submodule xbar_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi1_D_IN),
					     .ENQ(xbar_merges_3_fi1_ENQ),
					     .DEQ(xbar_merges_3_fi1_DEQ),
					     .CLR(xbar_merges_3_fi1_CLR),
					     .D_OUT(xbar_merges_3_fi1_D_OUT),
					     .FULL_N(xbar_merges_3_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi1_EMPTY_N));

  // submodule xbar_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_3_fo_D_IN),
					    .ENQ(xbar_merges_3_fo_ENQ),
					    .DEQ(xbar_merges_3_fo_DEQ),
					    .CLR(xbar_merges_3_fo_CLR),
					    .D_OUT(xbar_merges_3_fo_D_OUT),
					    .FULL_N(xbar_merges_3_fo_FULL_N),
					    .EMPTY_N(xbar_merges_3_fo_EMPTY_N));

  // submodule xbar_merges_4_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_4_fi0_D_IN),
					     .ENQ(xbar_merges_4_fi0_ENQ),
					     .DEQ(xbar_merges_4_fi0_DEQ),
					     .CLR(xbar_merges_4_fi0_CLR),
					     .D_OUT(xbar_merges_4_fi0_D_OUT),
					     .FULL_N(xbar_merges_4_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_4_fi0_EMPTY_N));

  // submodule xbar_merges_4_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_4_fi1_D_IN),
					     .ENQ(xbar_merges_4_fi1_ENQ),
					     .DEQ(xbar_merges_4_fi1_DEQ),
					     .CLR(xbar_merges_4_fi1_CLR),
					     .D_OUT(xbar_merges_4_fi1_D_OUT),
					     .FULL_N(xbar_merges_4_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_4_fi1_EMPTY_N));

  // submodule xbar_merges_4_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_4_fo_D_IN),
					    .ENQ(xbar_merges_4_fo_ENQ),
					    .DEQ(xbar_merges_4_fo_DEQ),
					    .CLR(xbar_merges_4_fo_CLR),
					    .D_OUT(xbar_merges_4_fo_D_OUT),
					    .FULL_N(xbar_merges_4_fo_FULL_N),
					    .EMPTY_N(xbar_merges_4_fo_EMPTY_N));

  // submodule xbar_merges_5_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_5_fi0_D_IN),
					     .ENQ(xbar_merges_5_fi0_ENQ),
					     .DEQ(xbar_merges_5_fi0_DEQ),
					     .CLR(xbar_merges_5_fi0_CLR),
					     .D_OUT(xbar_merges_5_fi0_D_OUT),
					     .FULL_N(xbar_merges_5_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_5_fi0_EMPTY_N));

  // submodule xbar_merges_5_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_5_fi1_D_IN),
					     .ENQ(xbar_merges_5_fi1_ENQ),
					     .DEQ(xbar_merges_5_fi1_DEQ),
					     .CLR(xbar_merges_5_fi1_CLR),
					     .D_OUT(xbar_merges_5_fi1_D_OUT),
					     .FULL_N(xbar_merges_5_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_5_fi1_EMPTY_N));

  // submodule xbar_merges_5_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_5_fo_D_IN),
					    .ENQ(xbar_merges_5_fo_ENQ),
					    .DEQ(xbar_merges_5_fo_DEQ),
					    .CLR(xbar_merges_5_fo_CLR),
					    .D_OUT(xbar_merges_5_fo_D_OUT),
					    .FULL_N(xbar_merges_5_fo_FULL_N),
					    .EMPTY_N(xbar_merges_5_fo_EMPTY_N));

  // submodule xbar_merges_6_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_6_fi0_D_IN),
					     .ENQ(xbar_merges_6_fi0_ENQ),
					     .DEQ(xbar_merges_6_fi0_DEQ),
					     .CLR(xbar_merges_6_fi0_CLR),
					     .D_OUT(xbar_merges_6_fi0_D_OUT),
					     .FULL_N(xbar_merges_6_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_6_fi0_EMPTY_N));

  // submodule xbar_merges_6_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_6_fi1_D_IN),
					     .ENQ(xbar_merges_6_fi1_ENQ),
					     .DEQ(xbar_merges_6_fi1_DEQ),
					     .CLR(xbar_merges_6_fi1_CLR),
					     .D_OUT(xbar_merges_6_fi1_D_OUT),
					     .FULL_N(xbar_merges_6_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_6_fi1_EMPTY_N));

  // submodule xbar_merges_6_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_6_fo_D_IN),
					    .ENQ(xbar_merges_6_fo_ENQ),
					    .DEQ(xbar_merges_6_fo_DEQ),
					    .CLR(xbar_merges_6_fo_CLR),
					    .D_OUT(xbar_merges_6_fo_D_OUT),
					    .FULL_N(xbar_merges_6_fo_FULL_N),
					    .EMPTY_N(xbar_merges_6_fo_EMPTY_N));

  // submodule xbar_merges_7_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_7_fi0_D_IN),
					     .ENQ(xbar_merges_7_fi0_ENQ),
					     .DEQ(xbar_merges_7_fi0_DEQ),
					     .CLR(xbar_merges_7_fi0_CLR),
					     .D_OUT(xbar_merges_7_fi0_D_OUT),
					     .FULL_N(xbar_merges_7_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_7_fi0_EMPTY_N));

  // submodule xbar_merges_7_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_7_fi1_D_IN),
					     .ENQ(xbar_merges_7_fi1_ENQ),
					     .DEQ(xbar_merges_7_fi1_DEQ),
					     .CLR(xbar_merges_7_fi1_CLR),
					     .D_OUT(xbar_merges_7_fi1_D_OUT),
					     .FULL_N(xbar_merges_7_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_7_fi1_EMPTY_N));

  // submodule xbar_merges_7_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_7_fo_D_IN),
					    .ENQ(xbar_merges_7_fo_ENQ),
					    .DEQ(xbar_merges_7_fo_DEQ),
					    .CLR(xbar_merges_7_fo_CLR),
					    .D_OUT(xbar_merges_7_fo_D_OUT),
					    .FULL_N(xbar_merges_7_fo_FULL_N),
					    .EMPTY_N(xbar_merges_7_fo_EMPTY_N));

  // submodule xbar_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi0_D_IN),
					   .ENQ(xbar_merges_fi0_ENQ),
					   .DEQ(xbar_merges_fi0_DEQ),
					   .CLR(xbar_merges_fi0_CLR),
					   .D_OUT(xbar_merges_fi0_D_OUT),
					   .FULL_N(xbar_merges_fi0_FULL_N),
					   .EMPTY_N(xbar_merges_fi0_EMPTY_N));

  // submodule xbar_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi1(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi1_D_IN),
					   .ENQ(xbar_merges_fi1_ENQ),
					   .DEQ(xbar_merges_fi1_DEQ),
					   .CLR(xbar_merges_fi1_CLR),
					   .D_OUT(xbar_merges_fi1_D_OUT),
					   .FULL_N(xbar_merges_fi1_FULL_N),
					   .EMPTY_N(xbar_merges_fi1_EMPTY_N));

  // submodule xbar_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fo(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(xbar_merges_fo_D_IN),
					  .ENQ(xbar_merges_fo_ENQ),
					  .DEQ(xbar_merges_fo_DEQ),
					  .CLR(xbar_merges_fo_CLR),
					  .D_OUT(xbar_merges_fo_D_OUT),
					  .FULL_N(xbar_merges_fo_FULL_N),
					  .EMPTY_N(xbar_merges_fo_EMPTY_N));

  // submodule xbar_upper_lower_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_lower_lower_f_D_IN),
						    .ENQ(xbar_upper_lower_lower_f_ENQ),
						    .DEQ(xbar_upper_lower_lower_f_DEQ),
						    .CLR(xbar_upper_lower_lower_f_CLR),
						    .D_OUT(xbar_upper_lower_lower_f_D_OUT),
						    .FULL_N(xbar_upper_lower_lower_f_FULL_N),
						    .EMPTY_N(xbar_upper_lower_lower_f_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_lower_merges_1_fi0_D_IN),
							 .ENQ(xbar_upper_lower_merges_1_fi0_ENQ),
							 .DEQ(xbar_upper_lower_merges_1_fi0_DEQ),
							 .CLR(xbar_upper_lower_merges_1_fi0_CLR),
							 .D_OUT(xbar_upper_lower_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_upper_lower_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_upper_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_lower_merges_1_fi1_D_IN),
							 .ENQ(xbar_upper_lower_merges_1_fi1_ENQ),
							 .DEQ(xbar_upper_lower_merges_1_fi1_DEQ),
							 .CLR(xbar_upper_lower_merges_1_fi1_CLR),
							 .D_OUT(xbar_upper_lower_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_upper_lower_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_upper_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_upper_lower_merges_1_fo_D_IN),
							.ENQ(xbar_upper_lower_merges_1_fo_ENQ),
							.DEQ(xbar_upper_lower_merges_1_fo_DEQ),
							.CLR(xbar_upper_lower_merges_1_fo_CLR),
							.D_OUT(xbar_upper_lower_merges_1_fo_D_OUT),
							.FULL_N(xbar_upper_lower_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_upper_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_lower_merges_fi0_D_IN),
						       .ENQ(xbar_upper_lower_merges_fi0_ENQ),
						       .DEQ(xbar_upper_lower_merges_fi0_DEQ),
						       .CLR(xbar_upper_lower_merges_fi0_CLR),
						       .D_OUT(xbar_upper_lower_merges_fi0_D_OUT),
						       .FULL_N(xbar_upper_lower_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_upper_lower_merges_fi0_EMPTY_N));

  // submodule xbar_upper_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_lower_merges_fi1_D_IN),
						       .ENQ(xbar_upper_lower_merges_fi1_ENQ),
						       .DEQ(xbar_upper_lower_merges_fi1_DEQ),
						       .CLR(xbar_upper_lower_merges_fi1_CLR),
						       .D_OUT(xbar_upper_lower_merges_fi1_D_OUT),
						       .FULL_N(xbar_upper_lower_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_upper_lower_merges_fi1_EMPTY_N));

  // submodule xbar_upper_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_upper_lower_merges_fo_D_IN),
						      .ENQ(xbar_upper_lower_merges_fo_ENQ),
						      .DEQ(xbar_upper_lower_merges_fo_DEQ),
						      .CLR(xbar_upper_lower_merges_fo_CLR),
						      .D_OUT(xbar_upper_lower_merges_fo_D_OUT),
						      .FULL_N(xbar_upper_lower_merges_fo_FULL_N),
						      .EMPTY_N(xbar_upper_lower_merges_fo_EMPTY_N));

  // submodule xbar_upper_lower_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_lower_upper_f_D_IN),
						    .ENQ(xbar_upper_lower_upper_f_ENQ),
						    .DEQ(xbar_upper_lower_upper_f_DEQ),
						    .CLR(xbar_upper_lower_upper_f_CLR),
						    .D_OUT(xbar_upper_lower_upper_f_D_OUT),
						    .FULL_N(xbar_upper_lower_upper_f_FULL_N),
						    .EMPTY_N(xbar_upper_lower_upper_f_EMPTY_N));

  // submodule xbar_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi0_D_IN),
						   .ENQ(xbar_upper_merges_1_fi0_ENQ),
						   .DEQ(xbar_upper_merges_1_fi0_DEQ),
						   .CLR(xbar_upper_merges_1_fi0_CLR),
						   .D_OUT(xbar_upper_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi1_D_IN),
						   .ENQ(xbar_upper_merges_1_fi1_ENQ),
						   .DEQ(xbar_upper_merges_1_fi1_DEQ),
						   .CLR(xbar_upper_merges_1_fi1_CLR),
						   .D_OUT(xbar_upper_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_1_fo_D_IN),
						  .ENQ(xbar_upper_merges_1_fo_ENQ),
						  .DEQ(xbar_upper_merges_1_fo_DEQ),
						  .CLR(xbar_upper_merges_1_fo_CLR),
						  .D_OUT(xbar_upper_merges_1_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_2_fi0_D_IN),
						   .ENQ(xbar_upper_merges_2_fi0_ENQ),
						   .DEQ(xbar_upper_merges_2_fi0_DEQ),
						   .CLR(xbar_upper_merges_2_fi0_CLR),
						   .D_OUT(xbar_upper_merges_2_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_2_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_2_fi0_EMPTY_N));

  // submodule xbar_upper_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_2_fi1_D_IN),
						   .ENQ(xbar_upper_merges_2_fi1_ENQ),
						   .DEQ(xbar_upper_merges_2_fi1_DEQ),
						   .CLR(xbar_upper_merges_2_fi1_CLR),
						   .D_OUT(xbar_upper_merges_2_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_2_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_2_fi1_EMPTY_N));

  // submodule xbar_upper_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_2_fo_D_IN),
						  .ENQ(xbar_upper_merges_2_fo_ENQ),
						  .DEQ(xbar_upper_merges_2_fo_DEQ),
						  .CLR(xbar_upper_merges_2_fo_CLR),
						  .D_OUT(xbar_upper_merges_2_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_2_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_2_fo_EMPTY_N));

  // submodule xbar_upper_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_3_fi0_D_IN),
						   .ENQ(xbar_upper_merges_3_fi0_ENQ),
						   .DEQ(xbar_upper_merges_3_fi0_DEQ),
						   .CLR(xbar_upper_merges_3_fi0_CLR),
						   .D_OUT(xbar_upper_merges_3_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_3_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_3_fi0_EMPTY_N));

  // submodule xbar_upper_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_3_fi1_D_IN),
						   .ENQ(xbar_upper_merges_3_fi1_ENQ),
						   .DEQ(xbar_upper_merges_3_fi1_DEQ),
						   .CLR(xbar_upper_merges_3_fi1_CLR),
						   .D_OUT(xbar_upper_merges_3_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_3_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_3_fi1_EMPTY_N));

  // submodule xbar_upper_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_3_fo_D_IN),
						  .ENQ(xbar_upper_merges_3_fo_ENQ),
						  .DEQ(xbar_upper_merges_3_fo_DEQ),
						  .CLR(xbar_upper_merges_3_fo_CLR),
						  .D_OUT(xbar_upper_merges_3_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_3_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_3_fo_EMPTY_N));

  // submodule xbar_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi0_D_IN),
						 .ENQ(xbar_upper_merges_fi0_ENQ),
						 .DEQ(xbar_upper_merges_fi0_DEQ),
						 .CLR(xbar_upper_merges_fi0_CLR),
						 .D_OUT(xbar_upper_merges_fi0_D_OUT),
						 .FULL_N(xbar_upper_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi0_EMPTY_N));

  // submodule xbar_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi1_D_IN),
						 .ENQ(xbar_upper_merges_fi1_ENQ),
						 .DEQ(xbar_upper_merges_fi1_DEQ),
						 .CLR(xbar_upper_merges_fi1_CLR),
						 .D_OUT(xbar_upper_merges_fi1_D_OUT),
						 .FULL_N(xbar_upper_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi1_EMPTY_N));

  // submodule xbar_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_upper_merges_fo_D_IN),
						.ENQ(xbar_upper_merges_fo_ENQ),
						.DEQ(xbar_upper_merges_fo_DEQ),
						.CLR(xbar_upper_merges_fo_CLR),
						.D_OUT(xbar_upper_merges_fo_D_OUT),
						.FULL_N(xbar_upper_merges_fo_FULL_N),
						.EMPTY_N(xbar_upper_merges_fo_EMPTY_N));

  // submodule xbar_upper_upper_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_upper_lower_f_D_IN),
						    .ENQ(xbar_upper_upper_lower_f_ENQ),
						    .DEQ(xbar_upper_upper_lower_f_DEQ),
						    .CLR(xbar_upper_upper_lower_f_CLR),
						    .D_OUT(xbar_upper_upper_lower_f_D_OUT),
						    .FULL_N(xbar_upper_upper_lower_f_FULL_N),
						    .EMPTY_N(xbar_upper_upper_lower_f_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_upper_merges_1_fi0_D_IN),
							 .ENQ(xbar_upper_upper_merges_1_fi0_ENQ),
							 .DEQ(xbar_upper_upper_merges_1_fi0_DEQ),
							 .CLR(xbar_upper_upper_merges_1_fi0_CLR),
							 .D_OUT(xbar_upper_upper_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_upper_upper_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_upper_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_upper_merges_1_fi1_D_IN),
							 .ENQ(xbar_upper_upper_merges_1_fi1_ENQ),
							 .DEQ(xbar_upper_upper_merges_1_fi1_DEQ),
							 .CLR(xbar_upper_upper_merges_1_fi1_CLR),
							 .D_OUT(xbar_upper_upper_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_upper_upper_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_upper_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_upper_upper_merges_1_fo_D_IN),
							.ENQ(xbar_upper_upper_merges_1_fo_ENQ),
							.DEQ(xbar_upper_upper_merges_1_fo_DEQ),
							.CLR(xbar_upper_upper_merges_1_fo_CLR),
							.D_OUT(xbar_upper_upper_merges_1_fo_D_OUT),
							.FULL_N(xbar_upper_upper_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_upper_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_upper_merges_fi0_D_IN),
						       .ENQ(xbar_upper_upper_merges_fi0_ENQ),
						       .DEQ(xbar_upper_upper_merges_fi0_DEQ),
						       .CLR(xbar_upper_upper_merges_fi0_CLR),
						       .D_OUT(xbar_upper_upper_merges_fi0_D_OUT),
						       .FULL_N(xbar_upper_upper_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_upper_upper_merges_fi0_EMPTY_N));

  // submodule xbar_upper_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_upper_merges_fi1_D_IN),
						       .ENQ(xbar_upper_upper_merges_fi1_ENQ),
						       .DEQ(xbar_upper_upper_merges_fi1_DEQ),
						       .CLR(xbar_upper_upper_merges_fi1_CLR),
						       .D_OUT(xbar_upper_upper_merges_fi1_D_OUT),
						       .FULL_N(xbar_upper_upper_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_upper_upper_merges_fi1_EMPTY_N));

  // submodule xbar_upper_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_upper_upper_merges_fo_D_IN),
						      .ENQ(xbar_upper_upper_merges_fo_ENQ),
						      .DEQ(xbar_upper_upper_merges_fo_DEQ),
						      .CLR(xbar_upper_upper_merges_fo_CLR),
						      .D_OUT(xbar_upper_upper_merges_fo_D_OUT),
						      .FULL_N(xbar_upper_upper_merges_fo_FULL_N),
						      .EMPTY_N(xbar_upper_upper_merges_fo_EMPTY_N));

  // submodule xbar_upper_upper_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_upper_upper_f_D_IN),
						    .ENQ(xbar_upper_upper_upper_f_ENQ),
						    .DEQ(xbar_upper_upper_upper_f_DEQ),
						    .CLR(xbar_upper_upper_upper_f_CLR),
						    .D_OUT(xbar_upper_upper_upper_f_D_OUT),
						    .FULL_N(xbar_upper_upper_upper_f_FULL_N),
						    .EMPTY_N(xbar_upper_upper_upper_f_EMPTY_N));

  // rule RL_packetReadInProgress
  assign WILL_FIRE_RL_packetReadInProgress =
	     parser_0_RDY_frameIn_put && readDataFifo_0_EMPTY_N &&
	     writeDataFifo_0_FULL_N &&
	     readStarted_0 ;

  // rule RL_mkConnectionGetPut_15
  assign CAN_FIRE_RL_mkConnectionGetPut_15 =
	     pktBuff_0_pktBuff_RDY_writeServer_enq &&
	     writeDataFifo_0_EMPTY_N ;

  // rule RL_mkConnectionGetPut_16
  assign CAN_FIRE_RL_mkConnectionGetPut_16 =
	     pktBuff_1_pktBuff_RDY_writeServer_enq &&
	     hostchan_0_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_17
  assign CAN_FIRE_RL_mkConnectionGetPut_17 =
	     pktBuff_2_pktBuff_RDY_writeServer_enq &&
	     hostchan_1_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_18
  assign CAN_FIRE_RL_mkConnectionGetPut_18 =
	     pktBuff_3_pktBuff_RDY_writeServer_enq &&
	     hostchan_2_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_19
  assign CAN_FIRE_RL_mkConnectionGetPut_19 =
	     pktBuff_4_pktBuff_RDY_writeServer_enq &&
	     hostchan_3_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_69
  assign CAN_FIRE_RL_mkConnectionGetPut_69 =
	     gearbox_dn_16_0_RDY_dataout_get &&
	     pktBuff_0_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_70
  assign CAN_FIRE_RL_mkConnectionGetPut_70 =
	     gearbox_dn_16_1_RDY_dataout_get &&
	     pktBuff_1_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_71
  assign CAN_FIRE_RL_mkConnectionGetPut_71 =
	     gearbox_dn_16_2_RDY_dataout_get &&
	     pktBuff_2_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_72
  assign CAN_FIRE_RL_mkConnectionGetPut_72 =
	     gearbox_dn_16_3_RDY_dataout_get &&
	     pktBuff_3_fifoWriteData_FULL_N ;

  // rule RL_hostchan_0_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_0_packetReadInProgress =
	     hostchan_0_parser_RDY_frameIn_put &&
	     hostchan_0_readDataFifo_EMPTY_N &&
	     hostchan_0_writeDataFifo_FULL_N &&
	     hostchan_0_readStarted ;

  // rule RL_macToRing_0_writeData
  assign WILL_FIRE_RL_macToRing_0_writeData =
	     macToRing_0_writeDataFifo_sFULL_N &&
	     macToRing_0_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_0_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_0_gearbox_in_ff_D_OUT[0] ||
	      macToRing_0_gearbox_out_ff_FULL_N) &&
	     macToRing_0_gearbox_inProgress &&
	     macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     macToRing_0_gearbox_out_ff_FULL_N &&
	     macToRing_0_gearbox_inProgress &&
	     !macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     !macToRing_0_gearbox_inProgress ;

  // rule RL_hostchan_1_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_1_packetReadInProgress =
	     hostchan_1_parser_RDY_frameIn_put &&
	     hostchan_1_readDataFifo_EMPTY_N &&
	     hostchan_1_writeDataFifo_FULL_N &&
	     hostchan_1_readStarted ;

  // rule RL_macToRing_1_writeData
  assign WILL_FIRE_RL_macToRing_1_writeData =
	     macToRing_1_writeDataFifo_sFULL_N &&
	     macToRing_1_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_1_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_1_gearbox_in_ff_D_OUT[0] ||
	      macToRing_1_gearbox_out_ff_FULL_N) &&
	     macToRing_1_gearbox_inProgress &&
	     macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     macToRing_1_gearbox_out_ff_FULL_N &&
	     macToRing_1_gearbox_inProgress &&
	     !macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     !macToRing_1_gearbox_inProgress ;

  // rule RL_hostchan_2_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_2_packetReadInProgress =
	     hostchan_2_parser_RDY_frameIn_put &&
	     hostchan_2_readDataFifo_EMPTY_N &&
	     hostchan_2_writeDataFifo_FULL_N &&
	     hostchan_2_readStarted ;

  // rule RL_macToRing_2_writeData
  assign WILL_FIRE_RL_macToRing_2_writeData =
	     macToRing_2_writeDataFifo_sFULL_N &&
	     macToRing_2_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_2_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_2_gearbox_in_ff_D_OUT[0] ||
	      macToRing_2_gearbox_out_ff_FULL_N) &&
	     macToRing_2_gearbox_inProgress &&
	     macToRing_2_gearbox_oddBeat ;

  // rule RL_macToRing_2_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     macToRing_2_gearbox_out_ff_FULL_N &&
	     macToRing_2_gearbox_inProgress &&
	     !macToRing_2_gearbox_oddBeat ;

  // rule RL_macToRing_2_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     !macToRing_2_gearbox_inProgress ;

  // rule RL_hostchan_3_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_3_packetReadInProgress =
	     hostchan_3_parser_RDY_frameIn_put &&
	     hostchan_3_readDataFifo_EMPTY_N &&
	     hostchan_3_writeDataFifo_FULL_N &&
	     hostchan_3_readStarted ;

  // rule RL_macToRing_3_writeData
  assign WILL_FIRE_RL_macToRing_3_writeData =
	     macToRing_3_writeDataFifo_sFULL_N &&
	     macToRing_3_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_3_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_3_gearbox_in_ff_D_OUT[0] ||
	      macToRing_3_gearbox_out_ff_FULL_N) &&
	     macToRing_3_gearbox_inProgress &&
	     macToRing_3_gearbox_oddBeat ;

  // rule RL_macToRing_3_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     macToRing_3_gearbox_out_ff_FULL_N &&
	     macToRing_3_gearbox_inProgress &&
	     !macToRing_3_gearbox_oddBeat ;

  // rule RL_macToRing_3_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     !macToRing_3_gearbox_inProgress ;

  // rule RL_pktBuff_0_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_0_packetReadInProgress =
	     pktBuff_0_readDataFifo_EMPTY_N &&
	     pktBuff_0_writeDataFifo_FULL_N &&
	     pktBuff_0_readStarted ;

  // rule RL_pktBuff_1_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_1_packetReadInProgress =
	     pktBuff_1_readDataFifo_EMPTY_N &&
	     pktBuff_1_writeDataFifo_FULL_N &&
	     pktBuff_1_readStarted ;

  // rule RL_pktBuff_2_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_2_packetReadInProgress =
	     pktBuff_2_readDataFifo_EMPTY_N &&
	     pktBuff_2_writeDataFifo_FULL_N &&
	     pktBuff_2_readStarted ;

  // rule RL_pktBuff_3_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_3_packetReadInProgress =
	     pktBuff_3_readDataFifo_EMPTY_N &&
	     pktBuff_3_writeDataFifo_FULL_N &&
	     pktBuff_3_readStarted ;

  // rule RL_pktBuff_4_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_4_packetReadInProgress =
	     pktBuff_4_readDataFifo_EMPTY_N &&
	     pktBuff_4_writeDataFifo_FULL_N &&
	     pktBuff_4_readStarted ;

  // rule RL_pktBuff_0_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_enqueue_first_beat =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_054_SLT_3___d2223 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     !pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_commit_packet
  assign WILL_FIRE_RL_pktBuff_0_commit_packet =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_054_SLT_3___d2223 &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_fifoLen_FULL_N &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_enq_stage1
  assign WILL_FIRE_RL_pktBuff_0_enq_stage1 =
	     pktBuff_0_fifoWriteData_EMPTY_N &&
	     pktBuff_0_incomingReqs_FULL_N &&
	     (!pktBuff_0_fifoWriteData_D_OUT[0] || pktBuff_0_fifoEop_FULL_N) ;

  // rule RL_pktBuff_0_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_first_beat =
	     pktBuff_0_fifoReadReq_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_cnt_119_SLT_3___d2249 &&
	     !pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_0_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_next_beat =
	     (pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_0_fifoReadData_FULL_N &&
	     (pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_cnt_119_SLT_3___d2249) &&
	     pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_0_cross_clocking
  assign WILL_FIRE_RL_ringToMac_0_cross_clocking =
	     ringToMac_0_tx_fifo_sFULL_N && ringToMac_0_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_0_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_0_process_incoming_packet =
	     NOT_ringToMac_0_fifoTxData_write_block_299_300_ETC___d2320 &&
	     ringToMac_0_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_0_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_0_process_outgoing_packet =
	     NOT_ringToMac_0_fifoTxData_read_block_339_340__ETC___d2362 &&
	     (IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 ==
	      8'd0 ||
	      ringToMac_0_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_1_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_enqueue_first_beat =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_498_SLT_3___d2667 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     !pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_commit_packet
  assign WILL_FIRE_RL_pktBuff_1_commit_packet =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_498_SLT_3___d2667 &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_fifoLen_FULL_N &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_enq_stage1
  assign WILL_FIRE_RL_pktBuff_1_enq_stage1 =
	     pktBuff_1_fifoWriteData_EMPTY_N &&
	     pktBuff_1_incomingReqs_FULL_N &&
	     (!pktBuff_1_fifoWriteData_D_OUT[0] || pktBuff_1_fifoEop_FULL_N) ;

  // rule RL_pktBuff_1_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_first_beat =
	     pktBuff_1_fifoReadReq_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_cnt_563_SLT_3___d2693 &&
	     !pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_1_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_next_beat =
	     (pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_1_fifoReadData_FULL_N &&
	     (pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_cnt_563_SLT_3___d2693) &&
	     pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_1_cross_clocking
  assign WILL_FIRE_RL_ringToMac_1_cross_clocking =
	     ringToMac_1_tx_fifo_sFULL_N && ringToMac_1_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_1_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_1_process_incoming_packet =
	     NOT_ringToMac_1_fifoTxData_write_block_743_744_ETC___d2764 &&
	     ringToMac_1_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_1_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_1_process_outgoing_packet =
	     NOT_ringToMac_1_fifoTxData_read_block_783_784__ETC___d2806 &&
	     (IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 ==
	      8'd0 ||
	      ringToMac_1_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_2_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_2_enqueue_first_beat =
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_942_SLT_3___d3111 &&
	     !pktBuff_2_fifoEop_EMPTY_N &&
	     !pktBuff_2_inPacket ;

  // rule RL_pktBuff_2_commit_packet
  assign WILL_FIRE_RL_pktBuff_2_commit_packet =
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_942_SLT_3___d3111 &&
	     pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_fifoLen_FULL_N &&
	     pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_inPacket ;

  // rule RL_pktBuff_2_enq_stage1
  assign WILL_FIRE_RL_pktBuff_2_enq_stage1 =
	     pktBuff_2_fifoWriteData_EMPTY_N &&
	     pktBuff_2_incomingReqs_FULL_N &&
	     (!pktBuff_2_fifoWriteData_D_OUT[0] || pktBuff_2_fifoEop_FULL_N) ;

  // rule RL_pktBuff_2_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_2_dequeue_first_beat =
	     pktBuff_2_fifoReadReq_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_cnt_007_SLT_3___d3137 &&
	     !pktBuff_2_outPacket ;

  // rule RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_2_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_2_dequeue_next_beat =
	     (pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_2_fifoReadData_FULL_N &&
	     (pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_2_memBuffer_serverAdapterB_cnt_007_SLT_3___d3137) &&
	     pktBuff_2_outPacket ;

  // rule RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_2_cross_clocking
  assign WILL_FIRE_RL_ringToMac_2_cross_clocking =
	     ringToMac_2_tx_fifo_sFULL_N && ringToMac_2_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_2_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_2_process_incoming_packet =
	     NOT_ringToMac_2_fifoTxData_write_block_187_188_ETC___d3208 &&
	     ringToMac_2_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_2_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_2_process_outgoing_packet =
	     NOT_ringToMac_2_fifoTxData_read_block_227_228__ETC___d3250 &&
	     (IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 ==
	      8'd0 ||
	      ringToMac_2_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_3_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_3_enqueue_first_beat =
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_386_SLT_3___d3555 &&
	     !pktBuff_3_fifoEop_EMPTY_N &&
	     !pktBuff_3_inPacket ;

  // rule RL_pktBuff_3_commit_packet
  assign WILL_FIRE_RL_pktBuff_3_commit_packet =
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_386_SLT_3___d3555 &&
	     pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_fifoLen_FULL_N &&
	     pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_inPacket ;

  // rule RL_pktBuff_3_enq_stage1
  assign WILL_FIRE_RL_pktBuff_3_enq_stage1 =
	     pktBuff_3_fifoWriteData_EMPTY_N &&
	     pktBuff_3_incomingReqs_FULL_N &&
	     (!pktBuff_3_fifoWriteData_D_OUT[0] || pktBuff_3_fifoEop_FULL_N) ;

  // rule RL_pktBuff_3_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_3_dequeue_first_beat =
	     pktBuff_3_fifoReadReq_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_cnt_451_SLT_3___d3581 &&
	     !pktBuff_3_outPacket ;

  // rule RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_3_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_3_dequeue_next_beat =
	     (pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_3_fifoReadData_FULL_N &&
	     (pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_3_memBuffer_serverAdapterB_cnt_451_SLT_3___d3581) &&
	     pktBuff_3_outPacket ;

  // rule RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_3_cross_clocking
  assign WILL_FIRE_RL_ringToMac_3_cross_clocking =
	     ringToMac_3_tx_fifo_sFULL_N && ringToMac_3_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_3_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_3_process_incoming_packet =
	     NOT_ringToMac_3_fifoTxData_write_block_631_632_ETC___d3652 &&
	     ringToMac_3_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_3_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_3_process_outgoing_packet =
	     NOT_ringToMac_3_fifoTxData_read_block_671_672__ETC___d3694 &&
	     (IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 ==
	      8'd0 ||
	      ringToMac_3_writeMacFifo_FULL_N) ;

  // rule RL_xbar_upper_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty =
	     xbar_upper_upper_merges_fi1_EMPTY_N &&
	     xbar_upper_upper_merges_fo_FULL_N &&
	     !xbar_upper_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty =
	     xbar_upper_upper_merges_fo_FULL_N &&
	     xbar_upper_upper_merges_fi0_EMPTY_N &&
	     !xbar_upper_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data =
	     (xbar_upper_upper_merges_routeFrom[1] ?
		xbar_upper_upper_merges_fo_i_notFull__586_AND__ETC___d4602 :
		IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4611) &&
	     xbar_upper_upper_merges_fi0_EMPTY_N &&
	     xbar_upper_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty =
	     xbar_upper_upper_merges_1_fi1_EMPTY_N &&
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     !xbar_upper_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty =
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     xbar_upper_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data =
	     (xbar_upper_upper_merges_1_routeFrom[1] ?
		xbar_upper_upper_merges_1_fo_i_notFull__661_AN_ETC___d4677 :
		IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4686) &&
	     xbar_upper_upper_merges_1_fi0_EMPTY_N &&
	     xbar_upper_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_route
  assign WILL_FIRE_RL_xbar_upper_upper_route =
	     xbar_upper_upper_upper_f_EMPTY_N &&
	     (xbar_upper_upper_upper_f_D_OUT[578] ?
		xbar_upper_upper_merges_1_fi1_FULL_N :
		xbar_upper_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_upper_route_1
  assign WILL_FIRE_RL_xbar_upper_upper_route_1 =
	     xbar_upper_upper_lower_f_EMPTY_N &&
	     (xbar_upper_upper_lower_f_D_OUT[578] ?
		xbar_upper_upper_merges_1_fi0_FULL_N :
		xbar_upper_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty =
	     xbar_upper_lower_merges_fi1_EMPTY_N &&
	     xbar_upper_lower_merges_fo_FULL_N &&
	     !xbar_upper_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty =
	     xbar_upper_lower_merges_fo_FULL_N &&
	     xbar_upper_lower_merges_fi0_EMPTY_N &&
	     !xbar_upper_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data =
	     (xbar_upper_lower_merges_routeFrom[1] ?
		xbar_upper_lower_merges_fo_i_notFull__760_AND__ETC___d4776 :
		IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4785) &&
	     xbar_upper_lower_merges_fi0_EMPTY_N &&
	     xbar_upper_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty =
	     xbar_upper_lower_merges_1_fi1_EMPTY_N &&
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     !xbar_upper_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty =
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     xbar_upper_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data =
	     (xbar_upper_lower_merges_1_routeFrom[1] ?
		xbar_upper_lower_merges_1_fo_i_notFull__835_AN_ETC___d4851 :
		IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4860) &&
	     xbar_upper_lower_merges_1_fi0_EMPTY_N &&
	     xbar_upper_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_route
  assign WILL_FIRE_RL_xbar_upper_lower_route =
	     xbar_upper_lower_upper_f_EMPTY_N &&
	     (xbar_upper_lower_upper_f_D_OUT[578] ?
		xbar_upper_lower_merges_1_fi1_FULL_N :
		xbar_upper_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_lower_route_1
  assign WILL_FIRE_RL_xbar_upper_lower_route_1 =
	     xbar_upper_lower_lower_f_EMPTY_N &&
	     (xbar_upper_lower_lower_f_D_OUT[578] ?
		xbar_upper_lower_merges_1_fi0_FULL_N :
		xbar_upper_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty =
	     xbar_upper_merges_fi1_EMPTY_N && xbar_upper_merges_fo_FULL_N &&
	     !xbar_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty =
	     xbar_upper_merges_fo_FULL_N && xbar_upper_merges_fi0_EMPTY_N &&
	     !xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_both_have_data =
	     (xbar_upper_merges_routeFrom[1] ?
		xbar_upper_merges_fo_i_notFull__932_AND_IF_xba_ETC___d4948 :
		IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4957) &&
	     xbar_upper_merges_fi0_EMPTY_N &&
	     xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty =
	     xbar_upper_merges_1_fi1_EMPTY_N &&
	     xbar_upper_merges_1_fo_FULL_N &&
	     !xbar_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty =
	     xbar_upper_merges_1_fo_FULL_N &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_1_both_have_data =
	     (xbar_upper_merges_1_routeFrom[1] ?
		xbar_upper_merges_1_fo_i_notFull__007_AND_IF_x_ETC___d5023 :
		IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5032) &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty =
	     xbar_upper_merges_2_fi1_EMPTY_N &&
	     xbar_upper_merges_2_fo_FULL_N &&
	     !xbar_upper_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty =
	     xbar_upper_merges_2_fo_FULL_N &&
	     xbar_upper_merges_2_fi0_EMPTY_N &&
	     !xbar_upper_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_2_both_have_data =
	     (xbar_upper_merges_2_routeFrom[1] ?
		xbar_upper_merges_2_fo_i_notFull__082_AND_IF_x_ETC___d5098 :
		IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5107) &&
	     xbar_upper_merges_2_fi0_EMPTY_N &&
	     xbar_upper_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_upper_route
  assign WILL_FIRE_RL_xbar_upper_route =
	     xbar_upper_upper_merges_fo_EMPTY_N &&
	     (xbar_upper_upper_merges_fo_D_OUT[579] ?
		xbar_upper_merges_2_fi1_FULL_N :
		xbar_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_route_2
  assign WILL_FIRE_RL_xbar_upper_route_2 =
	     xbar_upper_lower_merges_fo_EMPTY_N &&
	     (xbar_upper_lower_merges_fo_D_OUT[579] ?
		xbar_upper_merges_2_fi0_FULL_N :
		xbar_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty =
	     xbar_upper_merges_3_fi1_EMPTY_N &&
	     xbar_upper_merges_3_fo_FULL_N &&
	     !xbar_upper_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty =
	     xbar_upper_merges_3_fo_FULL_N &&
	     xbar_upper_merges_3_fi0_EMPTY_N &&
	     !xbar_upper_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_3_both_have_data =
	     (xbar_upper_merges_3_routeFrom[1] ?
		xbar_upper_merges_3_fo_i_notFull__157_AND_IF_x_ETC___d5173 :
		IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5182) &&
	     xbar_upper_merges_3_fi0_EMPTY_N &&
	     xbar_upper_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_upper_route_1
  assign WILL_FIRE_RL_xbar_upper_route_1 =
	     xbar_upper_upper_merges_1_fo_EMPTY_N &&
	     (xbar_upper_upper_merges_1_fo_D_OUT[579] ?
		xbar_upper_merges_3_fi1_FULL_N :
		xbar_upper_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_upper_route_3
  assign WILL_FIRE_RL_xbar_upper_route_3 =
	     xbar_upper_lower_merges_1_fo_EMPTY_N &&
	     (xbar_upper_lower_merges_1_fo_D_OUT[579] ?
		xbar_upper_merges_3_fi0_FULL_N :
		xbar_upper_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_lower_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty =
	     xbar_lower_upper_merges_fi1_EMPTY_N &&
	     xbar_lower_upper_merges_fo_FULL_N &&
	     !xbar_lower_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty =
	     xbar_lower_upper_merges_fo_FULL_N &&
	     xbar_lower_upper_merges_fi0_EMPTY_N &&
	     !xbar_lower_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data =
	     (xbar_lower_upper_merges_routeFrom[1] ?
		xbar_lower_upper_merges_fo_i_notFull__278_AND__ETC___d5294 :
		IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5303) &&
	     xbar_lower_upper_merges_fi0_EMPTY_N &&
	     xbar_lower_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty =
	     xbar_lower_upper_merges_1_fi1_EMPTY_N &&
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     !xbar_lower_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty =
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     xbar_lower_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data =
	     (xbar_lower_upper_merges_1_routeFrom[1] ?
		xbar_lower_upper_merges_1_fo_i_notFull__353_AN_ETC___d5369 :
		IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5378) &&
	     xbar_lower_upper_merges_1_fi0_EMPTY_N &&
	     xbar_lower_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_route
  assign WILL_FIRE_RL_xbar_lower_upper_route =
	     xbar_lower_upper_upper_f_EMPTY_N &&
	     (xbar_lower_upper_upper_f_D_OUT[578] ?
		xbar_lower_upper_merges_1_fi1_FULL_N :
		xbar_lower_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_upper_route_1
  assign WILL_FIRE_RL_xbar_lower_upper_route_1 =
	     xbar_lower_upper_lower_f_EMPTY_N &&
	     (xbar_lower_upper_lower_f_D_OUT[578] ?
		xbar_lower_upper_merges_1_fi0_FULL_N :
		xbar_lower_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty =
	     xbar_lower_lower_merges_fi1_EMPTY_N &&
	     xbar_lower_lower_merges_fo_FULL_N &&
	     !xbar_lower_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty =
	     xbar_lower_lower_merges_fo_FULL_N &&
	     xbar_lower_lower_merges_fi0_EMPTY_N &&
	     !xbar_lower_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data =
	     (xbar_lower_lower_merges_routeFrom[1] ?
		xbar_lower_lower_merges_fo_i_notFull__450_AND__ETC___d5466 :
		IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5475) &&
	     xbar_lower_lower_merges_fi0_EMPTY_N &&
	     xbar_lower_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty =
	     xbar_lower_lower_merges_1_fi1_EMPTY_N &&
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     !xbar_lower_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty =
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     xbar_lower_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data =
	     (xbar_lower_lower_merges_1_routeFrom[1] ?
		xbar_lower_lower_merges_1_fo_i_notFull__525_AN_ETC___d5541 :
		IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5550) &&
	     xbar_lower_lower_merges_1_fi0_EMPTY_N &&
	     xbar_lower_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_route
  assign WILL_FIRE_RL_xbar_lower_lower_route =
	     xbar_lower_lower_upper_f_EMPTY_N &&
	     (xbar_lower_lower_upper_f_D_OUT[578] ?
		xbar_lower_lower_merges_1_fi1_FULL_N :
		xbar_lower_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_lower_route_1
  assign WILL_FIRE_RL_xbar_lower_lower_route_1 =
	     xbar_lower_lower_lower_f_EMPTY_N &&
	     (xbar_lower_lower_lower_f_D_OUT[578] ?
		xbar_lower_lower_merges_1_fi0_FULL_N :
		xbar_lower_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty =
	     xbar_lower_merges_fi1_EMPTY_N && xbar_lower_merges_fo_FULL_N &&
	     !xbar_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty =
	     xbar_lower_merges_fo_FULL_N && xbar_lower_merges_fi0_EMPTY_N &&
	     !xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_both_have_data =
	     (xbar_lower_merges_routeFrom[1] ?
		xbar_lower_merges_fo_i_notFull__622_AND_IF_xba_ETC___d5638 :
		IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5647) &&
	     xbar_lower_merges_fi0_EMPTY_N &&
	     xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty =
	     xbar_lower_merges_1_fi1_EMPTY_N &&
	     xbar_lower_merges_1_fo_FULL_N &&
	     !xbar_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty =
	     xbar_lower_merges_1_fo_FULL_N &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_1_both_have_data =
	     (xbar_lower_merges_1_routeFrom[1] ?
		xbar_lower_merges_1_fo_i_notFull__697_AND_IF_x_ETC___d5713 :
		IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5722) &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty =
	     xbar_lower_merges_2_fi1_EMPTY_N &&
	     xbar_lower_merges_2_fo_FULL_N &&
	     !xbar_lower_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty =
	     xbar_lower_merges_2_fo_FULL_N &&
	     xbar_lower_merges_2_fi0_EMPTY_N &&
	     !xbar_lower_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_2_both_have_data =
	     (xbar_lower_merges_2_routeFrom[1] ?
		xbar_lower_merges_2_fo_i_notFull__772_AND_IF_x_ETC___d5788 :
		IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5797) &&
	     xbar_lower_merges_2_fi0_EMPTY_N &&
	     xbar_lower_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_lower_route
  assign WILL_FIRE_RL_xbar_lower_route =
	     xbar_lower_upper_merges_fo_EMPTY_N &&
	     (xbar_lower_upper_merges_fo_D_OUT[579] ?
		xbar_lower_merges_2_fi1_FULL_N :
		xbar_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_route_2
  assign WILL_FIRE_RL_xbar_lower_route_2 =
	     xbar_lower_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_lower_merges_fo_D_OUT[579] ?
		xbar_lower_merges_2_fi0_FULL_N :
		xbar_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty =
	     xbar_lower_merges_3_fi1_EMPTY_N &&
	     xbar_lower_merges_3_fo_FULL_N &&
	     !xbar_lower_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty =
	     xbar_lower_merges_3_fo_FULL_N &&
	     xbar_lower_merges_3_fi0_EMPTY_N &&
	     !xbar_lower_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_3_both_have_data =
	     (xbar_lower_merges_3_routeFrom[1] ?
		xbar_lower_merges_3_fo_i_notFull__847_AND_IF_x_ETC___d5863 :
		IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5872) &&
	     xbar_lower_merges_3_fi0_EMPTY_N &&
	     xbar_lower_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_lower_route_1
  assign WILL_FIRE_RL_xbar_lower_route_1 =
	     xbar_lower_upper_merges_1_fo_EMPTY_N &&
	     (xbar_lower_upper_merges_1_fo_D_OUT[579] ?
		xbar_lower_merges_3_fi1_FULL_N :
		xbar_lower_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_lower_route_3
  assign WILL_FIRE_RL_xbar_lower_route_3 =
	     xbar_lower_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_lower_merges_1_fo_D_OUT[579] ?
		xbar_lower_merges_3_fi0_FULL_N :
		xbar_lower_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi0_is_empty =
	     xbar_merges_fi1_EMPTY_N && xbar_merges_fo_FULL_N &&
	     !xbar_merges_fi0_EMPTY_N ;

  // rule RL_xbar_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi1_is_empty =
	     xbar_merges_fo_FULL_N && xbar_merges_fi0_EMPTY_N &&
	     !xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_both_have_data
  assign WILL_FIRE_RL_xbar_merges_both_have_data =
	     (xbar_merges_routeFrom[1] ?
		xbar_merges_fo_i_notFull__966_AND_IF_xbar_merg_ETC___d5982 :
		IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d5991) &&
	     xbar_merges_fi0_EMPTY_N &&
	     xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi0_is_empty =
	     xbar_merges_1_fi1_EMPTY_N && xbar_merges_1_fo_FULL_N &&
	     !xbar_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi1_is_empty =
	     xbar_merges_1_fo_FULL_N && xbar_merges_1_fi0_EMPTY_N &&
	     !xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_merges_1_both_have_data =
	     (xbar_merges_1_routeFrom[1] ?
		xbar_merges_1_fo_i_notFull__041_AND_IF_xbar_me_ETC___d6057 :
		IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6066) &&
	     xbar_merges_1_fi0_EMPTY_N &&
	     xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi0_is_empty =
	     xbar_merges_2_fi1_EMPTY_N && xbar_merges_2_fo_FULL_N &&
	     !xbar_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi1_is_empty =
	     xbar_merges_2_fo_FULL_N && xbar_merges_2_fi0_EMPTY_N &&
	     !xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_merges_2_both_have_data =
	     (xbar_merges_2_routeFrom[1] ?
		xbar_merges_2_fo_i_notFull__116_AND_IF_xbar_me_ETC___d6132 :
		IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6141) &&
	     xbar_merges_2_fi0_EMPTY_N &&
	     xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi0_is_empty =
	     xbar_merges_3_fi1_EMPTY_N && xbar_merges_3_fo_FULL_N &&
	     !xbar_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi1_is_empty =
	     xbar_merges_3_fo_FULL_N && xbar_merges_3_fi0_EMPTY_N &&
	     !xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_merges_3_both_have_data =
	     (xbar_merges_3_routeFrom[1] ?
		xbar_merges_3_fo_i_notFull__191_AND_IF_xbar_me_ETC___d6207 :
		IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6216) &&
	     xbar_merges_3_fi0_EMPTY_N &&
	     xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_merges_4_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_4_fi0_is_empty =
	     xbar_merges_4_fi1_EMPTY_N && xbar_merges_4_fo_FULL_N &&
	     !xbar_merges_4_fi0_EMPTY_N ;

  // rule RL_xbar_merges_4_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_4_fi1_is_empty =
	     xbar_merges_4_fo_FULL_N && xbar_merges_4_fi0_EMPTY_N &&
	     !xbar_merges_4_fi1_EMPTY_N ;

  // rule RL_xbar_merges_4_both_have_data
  assign WILL_FIRE_RL_xbar_merges_4_both_have_data =
	     (xbar_merges_4_routeFrom[1] ?
		xbar_merges_4_fo_i_notFull__266_AND_IF_xbar_me_ETC___d6282 :
		IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6291) &&
	     xbar_merges_4_fi0_EMPTY_N &&
	     xbar_merges_4_fi1_EMPTY_N ;

  // rule RL_xbar_route
  assign WILL_FIRE_RL_xbar_route =
	     xbar_upper_merges_fo_EMPTY_N &&
	     (xbar_upper_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi1_FULL_N :
		xbar_merges_fi0_FULL_N) ;

  // rule RL_xbar_route_4
  assign WILL_FIRE_RL_xbar_route_4 =
	     xbar_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi0_FULL_N :
		xbar_merges_fi1_FULL_N) ;

  // rule RL_xbar_merges_5_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_5_fi0_is_empty =
	     xbar_merges_5_fi1_EMPTY_N && xbar_merges_5_fo_FULL_N &&
	     !xbar_merges_5_fi0_EMPTY_N ;

  // rule RL_xbar_merges_5_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_5_fi1_is_empty =
	     xbar_merges_5_fo_FULL_N && xbar_merges_5_fi0_EMPTY_N &&
	     !xbar_merges_5_fi1_EMPTY_N ;

  // rule RL_xbar_merges_5_both_have_data
  assign WILL_FIRE_RL_xbar_merges_5_both_have_data =
	     (xbar_merges_5_routeFrom[1] ?
		xbar_merges_5_fo_i_notFull__341_AND_IF_xbar_me_ETC___d6357 :
		IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6366) &&
	     xbar_merges_5_fi0_EMPTY_N &&
	     xbar_merges_5_fi1_EMPTY_N ;

  // rule RL_xbar_route_1
  assign WILL_FIRE_RL_xbar_route_1 =
	     xbar_upper_merges_1_fo_EMPTY_N &&
	     (xbar_upper_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi1_FULL_N :
		xbar_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_route_5
  assign WILL_FIRE_RL_xbar_route_5 =
	     xbar_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi0_FULL_N :
		xbar_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_merges_6_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_6_fi0_is_empty =
	     xbar_merges_6_fi1_EMPTY_N && xbar_merges_6_fo_FULL_N &&
	     !xbar_merges_6_fi0_EMPTY_N ;

  // rule RL_xbar_merges_6_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_6_fi1_is_empty =
	     xbar_merges_6_fo_FULL_N && xbar_merges_6_fi0_EMPTY_N &&
	     !xbar_merges_6_fi1_EMPTY_N ;

  // rule RL_xbar_merges_6_both_have_data
  assign WILL_FIRE_RL_xbar_merges_6_both_have_data =
	     (xbar_merges_6_routeFrom[1] ?
		xbar_merges_6_fo_i_notFull__416_AND_IF_xbar_me_ETC___d6432 :
		IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6441) &&
	     xbar_merges_6_fi0_EMPTY_N &&
	     xbar_merges_6_fi1_EMPTY_N ;

  // rule RL_xbar_route_2
  assign WILL_FIRE_RL_xbar_route_2 =
	     xbar_upper_merges_2_fo_EMPTY_N &&
	     (xbar_upper_merges_2_fo_D_OUT[580] ?
		xbar_merges_6_fi1_FULL_N :
		xbar_merges_2_fi0_FULL_N) ;

  // rule RL_xbar_route_6
  assign WILL_FIRE_RL_xbar_route_6 =
	     xbar_lower_merges_2_fo_EMPTY_N &&
	     (xbar_lower_merges_2_fo_D_OUT[580] ?
		xbar_merges_6_fi0_FULL_N :
		xbar_merges_2_fi1_FULL_N) ;

  // rule RL_xbar_merges_7_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_7_fi0_is_empty =
	     xbar_merges_7_fi1_EMPTY_N && xbar_merges_7_fo_FULL_N &&
	     !xbar_merges_7_fi0_EMPTY_N ;

  // rule RL_xbar_merges_7_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_7_fi1_is_empty =
	     xbar_merges_7_fo_FULL_N && xbar_merges_7_fi0_EMPTY_N &&
	     !xbar_merges_7_fi1_EMPTY_N ;

  // rule RL_xbar_merges_7_both_have_data
  assign WILL_FIRE_RL_xbar_merges_7_both_have_data =
	     (xbar_merges_7_routeFrom[1] ?
		xbar_merges_7_fo_i_notFull__491_AND_IF_xbar_me_ETC___d6507 :
		IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6516) &&
	     xbar_merges_7_fi0_EMPTY_N &&
	     xbar_merges_7_fi1_EMPTY_N ;

  // rule RL_xbar_route_3
  assign WILL_FIRE_RL_xbar_route_3 =
	     xbar_upper_merges_3_fo_EMPTY_N &&
	     (xbar_upper_merges_3_fo_D_OUT[580] ?
		xbar_merges_7_fi1_FULL_N :
		xbar_merges_3_fi0_FULL_N) ;

  // rule RL_xbar_route_7
  assign WILL_FIRE_RL_xbar_route_7 =
	     xbar_lower_merges_3_fo_EMPTY_N &&
	     (xbar_lower_merges_3_fo_D_OUT[580] ?
		xbar_merges_7_fi0_FULL_N :
		xbar_merges_3_fi1_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_hostchan_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_0_readStarted_write_1__SEL_2 =
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_2 =
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;
  assign MUX_hostchan_2_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress &&
	     hostchan_2_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_2_readStarted_write_1__SEL_2 =
	     hostchan_2_readLenFifo_EMPTY_N && hostchan_2_pktLenFifo_FULL_N &&
	     hostchan_2_readReqFifo_FULL_N &&
	     !hostchan_2_readStarted ;
  assign MUX_hostchan_3_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress &&
	     hostchan_3_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_3_readStarted_write_1__SEL_2 =
	     hostchan_3_readLenFifo_EMPTY_N && hostchan_3_pktLenFifo_FULL_N &&
	     hostchan_3_readReqFifo_FULL_N &&
	     !hostchan_3_readStarted ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;
  assign MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     !macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;
  assign MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     !macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_69 &&
	     !EN_txchan_0_writeServer_enq ;
  assign MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_2 =
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;
  assign MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_70 &&
	     !EN_txchan_1_writeServer_enq ;
  assign MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_2 =
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;
  assign MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_71 &&
	     !EN_txchan_2_writeServer_enq ;
  assign MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_2_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_2 =
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;
  assign MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_72 &&
	     !EN_txchan_3_writeServer_enq ;
  assign MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_3_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_3_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress &&
	     pktBuff_3_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_3_readStarted_write_1__SEL_2 =
	     pktBuff_3_meta_ff_EMPTY_N && pktBuff_3_readLenFifo_EMPTY_N &&
	     pktBuff_3_readReqFifo_FULL_N &&
	     !pktBuff_3_readStarted ;
  assign MUX_pktBuff_4_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress &&
	     pktBuff_4_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_4_readStarted_write_1__SEL_2 =
	     pktBuff_4_meta_ff_EMPTY_N && pktBuff_4_readLenFifo_EMPTY_N &&
	     pktBuff_4_readReqFifo_FULL_N &&
	     !pktBuff_4_readStarted ;
  assign MUX_readStarted_0_write_1__SEL_1 =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ;
  assign MUX_readStarted_0_write_1__SEL_2 =
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 ==
	     8'd0 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 ==
	     8'd0 ;
  assign MUX_ringToMac_2_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 ==
	     8'd0 ;
  assign MUX_ringToMac_3_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 ==
	     8'd0 ;
  assign MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     xbar_lower_lower_merges_1_routeFrom_537_BIT_1__ETC___d5583 ;
  assign MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563) ;
  assign MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     xbar_lower_lower_merges_routeFrom_462_BIT_1_46_ETC___d5508 ;
  assign MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488) ;
  assign MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_709_BIT_1_710_AN_ETC___d5755 ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735) ;
  assign MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     xbar_lower_merges_2_routeFrom_784_BIT_1_785_AN_ETC___d5830 ;
  assign MUX_xbar_lower_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] ||
	      IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810) ;
  assign MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     xbar_lower_merges_3_routeFrom_859_BIT_1_860_AN_ETC___d5905 ;
  assign MUX_xbar_lower_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] ||
	      IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885) ;
  assign MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_634_BIT_1_635_AND__ETC___d5680 ;
  assign MUX_xbar_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660) ;
  assign MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     xbar_lower_upper_merges_1_routeFrom_365_BIT_1__ETC___d5411 ;
  assign MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391) ;
  assign MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     xbar_lower_upper_merges_routeFrom_290_BIT_1_29_ETC___d5336 ;
  assign MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316) ;
  assign MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_053_BIT_1_054_AND_IF_x_ETC___d6099 ;
  assign MUX_xbar_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079) ;
  assign MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_128_BIT_1_129_AND_IF_x_ETC___d6174 ;
  assign MUX_xbar_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154) ;
  assign MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_203_BIT_1_204_AND_IF_x_ETC___d6249 ;
  assign MUX_xbar_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229) ;
  assign MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     xbar_merges_4_routeFrom_278_BIT_1_279_AND_IF_x_ETC___d6324 ;
  assign MUX_xbar_merges_4_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] ||
	      IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304) ;
  assign MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     xbar_merges_5_routeFrom_353_BIT_1_354_AND_IF_x_ETC___d6399 ;
  assign MUX_xbar_merges_5_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] ||
	      IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379) ;
  assign MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     xbar_merges_6_routeFrom_428_BIT_1_429_AND_IF_x_ETC___d6474 ;
  assign MUX_xbar_merges_6_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] ||
	      IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454) ;
  assign MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     xbar_merges_7_routeFrom_503_BIT_1_504_AND_IF_x_ETC___d6549 ;
  assign MUX_xbar_merges_7_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] ||
	      IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529) ;
  assign MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_978_BIT_1_979_AND_IF_xba_ETC___d6024 ;
  assign MUX_xbar_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004) ;
  assign MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     xbar_upper_lower_merges_1_routeFrom_847_BIT_1__ETC___d4893 ;
  assign MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873) ;
  assign MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     xbar_upper_lower_merges_routeFrom_772_BIT_1_77_ETC___d4818 ;
  assign MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798) ;
  assign MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_019_BIT_1_020_AN_ETC___d5065 ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045) ;
  assign MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     xbar_upper_merges_2_routeFrom_094_BIT_1_095_AN_ETC___d5140 ;
  assign MUX_xbar_upper_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] ||
	      IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120) ;
  assign MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     xbar_upper_merges_3_routeFrom_169_BIT_1_170_AN_ETC___d5215 ;
  assign MUX_xbar_upper_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] ||
	      IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195) ;
  assign MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_944_BIT_1_945_AND__ETC___d4990 ;
  assign MUX_xbar_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970) ;
  assign MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     xbar_upper_upper_merges_1_routeFrom_673_BIT_1__ETC___d4719 ;
  assign MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699) ;
  assign MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     xbar_upper_upper_merges_routeFrom_598_BIT_1_59_ETC___d4644 ;
  assign MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624) ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_0_gearbox_in_ff_D_OUT[105:74],
	       x_data__h12861,
	       8'd0,
	       macToRing_0_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_0_gearbox_v_prev[105:74],
	       x_data__h13819,
	       x_mask__h13820,
	       macToRing_0_gearbox_v_prev[1],
	       macToRing_0_gearbox_v_prev[0] ||
	       macToRing_0_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_1_gearbox_in_ff_D_OUT[105:74],
	       x_data__h21492,
	       8'd0,
	       macToRing_1_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_1_gearbox_v_prev[105:74],
	       x_data__h22450,
	       x_mask__h22451,
	       macToRing_1_gearbox_v_prev[1],
	       macToRing_1_gearbox_v_prev[0] ||
	       macToRing_1_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_2_gearbox_in_ff_D_OUT[105:74],
	       x_data__h30123,
	       8'd0,
	       macToRing_2_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_2_gearbox_v_prev[105:74],
	       x_data__h31081,
	       x_mask__h31082,
	       macToRing_2_gearbox_v_prev[1],
	       macToRing_2_gearbox_v_prev[0] ||
	       macToRing_2_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_3_gearbox_in_ff_D_OUT[105:74],
	       x_data__h38754,
	       8'd0,
	       macToRing_3_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_3_gearbox_v_prev[105:74],
	       x_data__h39712,
	       x_mask__h39713,
	       macToRing_3_gearbox_v_prev[1],
	       macToRing_3_gearbox_v_prev[0] ||
	       macToRing_3_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 = pktBuff_0_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 = pktBuff_1_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 = pktBuff_2_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 = pktBuff_3_rdCurrPtr + 8'd1 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__VAL_1 =
	     ringToMac_0_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__VAL_1 =
	     ringToMac_1_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_2_idle_cycles_write_1__VAL_1 =
	     ringToMac_2_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_3_idle_cycles_write_1__VAL_1 =
	     ringToMac_3_idle_cycles + 64'd1 ;
  assign MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_lower_merges_1_routeFrom[1] ?
	       (xbar_lower_lower_merges_1_routeFrom[0] ?
		  xbar_lower_lower_merges_1_fi1_D_OUT :
		  xbar_lower_lower_merges_1_fi0_D_OUT) :
	       (xbar_lower_lower_merges_1_fi0HasPrio ?
		  xbar_lower_lower_merges_1_fi0_D_OUT :
		  xbar_lower_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1 =
	     xbar_lower_lower_merges_routeFrom[1] ?
	       (xbar_lower_lower_merges_routeFrom[0] ?
		  xbar_lower_lower_merges_fi1_D_OUT :
		  xbar_lower_lower_merges_fi0_D_OUT) :
	       (xbar_lower_lower_merges_fi0HasPrio ?
		  xbar_lower_lower_merges_fi0_D_OUT :
		  xbar_lower_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_merges_1_routeFrom[1] ?
	       (xbar_lower_merges_1_routeFrom[0] ?
		  xbar_lower_merges_1_fi1_D_OUT :
		  xbar_lower_merges_1_fi0_D_OUT) :
	       (xbar_lower_merges_1_fi0HasPrio ?
		  xbar_lower_merges_1_fi0_D_OUT :
		  xbar_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_2_fo_enq_1__VAL_1 =
	     xbar_lower_merges_2_routeFrom[1] ?
	       (xbar_lower_merges_2_routeFrom[0] ?
		  xbar_lower_merges_2_fi1_D_OUT :
		  xbar_lower_merges_2_fi0_D_OUT) :
	       (xbar_lower_merges_2_fi0HasPrio ?
		  xbar_lower_merges_2_fi0_D_OUT :
		  xbar_lower_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_3_fo_enq_1__VAL_1 =
	     xbar_lower_merges_3_routeFrom[1] ?
	       (xbar_lower_merges_3_routeFrom[0] ?
		  xbar_lower_merges_3_fi1_D_OUT :
		  xbar_lower_merges_3_fi0_D_OUT) :
	       (xbar_lower_merges_3_fi0HasPrio ?
		  xbar_lower_merges_3_fi0_D_OUT :
		  xbar_lower_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_fo_enq_1__VAL_1 =
	     xbar_lower_merges_routeFrom[1] ?
	       (xbar_lower_merges_routeFrom[0] ?
		  xbar_lower_merges_fi1_D_OUT :
		  xbar_lower_merges_fi0_D_OUT) :
	       (xbar_lower_merges_fi0HasPrio ?
		  xbar_lower_merges_fi0_D_OUT :
		  xbar_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_upper_merges_1_routeFrom[1] ?
	       (xbar_lower_upper_merges_1_routeFrom[0] ?
		  xbar_lower_upper_merges_1_fi1_D_OUT :
		  xbar_lower_upper_merges_1_fi0_D_OUT) :
	       (xbar_lower_upper_merges_1_fi0HasPrio ?
		  xbar_lower_upper_merges_1_fi0_D_OUT :
		  xbar_lower_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1 =
	     xbar_lower_upper_merges_routeFrom[1] ?
	       (xbar_lower_upper_merges_routeFrom[0] ?
		  xbar_lower_upper_merges_fi1_D_OUT :
		  xbar_lower_upper_merges_fi0_D_OUT) :
	       (xbar_lower_upper_merges_fi0HasPrio ?
		  xbar_lower_upper_merges_fi0_D_OUT :
		  xbar_lower_upper_merges_fi1_D_OUT) ;
  assign MUX_xbar_merges_1_fo_enq_1__VAL_1 =
	     xbar_merges_1_routeFrom[1] ?
	       (xbar_merges_1_routeFrom[0] ?
		  xbar_merges_1_fi1_D_OUT :
		  xbar_merges_1_fi0_D_OUT) :
	       (xbar_merges_1_fi0HasPrio ?
		  xbar_merges_1_fi0_D_OUT :
		  xbar_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_merges_2_fo_enq_1__VAL_1 =
	     xbar_merges_2_routeFrom[1] ?
	       (xbar_merges_2_routeFrom[0] ?
		  xbar_merges_2_fi1_D_OUT :
		  xbar_merges_2_fi0_D_OUT) :
	       (xbar_merges_2_fi0HasPrio ?
		  xbar_merges_2_fi0_D_OUT :
		  xbar_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_merges_3_fo_enq_1__VAL_1 =
	     xbar_merges_3_routeFrom[1] ?
	       (xbar_merges_3_routeFrom[0] ?
		  xbar_merges_3_fi1_D_OUT :
		  xbar_merges_3_fi0_D_OUT) :
	       (xbar_merges_3_fi0HasPrio ?
		  xbar_merges_3_fi0_D_OUT :
		  xbar_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_merges_4_fo_enq_1__VAL_1 =
	     xbar_merges_4_routeFrom[1] ?
	       (xbar_merges_4_routeFrom[0] ?
		  xbar_merges_4_fi1_D_OUT :
		  xbar_merges_4_fi0_D_OUT) :
	       (xbar_merges_4_fi0HasPrio ?
		  xbar_merges_4_fi0_D_OUT :
		  xbar_merges_4_fi1_D_OUT) ;
  assign MUX_xbar_merges_5_fo_enq_1__VAL_1 =
	     xbar_merges_5_routeFrom[1] ?
	       (xbar_merges_5_routeFrom[0] ?
		  xbar_merges_5_fi1_D_OUT :
		  xbar_merges_5_fi0_D_OUT) :
	       (xbar_merges_5_fi0HasPrio ?
		  xbar_merges_5_fi0_D_OUT :
		  xbar_merges_5_fi1_D_OUT) ;
  assign MUX_xbar_merges_6_fo_enq_1__VAL_1 =
	     xbar_merges_6_routeFrom[1] ?
	       (xbar_merges_6_routeFrom[0] ?
		  xbar_merges_6_fi1_D_OUT :
		  xbar_merges_6_fi0_D_OUT) :
	       (xbar_merges_6_fi0HasPrio ?
		  xbar_merges_6_fi0_D_OUT :
		  xbar_merges_6_fi1_D_OUT) ;
  assign MUX_xbar_merges_7_fo_enq_1__VAL_1 =
	     xbar_merges_7_routeFrom[1] ?
	       (xbar_merges_7_routeFrom[0] ?
		  xbar_merges_7_fi1_D_OUT :
		  xbar_merges_7_fi0_D_OUT) :
	       (xbar_merges_7_fi0HasPrio ?
		  xbar_merges_7_fi0_D_OUT :
		  xbar_merges_7_fi1_D_OUT) ;
  assign MUX_xbar_merges_fo_enq_1__VAL_1 =
	     xbar_merges_routeFrom[1] ?
	       (xbar_merges_routeFrom[0] ?
		  xbar_merges_fi1_D_OUT :
		  xbar_merges_fi0_D_OUT) :
	       (xbar_merges_fi0HasPrio ?
		  xbar_merges_fi0_D_OUT :
		  xbar_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_lower_merges_1_routeFrom[1] ?
	       (xbar_upper_lower_merges_1_routeFrom[0] ?
		  xbar_upper_lower_merges_1_fi1_D_OUT :
		  xbar_upper_lower_merges_1_fi0_D_OUT) :
	       (xbar_upper_lower_merges_1_fi0HasPrio ?
		  xbar_upper_lower_merges_1_fi0_D_OUT :
		  xbar_upper_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1 =
	     xbar_upper_lower_merges_routeFrom[1] ?
	       (xbar_upper_lower_merges_routeFrom[0] ?
		  xbar_upper_lower_merges_fi1_D_OUT :
		  xbar_upper_lower_merges_fi0_D_OUT) :
	       (xbar_upper_lower_merges_fi0HasPrio ?
		  xbar_upper_lower_merges_fi0_D_OUT :
		  xbar_upper_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_merges_1_routeFrom[1] ?
	       (xbar_upper_merges_1_routeFrom[0] ?
		  xbar_upper_merges_1_fi1_D_OUT :
		  xbar_upper_merges_1_fi0_D_OUT) :
	       (xbar_upper_merges_1_fi0HasPrio ?
		  xbar_upper_merges_1_fi0_D_OUT :
		  xbar_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_2_fo_enq_1__VAL_1 =
	     xbar_upper_merges_2_routeFrom[1] ?
	       (xbar_upper_merges_2_routeFrom[0] ?
		  xbar_upper_merges_2_fi1_D_OUT :
		  xbar_upper_merges_2_fi0_D_OUT) :
	       (xbar_upper_merges_2_fi0HasPrio ?
		  xbar_upper_merges_2_fi0_D_OUT :
		  xbar_upper_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_3_fo_enq_1__VAL_1 =
	     xbar_upper_merges_3_routeFrom[1] ?
	       (xbar_upper_merges_3_routeFrom[0] ?
		  xbar_upper_merges_3_fi1_D_OUT :
		  xbar_upper_merges_3_fi0_D_OUT) :
	       (xbar_upper_merges_3_fi0HasPrio ?
		  xbar_upper_merges_3_fi0_D_OUT :
		  xbar_upper_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_fo_enq_1__VAL_1 =
	     xbar_upper_merges_routeFrom[1] ?
	       (xbar_upper_merges_routeFrom[0] ?
		  xbar_upper_merges_fi1_D_OUT :
		  xbar_upper_merges_fi0_D_OUT) :
	       (xbar_upper_merges_fi0HasPrio ?
		  xbar_upper_merges_fi0_D_OUT :
		  xbar_upper_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_upper_merges_1_routeFrom[1] ?
	       (xbar_upper_upper_merges_1_routeFrom[0] ?
		  xbar_upper_upper_merges_1_fi1_D_OUT :
		  xbar_upper_upper_merges_1_fi0_D_OUT) :
	       (xbar_upper_upper_merges_1_fi0HasPrio ?
		  xbar_upper_upper_merges_1_fi0_D_OUT :
		  xbar_upper_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1 =
	     xbar_upper_upper_merges_routeFrom[1] ?
	       (xbar_upper_upper_merges_routeFrom[0] ?
		  xbar_upper_upper_merges_fi1_D_OUT :
		  xbar_upper_upper_merges_fi0_D_OUT) :
	       (xbar_upper_upper_merges_fi0HasPrio ?
		  xbar_upper_upper_merges_fi0_D_OUT :
		  xbar_upper_upper_merges_fi1_D_OUT) ;

  // inlined wires
  assign pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_054_SLT_3___d2223 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ||
	     WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_0_memBuffer_memory_DOB :
	       pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_0_dequeue_first_beat) &&
	     (!ab__h83389[1] || ab__h83389[0]) ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h83389[1] || ab__h83389[0] } ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_1_whas =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_498_SLT_3___d2667 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ||
	     WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_1_memBuffer_memory_DOB :
	       pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_1_dequeue_first_beat) &&
	     (!ab__h102026[1] || ab__h102026[0]) ;
  assign pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h102026[1] || ab__h102026[0] } ;
  assign pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_2_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_2_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_2_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_2_commit_packet ||
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_942_SLT_3___d3111 &&
	     !pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_inPacket ||
	     WILL_FIRE_RL_pktBuff_2_enqueue_first_beat ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_2_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_2_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_2_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_2_memBuffer_memory_DOB :
	       pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_2_dequeue_first_beat) &&
	     (!ab__h120660[1] || ab__h120660[0]) ;
  assign pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;
  assign pktBuff_2_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h120660[1] || ab__h120660[0] } ;
  assign pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_3_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_3_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_3_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_3_commit_packet ||
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_386_SLT_3___d3555 &&
	     !pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_inPacket ||
	     WILL_FIRE_RL_pktBuff_3_enqueue_first_beat ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_3_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_3_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_3_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_3_memBuffer_memory_DOB :
	       pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_3_dequeue_first_beat) &&
	     (!ab__h139294[1] || ab__h139294[0]) ;
  assign pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;
  assign pktBuff_3_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h139294[1] || ab__h139294[0] } ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register cf_verbosity_0
  assign cf_verbosity_0_D_IN = 32'h0 ;
  assign cf_verbosity_0_EN = 1'b0 ;

  // register cf_verbosity_0_1
  assign cf_verbosity_0_1_D_IN = verbose_ff_0_1_D_OUT ;
  assign cf_verbosity_0_1_EN = verbose_ff_0_1_EMPTY_N ;

  // register cf_verbosity_0_2
  assign cf_verbosity_0_2_D_IN = 32'h0 ;
  assign cf_verbosity_0_2_EN = 1'b0 ;

  // register cf_verbosity_0_3
  assign cf_verbosity_0_3_D_IN = 32'h0 ;
  assign cf_verbosity_0_3_EN = 1'b0 ;

  // register cf_verbosity_1
  assign cf_verbosity_1_D_IN = verbose_ff_1_D_OUT ;
  assign cf_verbosity_1_EN = verbose_ff_1_EMPTY_N ;

  // register cf_verbosity_1_1
  assign cf_verbosity_1_1_D_IN = 32'h0 ;
  assign cf_verbosity_1_1_EN = 1'b0 ;

  // register cf_verbosity_1_2
  assign cf_verbosity_1_2_D_IN = 32'h0 ;
  assign cf_verbosity_1_2_EN = 1'b0 ;

  // register cf_verbosity_2
  assign cf_verbosity_2_D_IN = verbose_ff_2_D_OUT ;
  assign cf_verbosity_2_EN = verbose_ff_2_EMPTY_N ;

  // register cf_verbosity_2_1
  assign cf_verbosity_2_1_D_IN = 32'h0 ;
  assign cf_verbosity_2_1_EN = 1'b0 ;

  // register cf_verbosity_2_2
  assign cf_verbosity_2_2_D_IN = 32'h0 ;
  assign cf_verbosity_2_2_EN = 1'b0 ;

  // register cf_verbosity_3
  assign cf_verbosity_3_D_IN = verbose_ff_3_D_OUT ;
  assign cf_verbosity_3_EN = verbose_ff_3_EMPTY_N ;

  // register cf_verbosity_3_1
  assign cf_verbosity_3_1_D_IN = 32'h0 ;
  assign cf_verbosity_3_1_EN = 1'b0 ;

  // register cf_verbosity_3_2
  assign cf_verbosity_3_2_D_IN = 32'h0 ;
  assign cf_verbosity_3_2_EN = 1'b0 ;

  // register cf_verbosity_4
  assign cf_verbosity_4_D_IN = 32'h0 ;
  assign cf_verbosity_4_EN = 1'b0 ;

  // register hostchan_0_cf_verbosity
  assign hostchan_0_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_0_cf_verbosity_EN = 1'b0 ;

  // register hostchan_0_readStarted
  assign hostchan_0_readStarted_D_IN =
	     !MUX_hostchan_0_readStarted_write_1__SEL_1 ;
  assign hostchan_0_readStarted_EN =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ||
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;

  // register hostchan_1_cf_verbosity
  assign hostchan_1_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_1_cf_verbosity_EN = 1'b0 ;

  // register hostchan_1_readStarted
  assign hostchan_1_readStarted_D_IN =
	     !MUX_hostchan_1_readStarted_write_1__SEL_1 ;
  assign hostchan_1_readStarted_EN =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ||
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;

  // register hostchan_2_cf_verbosity
  assign hostchan_2_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_2_cf_verbosity_EN = 1'b0 ;

  // register hostchan_2_readStarted
  assign hostchan_2_readStarted_D_IN =
	     !MUX_hostchan_2_readStarted_write_1__SEL_1 ;
  assign hostchan_2_readStarted_EN =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress &&
	     hostchan_2_readDataFifo_D_OUT[0] ||
	     hostchan_2_readLenFifo_EMPTY_N && hostchan_2_pktLenFifo_FULL_N &&
	     hostchan_2_readReqFifo_FULL_N &&
	     !hostchan_2_readStarted ;

  // register hostchan_3_cf_verbosity
  assign hostchan_3_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_3_cf_verbosity_EN = 1'b0 ;

  // register hostchan_3_readStarted
  assign hostchan_3_readStarted_D_IN =
	     !MUX_hostchan_3_readStarted_write_1__SEL_1 ;
  assign hostchan_3_readStarted_EN =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress &&
	     hostchan_3_readDataFifo_D_OUT[0] ||
	     hostchan_3_readLenFifo_EMPTY_N && hostchan_3_pktLenFifo_FULL_N &&
	     hostchan_3_readReqFifo_FULL_N &&
	     !hostchan_3_readStarted ;

  // register macToRing_0_data_bytes
  assign macToRing_0_data_bytes_D_IN = 64'h0 ;
  assign macToRing_0_data_bytes_EN = 1'b0 ;

  // register macToRing_0_gearbox_data_bytes
  assign macToRing_0_gearbox_data_bytes_D_IN =
	     macToRing_0_gearbox_data_bytes + y__h12437 ;
  assign macToRing_0_gearbox_data_bytes_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_0_gearbox_eopCount
  assign macToRing_0_gearbox_eopCount_D_IN =
	     macToRing_0_gearbox_eopCount + 64'd1 ;
  assign macToRing_0_gearbox_eopCount_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_0_gearbox_idle_cycles
  assign macToRing_0_gearbox_idle_cycles_D_IN =
	     macToRing_0_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_0_gearbox_idle_cycles_EN =
	     !macToRing_0_gearbox_inProgress ;

  // register macToRing_0_gearbox_inProgress
  assign macToRing_0_gearbox_inProgress_D_IN =
	     !MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_0_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd) &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket ;

  // register macToRing_0_gearbox_oddBeat
  assign macToRing_0_gearbox_oddBeat_D_IN =
	     MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_0_gearbox_oddBeat :
	       !macToRing_0_gearbox_oddBeat ;
  assign macToRing_0_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;

  // register macToRing_0_gearbox_sopCount
  assign macToRing_0_gearbox_sopCount_D_IN =
	     macToRing_0_gearbox_sopCount + 64'd1 ;
  assign macToRing_0_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_0_gearbox_v_prev
  assign macToRing_0_gearbox_v_prev_D_IN = macToRing_0_gearbox_in_ff_D_OUT ;
  assign macToRing_0_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;

  // register macToRing_0_total_cycles
  assign macToRing_0_total_cycles_D_IN = macToRing_0_total_cycles + 64'd1 ;
  assign macToRing_0_total_cycles_EN = 1'd1 ;

  // register macToRing_1_data_bytes
  assign macToRing_1_data_bytes_D_IN = 64'h0 ;
  assign macToRing_1_data_bytes_EN = 1'b0 ;

  // register macToRing_1_gearbox_data_bytes
  assign macToRing_1_gearbox_data_bytes_D_IN =
	     macToRing_1_gearbox_data_bytes + y__h21068 ;
  assign macToRing_1_gearbox_data_bytes_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_1_gearbox_eopCount
  assign macToRing_1_gearbox_eopCount_D_IN =
	     macToRing_1_gearbox_eopCount + 64'd1 ;
  assign macToRing_1_gearbox_eopCount_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_1_gearbox_idle_cycles
  assign macToRing_1_gearbox_idle_cycles_D_IN =
	     macToRing_1_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_1_gearbox_idle_cycles_EN =
	     !macToRing_1_gearbox_inProgress ;

  // register macToRing_1_gearbox_inProgress
  assign macToRing_1_gearbox_inProgress_D_IN =
	     !MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_1_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd) &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket ;

  // register macToRing_1_gearbox_oddBeat
  assign macToRing_1_gearbox_oddBeat_D_IN =
	     MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_1_gearbox_oddBeat :
	       !macToRing_1_gearbox_oddBeat ;
  assign macToRing_1_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;

  // register macToRing_1_gearbox_sopCount
  assign macToRing_1_gearbox_sopCount_D_IN =
	     macToRing_1_gearbox_sopCount + 64'd1 ;
  assign macToRing_1_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_1_gearbox_v_prev
  assign macToRing_1_gearbox_v_prev_D_IN = macToRing_1_gearbox_in_ff_D_OUT ;
  assign macToRing_1_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;

  // register macToRing_1_total_cycles
  assign macToRing_1_total_cycles_D_IN = macToRing_1_total_cycles + 64'd1 ;
  assign macToRing_1_total_cycles_EN = 1'd1 ;

  // register macToRing_2_data_bytes
  assign macToRing_2_data_bytes_D_IN = 64'h0 ;
  assign macToRing_2_data_bytes_EN = 1'b0 ;

  // register macToRing_2_gearbox_data_bytes
  assign macToRing_2_gearbox_data_bytes_D_IN =
	     macToRing_2_gearbox_data_bytes + y__h29699 ;
  assign macToRing_2_gearbox_data_bytes_EN =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_2_gearbox_eopCount
  assign macToRing_2_gearbox_eopCount_D_IN =
	     macToRing_2_gearbox_eopCount + 64'd1 ;
  assign macToRing_2_gearbox_eopCount_EN =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_2_gearbox_idle_cycles
  assign macToRing_2_gearbox_idle_cycles_D_IN =
	     macToRing_2_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_2_gearbox_idle_cycles_EN =
	     !macToRing_2_gearbox_inProgress ;

  // register macToRing_2_gearbox_inProgress
  assign macToRing_2_gearbox_inProgress_D_IN =
	     !MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_2_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd) &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket ;

  // register macToRing_2_gearbox_oddBeat
  assign macToRing_2_gearbox_oddBeat_D_IN =
	     MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_2_gearbox_oddBeat :
	       !macToRing_2_gearbox_oddBeat ;
  assign macToRing_2_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     !macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ;

  // register macToRing_2_gearbox_sopCount
  assign macToRing_2_gearbox_sopCount_D_IN =
	     macToRing_2_gearbox_sopCount + 64'd1 ;
  assign macToRing_2_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket &&
	     macToRing_2_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_2_gearbox_v_prev
  assign macToRing_2_gearbox_v_prev_D_IN = macToRing_2_gearbox_in_ff_D_OUT ;
  assign macToRing_2_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;

  // register macToRing_2_total_cycles
  assign macToRing_2_total_cycles_D_IN = macToRing_2_total_cycles + 64'd1 ;
  assign macToRing_2_total_cycles_EN = 1'd1 ;

  // register macToRing_3_data_bytes
  assign macToRing_3_data_bytes_D_IN = 64'h0 ;
  assign macToRing_3_data_bytes_EN = 1'b0 ;

  // register macToRing_3_gearbox_data_bytes
  assign macToRing_3_gearbox_data_bytes_D_IN =
	     macToRing_3_gearbox_data_bytes + y__h38330 ;
  assign macToRing_3_gearbox_data_bytes_EN =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_3_gearbox_eopCount
  assign macToRing_3_gearbox_eopCount_D_IN =
	     macToRing_3_gearbox_eopCount + 64'd1 ;
  assign macToRing_3_gearbox_eopCount_EN =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_3_gearbox_idle_cycles
  assign macToRing_3_gearbox_idle_cycles_D_IN =
	     macToRing_3_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_3_gearbox_idle_cycles_EN =
	     !macToRing_3_gearbox_inProgress ;

  // register macToRing_3_gearbox_inProgress
  assign macToRing_3_gearbox_inProgress_D_IN =
	     !MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_3_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd) &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket ;

  // register macToRing_3_gearbox_oddBeat
  assign macToRing_3_gearbox_oddBeat_D_IN =
	     MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_3_gearbox_oddBeat :
	       !macToRing_3_gearbox_oddBeat ;
  assign macToRing_3_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     !macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ;

  // register macToRing_3_gearbox_sopCount
  assign macToRing_3_gearbox_sopCount_D_IN =
	     macToRing_3_gearbox_sopCount + 64'd1 ;
  assign macToRing_3_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket &&
	     macToRing_3_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_3_gearbox_v_prev
  assign macToRing_3_gearbox_v_prev_D_IN = macToRing_3_gearbox_in_ff_D_OUT ;
  assign macToRing_3_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;

  // register macToRing_3_total_cycles
  assign macToRing_3_total_cycles_D_IN = macToRing_3_total_cycles + 64'd1 ;
  assign macToRing_3_total_cycles_EN = 1'd1 ;

  // register pktBuff_0_cf_verbosity
  assign pktBuff_0_cf_verbosity_D_IN = verbose_ff_0_2_D_OUT ;
  assign pktBuff_0_cf_verbosity_EN = verbose_ff_0_2_EMPTY_N ;

  // register pktBuff_0_cf_verbosity_1
  assign pktBuff_0_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_0_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_0_eopDeq
  assign pktBuff_0_eopDeq_D_IN = pktBuff_0_eopDeq + 64'd1 ;
  assign pktBuff_0_eopDeq_EN = MUX_pktBuff_0_outPacket_write_1__SEL_1 ;

  // register pktBuff_0_eopEnq
  assign pktBuff_0_eopEnq_D_IN = pktBuff_0_eopEnq + 64'd1 ;
  assign pktBuff_0_eopEnq_EN = WILL_FIRE_RL_pktBuff_0_commit_packet ;

  // register pktBuff_0_inPacket
  assign pktBuff_0_inPacket_D_IN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  assign pktBuff_0_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  assign pktBuff_0_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_119_PLU_ETC___d2125 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  assign pktBuff_0_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterB_s1_1_whas &&
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  assign pktBuff_0_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_0_outPacket
  assign pktBuff_0_outPacket_D_IN = !MUX_pktBuff_0_outPacket_write_1__SEL_1 ;
  assign pktBuff_0_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_packetLen
  assign pktBuff_0_packetLen_D_IN =
	     pktBuff_0_fifoWriteData_D_OUT[0] ? 16'd0 : newPacketLen__h84359 ;
  assign pktBuff_0_packetLen_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_rdCurrPtr
  assign pktBuff_0_rdCurrPtr_D_IN =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_0_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_readStarted
  assign pktBuff_0_readStarted_D_IN =
	     !MUX_pktBuff_0_readStarted_write_1__SEL_1 ;
  assign pktBuff_0_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ||
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;

  // register pktBuff_0_sopDeq
  assign pktBuff_0_sopDeq_D_IN = pktBuff_0_sopDeq + 64'd1 ;
  assign pktBuff_0_sopDeq_EN = WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_sopEnq
  assign pktBuff_0_sopEnq_D_IN = pktBuff_0_sopEnq + 64'd1 ;
  assign pktBuff_0_sopEnq_EN = WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;

  // register pktBuff_0_wrCurrPtr
  assign pktBuff_0_wrCurrPtr_D_IN = pktBuff_0_wrCurrPtr + 8'd1 ;
  assign pktBuff_0_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_1_cf_verbosity
  assign pktBuff_1_cf_verbosity_D_IN = verbose_ff_1_1_D_OUT ;
  assign pktBuff_1_cf_verbosity_EN = verbose_ff_1_1_EMPTY_N ;

  // register pktBuff_1_cf_verbosity_1
  assign pktBuff_1_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_1_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_1_eopDeq
  assign pktBuff_1_eopDeq_D_IN = pktBuff_1_eopDeq + 64'd1 ;
  assign pktBuff_1_eopDeq_EN = MUX_pktBuff_1_outPacket_write_1__SEL_1 ;

  // register pktBuff_1_eopEnq
  assign pktBuff_1_eopEnq_D_IN = pktBuff_1_eopEnq + 64'd1 ;
  assign pktBuff_1_eopEnq_EN = WILL_FIRE_RL_pktBuff_1_commit_packet ;

  // register pktBuff_1_inPacket
  assign pktBuff_1_inPacket_D_IN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  assign pktBuff_1_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_1_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  assign pktBuff_1_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_563_PLU_ETC___d2569 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  assign pktBuff_1_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  assign pktBuff_1_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_1_outPacket
  assign pktBuff_1_outPacket_D_IN = !MUX_pktBuff_1_outPacket_write_1__SEL_1 ;
  assign pktBuff_1_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_packetLen
  assign pktBuff_1_packetLen_D_IN =
	     pktBuff_1_fifoWriteData_D_OUT[0] ?
	       16'd0 :
	       newPacketLen__h102996 ;
  assign pktBuff_1_packetLen_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_rdCurrPtr
  assign pktBuff_1_rdCurrPtr_D_IN =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_1_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_readStarted
  assign pktBuff_1_readStarted_D_IN =
	     !MUX_pktBuff_1_readStarted_write_1__SEL_1 ;
  assign pktBuff_1_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ||
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;

  // register pktBuff_1_sopDeq
  assign pktBuff_1_sopDeq_D_IN = pktBuff_1_sopDeq + 64'd1 ;
  assign pktBuff_1_sopDeq_EN = WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_sopEnq
  assign pktBuff_1_sopEnq_D_IN = pktBuff_1_sopEnq + 64'd1 ;
  assign pktBuff_1_sopEnq_EN = WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;

  // register pktBuff_1_wrCurrPtr
  assign pktBuff_1_wrCurrPtr_D_IN = pktBuff_1_wrCurrPtr + 8'd1 ;
  assign pktBuff_1_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_2_cf_verbosity
  assign pktBuff_2_cf_verbosity_D_IN = verbose_ff_2_1_D_OUT ;
  assign pktBuff_2_cf_verbosity_EN = verbose_ff_2_1_EMPTY_N ;

  // register pktBuff_2_cf_verbosity_1
  assign pktBuff_2_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_2_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_2_eopDeq
  assign pktBuff_2_eopDeq_D_IN = pktBuff_2_eopDeq + 64'd1 ;
  assign pktBuff_2_eopDeq_EN = MUX_pktBuff_2_outPacket_write_1__SEL_1 ;

  // register pktBuff_2_eopEnq
  assign pktBuff_2_eopEnq_D_IN = pktBuff_2_eopEnq + 64'd1 ;
  assign pktBuff_2_eopEnq_EN = WILL_FIRE_RL_pktBuff_2_commit_packet ;

  // register pktBuff_2_inPacket
  assign pktBuff_2_inPacket_D_IN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_2_commit_packet ||
	     WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_2_memBuffer_serverAdapterA_cnt
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_2_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_2_memBuffer_serverAdapterA_s1
  assign pktBuff_2_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_2_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_2_memBuffer_serverAdapterA_s2
  assign pktBuff_2_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_2_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_2_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_2_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_2_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_2_memBuffer_serverAdapterB_cnt
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_cnt_007_PLU_ETC___d3013 ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ;

  // register pktBuff_2_memBuffer_serverAdapterB_s1
  assign pktBuff_2_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_2_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_2_memBuffer_serverAdapterB_s2
  assign pktBuff_2_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_2_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_2_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_2_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_2_outPacket
  assign pktBuff_2_outPacket_D_IN = !MUX_pktBuff_2_outPacket_write_1__SEL_1 ;
  assign pktBuff_2_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_packetLen
  assign pktBuff_2_packetLen_D_IN =
	     pktBuff_2_fifoWriteData_D_OUT[0] ?
	       16'd0 :
	       newPacketLen__h121630 ;
  assign pktBuff_2_packetLen_EN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_2_rdCurrPtr
  assign pktBuff_2_rdCurrPtr_D_IN =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_2_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_readStarted
  assign pktBuff_2_readStarted_D_IN =
	     !MUX_pktBuff_2_readStarted_write_1__SEL_1 ;
  assign pktBuff_2_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ||
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;

  // register pktBuff_2_sopDeq
  assign pktBuff_2_sopDeq_D_IN = pktBuff_2_sopDeq + 64'd1 ;
  assign pktBuff_2_sopDeq_EN = WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_sopEnq
  assign pktBuff_2_sopEnq_D_IN = pktBuff_2_sopEnq + 64'd1 ;
  assign pktBuff_2_sopEnq_EN = WILL_FIRE_RL_pktBuff_2_enqueue_first_beat ;

  // register pktBuff_2_wrCurrPtr
  assign pktBuff_2_wrCurrPtr_D_IN = pktBuff_2_wrCurrPtr + 8'd1 ;
  assign pktBuff_2_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_3_cf_verbosity
  assign pktBuff_3_cf_verbosity_D_IN = verbose_ff_3_1_D_OUT ;
  assign pktBuff_3_cf_verbosity_EN = verbose_ff_3_1_EMPTY_N ;

  // register pktBuff_3_cf_verbosity_1
  assign pktBuff_3_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_3_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_3_eopDeq
  assign pktBuff_3_eopDeq_D_IN = pktBuff_3_eopDeq + 64'd1 ;
  assign pktBuff_3_eopDeq_EN = MUX_pktBuff_3_outPacket_write_1__SEL_1 ;

  // register pktBuff_3_eopEnq
  assign pktBuff_3_eopEnq_D_IN = pktBuff_3_eopEnq + 64'd1 ;
  assign pktBuff_3_eopEnq_EN = WILL_FIRE_RL_pktBuff_3_commit_packet ;

  // register pktBuff_3_inPacket
  assign pktBuff_3_inPacket_D_IN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_3_commit_packet ||
	     WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_3_memBuffer_serverAdapterA_cnt
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_3_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_3_memBuffer_serverAdapterA_s1
  assign pktBuff_3_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_3_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_3_memBuffer_serverAdapterA_s2
  assign pktBuff_3_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_3_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_3_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_3_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_3_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_3_memBuffer_serverAdapterB_cnt
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_cnt_451_PLU_ETC___d3457 ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ;

  // register pktBuff_3_memBuffer_serverAdapterB_s1
  assign pktBuff_3_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_3_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_3_memBuffer_serverAdapterB_s2
  assign pktBuff_3_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_3_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_3_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_3_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_3_outPacket
  assign pktBuff_3_outPacket_D_IN = !MUX_pktBuff_3_outPacket_write_1__SEL_1 ;
  assign pktBuff_3_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_packetLen
  assign pktBuff_3_packetLen_D_IN =
	     pktBuff_3_fifoWriteData_D_OUT[0] ?
	       16'd0 :
	       newPacketLen__h140264 ;
  assign pktBuff_3_packetLen_EN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_3_rdCurrPtr
  assign pktBuff_3_rdCurrPtr_D_IN =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_3_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_readStarted
  assign pktBuff_3_readStarted_D_IN =
	     !MUX_pktBuff_3_readStarted_write_1__SEL_1 ;
  assign pktBuff_3_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress &&
	     pktBuff_3_readDataFifo_D_OUT[0] ||
	     pktBuff_3_meta_ff_EMPTY_N && pktBuff_3_readLenFifo_EMPTY_N &&
	     pktBuff_3_readReqFifo_FULL_N &&
	     !pktBuff_3_readStarted ;

  // register pktBuff_3_sopDeq
  assign pktBuff_3_sopDeq_D_IN = pktBuff_3_sopDeq + 64'd1 ;
  assign pktBuff_3_sopDeq_EN = WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_sopEnq
  assign pktBuff_3_sopEnq_D_IN = pktBuff_3_sopEnq + 64'd1 ;
  assign pktBuff_3_sopEnq_EN = WILL_FIRE_RL_pktBuff_3_enqueue_first_beat ;

  // register pktBuff_3_wrCurrPtr
  assign pktBuff_3_wrCurrPtr_D_IN = pktBuff_3_wrCurrPtr + 8'd1 ;
  assign pktBuff_3_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_4_cf_verbosity
  assign pktBuff_4_cf_verbosity_D_IN = verbose_ff_4_D_OUT ;
  assign pktBuff_4_cf_verbosity_EN = verbose_ff_4_EMPTY_N ;

  // register pktBuff_4_readStarted
  assign pktBuff_4_readStarted_D_IN =
	     !MUX_pktBuff_4_readStarted_write_1__SEL_1 ;
  assign pktBuff_4_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress &&
	     pktBuff_4_readDataFifo_D_OUT[0] ||
	     pktBuff_4_meta_ff_EMPTY_N && pktBuff_4_readLenFifo_EMPTY_N &&
	     pktBuff_4_readReqFifo_FULL_N &&
	     !pktBuff_4_readStarted ;

  // register readStarted_0
  assign readStarted_0_D_IN = !MUX_readStarted_0_write_1__SEL_1 ;
  assign readStarted_0_EN =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ||
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;

  // register ringToMac_0_cycle_cnt
  assign ringToMac_0_cycle_cnt_D_IN = ringToMac_0_cycle_cnt + 64'd1 ;
  assign ringToMac_0_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_0_data_bytes
  assign ringToMac_0_data_bytes_D_IN = ringToMac_0_data_bytes + y__h96849 ;
  assign ringToMac_0_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet ;

  // register ringToMac_0_eopCount
  assign ringToMac_0_eopCount_D_IN = ringToMac_0_eopCount + 64'd1 ;
  assign ringToMac_0_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     NOT_IF_ringToMac_0_fifoTxData_read_block_339_T_ETC___d2434 ;

  // register ringToMac_0_fifoTxData_block0
  assign ringToMac_0_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block0_status
  assign ringToMac_0_fifoTxData_block0_status_D_IN =
	     !ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1
  assign ringToMac_0_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1_status
  assign ringToMac_0_fifoTxData_block1_status_D_IN =
	     !ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_elem0_status_0
  assign ringToMac_0_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem0_status_1
  assign ringToMac_0_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem0_status_0 ;
  assign ringToMac_0_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_0
  assign ringToMac_0_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_1
  assign ringToMac_0_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem1_status_0 ;
  assign ringToMac_0_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_read_block
  assign ringToMac_0_fifoTxData_read_block_D_IN =
	     !ringToMac_0_fifoTxData_read_block ;
  assign ringToMac_0_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354 ||
	      !ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345) ;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_write_block
  assign ringToMac_0_fifoTxData_write_block_D_IN =
	     ~ringToMac_0_fifoTxData_write_block ;
  assign ringToMac_0_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // register ringToMac_0_goodputCount
  assign ringToMac_0_goodputCount_D_IN =
	     (ringToMac_0_last_startofpacket == 64'd0) ?
	       ringToMac_0_last_startofpacket :
	       ringToMac_0_goodputCount + y__h89901 ;
  assign ringToMac_0_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_idleCount
  assign ringToMac_0_idleCount_D_IN =
	     (ringToMac_0_last_endofpacket == 64'd0) ?
	       ringToMac_0_last_endofpacket :
	       ringToMac_0_idleCount + y__h89814 ;
  assign ringToMac_0_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_idle_cycles
  assign ringToMac_0_idle_cycles_D_IN =
	     MUX_ringToMac_0_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_0_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 ==
	     8'd0 ||
	     (ringToMac_0_fifoTxData_read_block || x__h94234 == 2'd3) &&
	     (!ringToMac_0_fifoTxData_read_block || x__h94613 == 2'd3) ;

  // register ringToMac_0_last_endofpacket
  assign ringToMac_0_last_endofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_last_startofpacket
  assign ringToMac_0_last_startofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_sopCount
  assign ringToMac_0_sopCount_D_IN = ringToMac_0_sopCount + 64'd1 ;
  assign ringToMac_0_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354) ?
		   ringToMac_0_fifoTxData_block1[107] :
		   ringToMac_0_fifoTxData_block1[1]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345) ?
		   ringToMac_0_fifoTxData_block0[107] :
		   ringToMac_0_fifoTxData_block0[1])) ;

  // register ringToMac_0_total_cycles
  assign ringToMac_0_total_cycles_D_IN = ringToMac_0_total_cycles + 64'd1 ;
  assign ringToMac_0_total_cycles_EN = 1'd1 ;

  // register ringToMac_1_cycle_cnt
  assign ringToMac_1_cycle_cnt_D_IN = ringToMac_1_cycle_cnt + 64'd1 ;
  assign ringToMac_1_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_1_data_bytes
  assign ringToMac_1_data_bytes_D_IN = ringToMac_1_data_bytes + y__h115483 ;
  assign ringToMac_1_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet ;

  // register ringToMac_1_eopCount
  assign ringToMac_1_eopCount_D_IN = ringToMac_1_eopCount + 64'd1 ;
  assign ringToMac_1_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     NOT_IF_ringToMac_1_fifoTxData_read_block_783_T_ETC___d2878 ;

  // register ringToMac_1_fifoTxData_block0
  assign ringToMac_1_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block0_status
  assign ringToMac_1_fifoTxData_block0_status_D_IN =
	     !ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1
  assign ringToMac_1_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1_status
  assign ringToMac_1_fifoTxData_block1_status_D_IN =
	     !ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_elem0_status_0
  assign ringToMac_1_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem0_status_1
  assign ringToMac_1_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem0_status_0 ;
  assign ringToMac_1_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_0
  assign ringToMac_1_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_1
  assign ringToMac_1_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem1_status_0 ;
  assign ringToMac_1_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_read_block
  assign ringToMac_1_fifoTxData_read_block_D_IN =
	     !ringToMac_1_fifoTxData_read_block ;
  assign ringToMac_1_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798 ||
	      !ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789) ;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_write_block
  assign ringToMac_1_fifoTxData_write_block_D_IN =
	     ~ringToMac_1_fifoTxData_write_block ;
  assign ringToMac_1_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // register ringToMac_1_goodputCount
  assign ringToMac_1_goodputCount_D_IN =
	     (ringToMac_1_last_startofpacket == 64'd0) ?
	       ringToMac_1_last_startofpacket :
	       ringToMac_1_goodputCount + y__h108538 ;
  assign ringToMac_1_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_idleCount
  assign ringToMac_1_idleCount_D_IN =
	     (ringToMac_1_last_endofpacket == 64'd0) ?
	       ringToMac_1_last_endofpacket :
	       ringToMac_1_idleCount + y__h108451 ;
  assign ringToMac_1_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_idle_cycles
  assign ringToMac_1_idle_cycles_D_IN =
	     MUX_ringToMac_1_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_1_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 ==
	     8'd0 ||
	     (ringToMac_1_fifoTxData_read_block || x__h112868 == 2'd3) &&
	     (!ringToMac_1_fifoTxData_read_block || x__h113247 == 2'd3) ;

  // register ringToMac_1_last_endofpacket
  assign ringToMac_1_last_endofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_last_startofpacket
  assign ringToMac_1_last_startofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_sopCount
  assign ringToMac_1_sopCount_D_IN = ringToMac_1_sopCount + 64'd1 ;
  assign ringToMac_1_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798) ?
		   ringToMac_1_fifoTxData_block1[107] :
		   ringToMac_1_fifoTxData_block1[1]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789) ?
		   ringToMac_1_fifoTxData_block0[107] :
		   ringToMac_1_fifoTxData_block0[1])) ;

  // register ringToMac_1_total_cycles
  assign ringToMac_1_total_cycles_D_IN = ringToMac_1_total_cycles + 64'd1 ;
  assign ringToMac_1_total_cycles_EN = 1'd1 ;

  // register ringToMac_2_cycle_cnt
  assign ringToMac_2_cycle_cnt_D_IN = ringToMac_2_cycle_cnt + 64'd1 ;
  assign ringToMac_2_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_2_data_bytes
  assign ringToMac_2_data_bytes_D_IN = ringToMac_2_data_bytes + y__h134117 ;
  assign ringToMac_2_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet ;

  // register ringToMac_2_eopCount
  assign ringToMac_2_eopCount_D_IN = ringToMac_2_eopCount + 64'd1 ;
  assign ringToMac_2_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     NOT_IF_ringToMac_2_fifoTxData_read_block_227_T_ETC___d3322 ;

  // register ringToMac_2_fifoTxData_block0
  assign ringToMac_2_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[145:82],
	       ringToMac_2_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_2_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[81:18],
	       ringToMac_2_tx_fifo_dD_OUT[9:1],
	       ringToMac_2_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_2_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_2_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     !ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block0_status
  assign ringToMac_2_fifoTxData_block0_status_D_IN =
	     !ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     !ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block1
  assign ringToMac_2_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[145:82],
	       ringToMac_2_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_2_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[81:18],
	       ringToMac_2_tx_fifo_dD_OUT[9:1],
	       ringToMac_2_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_2_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_2_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block1_status
  assign ringToMac_2_fifoTxData_block1_status_D_IN =
	     !ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_2_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_2_fifoTxData_elem0_status_0
  assign ringToMac_2_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     !ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem0_status_1
  assign ringToMac_2_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_2_fifoTxData_elem0_status_0 ;
  assign ringToMac_2_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     !ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem1_status_0
  assign ringToMac_2_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem1_status_1
  assign ringToMac_2_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_2_fifoTxData_elem1_status_0 ;
  assign ringToMac_2_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_read_block
  assign ringToMac_2_fifoTxData_read_block_D_IN =
	     !ringToMac_2_fifoTxData_read_block ;
  assign ringToMac_2_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     (ringToMac_2_fifoTxData_read_block &&
	      ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242 ||
	      !ringToMac_2_fifoTxData_read_block &&
	      ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233) ;

  // register ringToMac_2_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_2_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_2_fifoTxData_write_block
  assign ringToMac_2_fifoTxData_write_block_D_IN =
	     ~ringToMac_2_fifoTxData_write_block ;
  assign ringToMac_2_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet ;

  // register ringToMac_2_goodputCount
  assign ringToMac_2_goodputCount_D_IN =
	     (ringToMac_2_last_startofpacket == 64'd0) ?
	       ringToMac_2_last_startofpacket :
	       ringToMac_2_goodputCount + y__h127172 ;
  assign ringToMac_2_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[0] ;

  // register ringToMac_2_idleCount
  assign ringToMac_2_idleCount_D_IN =
	     (ringToMac_2_last_endofpacket == 64'd0) ?
	       ringToMac_2_last_endofpacket :
	       ringToMac_2_idleCount + y__h127085 ;
  assign ringToMac_2_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[1] ;

  // register ringToMac_2_idle_cycles
  assign ringToMac_2_idle_cycles_D_IN =
	     MUX_ringToMac_2_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_2_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_2_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_2_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 ==
	     8'd0 ||
	     (ringToMac_2_fifoTxData_read_block || x__h131502 == 2'd3) &&
	     (!ringToMac_2_fifoTxData_read_block || x__h131881 == 2'd3) ;

  // register ringToMac_2_last_endofpacket
  assign ringToMac_2_last_endofpacket_D_IN = ringToMac_2_cycle_cnt ;
  assign ringToMac_2_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[0] ;

  // register ringToMac_2_last_startofpacket
  assign ringToMac_2_last_startofpacket_D_IN = ringToMac_2_cycle_cnt ;
  assign ringToMac_2_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[1] ;

  // register ringToMac_2_sopCount
  assign ringToMac_2_sopCount_D_IN = ringToMac_2_sopCount + 64'd1 ;
  assign ringToMac_2_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     (ringToMac_2_fifoTxData_read_block ?
		((!ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240 &&
		  ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242) ?
		   ringToMac_2_fifoTxData_block1[107] :
		   ringToMac_2_fifoTxData_block1[1]) :
		((!ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231 &&
		  ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233) ?
		   ringToMac_2_fifoTxData_block0[107] :
		   ringToMac_2_fifoTxData_block0[1])) ;

  // register ringToMac_2_total_cycles
  assign ringToMac_2_total_cycles_D_IN = ringToMac_2_total_cycles + 64'd1 ;
  assign ringToMac_2_total_cycles_EN = 1'd1 ;

  // register ringToMac_3_cycle_cnt
  assign ringToMac_3_cycle_cnt_D_IN = ringToMac_3_cycle_cnt + 64'd1 ;
  assign ringToMac_3_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_3_data_bytes
  assign ringToMac_3_data_bytes_D_IN = ringToMac_3_data_bytes + y__h152751 ;
  assign ringToMac_3_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet ;

  // register ringToMac_3_eopCount
  assign ringToMac_3_eopCount_D_IN = ringToMac_3_eopCount + 64'd1 ;
  assign ringToMac_3_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     NOT_IF_ringToMac_3_fifoTxData_read_block_671_T_ETC___d3766 ;

  // register ringToMac_3_fifoTxData_block0
  assign ringToMac_3_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[145:82],
	       ringToMac_3_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_3_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[81:18],
	       ringToMac_3_tx_fifo_dD_OUT[9:1],
	       ringToMac_3_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_3_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_3_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     !ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block0_status
  assign ringToMac_3_fifoTxData_block0_status_D_IN =
	     !ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     !ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block1
  assign ringToMac_3_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[145:82],
	       ringToMac_3_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_3_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[81:18],
	       ringToMac_3_tx_fifo_dD_OUT[9:1],
	       ringToMac_3_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_3_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_3_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block1_status
  assign ringToMac_3_fifoTxData_block1_status_D_IN =
	     !ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_3_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_3_fifoTxData_elem0_status_0
  assign ringToMac_3_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     !ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem0_status_1
  assign ringToMac_3_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_3_fifoTxData_elem0_status_0 ;
  assign ringToMac_3_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     !ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem1_status_0
  assign ringToMac_3_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem1_status_1
  assign ringToMac_3_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_3_fifoTxData_elem1_status_0 ;
  assign ringToMac_3_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_read_block
  assign ringToMac_3_fifoTxData_read_block_D_IN =
	     !ringToMac_3_fifoTxData_read_block ;
  assign ringToMac_3_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     (ringToMac_3_fifoTxData_read_block &&
	      ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686 ||
	      !ringToMac_3_fifoTxData_read_block &&
	      ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677) ;

  // register ringToMac_3_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_3_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_3_fifoTxData_write_block
  assign ringToMac_3_fifoTxData_write_block_D_IN =
	     ~ringToMac_3_fifoTxData_write_block ;
  assign ringToMac_3_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet ;

  // register ringToMac_3_goodputCount
  assign ringToMac_3_goodputCount_D_IN =
	     (ringToMac_3_last_startofpacket == 64'd0) ?
	       ringToMac_3_last_startofpacket :
	       ringToMac_3_goodputCount + y__h145806 ;
  assign ringToMac_3_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[0] ;

  // register ringToMac_3_idleCount
  assign ringToMac_3_idleCount_D_IN =
	     (ringToMac_3_last_endofpacket == 64'd0) ?
	       ringToMac_3_last_endofpacket :
	       ringToMac_3_idleCount + y__h145719 ;
  assign ringToMac_3_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[1] ;

  // register ringToMac_3_idle_cycles
  assign ringToMac_3_idle_cycles_D_IN =
	     MUX_ringToMac_3_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_3_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_3_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_3_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 ==
	     8'd0 ||
	     (ringToMac_3_fifoTxData_read_block || x__h150136 == 2'd3) &&
	     (!ringToMac_3_fifoTxData_read_block || x__h150515 == 2'd3) ;

  // register ringToMac_3_last_endofpacket
  assign ringToMac_3_last_endofpacket_D_IN = ringToMac_3_cycle_cnt ;
  assign ringToMac_3_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[0] ;

  // register ringToMac_3_last_startofpacket
  assign ringToMac_3_last_startofpacket_D_IN = ringToMac_3_cycle_cnt ;
  assign ringToMac_3_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[1] ;

  // register ringToMac_3_sopCount
  assign ringToMac_3_sopCount_D_IN = ringToMac_3_sopCount + 64'd1 ;
  assign ringToMac_3_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     (ringToMac_3_fifoTxData_read_block ?
		((!ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684 &&
		  ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686) ?
		   ringToMac_3_fifoTxData_block1[107] :
		   ringToMac_3_fifoTxData_block1[1]) :
		((!ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675 &&
		  ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677) ?
		   ringToMac_3_fifoTxData_block0[107] :
		   ringToMac_3_fifoTxData_block0[1])) ;

  // register ringToMac_3_total_cycles
  assign ringToMac_3_total_cycles_D_IN = ringToMac_3_total_cycles + 64'd1 ;
  assign ringToMac_3_total_cycles_EN = 1'd1 ;

  // register xbar_lower_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     xbar_lower_lower_merges_1_routeFrom_537_BIT_1__ETC___d5583 ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;

  // register xbar_lower_lower_merges_1_routeFrom
  assign xbar_lower_lower_merges_1_routeFrom_D_IN =
	     { !xbar_lower_lower_merges_1_routeFrom[1],
	       !xbar_lower_lower_merges_1_fi0HasPrio } ;
  assign xbar_lower_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_1_routeFrom_537_BIT_ETC___d5570 ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5575) ;

  // register xbar_lower_lower_merges_fi0HasPrio
  always@(MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN =
	      !xbar_lower_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     xbar_lower_lower_merges_routeFrom_462_BIT_1_46_ETC___d5508 ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;

  // register xbar_lower_lower_merges_routeFrom
  assign xbar_lower_lower_merges_routeFrom_D_IN =
	     { !xbar_lower_lower_merges_routeFrom[1],
	       !xbar_lower_lower_merges_fi0HasPrio } ;
  assign xbar_lower_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_routeFrom_462_BIT_0_ETC___d5495 ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5500) ;

  // register xbar_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_709_BIT_1_710_AN_ETC___d5755 ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;

  // register xbar_lower_merges_1_routeFrom
  assign xbar_lower_merges_1_routeFrom_D_IN =
	     { !xbar_lower_merges_1_routeFrom[1],
	       !xbar_lower_merges_1_fi0HasPrio } ;
  assign xbar_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_routeFrom_709_BIT_0_711_ETC___d5742 ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5747) ;

  // register xbar_lower_merges_2_fi0HasPrio
  always@(MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_2_fi0HasPrio_D_IN =
	      !xbar_lower_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty:
	  xbar_lower_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty:
	  xbar_lower_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_2_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     xbar_lower_merges_2_routeFrom_784_BIT_1_785_AN_ETC___d5830 ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;

  // register xbar_lower_merges_2_routeFrom
  assign xbar_lower_merges_2_routeFrom_D_IN =
	     { !xbar_lower_merges_2_routeFrom[1],
	       !xbar_lower_merges_2_fi0HasPrio } ;
  assign xbar_lower_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      IF_xbar_lower_merges_2_routeFrom_784_BIT_0_786_ETC___d5817 ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5822) ;

  // register xbar_lower_merges_3_fi0HasPrio
  always@(MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_3_fi0HasPrio_D_IN =
	      !xbar_lower_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty:
	  xbar_lower_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty:
	  xbar_lower_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_3_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     xbar_lower_merges_3_routeFrom_859_BIT_1_860_AN_ETC___d5905 ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;

  // register xbar_lower_merges_3_routeFrom
  assign xbar_lower_merges_3_routeFrom_D_IN =
	     { !xbar_lower_merges_3_routeFrom[1],
	       !xbar_lower_merges_3_fi0HasPrio } ;
  assign xbar_lower_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      IF_xbar_lower_merges_3_routeFrom_859_BIT_0_861_ETC___d5892 ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5897) ;

  // register xbar_lower_merges_fi0HasPrio
  always@(MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_fi0HasPrio_D_IN = !xbar_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_634_BIT_1_635_AND__ETC___d5680 ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;

  // register xbar_lower_merges_routeFrom
  assign xbar_lower_merges_routeFrom_D_IN =
	     { !xbar_lower_merges_routeFrom[1],
	       !xbar_lower_merges_fi0HasPrio } ;
  assign xbar_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_routeFrom_634_BIT_0_636_T_ETC___d5667 ||
	      !xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5672) ;

  // register xbar_lower_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     xbar_lower_upper_merges_1_routeFrom_365_BIT_1__ETC___d5411 ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;

  // register xbar_lower_upper_merges_1_routeFrom
  assign xbar_lower_upper_merges_1_routeFrom_D_IN =
	     { !xbar_lower_upper_merges_1_routeFrom[1],
	       !xbar_lower_upper_merges_1_fi0HasPrio } ;
  assign xbar_lower_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_1_routeFrom_365_BIT_ETC___d5398 ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5403) ;

  // register xbar_lower_upper_merges_fi0HasPrio
  always@(MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN =
	      !xbar_lower_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     xbar_lower_upper_merges_routeFrom_290_BIT_1_29_ETC___d5336 ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;

  // register xbar_lower_upper_merges_routeFrom
  assign xbar_lower_upper_merges_routeFrom_D_IN =
	     { !xbar_lower_upper_merges_routeFrom[1],
	       !xbar_lower_upper_merges_fi0HasPrio } ;
  assign xbar_lower_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_routeFrom_290_BIT_0_ETC___d5323 ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5328) ;

  // register xbar_merges_1_fi0HasPrio
  always@(MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_1_fi0HasPrio_D_IN = !xbar_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_1_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_053_BIT_1_054_AND_IF_x_ETC___d6099 ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;

  // register xbar_merges_1_routeFrom
  assign xbar_merges_1_routeFrom_D_IN =
	     { !xbar_merges_1_routeFrom[1], !xbar_merges_1_fi0HasPrio } ;
  assign xbar_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_routeFrom_053_BIT_0_055_THEN__ETC___d6086 ||
	      !xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6091) ;

  // register xbar_merges_2_fi0HasPrio
  always@(MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_2_fi0HasPrio_D_IN = !xbar_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_2_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_128_BIT_1_129_AND_IF_x_ETC___d6174 ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;

  // register xbar_merges_2_routeFrom
  assign xbar_merges_2_routeFrom_D_IN =
	     { !xbar_merges_2_routeFrom[1], !xbar_merges_2_fi0HasPrio } ;
  assign xbar_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_routeFrom_128_BIT_0_130_THEN__ETC___d6161 ||
	      !xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6166) ;

  // register xbar_merges_3_fi0HasPrio
  always@(MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_3_fi0HasPrio_D_IN = !xbar_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_3_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_203_BIT_1_204_AND_IF_x_ETC___d6249 ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;

  // register xbar_merges_3_routeFrom
  assign xbar_merges_3_routeFrom_D_IN =
	     { !xbar_merges_3_routeFrom[1], !xbar_merges_3_fi0HasPrio } ;
  assign xbar_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_routeFrom_203_BIT_0_205_THEN__ETC___d6236 ||
	      !xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6241) ;

  // register xbar_merges_4_fi0HasPrio
  always@(MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_4_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_4_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_4_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_4_fi0HasPrio_D_IN = !xbar_merges_4_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_4_fi1_is_empty:
	  xbar_merges_4_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_4_fi0_is_empty:
	  xbar_merges_4_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_4_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_4_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     xbar_merges_4_routeFrom_278_BIT_1_279_AND_IF_x_ETC___d6324 ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;

  // register xbar_merges_4_routeFrom
  assign xbar_merges_4_routeFrom_D_IN =
	     { !xbar_merges_4_routeFrom[1], !xbar_merges_4_fi0HasPrio } ;
  assign xbar_merges_4_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] &&
	      IF_xbar_merges_4_routeFrom_278_BIT_0_280_THEN__ETC___d6311 ||
	      !xbar_merges_4_routeFrom[1] &&
	      IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6316) ;

  // register xbar_merges_5_fi0HasPrio
  always@(MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_5_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_5_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_5_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_5_fi0HasPrio_D_IN = !xbar_merges_5_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_5_fi1_is_empty:
	  xbar_merges_5_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_5_fi0_is_empty:
	  xbar_merges_5_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_5_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_5_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     xbar_merges_5_routeFrom_353_BIT_1_354_AND_IF_x_ETC___d6399 ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;

  // register xbar_merges_5_routeFrom
  assign xbar_merges_5_routeFrom_D_IN =
	     { !xbar_merges_5_routeFrom[1], !xbar_merges_5_fi0HasPrio } ;
  assign xbar_merges_5_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] &&
	      IF_xbar_merges_5_routeFrom_353_BIT_0_355_THEN__ETC___d6386 ||
	      !xbar_merges_5_routeFrom[1] &&
	      IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6391) ;

  // register xbar_merges_6_fi0HasPrio
  always@(MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_6_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_6_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_6_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_6_fi0HasPrio_D_IN = !xbar_merges_6_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_6_fi1_is_empty:
	  xbar_merges_6_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_6_fi0_is_empty:
	  xbar_merges_6_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_6_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_6_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     xbar_merges_6_routeFrom_428_BIT_1_429_AND_IF_x_ETC___d6474 ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;

  // register xbar_merges_6_routeFrom
  assign xbar_merges_6_routeFrom_D_IN =
	     { !xbar_merges_6_routeFrom[1], !xbar_merges_6_fi0HasPrio } ;
  assign xbar_merges_6_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] &&
	      IF_xbar_merges_6_routeFrom_428_BIT_0_430_THEN__ETC___d6461 ||
	      !xbar_merges_6_routeFrom[1] &&
	      IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6466) ;

  // register xbar_merges_7_fi0HasPrio
  always@(MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_7_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_7_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_7_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_7_fi0HasPrio_D_IN = !xbar_merges_7_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_7_fi1_is_empty:
	  xbar_merges_7_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_7_fi0_is_empty:
	  xbar_merges_7_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_7_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_7_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     xbar_merges_7_routeFrom_503_BIT_1_504_AND_IF_x_ETC___d6549 ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;

  // register xbar_merges_7_routeFrom
  assign xbar_merges_7_routeFrom_D_IN =
	     { !xbar_merges_7_routeFrom[1], !xbar_merges_7_fi0HasPrio } ;
  assign xbar_merges_7_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] &&
	      IF_xbar_merges_7_routeFrom_503_BIT_0_505_THEN__ETC___d6536 ||
	      !xbar_merges_7_routeFrom[1] &&
	      IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6541) ;

  // register xbar_merges_fi0HasPrio
  always@(MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_fi0HasPrio_D_IN = !xbar_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_978_BIT_1_979_AND_IF_xba_ETC___d6024 ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;

  // register xbar_merges_routeFrom
  assign xbar_merges_routeFrom_D_IN =
	     { !xbar_merges_routeFrom[1], !xbar_merges_fi0HasPrio } ;
  assign xbar_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_routeFrom_978_BIT_0_980_THEN_xb_ETC___d6011 ||
	      !xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6016) ;

  // register xbar_upper_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     xbar_upper_lower_merges_1_routeFrom_847_BIT_1__ETC___d4893 ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;

  // register xbar_upper_lower_merges_1_routeFrom
  assign xbar_upper_lower_merges_1_routeFrom_D_IN =
	     { !xbar_upper_lower_merges_1_routeFrom[1],
	       !xbar_upper_lower_merges_1_fi0HasPrio } ;
  assign xbar_upper_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_1_routeFrom_847_BIT_ETC___d4880 ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4885) ;

  // register xbar_upper_lower_merges_fi0HasPrio
  always@(MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN =
	      !xbar_upper_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     xbar_upper_lower_merges_routeFrom_772_BIT_1_77_ETC___d4818 ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;

  // register xbar_upper_lower_merges_routeFrom
  assign xbar_upper_lower_merges_routeFrom_D_IN =
	     { !xbar_upper_lower_merges_routeFrom[1],
	       !xbar_upper_lower_merges_fi0HasPrio } ;
  assign xbar_upper_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_routeFrom_772_BIT_0_ETC___d4805 ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4810) ;

  // register xbar_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_019_BIT_1_020_AN_ETC___d5065 ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;

  // register xbar_upper_merges_1_routeFrom
  assign xbar_upper_merges_1_routeFrom_D_IN =
	     { !xbar_upper_merges_1_routeFrom[1],
	       !xbar_upper_merges_1_fi0HasPrio } ;
  assign xbar_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_routeFrom_019_BIT_0_021_ETC___d5052 ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5057) ;

  // register xbar_upper_merges_2_fi0HasPrio
  always@(MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_2_fi0HasPrio_D_IN =
	      !xbar_upper_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty:
	  xbar_upper_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty:
	  xbar_upper_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_2_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     xbar_upper_merges_2_routeFrom_094_BIT_1_095_AN_ETC___d5140 ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;

  // register xbar_upper_merges_2_routeFrom
  assign xbar_upper_merges_2_routeFrom_D_IN =
	     { !xbar_upper_merges_2_routeFrom[1],
	       !xbar_upper_merges_2_fi0HasPrio } ;
  assign xbar_upper_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      IF_xbar_upper_merges_2_routeFrom_094_BIT_0_096_ETC___d5127 ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5132) ;

  // register xbar_upper_merges_3_fi0HasPrio
  always@(MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_3_fi0HasPrio_D_IN =
	      !xbar_upper_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty:
	  xbar_upper_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty:
	  xbar_upper_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_3_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     xbar_upper_merges_3_routeFrom_169_BIT_1_170_AN_ETC___d5215 ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;

  // register xbar_upper_merges_3_routeFrom
  assign xbar_upper_merges_3_routeFrom_D_IN =
	     { !xbar_upper_merges_3_routeFrom[1],
	       !xbar_upper_merges_3_fi0HasPrio } ;
  assign xbar_upper_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      IF_xbar_upper_merges_3_routeFrom_169_BIT_0_171_ETC___d5202 ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5207) ;

  // register xbar_upper_merges_fi0HasPrio
  always@(MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_fi0HasPrio_D_IN = !xbar_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_944_BIT_1_945_AND__ETC___d4990 ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;

  // register xbar_upper_merges_routeFrom
  assign xbar_upper_merges_routeFrom_D_IN =
	     { !xbar_upper_merges_routeFrom[1],
	       !xbar_upper_merges_fi0HasPrio } ;
  assign xbar_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_routeFrom_944_BIT_0_946_T_ETC___d4977 ||
	      !xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4982) ;

  // register xbar_upper_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     xbar_upper_upper_merges_1_routeFrom_673_BIT_1__ETC___d4719 ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;

  // register xbar_upper_upper_merges_1_routeFrom
  assign xbar_upper_upper_merges_1_routeFrom_D_IN =
	     { !xbar_upper_upper_merges_1_routeFrom[1],
	       !xbar_upper_upper_merges_1_fi0HasPrio } ;
  assign xbar_upper_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_1_routeFrom_673_BIT_ETC___d4706 ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4711) ;

  // register xbar_upper_upper_merges_fi0HasPrio
  always@(MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN =
	      !xbar_upper_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     xbar_upper_upper_merges_routeFrom_598_BIT_1_59_ETC___d4644 ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;

  // register xbar_upper_upper_merges_routeFrom
  assign xbar_upper_upper_merges_routeFrom_D_IN =
	     { !xbar_upper_upper_merges_routeFrom[1],
	       !xbar_upper_upper_merges_fi0HasPrio } ;
  assign xbar_upper_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_routeFrom_598_BIT_0_ETC___d4631 ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4636) ;

  // submodule gearbox_dn_16_0
  assign gearbox_dn_16_0_datain_put = gearbox_dn_32_0_dataout_get ;
  assign gearbox_dn_16_0_EN_datain_put =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;
  assign gearbox_dn_16_0_EN_dataout_get =
	     MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_1
  assign gearbox_dn_16_1_datain_put = gearbox_dn_32_1_dataout_get ;
  assign gearbox_dn_16_1_EN_datain_put =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;
  assign gearbox_dn_16_1_EN_dataout_get =
	     MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_2
  assign gearbox_dn_16_2_datain_put = gearbox_dn_32_2_dataout_get ;
  assign gearbox_dn_16_2_EN_datain_put =
	     gearbox_dn_16_2_RDY_datain_put &&
	     gearbox_dn_32_2_RDY_dataout_get ;
  assign gearbox_dn_16_2_EN_dataout_get =
	     MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_3
  assign gearbox_dn_16_3_datain_put = gearbox_dn_32_3_dataout_get ;
  assign gearbox_dn_16_3_EN_datain_put =
	     gearbox_dn_16_3_RDY_datain_put &&
	     gearbox_dn_32_3_RDY_dataout_get ;
  assign gearbox_dn_16_3_EN_dataout_get =
	     MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_32_0
  assign gearbox_dn_32_0_datain_put =
	     output_queues_1_readServer_readData_get ;
  assign gearbox_dn_32_0_EN_datain_put =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign gearbox_dn_32_0_EN_dataout_get =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;

  // submodule gearbox_dn_32_1
  assign gearbox_dn_32_1_datain_put =
	     output_queues_2_readServer_readData_get ;
  assign gearbox_dn_32_1_EN_datain_put =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign gearbox_dn_32_1_EN_dataout_get =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;

  // submodule gearbox_dn_32_2
  assign gearbox_dn_32_2_datain_put =
	     output_queues_3_readServer_readData_get ;
  assign gearbox_dn_32_2_EN_datain_put =
	     output_queues_3_RDY_readServer_readData_get &&
	     gearbox_dn_32_2_RDY_datain_put ;
  assign gearbox_dn_32_2_EN_dataout_get =
	     gearbox_dn_16_2_RDY_datain_put &&
	     gearbox_dn_32_2_RDY_dataout_get ;

  // submodule gearbox_dn_32_3
  assign gearbox_dn_32_3_datain_put =
	     output_queues_4_readServer_readData_get ;
  assign gearbox_dn_32_3_EN_datain_put =
	     output_queues_4_RDY_readServer_readData_get &&
	     gearbox_dn_32_3_RDY_datain_put ;
  assign gearbox_dn_32_3_EN_dataout_get =
	     gearbox_dn_16_3_RDY_datain_put &&
	     gearbox_dn_32_3_RDY_dataout_get ;

  // submodule gearbox_up_16_0
  assign gearbox_up_16_0_datain_put = modifier_0_writeClient_first ;
  assign gearbox_up_16_0_EN_datain_put =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign gearbox_up_16_0_EN_dataout_get =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;

  // submodule gearbox_up_16_1
  assign gearbox_up_16_1_datain_put = modifier_1_writeClient_first ;
  assign gearbox_up_16_1_EN_datain_put =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign gearbox_up_16_1_EN_dataout_get =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;

  // submodule gearbox_up_16_2
  assign gearbox_up_16_2_datain_put = modifier_2_writeClient_first ;
  assign gearbox_up_16_2_EN_datain_put =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign gearbox_up_16_2_EN_dataout_get =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;

  // submodule gearbox_up_16_3
  assign gearbox_up_16_3_datain_put = modifier_3_writeClient_first ;
  assign gearbox_up_16_3_EN_datain_put =
	     gearbox_up_16_3_RDY_datain_put &&
	     modifier_3_RDY_writeClient_first &&
	     modifier_3_RDY_writeClient_deq ;
  assign gearbox_up_16_3_EN_dataout_get =
	     gearbox_up_32_3_RDY_datain_put &&
	     gearbox_up_16_3_RDY_dataout_get ;

  // submodule gearbox_up_16_4
  assign gearbox_up_16_4_datain_put = modifier_4_writeClient_first ;
  assign gearbox_up_16_4_EN_datain_put =
	     gearbox_up_16_4_RDY_datain_put &&
	     modifier_4_RDY_writeClient_first &&
	     modifier_4_RDY_writeClient_deq ;
  assign gearbox_up_16_4_EN_dataout_get =
	     gearbox_up_32_4_RDY_datain_put &&
	     gearbox_up_16_4_RDY_dataout_get ;

  // submodule gearbox_up_32_0
  assign gearbox_up_32_0_datain_put = gearbox_up_16_0_dataout_get ;
  assign gearbox_up_32_0_EN_datain_put =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;
  assign gearbox_up_32_0_EN_dataout_get =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;

  // submodule gearbox_up_32_1
  assign gearbox_up_32_1_datain_put = gearbox_up_16_1_dataout_get ;
  assign gearbox_up_32_1_EN_datain_put =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;
  assign gearbox_up_32_1_EN_dataout_get =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;

  // submodule gearbox_up_32_2
  assign gearbox_up_32_2_datain_put = gearbox_up_16_2_dataout_get ;
  assign gearbox_up_32_2_EN_datain_put =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;
  assign gearbox_up_32_2_EN_dataout_get =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;

  // submodule gearbox_up_32_3
  assign gearbox_up_32_3_datain_put = gearbox_up_16_3_dataout_get ;
  assign gearbox_up_32_3_EN_datain_put =
	     gearbox_up_32_3_RDY_datain_put &&
	     gearbox_up_16_3_RDY_dataout_get ;
  assign gearbox_up_32_3_EN_dataout_get =
	     input_queues_3_RDY_writeServer_enq &&
	     gearbox_up_32_3_RDY_dataout_get ;

  // submodule gearbox_up_32_4
  assign gearbox_up_32_4_datain_put = gearbox_up_16_4_dataout_get ;
  assign gearbox_up_32_4_EN_datain_put =
	     gearbox_up_32_4_RDY_datain_put &&
	     gearbox_up_16_4_RDY_dataout_get ;
  assign gearbox_up_32_4_EN_dataout_get =
	     input_queues_4_RDY_writeServer_enq &&
	     gearbox_up_32_4_RDY_dataout_get ;

  // submodule hostchan_0_outReqFifo
  assign hostchan_0_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_0_pktLenFifo_D_OUT,
	       hostchan_0_parser_meta_get[1738:372],
	       10'd513,
	       hostchan_0_parser_meta_get[361:0] } ;
  assign hostchan_0_outReqFifo_ENQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_outReqFifo_DEQ = EN_rxchan_0_next_deq ;
  assign hostchan_0_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_parser
  assign hostchan_0_parser_frameIn_put = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_parser_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_parser_EN_meta_get =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_parser_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktBuff
  assign hostchan_0_pktBuff_readServer_readReq_put =
	     hostchan_0_readReqFifo_D_OUT ;
  assign hostchan_0_pktBuff_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_pktBuff_writeServer_enq_v =
	     macToRing_0_writeDataFifo_dD_OUT ;
  assign hostchan_0_pktBuff_EN_writeServer_enq =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;
  assign hostchan_0_pktBuff_EN_readServer_readData_get =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readLen_get =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readReq_put =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_pktBuff_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktLenFifo
  assign hostchan_0_pktLenFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_pktLenFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_pktLenFifo_DEQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readDataFifo
  assign hostchan_0_readDataFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readData_get ;
  assign hostchan_0_readDataFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readLenFifo
  assign hostchan_0_readLenFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readLen_get ;
  assign hostchan_0_readLenFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_readLenFifo_DEQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readReqFifo
  assign hostchan_0_readReqFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_readReqFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readReqFifo_DEQ =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_verbose_ff
  assign hostchan_0_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_0_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_0_verbose_ff_DEQ = hostchan_0_verbose_ff_EMPTY_N ;
  assign hostchan_0_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_0_writeDataFifo
  assign hostchan_0_writeDataFifo_D_IN = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_16 &&
	     !EN_rxchan_0_writeClient_deq ||
	     EN_rxchan_0_writeClient_deq ;
  assign hostchan_0_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_outReqFifo
  assign hostchan_1_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_1_pktLenFifo_D_OUT,
	       hostchan_1_parser_meta_get[1738:372],
	       10'd514,
	       hostchan_1_parser_meta_get[361:0] } ;
  assign hostchan_1_outReqFifo_ENQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_outReqFifo_DEQ = EN_rxchan_1_next_deq ;
  assign hostchan_1_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_parser
  assign hostchan_1_parser_frameIn_put = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_parser_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_parser_EN_meta_get =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_parser_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktBuff
  assign hostchan_1_pktBuff_readServer_readReq_put =
	     hostchan_1_readReqFifo_D_OUT ;
  assign hostchan_1_pktBuff_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_pktBuff_writeServer_enq_v =
	     macToRing_1_writeDataFifo_dD_OUT ;
  assign hostchan_1_pktBuff_EN_writeServer_enq =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;
  assign hostchan_1_pktBuff_EN_readServer_readData_get =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readLen_get =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readReq_put =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_pktBuff_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktLenFifo
  assign hostchan_1_pktLenFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_pktLenFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_pktLenFifo_DEQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readDataFifo
  assign hostchan_1_readDataFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readData_get ;
  assign hostchan_1_readDataFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readLenFifo
  assign hostchan_1_readLenFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readLen_get ;
  assign hostchan_1_readLenFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_readLenFifo_DEQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readReqFifo
  assign hostchan_1_readReqFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_readReqFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readReqFifo_DEQ =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_verbose_ff
  assign hostchan_1_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_1_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_1_verbose_ff_DEQ = hostchan_1_verbose_ff_EMPTY_N ;
  assign hostchan_1_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_1_writeDataFifo
  assign hostchan_1_writeDataFifo_D_IN = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_17 &&
	     !EN_rxchan_1_writeClient_deq ||
	     EN_rxchan_1_writeClient_deq ;
  assign hostchan_1_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_2_outReqFifo
  assign hostchan_2_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_2_pktLenFifo_D_OUT,
	       hostchan_2_parser_meta_get[1738:372],
	       10'd515,
	       hostchan_2_parser_meta_get[361:0] } ;
  assign hostchan_2_outReqFifo_ENQ =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_outReqFifo_DEQ = EN_rxchan_2_next_deq ;
  assign hostchan_2_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_2_parser
  assign hostchan_2_parser_frameIn_put = hostchan_2_readDataFifo_D_OUT ;
  assign hostchan_2_parser_set_verbosity_verbosity =
	     hostchan_2_verbose_ff_D_OUT ;
  assign hostchan_2_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_parser_EN_meta_get =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_parser_EN_set_verbosity = hostchan_2_verbose_ff_EMPTY_N ;

  // submodule hostchan_2_pktBuff
  assign hostchan_2_pktBuff_readServer_readReq_put =
	     hostchan_2_readReqFifo_D_OUT ;
  assign hostchan_2_pktBuff_set_verbosity_verbosity =
	     hostchan_2_verbose_ff_D_OUT ;
  assign hostchan_2_pktBuff_writeServer_enq_v =
	     macToRing_2_writeDataFifo_dD_OUT ;
  assign hostchan_2_pktBuff_EN_writeServer_enq =
	     macToRing_2_writeDataFifo_dEMPTY_N &&
	     hostchan_2_pktBuff_RDY_writeServer_enq ;
  assign hostchan_2_pktBuff_EN_readServer_readData_get =
	     hostchan_2_pktBuff_RDY_readServer_readData_get &&
	     hostchan_2_readDataFifo_FULL_N ;
  assign hostchan_2_pktBuff_EN_readServer_readLen_get =
	     hostchan_2_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_2_readLenFifo_FULL_N ;
  assign hostchan_2_pktBuff_EN_readServer_readReq_put =
	     hostchan_2_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_2_readReqFifo_EMPTY_N ;
  assign hostchan_2_pktBuff_EN_set_verbosity = hostchan_2_verbose_ff_EMPTY_N ;

  // submodule hostchan_2_pktLenFifo
  assign hostchan_2_pktLenFifo_D_IN = hostchan_2_readLenFifo_D_OUT ;
  assign hostchan_2_pktLenFifo_ENQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_pktLenFifo_DEQ =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readDataFifo
  assign hostchan_2_readDataFifo_D_IN =
	     hostchan_2_pktBuff_readServer_readData_get ;
  assign hostchan_2_readDataFifo_ENQ =
	     hostchan_2_pktBuff_RDY_readServer_readData_get &&
	     hostchan_2_readDataFifo_FULL_N ;
  assign hostchan_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readLenFifo
  assign hostchan_2_readLenFifo_D_IN =
	     hostchan_2_pktBuff_readServer_readLen_get ;
  assign hostchan_2_readLenFifo_ENQ =
	     hostchan_2_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_2_readLenFifo_FULL_N ;
  assign hostchan_2_readLenFifo_DEQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readReqFifo
  assign hostchan_2_readReqFifo_D_IN = hostchan_2_readLenFifo_D_OUT ;
  assign hostchan_2_readReqFifo_ENQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_readReqFifo_DEQ =
	     hostchan_2_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_2_readReqFifo_EMPTY_N ;
  assign hostchan_2_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_2_verbose_ff
  assign hostchan_2_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_2_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_2_verbose_ff_DEQ = hostchan_2_verbose_ff_EMPTY_N ;
  assign hostchan_2_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_2_writeDataFifo
  assign hostchan_2_writeDataFifo_D_IN = hostchan_2_readDataFifo_D_OUT ;
  assign hostchan_2_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_18 &&
	     !EN_rxchan_2_writeClient_deq ||
	     EN_rxchan_2_writeClient_deq ;
  assign hostchan_2_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_3_outReqFifo
  assign hostchan_3_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_3_pktLenFifo_D_OUT,
	       hostchan_3_parser_meta_get[1738:372],
	       10'd516,
	       hostchan_3_parser_meta_get[361:0] } ;
  assign hostchan_3_outReqFifo_ENQ =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_outReqFifo_DEQ = EN_rxchan_3_next_deq ;
  assign hostchan_3_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_3_parser
  assign hostchan_3_parser_frameIn_put = hostchan_3_readDataFifo_D_OUT ;
  assign hostchan_3_parser_set_verbosity_verbosity =
	     hostchan_3_verbose_ff_D_OUT ;
  assign hostchan_3_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_parser_EN_meta_get =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_parser_EN_set_verbosity = hostchan_3_verbose_ff_EMPTY_N ;

  // submodule hostchan_3_pktBuff
  assign hostchan_3_pktBuff_readServer_readReq_put =
	     hostchan_3_readReqFifo_D_OUT ;
  assign hostchan_3_pktBuff_set_verbosity_verbosity =
	     hostchan_3_verbose_ff_D_OUT ;
  assign hostchan_3_pktBuff_writeServer_enq_v =
	     macToRing_3_writeDataFifo_dD_OUT ;
  assign hostchan_3_pktBuff_EN_writeServer_enq =
	     macToRing_3_writeDataFifo_dEMPTY_N &&
	     hostchan_3_pktBuff_RDY_writeServer_enq ;
  assign hostchan_3_pktBuff_EN_readServer_readData_get =
	     hostchan_3_pktBuff_RDY_readServer_readData_get &&
	     hostchan_3_readDataFifo_FULL_N ;
  assign hostchan_3_pktBuff_EN_readServer_readLen_get =
	     hostchan_3_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_3_readLenFifo_FULL_N ;
  assign hostchan_3_pktBuff_EN_readServer_readReq_put =
	     hostchan_3_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_3_readReqFifo_EMPTY_N ;
  assign hostchan_3_pktBuff_EN_set_verbosity = hostchan_3_verbose_ff_EMPTY_N ;

  // submodule hostchan_3_pktLenFifo
  assign hostchan_3_pktLenFifo_D_IN = hostchan_3_readLenFifo_D_OUT ;
  assign hostchan_3_pktLenFifo_ENQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_pktLenFifo_DEQ =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readDataFifo
  assign hostchan_3_readDataFifo_D_IN =
	     hostchan_3_pktBuff_readServer_readData_get ;
  assign hostchan_3_readDataFifo_ENQ =
	     hostchan_3_pktBuff_RDY_readServer_readData_get &&
	     hostchan_3_readDataFifo_FULL_N ;
  assign hostchan_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readLenFifo
  assign hostchan_3_readLenFifo_D_IN =
	     hostchan_3_pktBuff_readServer_readLen_get ;
  assign hostchan_3_readLenFifo_ENQ =
	     hostchan_3_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_3_readLenFifo_FULL_N ;
  assign hostchan_3_readLenFifo_DEQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readReqFifo
  assign hostchan_3_readReqFifo_D_IN = hostchan_3_readLenFifo_D_OUT ;
  assign hostchan_3_readReqFifo_ENQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_readReqFifo_DEQ =
	     hostchan_3_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_3_readReqFifo_EMPTY_N ;
  assign hostchan_3_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_3_verbose_ff
  assign hostchan_3_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_3_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_3_verbose_ff_DEQ = hostchan_3_verbose_ff_EMPTY_N ;
  assign hostchan_3_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_3_writeDataFifo
  assign hostchan_3_writeDataFifo_D_IN = hostchan_3_readDataFifo_D_OUT ;
  assign hostchan_3_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_19 &&
	     !EN_rxchan_3_writeClient_deq ||
	     EN_rxchan_3_writeClient_deq ;
  assign hostchan_3_writeDataFifo_CLR = 1'b0 ;

  // submodule input_queues_0
  assign input_queues_0_readServer_readReq_put =
	     input_queues_0_readServer_readLen_get ;
  assign input_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_0_writeServer_enq_v = gearbox_up_32_0_dataout_get ;
  assign input_queues_0_EN_writeServer_enq =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;
  assign input_queues_0_EN_readServer_readData_get =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_upper_f_FULL_N ;
  assign input_queues_0_EN_readServer_readLen_get =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_readServer_readReq_put =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_1
  assign input_queues_1_readServer_readReq_put =
	     input_queues_1_readServer_readLen_get ;
  assign input_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_1_writeServer_enq_v = gearbox_up_32_1_dataout_get ;
  assign input_queues_1_EN_writeServer_enq =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;
  assign input_queues_1_EN_readServer_readData_get =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_upper_lower_f_FULL_N ;
  assign input_queues_1_EN_readServer_readLen_get =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_readServer_readReq_put =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_2
  assign input_queues_2_readServer_readReq_put =
	     input_queues_2_readServer_readLen_get ;
  assign input_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_2_writeServer_enq_v = gearbox_up_32_2_dataout_get ;
  assign input_queues_2_EN_writeServer_enq =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;
  assign input_queues_2_EN_readServer_readData_get =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_upper_lower_upper_f_FULL_N ;
  assign input_queues_2_EN_readServer_readLen_get =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_readServer_readReq_put =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_3
  assign input_queues_3_readServer_readReq_put =
	     input_queues_3_readServer_readLen_get ;
  assign input_queues_3_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_3_writeServer_enq_v = gearbox_up_32_3_dataout_get ;
  assign input_queues_3_EN_writeServer_enq =
	     input_queues_3_RDY_writeServer_enq &&
	     gearbox_up_32_3_RDY_dataout_get ;
  assign input_queues_3_EN_readServer_readData_get =
	     input_queues_3_RDY_readServer_readData_get &&
	     xbar_upper_lower_lower_f_FULL_N ;
  assign input_queues_3_EN_readServer_readLen_get =
	     input_queues_3_RDY_readServer_readLen_get &&
	     input_queues_3_RDY_readServer_readReq_put ;
  assign input_queues_3_EN_readServer_readReq_put =
	     input_queues_3_RDY_readServer_readLen_get &&
	     input_queues_3_RDY_readServer_readReq_put ;
  assign input_queues_3_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_4
  assign input_queues_4_readServer_readReq_put =
	     input_queues_4_readServer_readLen_get ;
  assign input_queues_4_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_4_writeServer_enq_v = gearbox_up_32_4_dataout_get ;
  assign input_queues_4_EN_writeServer_enq =
	     input_queues_4_RDY_writeServer_enq &&
	     gearbox_up_32_4_RDY_dataout_get ;
  assign input_queues_4_EN_readServer_readData_get =
	     input_queues_4_RDY_readServer_readData_get &&
	     xbar_lower_upper_upper_f_FULL_N ;
  assign input_queues_4_EN_readServer_readLen_get =
	     input_queues_4_RDY_readServer_readLen_get &&
	     input_queues_4_RDY_readServer_readReq_put ;
  assign input_queues_4_EN_readServer_readReq_put =
	     input_queues_4_RDY_readServer_readLen_get &&
	     input_queues_4_RDY_readServer_readReq_put ;
  assign input_queues_4_EN_set_verbosity = EN_set_verbosity ;

  // submodule macToRing_0_gearbox_in_ff
  assign macToRing_0_gearbox_in_ff_D_IN = rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_ENQ = EN_rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     !macToRing_0_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign macToRing_0_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_0_gearbox_out_ff
  assign macToRing_0_gearbox_out_ff_D_IN =
	     MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_0_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;
  assign macToRing_0_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_0_writeDataFifo
  assign macToRing_0_writeDataFifo_sD_IN = macToRing_0_gearbox_out_ff_D_OUT ;
  assign macToRing_0_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_writeDataFifo_dDEQ =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_1_gearbox_in_ff
  assign macToRing_1_gearbox_in_ff_D_IN = rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_ENQ = EN_rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     !macToRing_1_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign macToRing_1_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_1_gearbox_out_ff
  assign macToRing_1_gearbox_out_ff_D_IN =
	     MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_1_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;
  assign macToRing_1_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_1_writeDataFifo
  assign macToRing_1_writeDataFifo_sD_IN = macToRing_1_gearbox_out_ff_D_OUT ;
  assign macToRing_1_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_writeDataFifo_dDEQ =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_2_gearbox_in_ff
  assign macToRing_2_gearbox_in_ff_D_IN = rxchan_2_macRx_put ;
  assign macToRing_2_gearbox_in_ff_ENQ = EN_rxchan_2_macRx_put ;
  assign macToRing_2_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket &&
	     !macToRing_2_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;
  assign macToRing_2_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_2_gearbox_out_ff
  assign macToRing_2_gearbox_out_ff_D_IN =
	     MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_2_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ;
  assign macToRing_2_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_2_writeData ;
  assign macToRing_2_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_2_writeDataFifo
  assign macToRing_2_writeDataFifo_sD_IN = macToRing_2_gearbox_out_ff_D_OUT ;
  assign macToRing_2_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_2_writeData ;
  assign macToRing_2_writeDataFifo_dDEQ =
	     macToRing_2_writeDataFifo_dEMPTY_N &&
	     hostchan_2_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_3_gearbox_in_ff
  assign macToRing_3_gearbox_in_ff_D_IN = rxchan_3_macRx_put ;
  assign macToRing_3_gearbox_in_ff_ENQ = EN_rxchan_3_macRx_put ;
  assign macToRing_3_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket &&
	     !macToRing_3_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;
  assign macToRing_3_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_3_gearbox_out_ff
  assign macToRing_3_gearbox_out_ff_D_IN =
	     MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_3_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ;
  assign macToRing_3_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_3_writeData ;
  assign macToRing_3_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_3_writeDataFifo
  assign macToRing_3_writeDataFifo_sD_IN = macToRing_3_gearbox_out_ff_D_OUT ;
  assign macToRing_3_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_3_writeData ;
  assign macToRing_3_writeDataFifo_dDEQ =
	     macToRing_3_writeDataFifo_dEMPTY_N &&
	     hostchan_3_pktBuff_RDY_writeServer_enq ;

  // submodule meta_ff_0
  assign meta_ff_0_D_IN = prev_0_enq_v ;
  assign meta_ff_0_ENQ = EN_prev_0_enq ;
  assign meta_ff_0_DEQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_CLR = 1'b0 ;

  // submodule meta_ff_0_1
  assign meta_ff_0_1_D_IN = meta_ff_0_D_OUT ;
  assign meta_ff_0_1_ENQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_1_DEQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign meta_ff_0_1_CLR = 1'b0 ;

  // submodule meta_ff_1
  assign meta_ff_1_D_IN = prev_1_enq_v ;
  assign meta_ff_1_ENQ = EN_prev_1_enq ;
  assign meta_ff_1_DEQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_CLR = 1'b0 ;

  // submodule meta_ff_1_1
  assign meta_ff_1_1_D_IN = meta_ff_1_D_OUT ;
  assign meta_ff_1_1_ENQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_1_DEQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign meta_ff_1_1_CLR = 1'b0 ;

  // submodule meta_ff_2
  assign meta_ff_2_D_IN = prev_2_enq_v ;
  assign meta_ff_2_ENQ = EN_prev_2_enq ;
  assign meta_ff_2_DEQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_CLR = 1'b0 ;

  // submodule meta_ff_2_1
  assign meta_ff_2_1_D_IN = meta_ff_2_D_OUT ;
  assign meta_ff_2_1_ENQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_1_DEQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign meta_ff_2_1_CLR = 1'b0 ;

  // submodule meta_ff_3
  assign meta_ff_3_D_IN = prev_3_enq_v ;
  assign meta_ff_3_ENQ = EN_prev_3_enq ;
  assign meta_ff_3_DEQ = meta_ff_3_EMPTY_N && meta_ff_3_1_FULL_N ;
  assign meta_ff_3_CLR = 1'b0 ;

  // submodule meta_ff_3_1
  assign meta_ff_3_1_D_IN = meta_ff_3_D_OUT ;
  assign meta_ff_3_1_ENQ = meta_ff_3_EMPTY_N && meta_ff_3_1_FULL_N ;
  assign meta_ff_3_1_DEQ =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign meta_ff_3_1_CLR = 1'b0 ;

  // submodule meta_ff_4
  assign meta_ff_4_D_IN = prev_4_enq_v ;
  assign meta_ff_4_ENQ = EN_prev_4_enq ;
  assign meta_ff_4_DEQ = meta_ff_4_EMPTY_N && meta_ff_4_1_FULL_N ;
  assign meta_ff_4_CLR = 1'b0 ;

  // submodule meta_ff_4_1
  assign meta_ff_4_1_D_IN = meta_ff_4_D_OUT ;
  assign meta_ff_4_1_ENQ = meta_ff_4_EMPTY_N && meta_ff_4_1_FULL_N ;
  assign meta_ff_4_1_DEQ =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign meta_ff_4_1_CLR = 1'b0 ;

  // submodule modifier_0
  assign modifier_0_prev_enq_v = meta_ff_0_1_D_OUT ;
  assign modifier_0_set_verbosity_verbosity = verbose_ff_0_2_D_OUT ;
  assign modifier_0_writeServer_enq_v = pktBuff_0_writeDataFifo_D_OUT ;
  assign modifier_0_EN_prev_enq =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign modifier_0_EN_writeServer_enq =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign modifier_0_EN_writeClient_deq =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign modifier_0_EN_set_verbosity = verbose_ff_0_2_EMPTY_N ;

  // submodule modifier_1
  assign modifier_1_prev_enq_v = meta_ff_1_1_D_OUT ;
  assign modifier_1_set_verbosity_verbosity = verbose_ff_1_1_D_OUT ;
  assign modifier_1_writeServer_enq_v = pktBuff_1_writeDataFifo_D_OUT ;
  assign modifier_1_EN_prev_enq =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign modifier_1_EN_writeServer_enq =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign modifier_1_EN_writeClient_deq =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign modifier_1_EN_set_verbosity = verbose_ff_1_1_EMPTY_N ;

  // submodule modifier_2
  assign modifier_2_prev_enq_v = meta_ff_2_1_D_OUT ;
  assign modifier_2_set_verbosity_verbosity = verbose_ff_2_1_D_OUT ;
  assign modifier_2_writeServer_enq_v = pktBuff_2_writeDataFifo_D_OUT ;
  assign modifier_2_EN_prev_enq =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign modifier_2_EN_writeServer_enq =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign modifier_2_EN_writeClient_deq =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign modifier_2_EN_set_verbosity = verbose_ff_2_1_EMPTY_N ;

  // submodule modifier_3
  assign modifier_3_prev_enq_v = meta_ff_3_1_D_OUT ;
  assign modifier_3_set_verbosity_verbosity = verbose_ff_3_1_D_OUT ;
  assign modifier_3_writeServer_enq_v = pktBuff_3_writeDataFifo_D_OUT ;
  assign modifier_3_EN_prev_enq =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign modifier_3_EN_writeServer_enq =
	     modifier_3_RDY_writeServer_enq &&
	     pktBuff_3_writeDataFifo_EMPTY_N ;
  assign modifier_3_EN_writeClient_deq =
	     gearbox_up_16_3_RDY_datain_put &&
	     modifier_3_RDY_writeClient_first &&
	     modifier_3_RDY_writeClient_deq ;
  assign modifier_3_EN_set_verbosity = verbose_ff_3_1_EMPTY_N ;

  // submodule modifier_4
  assign modifier_4_prev_enq_v = meta_ff_4_1_D_OUT ;
  assign modifier_4_set_verbosity_verbosity = verbose_ff_4_D_OUT ;
  assign modifier_4_writeServer_enq_v = pktBuff_4_writeDataFifo_D_OUT ;
  assign modifier_4_EN_prev_enq =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign modifier_4_EN_writeServer_enq =
	     modifier_4_RDY_writeServer_enq &&
	     pktBuff_4_writeDataFifo_EMPTY_N ;
  assign modifier_4_EN_writeClient_deq =
	     gearbox_up_16_4_RDY_datain_put &&
	     modifier_4_RDY_writeClient_first &&
	     modifier_4_RDY_writeClient_deq ;
  assign modifier_4_EN_set_verbosity = verbose_ff_4_EMPTY_N ;

  // submodule outReqFifo_0
  assign outReqFifo_0_D_IN =
	     { 5'd0,
	       pktLenFifo_0_D_OUT,
	       parser_0_meta_get[1738:372],
	       10'd512,
	       parser_0_meta_get[361:0] } ;
  assign outReqFifo_0_ENQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign outReqFifo_0_DEQ = EN_hostchan_0_next_deq ;
  assign outReqFifo_0_CLR = 1'b0 ;

  // submodule output_queues_0
  assign output_queues_0_readServer_readReq_put =
	     output_queues_0_readServer_readLen_get ;
  assign output_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_0_writeServer_enq_v = xbar_merges_fo_D_OUT ;
  assign output_queues_0_EN_writeServer_enq =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign output_queues_0_EN_readServer_readData_get =
	     output_queues_0_RDY_readServer_readData_get ;
  assign output_queues_0_EN_readServer_readLen_get =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_readServer_readReq_put =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_1
  assign output_queues_1_readServer_readReq_put =
	     output_queues_1_readServer_readLen_get ;
  assign output_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_1_writeServer_enq_v = xbar_merges_1_fo_D_OUT ;
  assign output_queues_1_EN_writeServer_enq =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign output_queues_1_EN_readServer_readData_get =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign output_queues_1_EN_readServer_readLen_get =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_readServer_readReq_put =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_2
  assign output_queues_2_readServer_readReq_put =
	     output_queues_2_readServer_readLen_get ;
  assign output_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_2_writeServer_enq_v = xbar_merges_2_fo_D_OUT ;
  assign output_queues_2_EN_writeServer_enq =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign output_queues_2_EN_readServer_readData_get =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign output_queues_2_EN_readServer_readLen_get =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_readServer_readReq_put =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_3
  assign output_queues_3_readServer_readReq_put =
	     output_queues_3_readServer_readLen_get ;
  assign output_queues_3_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_3_writeServer_enq_v = xbar_merges_3_fo_D_OUT ;
  assign output_queues_3_EN_writeServer_enq =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign output_queues_3_EN_readServer_readData_get =
	     output_queues_3_RDY_readServer_readData_get &&
	     gearbox_dn_32_2_RDY_datain_put ;
  assign output_queues_3_EN_readServer_readLen_get =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_readServer_readReq_put =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_4
  assign output_queues_4_readServer_readReq_put =
	     output_queues_4_readServer_readLen_get ;
  assign output_queues_4_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_4_writeServer_enq_v = xbar_merges_4_fo_D_OUT ;
  assign output_queues_4_EN_writeServer_enq =
	     output_queues_4_RDY_writeServer_enq && xbar_merges_4_fo_EMPTY_N ;
  assign output_queues_4_EN_readServer_readData_get =
	     output_queues_4_RDY_readServer_readData_get &&
	     gearbox_dn_32_3_RDY_datain_put ;
  assign output_queues_4_EN_readServer_readLen_get =
	     output_queues_4_RDY_readServer_readLen_get &&
	     output_queues_4_RDY_readServer_readReq_put ;
  assign output_queues_4_EN_readServer_readReq_put =
	     output_queues_4_RDY_readServer_readLen_get &&
	     output_queues_4_RDY_readServer_readReq_put ;
  assign output_queues_4_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_5
  assign output_queues_5_readServer_readReq_put =
	     output_queues_5_readServer_readLen_get ;
  assign output_queues_5_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_5_writeServer_enq_v = xbar_merges_5_fo_D_OUT ;
  assign output_queues_5_EN_writeServer_enq =
	     output_queues_5_RDY_writeServer_enq && xbar_merges_5_fo_EMPTY_N ;
  assign output_queues_5_EN_readServer_readData_get =
	     output_queues_5_RDY_readServer_readData_get ;
  assign output_queues_5_EN_readServer_readLen_get =
	     output_queues_5_RDY_readServer_readLen_get &&
	     output_queues_5_RDY_readServer_readReq_put ;
  assign output_queues_5_EN_readServer_readReq_put =
	     output_queues_5_RDY_readServer_readLen_get &&
	     output_queues_5_RDY_readServer_readReq_put ;
  assign output_queues_5_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_6
  assign output_queues_6_readServer_readReq_put =
	     output_queues_6_readServer_readLen_get ;
  assign output_queues_6_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_6_writeServer_enq_v = xbar_merges_6_fo_D_OUT ;
  assign output_queues_6_EN_writeServer_enq =
	     output_queues_6_RDY_writeServer_enq && xbar_merges_6_fo_EMPTY_N ;
  assign output_queues_6_EN_readServer_readData_get =
	     output_queues_6_RDY_readServer_readData_get ;
  assign output_queues_6_EN_readServer_readLen_get =
	     output_queues_6_RDY_readServer_readLen_get &&
	     output_queues_6_RDY_readServer_readReq_put ;
  assign output_queues_6_EN_readServer_readReq_put =
	     output_queues_6_RDY_readServer_readLen_get &&
	     output_queues_6_RDY_readServer_readReq_put ;
  assign output_queues_6_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_7
  assign output_queues_7_readServer_readReq_put =
	     output_queues_7_readServer_readLen_get ;
  assign output_queues_7_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_7_writeServer_enq_v = xbar_merges_7_fo_D_OUT ;
  assign output_queues_7_EN_writeServer_enq =
	     output_queues_7_RDY_writeServer_enq && xbar_merges_7_fo_EMPTY_N ;
  assign output_queues_7_EN_readServer_readData_get =
	     output_queues_7_RDY_readServer_readData_get ;
  assign output_queues_7_EN_readServer_readLen_get =
	     output_queues_7_RDY_readServer_readLen_get &&
	     output_queues_7_RDY_readServer_readReq_put ;
  assign output_queues_7_EN_readServer_readReq_put =
	     output_queues_7_RDY_readServer_readLen_get &&
	     output_queues_7_RDY_readServer_readReq_put ;
  assign output_queues_7_EN_set_verbosity = EN_set_verbosity ;

  // submodule parser_0
  assign parser_0_frameIn_put = readDataFifo_0_D_OUT ;
  assign parser_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign parser_0_EN_frameIn_put = WILL_FIRE_RL_packetReadInProgress ;
  assign parser_0_EN_meta_get =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign parser_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0
  assign pktBuff_0_readServer_readReq_put = readReqFifo_0_D_OUT ;
  assign pktBuff_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign pktBuff_0_writeServer_enq_v = hostchan_0_writeServer_enq_v ;
  assign pktBuff_0_EN_writeServer_enq = EN_hostchan_0_writeServer_enq ;
  assign pktBuff_0_EN_readServer_readData_get =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readLen_get =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readReq_put =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign pktBuff_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0_fifoEop
  assign pktBuff_0_fifoEop_D_IN = pktBuff_0_packetLen + { 11'd0, x__h84448 } ;
  assign pktBuff_0_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 &&
	     pktBuff_0_fifoWriteData_D_OUT[0] ;
  assign pktBuff_0_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoLen
  assign pktBuff_0_fifoLen_D_IN = pktBuff_0_fifoEop_D_OUT ;
  assign pktBuff_0_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoLen_DEQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign pktBuff_0_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadData
  assign pktBuff_0_fifoReadData_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_0_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;
  assign pktBuff_0_fifoReadData_DEQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign pktBuff_0_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadReq
  assign pktBuff_0_fifoReadReq_D_IN = ringToMac_0_readReqFifo_D_OUT ;
  assign pktBuff_0_fifoReadReq_ENQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign pktBuff_0_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_0_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoWriteData
  assign pktBuff_0_fifoWriteData_D_IN =
	     EN_txchan_0_writeServer_enq ?
	       txchan_0_writeServer_enq_v :
	       gearbox_dn_16_0_dataout_get ;
  assign pktBuff_0_fifoWriteData_ENQ =
	     EN_txchan_0_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_69 &&
	     !EN_txchan_0_writeServer_enq ;
  assign pktBuff_0_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_0_incomingReqs
  assign pktBuff_0_incomingReqs_D_IN =
	     { pktBuff_0_wrCurrPtr, pktBuff_0_fifoWriteData_D_OUT } ;
  assign pktBuff_0_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_incomingReqs_DEQ =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_memory
  assign pktBuff_0_memBuffer_memory_ADDRA =
	     pktBuff_0_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_0_memBuffer_memory_ADDRB = pktBuff_0_rdCurrPtr ;
  assign pktBuff_0_memBuffer_memory_DIA =
	     pktBuff_0_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_0_memBuffer_memory_DIB =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_0_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_0_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_0_memBuffer_memory_ENA =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOA ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOB ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_meta_ff
  assign pktBuff_0_meta_ff_D_IN = meta_ff_0_1_D_OUT ;
  assign pktBuff_0_meta_ff_ENQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign pktBuff_0_meta_ff_DEQ = MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_0_pktBuff
  assign pktBuff_0_pktBuff_readServer_readReq_put =
	     pktBuff_0_readReqFifo_D_OUT ;
  assign pktBuff_0_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_0_pktBuff_writeServer_enq_v = writeDataFifo_0_D_OUT ;
  assign pktBuff_0_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_15 &&
	     !EN_hostchan_0_writeClient_deq ;
  assign pktBuff_0_pktBuff_EN_readServer_readData_get =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readLen_get =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readReq_put =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_0_readDataFifo
  assign pktBuff_0_readDataFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readData_get ;
  assign pktBuff_0_readDataFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readLenFifo
  assign pktBuff_0_readLenFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readLen_get ;
  assign pktBuff_0_readLenFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_readLenFifo_DEQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readReqFifo
  assign pktBuff_0_readReqFifo_D_IN = pktBuff_0_readLenFifo_D_OUT ;
  assign pktBuff_0_readReqFifo_ENQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readReqFifo_DEQ =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_writeDataFifo
  assign pktBuff_0_writeDataFifo_D_IN = pktBuff_0_readDataFifo_D_OUT ;
  assign pktBuff_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_writeDataFifo_DEQ =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign pktBuff_0_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoEop
  assign pktBuff_1_fifoEop_D_IN =
	     pktBuff_1_packetLen + { 11'd0, x__h103085 } ;
  assign pktBuff_1_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 &&
	     pktBuff_1_fifoWriteData_D_OUT[0] ;
  assign pktBuff_1_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoLen
  assign pktBuff_1_fifoLen_D_IN = pktBuff_1_fifoEop_D_OUT ;
  assign pktBuff_1_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoLen_DEQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign pktBuff_1_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadData
  assign pktBuff_1_fifoReadData_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_1_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;
  assign pktBuff_1_fifoReadData_DEQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign pktBuff_1_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadReq
  assign pktBuff_1_fifoReadReq_D_IN = ringToMac_1_readReqFifo_D_OUT ;
  assign pktBuff_1_fifoReadReq_ENQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign pktBuff_1_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoWriteData
  assign pktBuff_1_fifoWriteData_D_IN =
	     EN_txchan_1_writeServer_enq ?
	       txchan_1_writeServer_enq_v :
	       gearbox_dn_16_1_dataout_get ;
  assign pktBuff_1_fifoWriteData_ENQ =
	     EN_txchan_1_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_70 &&
	     !EN_txchan_1_writeServer_enq ;
  assign pktBuff_1_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_1_incomingReqs
  assign pktBuff_1_incomingReqs_D_IN =
	     { pktBuff_1_wrCurrPtr, pktBuff_1_fifoWriteData_D_OUT } ;
  assign pktBuff_1_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_incomingReqs_DEQ =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_memory
  assign pktBuff_1_memBuffer_memory_ADDRA =
	     pktBuff_1_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_1_memBuffer_memory_ADDRB = pktBuff_1_rdCurrPtr ;
  assign pktBuff_1_memBuffer_memory_DIA =
	     pktBuff_1_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_1_memBuffer_memory_DIB =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_1_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_1_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_1_memBuffer_memory_ENA =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOA ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOB ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_meta_ff
  assign pktBuff_1_meta_ff_D_IN = meta_ff_1_1_D_OUT ;
  assign pktBuff_1_meta_ff_ENQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign pktBuff_1_meta_ff_DEQ = MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_1_pktBuff
  assign pktBuff_1_pktBuff_readServer_readReq_put =
	     pktBuff_1_readReqFifo_D_OUT ;
  assign pktBuff_1_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_1_pktBuff_writeServer_enq_v =
	     hostchan_0_writeDataFifo_D_OUT ;
  assign pktBuff_1_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_16 &&
	     !EN_rxchan_0_writeClient_deq ;
  assign pktBuff_1_pktBuff_EN_readServer_readData_get =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readLen_get =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readReq_put =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_1_readDataFifo
  assign pktBuff_1_readDataFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readData_get ;
  assign pktBuff_1_readDataFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readLenFifo
  assign pktBuff_1_readLenFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readLen_get ;
  assign pktBuff_1_readLenFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_readLenFifo_DEQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readReqFifo
  assign pktBuff_1_readReqFifo_D_IN = pktBuff_1_readLenFifo_D_OUT ;
  assign pktBuff_1_readReqFifo_ENQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readReqFifo_DEQ =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_writeDataFifo
  assign pktBuff_1_writeDataFifo_D_IN = pktBuff_1_readDataFifo_D_OUT ;
  assign pktBuff_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_writeDataFifo_DEQ =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign pktBuff_1_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoEop
  assign pktBuff_2_fifoEop_D_IN = newPacketLen__h121630 ;
  assign pktBuff_2_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_2_enq_stage1 &&
	     pktBuff_2_fifoWriteData_D_OUT[0] ;
  assign pktBuff_2_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_2_commit_packet ;
  assign pktBuff_2_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoLen
  assign pktBuff_2_fifoLen_D_IN = pktBuff_2_fifoEop_D_OUT ;
  assign pktBuff_2_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_2_commit_packet ;
  assign pktBuff_2_fifoLen_DEQ =
	     pktBuff_2_fifoLen_EMPTY_N && ringToMac_2_readLenFifo_FULL_N ;
  assign pktBuff_2_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoReadData
  assign pktBuff_2_fifoReadData_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_2_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ;
  assign pktBuff_2_fifoReadData_DEQ =
	     pktBuff_2_fifoReadData_EMPTY_N &&
	     ringToMac_2_readDataFifo_FULL_N ;
  assign pktBuff_2_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoReadReq
  assign pktBuff_2_fifoReadReq_D_IN = ringToMac_2_readReqFifo_D_OUT ;
  assign pktBuff_2_fifoReadReq_ENQ =
	     ringToMac_2_readReqFifo_EMPTY_N && pktBuff_2_fifoReadReq_FULL_N ;
  assign pktBuff_2_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;
  assign pktBuff_2_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoWriteData
  assign pktBuff_2_fifoWriteData_D_IN =
	     EN_txchan_2_writeServer_enq ?
	       txchan_2_writeServer_enq_v :
	       gearbox_dn_16_2_dataout_get ;
  assign pktBuff_2_fifoWriteData_ENQ =
	     EN_txchan_2_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_71 &&
	     !EN_txchan_2_writeServer_enq ;
  assign pktBuff_2_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_2_incomingReqs
  assign pktBuff_2_incomingReqs_D_IN =
	     { pktBuff_2_wrCurrPtr, pktBuff_2_fifoWriteData_D_OUT } ;
  assign pktBuff_2_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_incomingReqs_DEQ =
	     pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_2_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_2_memBuffer_memory
  assign pktBuff_2_memBuffer_memory_ADDRA =
	     pktBuff_2_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_2_memBuffer_memory_ADDRB = pktBuff_2_rdCurrPtr ;
  assign pktBuff_2_memBuffer_memory_DIA =
	     pktBuff_2_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_2_memBuffer_memory_DIB =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_2_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_2_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_2_memBuffer_memory_ENA =
	     pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_2_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_2_memBuffer_memory_DOA ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_2_memBuffer_memory_DOB ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_2_meta_ff
  assign pktBuff_2_meta_ff_D_IN = meta_ff_2_1_D_OUT ;
  assign pktBuff_2_meta_ff_ENQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign pktBuff_2_meta_ff_DEQ = MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_2_pktBuff
  assign pktBuff_2_pktBuff_readServer_readReq_put =
	     pktBuff_2_readReqFifo_D_OUT ;
  assign pktBuff_2_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_2_pktBuff_writeServer_enq_v =
	     hostchan_1_writeDataFifo_D_OUT ;
  assign pktBuff_2_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_17 &&
	     !EN_rxchan_1_writeClient_deq ;
  assign pktBuff_2_pktBuff_EN_readServer_readData_get =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readLen_get =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readReq_put =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_2_readDataFifo
  assign pktBuff_2_readDataFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readData_get ;
  assign pktBuff_2_readDataFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readLenFifo
  assign pktBuff_2_readLenFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readLen_get ;
  assign pktBuff_2_readLenFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_readLenFifo_DEQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readReqFifo
  assign pktBuff_2_readReqFifo_D_IN = pktBuff_2_readLenFifo_D_OUT ;
  assign pktBuff_2_readReqFifo_ENQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readReqFifo_DEQ =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_writeDataFifo
  assign pktBuff_2_writeDataFifo_D_IN = pktBuff_2_readDataFifo_D_OUT ;
  assign pktBuff_2_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_writeDataFifo_DEQ =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign pktBuff_2_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoEop
  assign pktBuff_3_fifoEop_D_IN = newPacketLen__h140264 ;
  assign pktBuff_3_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_3_enq_stage1 &&
	     pktBuff_3_fifoWriteData_D_OUT[0] ;
  assign pktBuff_3_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_3_commit_packet ;
  assign pktBuff_3_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoLen
  assign pktBuff_3_fifoLen_D_IN = pktBuff_3_fifoEop_D_OUT ;
  assign pktBuff_3_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_3_commit_packet ;
  assign pktBuff_3_fifoLen_DEQ =
	     pktBuff_3_fifoLen_EMPTY_N && ringToMac_3_readLenFifo_FULL_N ;
  assign pktBuff_3_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoReadData
  assign pktBuff_3_fifoReadData_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_3_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ;
  assign pktBuff_3_fifoReadData_DEQ =
	     pktBuff_3_fifoReadData_EMPTY_N &&
	     ringToMac_3_readDataFifo_FULL_N ;
  assign pktBuff_3_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoReadReq
  assign pktBuff_3_fifoReadReq_D_IN = ringToMac_3_readReqFifo_D_OUT ;
  assign pktBuff_3_fifoReadReq_ENQ =
	     ringToMac_3_readReqFifo_EMPTY_N && pktBuff_3_fifoReadReq_FULL_N ;
  assign pktBuff_3_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;
  assign pktBuff_3_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoWriteData
  assign pktBuff_3_fifoWriteData_D_IN =
	     EN_txchan_3_writeServer_enq ?
	       txchan_3_writeServer_enq_v :
	       gearbox_dn_16_3_dataout_get ;
  assign pktBuff_3_fifoWriteData_ENQ =
	     EN_txchan_3_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_72 &&
	     !EN_txchan_3_writeServer_enq ;
  assign pktBuff_3_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_3_incomingReqs
  assign pktBuff_3_incomingReqs_D_IN =
	     { pktBuff_3_wrCurrPtr, pktBuff_3_fifoWriteData_D_OUT } ;
  assign pktBuff_3_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_incomingReqs_DEQ =
	     pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_3_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_3_memBuffer_memory
  assign pktBuff_3_memBuffer_memory_ADDRA =
	     pktBuff_3_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_3_memBuffer_memory_ADDRB = pktBuff_3_rdCurrPtr ;
  assign pktBuff_3_memBuffer_memory_DIA =
	     pktBuff_3_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_3_memBuffer_memory_DIB =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_3_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_3_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_3_memBuffer_memory_ENA =
	     pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_3_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_3_memBuffer_memory_DOA ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_3_memBuffer_memory_DOB ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_3_meta_ff
  assign pktBuff_3_meta_ff_D_IN = meta_ff_3_1_D_OUT ;
  assign pktBuff_3_meta_ff_ENQ =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign pktBuff_3_meta_ff_DEQ = MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_3_pktBuff
  assign pktBuff_3_pktBuff_readServer_readReq_put =
	     pktBuff_3_readReqFifo_D_OUT ;
  assign pktBuff_3_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_3_pktBuff_writeServer_enq_v =
	     hostchan_2_writeDataFifo_D_OUT ;
  assign pktBuff_3_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_18 &&
	     !EN_rxchan_2_writeClient_deq ;
  assign pktBuff_3_pktBuff_EN_readServer_readData_get =
	     pktBuff_3_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_3_readDataFifo_FULL_N ;
  assign pktBuff_3_pktBuff_EN_readServer_readLen_get =
	     pktBuff_3_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_3_readLenFifo_FULL_N ;
  assign pktBuff_3_pktBuff_EN_readServer_readReq_put =
	     pktBuff_3_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_3_readReqFifo_EMPTY_N ;
  assign pktBuff_3_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_3_readDataFifo
  assign pktBuff_3_readDataFifo_D_IN =
	     pktBuff_3_pktBuff_readServer_readData_get ;
  assign pktBuff_3_readDataFifo_ENQ =
	     pktBuff_3_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_3_readDataFifo_FULL_N ;
  assign pktBuff_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress ;
  assign pktBuff_3_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_readLenFifo
  assign pktBuff_3_readLenFifo_D_IN =
	     pktBuff_3_pktBuff_readServer_readLen_get ;
  assign pktBuff_3_readLenFifo_ENQ =
	     pktBuff_3_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_3_readLenFifo_FULL_N ;
  assign pktBuff_3_readLenFifo_DEQ =
	     MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_readReqFifo
  assign pktBuff_3_readReqFifo_D_IN = pktBuff_3_readLenFifo_D_OUT ;
  assign pktBuff_3_readReqFifo_ENQ =
	     MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_readReqFifo_DEQ =
	     pktBuff_3_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_3_readReqFifo_EMPTY_N ;
  assign pktBuff_3_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_writeDataFifo
  assign pktBuff_3_writeDataFifo_D_IN = pktBuff_3_readDataFifo_D_OUT ;
  assign pktBuff_3_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress ;
  assign pktBuff_3_writeDataFifo_DEQ =
	     modifier_3_RDY_writeServer_enq &&
	     pktBuff_3_writeDataFifo_EMPTY_N ;
  assign pktBuff_3_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_meta_ff
  assign pktBuff_4_meta_ff_D_IN = meta_ff_4_1_D_OUT ;
  assign pktBuff_4_meta_ff_ENQ =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign pktBuff_4_meta_ff_DEQ = MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_4_pktBuff
  assign pktBuff_4_pktBuff_readServer_readReq_put =
	     pktBuff_4_readReqFifo_D_OUT ;
  assign pktBuff_4_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_4_pktBuff_writeServer_enq_v =
	     hostchan_3_writeDataFifo_D_OUT ;
  assign pktBuff_4_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_19 &&
	     !EN_rxchan_3_writeClient_deq ;
  assign pktBuff_4_pktBuff_EN_readServer_readData_get =
	     pktBuff_4_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_4_readDataFifo_FULL_N ;
  assign pktBuff_4_pktBuff_EN_readServer_readLen_get =
	     pktBuff_4_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_4_readLenFifo_FULL_N ;
  assign pktBuff_4_pktBuff_EN_readServer_readReq_put =
	     pktBuff_4_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_4_readReqFifo_EMPTY_N ;
  assign pktBuff_4_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_4_readDataFifo
  assign pktBuff_4_readDataFifo_D_IN =
	     pktBuff_4_pktBuff_readServer_readData_get ;
  assign pktBuff_4_readDataFifo_ENQ =
	     pktBuff_4_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_4_readDataFifo_FULL_N ;
  assign pktBuff_4_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress ;
  assign pktBuff_4_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_readLenFifo
  assign pktBuff_4_readLenFifo_D_IN =
	     pktBuff_4_pktBuff_readServer_readLen_get ;
  assign pktBuff_4_readLenFifo_ENQ =
	     pktBuff_4_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_4_readLenFifo_FULL_N ;
  assign pktBuff_4_readLenFifo_DEQ =
	     MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_readReqFifo
  assign pktBuff_4_readReqFifo_D_IN = pktBuff_4_readLenFifo_D_OUT ;
  assign pktBuff_4_readReqFifo_ENQ =
	     MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_readReqFifo_DEQ =
	     pktBuff_4_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_4_readReqFifo_EMPTY_N ;
  assign pktBuff_4_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_writeDataFifo
  assign pktBuff_4_writeDataFifo_D_IN = pktBuff_4_readDataFifo_D_OUT ;
  assign pktBuff_4_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress ;
  assign pktBuff_4_writeDataFifo_DEQ =
	     modifier_4_RDY_writeServer_enq &&
	     pktBuff_4_writeDataFifo_EMPTY_N ;
  assign pktBuff_4_writeDataFifo_CLR = 1'b0 ;

  // submodule pktLenFifo_0
  assign pktLenFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign pktLenFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign pktLenFifo_0_DEQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign pktLenFifo_0_CLR = 1'b0 ;

  // submodule readDataFifo_0
  assign readDataFifo_0_D_IN = pktBuff_0_readServer_readData_get ;
  assign readDataFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign readDataFifo_0_DEQ = WILL_FIRE_RL_packetReadInProgress ;
  assign readDataFifo_0_CLR = 1'b0 ;

  // submodule readLenFifo_0
  assign readLenFifo_0_D_IN = pktBuff_0_readServer_readLen_get ;
  assign readLenFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign readLenFifo_0_DEQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readLenFifo_0_CLR = 1'b0 ;

  // submodule readReqFifo_0
  assign readReqFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign readReqFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readReqFifo_0_DEQ =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign readReqFifo_0_CLR = 1'b0 ;

  // submodule ringToMac_0_readDataFifo
  assign ringToMac_0_readDataFifo_D_IN = pktBuff_0_fifoReadData_D_OUT ;
  assign ringToMac_0_readDataFifo_ENQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign ringToMac_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readLenFifo
  assign ringToMac_0_readLenFifo_D_IN = pktBuff_0_fifoLen_D_OUT ;
  assign ringToMac_0_readLenFifo_ENQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_DEQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readReqFifo
  assign ringToMac_0_readReqFifo_D_IN = ringToMac_0_readLenFifo_D_OUT ;
  assign ringToMac_0_readReqFifo_ENQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readReqFifo_DEQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign ringToMac_0_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_tx_fifo
  assign ringToMac_0_tx_fifo_sD_IN = ringToMac_0_readDataFifo_D_OUT ;
  assign ringToMac_0_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // submodule ringToMac_0_writeMacFifo
  assign ringToMac_0_writeMacFifo_D_IN =
	     ringToMac_0_fifoTxData_read_block ?
	       ((!ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352 &&
		 ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354) ?
		  ringToMac_0_fifoTxData_block1[211:106] :
		  ringToMac_0_fifoTxData_block1[105:0]) :
	       ((!ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343 &&
		 ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345) ?
		  ringToMac_0_fifoTxData_block0[211:106] :
		  ringToMac_0_fifoTxData_block0[105:0]) ;
  assign ringToMac_0_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 !=
	     8'd0 ;
  assign ringToMac_0_writeMacFifo_DEQ = EN_txchan_0_macTx_get ;
  assign ringToMac_0_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readDataFifo
  assign ringToMac_1_readDataFifo_D_IN = pktBuff_1_fifoReadData_D_OUT ;
  assign ringToMac_1_readDataFifo_ENQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign ringToMac_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readLenFifo
  assign ringToMac_1_readLenFifo_D_IN = pktBuff_1_fifoLen_D_OUT ;
  assign ringToMac_1_readLenFifo_ENQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_DEQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readReqFifo
  assign ringToMac_1_readReqFifo_D_IN = ringToMac_1_readLenFifo_D_OUT ;
  assign ringToMac_1_readReqFifo_ENQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readReqFifo_DEQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign ringToMac_1_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_tx_fifo
  assign ringToMac_1_tx_fifo_sD_IN = ringToMac_1_readDataFifo_D_OUT ;
  assign ringToMac_1_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // submodule ringToMac_1_writeMacFifo
  assign ringToMac_1_writeMacFifo_D_IN =
	     ringToMac_1_fifoTxData_read_block ?
	       ((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796 &&
		 ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798) ?
		  ringToMac_1_fifoTxData_block1[211:106] :
		  ringToMac_1_fifoTxData_block1[105:0]) :
	       ((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787 &&
		 ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789) ?
		  ringToMac_1_fifoTxData_block0[211:106] :
		  ringToMac_1_fifoTxData_block0[105:0]) ;
  assign ringToMac_1_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 !=
	     8'd0 ;
  assign ringToMac_1_writeMacFifo_DEQ = EN_txchan_1_macTx_get ;
  assign ringToMac_1_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readDataFifo
  assign ringToMac_2_readDataFifo_D_IN = pktBuff_2_fifoReadData_D_OUT ;
  assign ringToMac_2_readDataFifo_ENQ =
	     pktBuff_2_fifoReadData_EMPTY_N &&
	     ringToMac_2_readDataFifo_FULL_N ;
  assign ringToMac_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking ;
  assign ringToMac_2_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readLenFifo
  assign ringToMac_2_readLenFifo_D_IN = pktBuff_2_fifoLen_D_OUT ;
  assign ringToMac_2_readLenFifo_ENQ =
	     pktBuff_2_fifoLen_EMPTY_N && ringToMac_2_readLenFifo_FULL_N ;
  assign ringToMac_2_readLenFifo_DEQ =
	     ringToMac_2_readLenFifo_EMPTY_N &&
	     ringToMac_2_readReqFifo_FULL_N ;
  assign ringToMac_2_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readReqFifo
  assign ringToMac_2_readReqFifo_D_IN = ringToMac_2_readLenFifo_D_OUT ;
  assign ringToMac_2_readReqFifo_ENQ =
	     ringToMac_2_readLenFifo_EMPTY_N &&
	     ringToMac_2_readReqFifo_FULL_N ;
  assign ringToMac_2_readReqFifo_DEQ =
	     ringToMac_2_readReqFifo_EMPTY_N && pktBuff_2_fifoReadReq_FULL_N ;
  assign ringToMac_2_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_tx_fifo
  assign ringToMac_2_tx_fifo_sD_IN = ringToMac_2_readDataFifo_D_OUT ;
  assign ringToMac_2_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_2_cross_clocking ;
  assign ringToMac_2_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet ;

  // submodule ringToMac_2_writeMacFifo
  assign ringToMac_2_writeMacFifo_D_IN =
	     ringToMac_2_fifoTxData_read_block ?
	       ((!ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240 &&
		 ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242) ?
		  ringToMac_2_fifoTxData_block1[211:106] :
		  ringToMac_2_fifoTxData_block1[105:0]) :
	       ((!ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231 &&
		 ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233) ?
		  ringToMac_2_fifoTxData_block0[211:106] :
		  ringToMac_2_fifoTxData_block0[105:0]) ;
  assign ringToMac_2_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 !=
	     8'd0 ;
  assign ringToMac_2_writeMacFifo_DEQ = EN_txchan_2_macTx_get ;
  assign ringToMac_2_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readDataFifo
  assign ringToMac_3_readDataFifo_D_IN = pktBuff_3_fifoReadData_D_OUT ;
  assign ringToMac_3_readDataFifo_ENQ =
	     pktBuff_3_fifoReadData_EMPTY_N &&
	     ringToMac_3_readDataFifo_FULL_N ;
  assign ringToMac_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking ;
  assign ringToMac_3_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readLenFifo
  assign ringToMac_3_readLenFifo_D_IN = pktBuff_3_fifoLen_D_OUT ;
  assign ringToMac_3_readLenFifo_ENQ =
	     pktBuff_3_fifoLen_EMPTY_N && ringToMac_3_readLenFifo_FULL_N ;
  assign ringToMac_3_readLenFifo_DEQ =
	     ringToMac_3_readLenFifo_EMPTY_N &&
	     ringToMac_3_readReqFifo_FULL_N ;
  assign ringToMac_3_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readReqFifo
  assign ringToMac_3_readReqFifo_D_IN = ringToMac_3_readLenFifo_D_OUT ;
  assign ringToMac_3_readReqFifo_ENQ =
	     ringToMac_3_readLenFifo_EMPTY_N &&
	     ringToMac_3_readReqFifo_FULL_N ;
  assign ringToMac_3_readReqFifo_DEQ =
	     ringToMac_3_readReqFifo_EMPTY_N && pktBuff_3_fifoReadReq_FULL_N ;
  assign ringToMac_3_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_tx_fifo
  assign ringToMac_3_tx_fifo_sD_IN = ringToMac_3_readDataFifo_D_OUT ;
  assign ringToMac_3_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_3_cross_clocking ;
  assign ringToMac_3_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet ;

  // submodule ringToMac_3_writeMacFifo
  assign ringToMac_3_writeMacFifo_D_IN =
	     ringToMac_3_fifoTxData_read_block ?
	       ((!ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684 &&
		 ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686) ?
		  ringToMac_3_fifoTxData_block1[211:106] :
		  ringToMac_3_fifoTxData_block1[105:0]) :
	       ((!ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675 &&
		 ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677) ?
		  ringToMac_3_fifoTxData_block0[211:106] :
		  ringToMac_3_fifoTxData_block0[105:0]) ;
  assign ringToMac_3_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 !=
	     8'd0 ;
  assign ringToMac_3_writeMacFifo_DEQ = EN_txchan_3_macTx_get ;
  assign ringToMac_3_writeMacFifo_CLR = 1'b0 ;

  // submodule verbose_ff_0
  assign verbose_ff_0_D_IN =
	     EN_hostchan_0_verbose_enq ?
	       hostchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_ENQ = EN_hostchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_DEQ = verbose_ff_0_EMPTY_N ;
  assign verbose_ff_0_CLR = 1'b0 ;

  // submodule verbose_ff_0_1
  assign verbose_ff_0_1_D_IN =
	     EN_rxchan_0_verbose_enq ?
	       rxchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_1_ENQ = EN_rxchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_1_DEQ = verbose_ff_0_1_EMPTY_N ;
  assign verbose_ff_0_1_CLR = 1'b0 ;

  // submodule verbose_ff_0_2
  assign verbose_ff_0_2_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_0_2_ENQ = EN_set_verbosity ;
  assign verbose_ff_0_2_DEQ = verbose_ff_0_2_EMPTY_N ;
  assign verbose_ff_0_2_CLR = 1'b0 ;

  // submodule verbose_ff_0_3
  assign verbose_ff_0_3_D_IN =
	     EN_txchan_0_verbose_enq ?
	       txchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_3_ENQ = EN_txchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_3_DEQ = 1'b0 ;
  assign verbose_ff_0_3_CLR = 1'b0 ;

  // submodule verbose_ff_1
  assign verbose_ff_1_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_1_verbose_enq_v ;
  assign verbose_ff_1_ENQ = EN_set_verbosity || EN_rxchan_1_verbose_enq ;
  assign verbose_ff_1_DEQ = verbose_ff_1_EMPTY_N ;
  assign verbose_ff_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_1
  assign verbose_ff_1_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_1_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_1_1_DEQ = verbose_ff_1_1_EMPTY_N ;
  assign verbose_ff_1_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_2
  assign verbose_ff_1_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_1_verbose_enq_v ;
  assign verbose_ff_1_2_ENQ = EN_set_verbosity || EN_txchan_1_verbose_enq ;
  assign verbose_ff_1_2_DEQ = 1'b0 ;
  assign verbose_ff_1_2_CLR = 1'b0 ;

  // submodule verbose_ff_2
  assign verbose_ff_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_2_verbose_enq_v ;
  assign verbose_ff_2_ENQ = EN_set_verbosity || EN_rxchan_2_verbose_enq ;
  assign verbose_ff_2_DEQ = verbose_ff_2_EMPTY_N ;
  assign verbose_ff_2_CLR = 1'b0 ;

  // submodule verbose_ff_2_1
  assign verbose_ff_2_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_2_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_2_1_DEQ = verbose_ff_2_1_EMPTY_N ;
  assign verbose_ff_2_1_CLR = 1'b0 ;

  // submodule verbose_ff_2_2
  assign verbose_ff_2_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_2_verbose_enq_v ;
  assign verbose_ff_2_2_ENQ = EN_set_verbosity || EN_txchan_2_verbose_enq ;
  assign verbose_ff_2_2_DEQ = 1'b0 ;
  assign verbose_ff_2_2_CLR = 1'b0 ;

  // submodule verbose_ff_3
  assign verbose_ff_3_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_3_verbose_enq_v ;
  assign verbose_ff_3_ENQ = EN_set_verbosity || EN_rxchan_3_verbose_enq ;
  assign verbose_ff_3_DEQ = verbose_ff_3_EMPTY_N ;
  assign verbose_ff_3_CLR = 1'b0 ;

  // submodule verbose_ff_3_1
  assign verbose_ff_3_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_3_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_3_1_DEQ = verbose_ff_3_1_EMPTY_N ;
  assign verbose_ff_3_1_CLR = 1'b0 ;

  // submodule verbose_ff_3_2
  assign verbose_ff_3_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_3_verbose_enq_v ;
  assign verbose_ff_3_2_ENQ = EN_set_verbosity || EN_txchan_3_verbose_enq ;
  assign verbose_ff_3_2_DEQ = 1'b0 ;
  assign verbose_ff_3_2_CLR = 1'b0 ;

  // submodule verbose_ff_4
  assign verbose_ff_4_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_4_ENQ = EN_set_verbosity ;
  assign verbose_ff_4_DEQ = verbose_ff_4_EMPTY_N ;
  assign verbose_ff_4_CLR = 1'b0 ;

  // submodule writeDataFifo_0
  assign writeDataFifo_0_D_IN = readDataFifo_0_D_OUT ;
  assign writeDataFifo_0_ENQ = WILL_FIRE_RL_packetReadInProgress ;
  assign writeDataFifo_0_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_15 &&
	     !EN_hostchan_0_writeClient_deq ||
	     EN_hostchan_0_writeClient_deq ;
  assign writeDataFifo_0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_lower_f
  assign xbar_lower_lower_lower_f_D_IN = 610'h0 ;
  assign xbar_lower_lower_lower_f_ENQ = 1'b0 ;
  assign xbar_lower_lower_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 ;
  assign xbar_lower_lower_lower_f_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fi0
  assign xbar_lower_lower_merges_1_fi0_D_IN = xbar_lower_lower_lower_f_D_OUT ;
  assign xbar_lower_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	     xbar_lower_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      xbar_lower_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ;
  assign xbar_lower_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fi1
  assign xbar_lower_lower_merges_1_fi1_D_IN = xbar_lower_lower_upper_f_D_OUT ;
  assign xbar_lower_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route &&
	     xbar_lower_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      xbar_lower_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fo
  always@(MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty or
	  xbar_lower_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty or
	  xbar_lower_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      xbar_lower_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      xbar_lower_lower_merges_1_fi1_D_OUT;
      default: xbar_lower_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_lower_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_3 ;
  assign xbar_lower_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fi0
  assign xbar_lower_lower_merges_fi0_D_IN = xbar_lower_lower_upper_f_D_OUT ;
  assign xbar_lower_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route &&
	     !xbar_lower_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      !xbar_lower_lower_merges_routeFrom[0] ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      xbar_lower_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ;
  assign xbar_lower_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fi1
  assign xbar_lower_lower_merges_fi1_D_IN = xbar_lower_lower_lower_f_D_OUT ;
  assign xbar_lower_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	     !xbar_lower_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      xbar_lower_lower_merges_routeFrom[0] ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      !xbar_lower_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;
  assign xbar_lower_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fo
  always@(MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty or
	  xbar_lower_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty or
	  xbar_lower_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1:
	  xbar_lower_lower_merges_fo_D_IN =
	      MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty:
	  xbar_lower_lower_merges_fo_D_IN = xbar_lower_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty:
	  xbar_lower_lower_merges_fo_D_IN = xbar_lower_lower_merges_fi1_D_OUT;
      default: xbar_lower_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;
  assign xbar_lower_lower_merges_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_2 ;
  assign xbar_lower_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_lower_upper_f
  assign xbar_lower_lower_upper_f_D_IN = 610'h0 ;
  assign xbar_lower_lower_upper_f_ENQ = 1'b0 ;
  assign xbar_lower_lower_upper_f_DEQ = WILL_FIRE_RL_xbar_lower_lower_route ;
  assign xbar_lower_lower_upper_f_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi0
  assign xbar_lower_merges_1_fi0_D_IN = xbar_lower_upper_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     !xbar_lower_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ;
  assign xbar_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi1
  assign xbar_lower_merges_1_fi1_D_IN = xbar_lower_lower_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_3 &&
	     !xbar_lower_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fo
  always@(MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  xbar_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty or
	  xbar_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_merges_1_fo_D_IN =
	      MUX_xbar_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi1_D_OUT;
      default: xbar_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fo_DEQ =
	     xbar_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi0_FULL_N :
		xbar_merges_1_fi1_FULL_N) ;
  assign xbar_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fi0
  assign xbar_lower_merges_2_fi0_D_IN = xbar_lower_lower_merges_fo_D_OUT ;
  assign xbar_lower_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_2 &&
	     xbar_lower_lower_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      !xbar_lower_merges_2_routeFrom[0] ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      xbar_lower_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ;
  assign xbar_lower_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fi1
  assign xbar_lower_merges_2_fi1_D_IN = xbar_lower_upper_merges_fo_D_OUT ;
  assign xbar_lower_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route &&
	     xbar_lower_upper_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      xbar_lower_merges_2_routeFrom[0] ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      !xbar_lower_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;
  assign xbar_lower_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fo
  always@(MUX_xbar_lower_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty or
	  xbar_lower_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty or
	  xbar_lower_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_2_fo_enq_1__SEL_1:
	  xbar_lower_merges_2_fo_D_IN =
	      MUX_xbar_lower_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty:
	  xbar_lower_merges_2_fo_D_IN = xbar_lower_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty:
	  xbar_lower_merges_2_fo_D_IN = xbar_lower_merges_2_fi1_D_OUT;
      default: xbar_lower_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] ||
	      IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;
  assign xbar_lower_merges_2_fo_DEQ = WILL_FIRE_RL_xbar_route_6 ;
  assign xbar_lower_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fi0
  assign xbar_lower_merges_3_fi0_D_IN = xbar_lower_lower_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_3 &&
	     xbar_lower_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      !xbar_lower_merges_3_routeFrom[0] ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      xbar_lower_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ;
  assign xbar_lower_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fi1
  assign xbar_lower_merges_3_fi1_D_IN = xbar_lower_upper_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     xbar_lower_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      xbar_lower_merges_3_routeFrom[0] ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      !xbar_lower_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;
  assign xbar_lower_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fo
  always@(MUX_xbar_lower_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty or
	  xbar_lower_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty or
	  xbar_lower_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_3_fo_enq_1__SEL_1:
	  xbar_lower_merges_3_fo_D_IN =
	      MUX_xbar_lower_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty:
	  xbar_lower_merges_3_fo_D_IN = xbar_lower_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty:
	  xbar_lower_merges_3_fo_D_IN = xbar_lower_merges_3_fi1_D_OUT;
      default: xbar_lower_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] ||
	      IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;
  assign xbar_lower_merges_3_fo_DEQ = WILL_FIRE_RL_xbar_route_7 ;
  assign xbar_lower_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi0
  assign xbar_lower_merges_fi0_D_IN = xbar_lower_upper_merges_fo_D_OUT ;
  assign xbar_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route &&
	     !xbar_lower_upper_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ;
  assign xbar_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi1
  assign xbar_lower_merges_fi1_D_IN = xbar_lower_lower_merges_fo_D_OUT ;
  assign xbar_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_2 &&
	     !xbar_lower_lower_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fo
  always@(MUX_xbar_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  xbar_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty or
	  xbar_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fo_enq_1__SEL_1:
	  xbar_lower_merges_fo_D_IN = MUX_xbar_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi1_D_OUT;
      default: xbar_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fo_DEQ =
	     xbar_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi0_FULL_N :
		xbar_merges_fi1_FULL_N) ;
  assign xbar_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_lower_f
  assign xbar_lower_upper_lower_f_D_IN = 610'h0 ;
  assign xbar_lower_upper_lower_f_ENQ = 1'b0 ;
  assign xbar_lower_upper_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 ;
  assign xbar_lower_upper_lower_f_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fi0
  assign xbar_lower_upper_merges_1_fi0_D_IN = xbar_lower_upper_lower_f_D_OUT ;
  assign xbar_lower_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	     xbar_lower_upper_lower_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      !xbar_lower_upper_merges_1_routeFrom[0] ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      xbar_lower_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ;
  assign xbar_lower_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fi1
  assign xbar_lower_upper_merges_1_fi1_D_IN = xbar_lower_upper_upper_f_D_OUT ;
  assign xbar_lower_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route &&
	     xbar_lower_upper_upper_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      xbar_lower_upper_merges_1_routeFrom[0] ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      !xbar_lower_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;
  assign xbar_lower_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fo
  always@(MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty or
	  xbar_lower_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty or
	  xbar_lower_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      xbar_lower_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      xbar_lower_upper_merges_1_fi1_D_OUT;
      default: xbar_lower_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;
  assign xbar_lower_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_1 ;
  assign xbar_lower_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fi0
  assign xbar_lower_upper_merges_fi0_D_IN = xbar_lower_upper_upper_f_D_OUT ;
  assign xbar_lower_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route &&
	     !xbar_lower_upper_upper_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      !xbar_lower_upper_merges_routeFrom[0] ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      xbar_lower_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ;
  assign xbar_lower_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fi1
  assign xbar_lower_upper_merges_fi1_D_IN = xbar_lower_upper_lower_f_D_OUT ;
  assign xbar_lower_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	     !xbar_lower_upper_lower_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      xbar_lower_upper_merges_routeFrom[0] ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      !xbar_lower_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;
  assign xbar_lower_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fo
  always@(MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty or
	  xbar_lower_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty or
	  xbar_lower_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1:
	  xbar_lower_upper_merges_fo_D_IN =
	      MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty:
	  xbar_lower_upper_merges_fo_D_IN = xbar_lower_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty:
	  xbar_lower_upper_merges_fo_D_IN = xbar_lower_upper_merges_fi1_D_OUT;
      default: xbar_lower_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;
  assign xbar_lower_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_lower_route ;
  assign xbar_lower_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_upper_f
  assign xbar_lower_upper_upper_f_D_IN =
	     input_queues_4_readServer_readData_get ;
  assign xbar_lower_upper_upper_f_ENQ =
	     input_queues_4_RDY_readServer_readData_get &&
	     xbar_lower_upper_upper_f_FULL_N ;
  assign xbar_lower_upper_upper_f_DEQ = WILL_FIRE_RL_xbar_lower_upper_route ;
  assign xbar_lower_upper_upper_f_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi0
  assign xbar_merges_1_fi0_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && !xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ;
  assign xbar_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi1
  assign xbar_merges_1_fi1_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && !xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_1_fo
  always@(MUX_xbar_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  xbar_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty or xbar_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fo_enq_1__SEL_1:
	  xbar_merges_1_fo_D_IN = MUX_xbar_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi1_D_OUT;
      default: xbar_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fo_DEQ =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign xbar_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi0
  assign xbar_merges_2_fi0_D_IN = xbar_upper_merges_2_fo_D_OUT ;
  assign xbar_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && !xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ;
  assign xbar_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi1
  assign xbar_merges_2_fi1_D_IN = xbar_lower_merges_2_fo_D_OUT ;
  assign xbar_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && !xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_2_fo
  always@(MUX_xbar_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  xbar_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty or xbar_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fo_enq_1__SEL_1:
	  xbar_merges_2_fo_D_IN = MUX_xbar_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi1_D_OUT;
      default: xbar_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fo_DEQ =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign xbar_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi0
  assign xbar_merges_3_fi0_D_IN = xbar_upper_merges_3_fo_D_OUT ;
  assign xbar_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && !xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ;
  assign xbar_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi1
  assign xbar_merges_3_fi1_D_IN = xbar_lower_merges_3_fo_D_OUT ;
  assign xbar_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && !xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_3_fo
  always@(MUX_xbar_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  xbar_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty or xbar_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fo_enq_1__SEL_1:
	  xbar_merges_3_fo_D_IN = MUX_xbar_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi1_D_OUT;
      default: xbar_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fo_DEQ =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign xbar_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_merges_4_fi0
  assign xbar_merges_4_fi0_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_4_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580] ;
  assign xbar_merges_4_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] && !xbar_merges_4_routeFrom[0] ||
	      !xbar_merges_4_routeFrom[1] && xbar_merges_4_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ;
  assign xbar_merges_4_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_4_fi1
  assign xbar_merges_4_fi1_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_4_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580] ;
  assign xbar_merges_4_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] && xbar_merges_4_routeFrom[0] ||
	      !xbar_merges_4_routeFrom[1] && !xbar_merges_4_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;
  assign xbar_merges_4_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_4_fo
  always@(MUX_xbar_merges_4_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_4_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_4_fi1_is_empty or
	  xbar_merges_4_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_4_fi0_is_empty or xbar_merges_4_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_4_fo_enq_1__SEL_1:
	  xbar_merges_4_fo_D_IN = MUX_xbar_merges_4_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_4_fi1_is_empty:
	  xbar_merges_4_fo_D_IN = xbar_merges_4_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_4_fi0_is_empty:
	  xbar_merges_4_fo_D_IN = xbar_merges_4_fi1_D_OUT;
      default: xbar_merges_4_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_4_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] ||
	      IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304) ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;
  assign xbar_merges_4_fo_DEQ =
	     output_queues_4_RDY_writeServer_enq && xbar_merges_4_fo_EMPTY_N ;
  assign xbar_merges_4_fo_CLR = 1'b0 ;

  // submodule xbar_merges_5_fi0
  assign xbar_merges_5_fi0_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_5_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_5_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] && !xbar_merges_5_routeFrom[0] ||
	      !xbar_merges_5_routeFrom[1] && xbar_merges_5_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ;
  assign xbar_merges_5_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_5_fi1
  assign xbar_merges_5_fi1_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_5_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_5_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] && xbar_merges_5_routeFrom[0] ||
	      !xbar_merges_5_routeFrom[1] && !xbar_merges_5_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;
  assign xbar_merges_5_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_5_fo
  always@(MUX_xbar_merges_5_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_5_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_5_fi1_is_empty or
	  xbar_merges_5_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_5_fi0_is_empty or xbar_merges_5_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_5_fo_enq_1__SEL_1:
	  xbar_merges_5_fo_D_IN = MUX_xbar_merges_5_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_5_fi1_is_empty:
	  xbar_merges_5_fo_D_IN = xbar_merges_5_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_5_fi0_is_empty:
	  xbar_merges_5_fo_D_IN = xbar_merges_5_fi1_D_OUT;
      default: xbar_merges_5_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_5_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] ||
	      IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379) ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;
  assign xbar_merges_5_fo_DEQ =
	     output_queues_5_RDY_writeServer_enq && xbar_merges_5_fo_EMPTY_N ;
  assign xbar_merges_5_fo_CLR = 1'b0 ;

  // submodule xbar_merges_6_fi0
  assign xbar_merges_6_fi0_D_IN = xbar_lower_merges_2_fo_D_OUT ;
  assign xbar_merges_6_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_6_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] && !xbar_merges_6_routeFrom[0] ||
	      !xbar_merges_6_routeFrom[1] && xbar_merges_6_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ;
  assign xbar_merges_6_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_6_fi1
  assign xbar_merges_6_fi1_D_IN = xbar_upper_merges_2_fo_D_OUT ;
  assign xbar_merges_6_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_6_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] && xbar_merges_6_routeFrom[0] ||
	      !xbar_merges_6_routeFrom[1] && !xbar_merges_6_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;
  assign xbar_merges_6_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_6_fo
  always@(MUX_xbar_merges_6_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_6_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_6_fi1_is_empty or
	  xbar_merges_6_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_6_fi0_is_empty or xbar_merges_6_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_6_fo_enq_1__SEL_1:
	  xbar_merges_6_fo_D_IN = MUX_xbar_merges_6_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_6_fi1_is_empty:
	  xbar_merges_6_fo_D_IN = xbar_merges_6_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_6_fi0_is_empty:
	  xbar_merges_6_fo_D_IN = xbar_merges_6_fi1_D_OUT;
      default: xbar_merges_6_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_6_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] ||
	      IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454) ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;
  assign xbar_merges_6_fo_DEQ =
	     output_queues_6_RDY_writeServer_enq && xbar_merges_6_fo_EMPTY_N ;
  assign xbar_merges_6_fo_CLR = 1'b0 ;

  // submodule xbar_merges_7_fi0
  assign xbar_merges_7_fi0_D_IN = xbar_lower_merges_3_fo_D_OUT ;
  assign xbar_merges_7_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_7_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] && !xbar_merges_7_routeFrom[0] ||
	      !xbar_merges_7_routeFrom[1] && xbar_merges_7_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ;
  assign xbar_merges_7_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_7_fi1
  assign xbar_merges_7_fi1_D_IN = xbar_upper_merges_3_fo_D_OUT ;
  assign xbar_merges_7_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_7_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] && xbar_merges_7_routeFrom[0] ||
	      !xbar_merges_7_routeFrom[1] && !xbar_merges_7_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;
  assign xbar_merges_7_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_7_fo
  always@(MUX_xbar_merges_7_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_7_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_7_fi1_is_empty or
	  xbar_merges_7_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_7_fi0_is_empty or xbar_merges_7_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_7_fo_enq_1__SEL_1:
	  xbar_merges_7_fo_D_IN = MUX_xbar_merges_7_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_7_fi1_is_empty:
	  xbar_merges_7_fo_D_IN = xbar_merges_7_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_7_fi0_is_empty:
	  xbar_merges_7_fo_D_IN = xbar_merges_7_fi1_D_OUT;
      default: xbar_merges_7_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_7_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] ||
	      IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529) ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;
  assign xbar_merges_7_fo_DEQ =
	     output_queues_7_RDY_writeServer_enq && xbar_merges_7_fo_EMPTY_N ;
  assign xbar_merges_7_fo_CLR = 1'b0 ;

  // submodule xbar_merges_fi0
  assign xbar_merges_fi0_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580] ;
  assign xbar_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && !xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ;
  assign xbar_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_fi1
  assign xbar_merges_fi1_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580] ;
  assign xbar_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && !xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_fo
  always@(MUX_xbar_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  xbar_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty or xbar_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fo_enq_1__SEL_1:
	  xbar_merges_fo_D_IN = MUX_xbar_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi1_D_OUT;
      default: xbar_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fo_DEQ =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign xbar_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_lower_f
  assign xbar_upper_lower_lower_f_D_IN =
	     input_queues_3_readServer_readData_get ;
  assign xbar_upper_lower_lower_f_ENQ =
	     input_queues_3_RDY_readServer_readData_get &&
	     xbar_upper_lower_lower_f_FULL_N ;
  assign xbar_upper_lower_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 ;
  assign xbar_upper_lower_lower_f_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fi0
  assign xbar_upper_lower_merges_1_fi0_D_IN = xbar_upper_lower_lower_f_D_OUT ;
  assign xbar_upper_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	     xbar_upper_lower_lower_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      !xbar_upper_lower_merges_1_routeFrom[0] ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      xbar_upper_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ;
  assign xbar_upper_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fi1
  assign xbar_upper_lower_merges_1_fi1_D_IN = xbar_upper_lower_upper_f_D_OUT ;
  assign xbar_upper_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route &&
	     xbar_upper_lower_upper_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      xbar_upper_lower_merges_1_routeFrom[0] ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      !xbar_upper_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;
  assign xbar_upper_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fo
  always@(MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty or
	  xbar_upper_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty or
	  xbar_upper_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      xbar_upper_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      xbar_upper_lower_merges_1_fi1_D_OUT;
      default: xbar_upper_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;
  assign xbar_upper_lower_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_3 ;
  assign xbar_upper_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fi0
  assign xbar_upper_lower_merges_fi0_D_IN = xbar_upper_lower_upper_f_D_OUT ;
  assign xbar_upper_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route &&
	     !xbar_upper_lower_upper_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      !xbar_upper_lower_merges_routeFrom[0] ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      xbar_upper_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ;
  assign xbar_upper_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fi1
  assign xbar_upper_lower_merges_fi1_D_IN = xbar_upper_lower_lower_f_D_OUT ;
  assign xbar_upper_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	     !xbar_upper_lower_lower_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      xbar_upper_lower_merges_routeFrom[0] ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      !xbar_upper_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;
  assign xbar_upper_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fo
  always@(MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty or
	  xbar_upper_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty or
	  xbar_upper_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1:
	  xbar_upper_lower_merges_fo_D_IN =
	      MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty:
	  xbar_upper_lower_merges_fo_D_IN = xbar_upper_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty:
	  xbar_upper_lower_merges_fo_D_IN = xbar_upper_lower_merges_fi1_D_OUT;
      default: xbar_upper_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;
  assign xbar_upper_lower_merges_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_2 ;
  assign xbar_upper_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_upper_f
  assign xbar_upper_lower_upper_f_D_IN =
	     input_queues_2_readServer_readData_get ;
  assign xbar_upper_lower_upper_f_ENQ =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_upper_lower_upper_f_FULL_N ;
  assign xbar_upper_lower_upper_f_DEQ = WILL_FIRE_RL_xbar_upper_lower_route ;
  assign xbar_upper_lower_upper_f_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi0
  assign xbar_upper_merges_1_fi0_D_IN = xbar_upper_upper_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     !xbar_upper_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ;
  assign xbar_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi1
  assign xbar_upper_merges_1_fi1_D_IN = xbar_upper_lower_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_3 &&
	     !xbar_upper_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fo
  always@(MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  xbar_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty or
	  xbar_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_merges_1_fo_D_IN =
	      MUX_xbar_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi1_D_OUT;
      default: xbar_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_route_1 ;
  assign xbar_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fi0
  assign xbar_upper_merges_2_fi0_D_IN = xbar_upper_lower_merges_fo_D_OUT ;
  assign xbar_upper_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_2 &&
	     xbar_upper_lower_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      !xbar_upper_merges_2_routeFrom[0] ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      xbar_upper_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ;
  assign xbar_upper_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fi1
  assign xbar_upper_merges_2_fi1_D_IN = xbar_upper_upper_merges_fo_D_OUT ;
  assign xbar_upper_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route &&
	     xbar_upper_upper_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      xbar_upper_merges_2_routeFrom[0] ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      !xbar_upper_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;
  assign xbar_upper_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fo
  always@(MUX_xbar_upper_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty or
	  xbar_upper_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty or
	  xbar_upper_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_2_fo_enq_1__SEL_1:
	  xbar_upper_merges_2_fo_D_IN =
	      MUX_xbar_upper_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty:
	  xbar_upper_merges_2_fo_D_IN = xbar_upper_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty:
	  xbar_upper_merges_2_fo_D_IN = xbar_upper_merges_2_fi1_D_OUT;
      default: xbar_upper_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] ||
	      IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;
  assign xbar_upper_merges_2_fo_DEQ = WILL_FIRE_RL_xbar_route_2 ;
  assign xbar_upper_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fi0
  assign xbar_upper_merges_3_fi0_D_IN = xbar_upper_lower_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_3 &&
	     xbar_upper_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      !xbar_upper_merges_3_routeFrom[0] ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      xbar_upper_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ;
  assign xbar_upper_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fi1
  assign xbar_upper_merges_3_fi1_D_IN = xbar_upper_upper_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     xbar_upper_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      xbar_upper_merges_3_routeFrom[0] ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      !xbar_upper_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;
  assign xbar_upper_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fo
  always@(MUX_xbar_upper_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty or
	  xbar_upper_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty or
	  xbar_upper_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_3_fo_enq_1__SEL_1:
	  xbar_upper_merges_3_fo_D_IN =
	      MUX_xbar_upper_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty:
	  xbar_upper_merges_3_fo_D_IN = xbar_upper_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty:
	  xbar_upper_merges_3_fo_D_IN = xbar_upper_merges_3_fi1_D_OUT;
      default: xbar_upper_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] ||
	      IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;
  assign xbar_upper_merges_3_fo_DEQ = WILL_FIRE_RL_xbar_route_3 ;
  assign xbar_upper_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi0
  assign xbar_upper_merges_fi0_D_IN = xbar_upper_upper_merges_fo_D_OUT ;
  assign xbar_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route &&
	     !xbar_upper_upper_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ;
  assign xbar_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi1
  assign xbar_upper_merges_fi1_D_IN = xbar_upper_lower_merges_fo_D_OUT ;
  assign xbar_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_2 &&
	     !xbar_upper_lower_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fo
  always@(MUX_xbar_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  xbar_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty or
	  xbar_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fo_enq_1__SEL_1:
	  xbar_upper_merges_fo_D_IN = MUX_xbar_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi1_D_OUT;
      default: xbar_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_route ;
  assign xbar_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_lower_f
  assign xbar_upper_upper_lower_f_D_IN =
	     input_queues_1_readServer_readData_get ;
  assign xbar_upper_upper_lower_f_ENQ =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_upper_lower_f_FULL_N ;
  assign xbar_upper_upper_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 ;
  assign xbar_upper_upper_lower_f_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fi0
  assign xbar_upper_upper_merges_1_fi0_D_IN = xbar_upper_upper_lower_f_D_OUT ;
  assign xbar_upper_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	     xbar_upper_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      xbar_upper_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ;
  assign xbar_upper_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fi1
  assign xbar_upper_upper_merges_1_fi1_D_IN = xbar_upper_upper_upper_f_D_OUT ;
  assign xbar_upper_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route &&
	     xbar_upper_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      xbar_upper_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fo
  always@(MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty or
	  xbar_upper_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty or
	  xbar_upper_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      xbar_upper_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      xbar_upper_upper_merges_1_fi1_D_OUT;
      default: xbar_upper_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_1 ;
  assign xbar_upper_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fi0
  assign xbar_upper_upper_merges_fi0_D_IN = xbar_upper_upper_upper_f_D_OUT ;
  assign xbar_upper_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route &&
	     !xbar_upper_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      !xbar_upper_upper_merges_routeFrom[0] ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      xbar_upper_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ;
  assign xbar_upper_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fi1
  assign xbar_upper_upper_merges_fi1_D_IN = xbar_upper_upper_lower_f_D_OUT ;
  assign xbar_upper_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	     !xbar_upper_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      xbar_upper_upper_merges_routeFrom[0] ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      !xbar_upper_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;
  assign xbar_upper_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fo
  always@(MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty or
	  xbar_upper_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty or
	  xbar_upper_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1:
	  xbar_upper_upper_merges_fo_D_IN =
	      MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty:
	  xbar_upper_upper_merges_fo_D_IN = xbar_upper_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty:
	  xbar_upper_upper_merges_fo_D_IN = xbar_upper_upper_merges_fi1_D_OUT;
      default: xbar_upper_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;
  assign xbar_upper_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_upper_route ;
  assign xbar_upper_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_upper_f
  assign xbar_upper_upper_upper_f_D_IN =
	     input_queues_0_readServer_readData_get ;
  assign xbar_upper_upper_upper_f_ENQ =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_upper_f_FULL_N ;
  assign xbar_upper_upper_upper_f_DEQ = WILL_FIRE_RL_xbar_upper_upper_route ;
  assign xbar_upper_upper_upper_f_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 =
	     ringToMac_0_fifoTxData_read_block ? mask__h96596 : mask__h96487 ;
  assign IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 =
	     ringToMac_1_fifoTxData_read_block ?
	       mask__h115230 :
	       mask__h115121 ;
  assign IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 =
	     ringToMac_2_fifoTxData_read_block ?
	       mask__h133864 :
	       mask__h133755 ;
  assign IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 =
	     ringToMac_3_fifoTxData_read_block ?
	       mask__h152498 :
	       mask__h152389 ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5549 =
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		!xbar_lower_lower_merges_1_fi0_D_OUT[1] :
		!xbar_lower_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5550 =
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		xbar_lower_lower_merges_1_fi0_EMPTY_N :
		xbar_lower_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5549 ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563 =
	     xbar_lower_lower_merges_1_fi0HasPrio ?
	       xbar_lower_lower_merges_1_fi0_D_OUT[1] :
	       xbar_lower_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5575 =
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563 &&
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		!xbar_lower_lower_merges_1_fi0_D_OUT[0] :
		!xbar_lower_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5580 =
	     xbar_lower_lower_merges_1_fi0HasPrio ?
	       xbar_lower_lower_merges_1_fi0_D_OUT[0] :
	       xbar_lower_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_1_routeFrom_537_BIT_ETC___d5570 =
	     xbar_lower_lower_merges_1_routeFrom[0] ?
	       xbar_lower_lower_merges_1_fi1_D_OUT[0] :
	       xbar_lower_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5474 =
	     (xbar_lower_lower_merges_fi0HasPrio ?
		!xbar_lower_lower_merges_fi0_D_OUT[1] :
		!xbar_lower_lower_merges_fi1_D_OUT[1]) ||
	     xbar_lower_lower_merges_fo_FULL_N ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5475 =
	     (xbar_lower_lower_merges_fi0HasPrio ?
		xbar_lower_lower_merges_fi0_EMPTY_N :
		xbar_lower_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5474 ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488 =
	     xbar_lower_lower_merges_fi0HasPrio ?
	       xbar_lower_lower_merges_fi0_D_OUT[1] :
	       xbar_lower_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5500 =
	     IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488 &&
	     (xbar_lower_lower_merges_fi0HasPrio ?
		!xbar_lower_lower_merges_fi0_D_OUT[0] :
		!xbar_lower_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5505 =
	     xbar_lower_lower_merges_fi0HasPrio ?
	       xbar_lower_lower_merges_fi0_D_OUT[0] :
	       xbar_lower_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_routeFrom_462_BIT_0_ETC___d5495 =
	     xbar_lower_lower_merges_routeFrom[0] ?
	       xbar_lower_lower_merges_fi1_D_OUT[0] :
	       xbar_lower_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_NOT_ETC___d5721 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[1] :
		!xbar_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5722 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		xbar_lower_merges_1_fi0_EMPTY_N :
		xbar_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_NOT_ETC___d5721 ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[1] :
	       xbar_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5747 =
	     IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735 &&
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[0] :
		!xbar_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5752 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[0] :
	       xbar_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_1_routeFrom_709_BIT_0_711_ETC___d5742 =
	     xbar_lower_merges_1_routeFrom[0] ?
	       xbar_lower_merges_1_fi1_D_OUT[0] :
	       xbar_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_NOT_ETC___d5796 =
	     (xbar_lower_merges_2_fi0HasPrio ?
		!xbar_lower_merges_2_fi0_D_OUT[1] :
		!xbar_lower_merges_2_fi1_D_OUT[1]) ||
	     xbar_lower_merges_2_fo_FULL_N ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5797 =
	     (xbar_lower_merges_2_fi0HasPrio ?
		xbar_lower_merges_2_fi0_EMPTY_N :
		xbar_lower_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_NOT_ETC___d5796 ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810 =
	     xbar_lower_merges_2_fi0HasPrio ?
	       xbar_lower_merges_2_fi0_D_OUT[1] :
	       xbar_lower_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5822 =
	     IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810 &&
	     (xbar_lower_merges_2_fi0HasPrio ?
		!xbar_lower_merges_2_fi0_D_OUT[0] :
		!xbar_lower_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5827 =
	     xbar_lower_merges_2_fi0HasPrio ?
	       xbar_lower_merges_2_fi0_D_OUT[0] :
	       xbar_lower_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_2_routeFrom_784_BIT_0_786_ETC___d5817 =
	     xbar_lower_merges_2_routeFrom[0] ?
	       xbar_lower_merges_2_fi1_D_OUT[0] :
	       xbar_lower_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_NOT_ETC___d5871 =
	     (xbar_lower_merges_3_fi0HasPrio ?
		!xbar_lower_merges_3_fi0_D_OUT[1] :
		!xbar_lower_merges_3_fi1_D_OUT[1]) ||
	     xbar_lower_merges_3_fo_FULL_N ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5872 =
	     (xbar_lower_merges_3_fi0HasPrio ?
		xbar_lower_merges_3_fi0_EMPTY_N :
		xbar_lower_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_NOT_ETC___d5871 ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885 =
	     xbar_lower_merges_3_fi0HasPrio ?
	       xbar_lower_merges_3_fi0_D_OUT[1] :
	       xbar_lower_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5897 =
	     IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885 &&
	     (xbar_lower_merges_3_fi0HasPrio ?
		!xbar_lower_merges_3_fi0_D_OUT[0] :
		!xbar_lower_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5902 =
	     xbar_lower_merges_3_fi0HasPrio ?
	       xbar_lower_merges_3_fi0_D_OUT[0] :
	       xbar_lower_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_3_routeFrom_859_BIT_0_861_ETC___d5892 =
	     xbar_lower_merges_3_routeFrom[0] ?
	       xbar_lower_merges_3_fi1_D_OUT[0] :
	       xbar_lower_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_fi0HasPrio_639_THEN_NOT_x_ETC___d5646 =
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[1] :
		!xbar_lower_merges_fi1_D_OUT[1]) ||
	     xbar_lower_merges_fo_FULL_N ;
  assign IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5647 =
	     (xbar_lower_merges_fi0HasPrio ?
		xbar_lower_merges_fi0_EMPTY_N :
		xbar_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_fi0HasPrio_639_THEN_NOT_x_ETC___d5646 ;
  assign IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[1] :
	       xbar_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5672 =
	     IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660 &&
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[0] :
		!xbar_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5677 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[0] :
	       xbar_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_routeFrom_634_BIT_0_636_T_ETC___d5667 =
	     xbar_lower_merges_routeFrom[0] ?
	       xbar_lower_merges_fi1_D_OUT[0] :
	       xbar_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5377 =
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		!xbar_lower_upper_merges_1_fi0_D_OUT[1] :
		!xbar_lower_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5378 =
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		xbar_lower_upper_merges_1_fi0_EMPTY_N :
		xbar_lower_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5377 ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391 =
	     xbar_lower_upper_merges_1_fi0HasPrio ?
	       xbar_lower_upper_merges_1_fi0_D_OUT[1] :
	       xbar_lower_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5403 =
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391 &&
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		!xbar_lower_upper_merges_1_fi0_D_OUT[0] :
		!xbar_lower_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5408 =
	     xbar_lower_upper_merges_1_fi0HasPrio ?
	       xbar_lower_upper_merges_1_fi0_D_OUT[0] :
	       xbar_lower_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_1_routeFrom_365_BIT_ETC___d5398 =
	     xbar_lower_upper_merges_1_routeFrom[0] ?
	       xbar_lower_upper_merges_1_fi1_D_OUT[0] :
	       xbar_lower_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5302 =
	     (xbar_lower_upper_merges_fi0HasPrio ?
		!xbar_lower_upper_merges_fi0_D_OUT[1] :
		!xbar_lower_upper_merges_fi1_D_OUT[1]) ||
	     xbar_lower_upper_merges_fo_FULL_N ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5303 =
	     (xbar_lower_upper_merges_fi0HasPrio ?
		xbar_lower_upper_merges_fi0_EMPTY_N :
		xbar_lower_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5302 ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316 =
	     xbar_lower_upper_merges_fi0HasPrio ?
	       xbar_lower_upper_merges_fi0_D_OUT[1] :
	       xbar_lower_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5328 =
	     IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316 &&
	     (xbar_lower_upper_merges_fi0HasPrio ?
		!xbar_lower_upper_merges_fi0_D_OUT[0] :
		!xbar_lower_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5333 =
	     xbar_lower_upper_merges_fi0HasPrio ?
	       xbar_lower_upper_merges_fi0_D_OUT[0] :
	       xbar_lower_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_routeFrom_290_BIT_0_ETC___d5323 =
	     xbar_lower_upper_merges_routeFrom[0] ?
	       xbar_lower_upper_merges_fi1_D_OUT[0] :
	       xbar_lower_upper_merges_fi0_D_OUT[0] ;
  assign IF_xbar_merges_1_fi0HasPrio_058_THEN_NOT_xbar__ETC___d6065 =
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[1] :
		!xbar_merges_1_fi1_D_OUT[1]) ||
	     xbar_merges_1_fo_FULL_N ;
  assign IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6066 =
	     (xbar_merges_1_fi0HasPrio ?
		xbar_merges_1_fi0_EMPTY_N :
		xbar_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_merges_1_fi0HasPrio_058_THEN_NOT_xbar__ETC___d6065 ;
  assign IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[1] :
	       xbar_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6091 =
	     IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079 &&
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[0] :
		!xbar_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6096 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[0] :
	       xbar_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_merges_1_routeFrom_053_BIT_0_055_THEN__ETC___d6086 =
	     xbar_merges_1_routeFrom[0] ?
	       xbar_merges_1_fi1_D_OUT[0] :
	       xbar_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_merges_2_fi0HasPrio_133_THEN_NOT_xbar__ETC___d6140 =
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[1] :
		!xbar_merges_2_fi1_D_OUT[1]) ||
	     xbar_merges_2_fo_FULL_N ;
  assign IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6141 =
	     (xbar_merges_2_fi0HasPrio ?
		xbar_merges_2_fi0_EMPTY_N :
		xbar_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_merges_2_fi0HasPrio_133_THEN_NOT_xbar__ETC___d6140 ;
  assign IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[1] :
	       xbar_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6166 =
	     IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154 &&
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[0] :
		!xbar_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6171 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[0] :
	       xbar_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_merges_2_routeFrom_128_BIT_0_130_THEN__ETC___d6161 =
	     xbar_merges_2_routeFrom[0] ?
	       xbar_merges_2_fi1_D_OUT[0] :
	       xbar_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_merges_3_fi0HasPrio_208_THEN_NOT_xbar__ETC___d6215 =
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[1] :
		!xbar_merges_3_fi1_D_OUT[1]) ||
	     xbar_merges_3_fo_FULL_N ;
  assign IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6216 =
	     (xbar_merges_3_fi0HasPrio ?
		xbar_merges_3_fi0_EMPTY_N :
		xbar_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_merges_3_fi0HasPrio_208_THEN_NOT_xbar__ETC___d6215 ;
  assign IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[1] :
	       xbar_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6241 =
	     IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229 &&
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[0] :
		!xbar_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6246 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[0] :
	       xbar_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_merges_3_routeFrom_203_BIT_0_205_THEN__ETC___d6236 =
	     xbar_merges_3_routeFrom[0] ?
	       xbar_merges_3_fi1_D_OUT[0] :
	       xbar_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_merges_4_fi0HasPrio_283_THEN_NOT_xbar__ETC___d6290 =
	     (xbar_merges_4_fi0HasPrio ?
		!xbar_merges_4_fi0_D_OUT[1] :
		!xbar_merges_4_fi1_D_OUT[1]) ||
	     xbar_merges_4_fo_FULL_N ;
  assign IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6291 =
	     (xbar_merges_4_fi0HasPrio ?
		xbar_merges_4_fi0_EMPTY_N :
		xbar_merges_4_fi1_EMPTY_N) &&
	     IF_xbar_merges_4_fi0HasPrio_283_THEN_NOT_xbar__ETC___d6290 ;
  assign IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304 =
	     xbar_merges_4_fi0HasPrio ?
	       xbar_merges_4_fi0_D_OUT[1] :
	       xbar_merges_4_fi1_D_OUT[1] ;
  assign IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6316 =
	     IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304 &&
	     (xbar_merges_4_fi0HasPrio ?
		!xbar_merges_4_fi0_D_OUT[0] :
		!xbar_merges_4_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6321 =
	     xbar_merges_4_fi0HasPrio ?
	       xbar_merges_4_fi0_D_OUT[0] :
	       xbar_merges_4_fi1_D_OUT[0] ;
  assign IF_xbar_merges_4_routeFrom_278_BIT_0_280_THEN__ETC___d6311 =
	     xbar_merges_4_routeFrom[0] ?
	       xbar_merges_4_fi1_D_OUT[0] :
	       xbar_merges_4_fi0_D_OUT[0] ;
  assign IF_xbar_merges_5_fi0HasPrio_358_THEN_NOT_xbar__ETC___d6365 =
	     (xbar_merges_5_fi0HasPrio ?
		!xbar_merges_5_fi0_D_OUT[1] :
		!xbar_merges_5_fi1_D_OUT[1]) ||
	     xbar_merges_5_fo_FULL_N ;
  assign IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6366 =
	     (xbar_merges_5_fi0HasPrio ?
		xbar_merges_5_fi0_EMPTY_N :
		xbar_merges_5_fi1_EMPTY_N) &&
	     IF_xbar_merges_5_fi0HasPrio_358_THEN_NOT_xbar__ETC___d6365 ;
  assign IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379 =
	     xbar_merges_5_fi0HasPrio ?
	       xbar_merges_5_fi0_D_OUT[1] :
	       xbar_merges_5_fi1_D_OUT[1] ;
  assign IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6391 =
	     IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379 &&
	     (xbar_merges_5_fi0HasPrio ?
		!xbar_merges_5_fi0_D_OUT[0] :
		!xbar_merges_5_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6396 =
	     xbar_merges_5_fi0HasPrio ?
	       xbar_merges_5_fi0_D_OUT[0] :
	       xbar_merges_5_fi1_D_OUT[0] ;
  assign IF_xbar_merges_5_routeFrom_353_BIT_0_355_THEN__ETC___d6386 =
	     xbar_merges_5_routeFrom[0] ?
	       xbar_merges_5_fi1_D_OUT[0] :
	       xbar_merges_5_fi0_D_OUT[0] ;
  assign IF_xbar_merges_6_fi0HasPrio_433_THEN_NOT_xbar__ETC___d6440 =
	     (xbar_merges_6_fi0HasPrio ?
		!xbar_merges_6_fi0_D_OUT[1] :
		!xbar_merges_6_fi1_D_OUT[1]) ||
	     xbar_merges_6_fo_FULL_N ;
  assign IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6441 =
	     (xbar_merges_6_fi0HasPrio ?
		xbar_merges_6_fi0_EMPTY_N :
		xbar_merges_6_fi1_EMPTY_N) &&
	     IF_xbar_merges_6_fi0HasPrio_433_THEN_NOT_xbar__ETC___d6440 ;
  assign IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454 =
	     xbar_merges_6_fi0HasPrio ?
	       xbar_merges_6_fi0_D_OUT[1] :
	       xbar_merges_6_fi1_D_OUT[1] ;
  assign IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6466 =
	     IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454 &&
	     (xbar_merges_6_fi0HasPrio ?
		!xbar_merges_6_fi0_D_OUT[0] :
		!xbar_merges_6_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6471 =
	     xbar_merges_6_fi0HasPrio ?
	       xbar_merges_6_fi0_D_OUT[0] :
	       xbar_merges_6_fi1_D_OUT[0] ;
  assign IF_xbar_merges_6_routeFrom_428_BIT_0_430_THEN__ETC___d6461 =
	     xbar_merges_6_routeFrom[0] ?
	       xbar_merges_6_fi1_D_OUT[0] :
	       xbar_merges_6_fi0_D_OUT[0] ;
  assign IF_xbar_merges_7_fi0HasPrio_508_THEN_NOT_xbar__ETC___d6515 =
	     (xbar_merges_7_fi0HasPrio ?
		!xbar_merges_7_fi0_D_OUT[1] :
		!xbar_merges_7_fi1_D_OUT[1]) ||
	     xbar_merges_7_fo_FULL_N ;
  assign IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6516 =
	     (xbar_merges_7_fi0HasPrio ?
		xbar_merges_7_fi0_EMPTY_N :
		xbar_merges_7_fi1_EMPTY_N) &&
	     IF_xbar_merges_7_fi0HasPrio_508_THEN_NOT_xbar__ETC___d6515 ;
  assign IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529 =
	     xbar_merges_7_fi0HasPrio ?
	       xbar_merges_7_fi0_D_OUT[1] :
	       xbar_merges_7_fi1_D_OUT[1] ;
  assign IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6541 =
	     IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529 &&
	     (xbar_merges_7_fi0HasPrio ?
		!xbar_merges_7_fi0_D_OUT[0] :
		!xbar_merges_7_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6546 =
	     xbar_merges_7_fi0HasPrio ?
	       xbar_merges_7_fi0_D_OUT[0] :
	       xbar_merges_7_fi1_D_OUT[0] ;
  assign IF_xbar_merges_7_routeFrom_503_BIT_0_505_THEN__ETC___d6536 =
	     xbar_merges_7_routeFrom[0] ?
	       xbar_merges_7_fi1_D_OUT[0] :
	       xbar_merges_7_fi0_D_OUT[0] ;
  assign IF_xbar_merges_fi0HasPrio_983_THEN_NOT_xbar_me_ETC___d5990 =
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[1] :
		!xbar_merges_fi1_D_OUT[1]) ||
	     xbar_merges_fo_FULL_N ;
  assign IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d5991 =
	     (xbar_merges_fi0HasPrio ?
		xbar_merges_fi0_EMPTY_N :
		xbar_merges_fi1_EMPTY_N) &&
	     IF_xbar_merges_fi0HasPrio_983_THEN_NOT_xbar_me_ETC___d5990 ;
  assign IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[1] :
	       xbar_merges_fi1_D_OUT[1] ;
  assign IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6016 =
	     IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004 &&
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[0] :
		!xbar_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6021 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[0] :
	       xbar_merges_fi1_D_OUT[0] ;
  assign IF_xbar_merges_routeFrom_978_BIT_0_980_THEN_xb_ETC___d6011 =
	     xbar_merges_routeFrom[0] ?
	       xbar_merges_fi1_D_OUT[0] :
	       xbar_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4859 =
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		!xbar_upper_lower_merges_1_fi0_D_OUT[1] :
		!xbar_upper_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4860 =
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		xbar_upper_lower_merges_1_fi0_EMPTY_N :
		xbar_upper_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4859 ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873 =
	     xbar_upper_lower_merges_1_fi0HasPrio ?
	       xbar_upper_lower_merges_1_fi0_D_OUT[1] :
	       xbar_upper_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4885 =
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873 &&
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		!xbar_upper_lower_merges_1_fi0_D_OUT[0] :
		!xbar_upper_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4890 =
	     xbar_upper_lower_merges_1_fi0HasPrio ?
	       xbar_upper_lower_merges_1_fi0_D_OUT[0] :
	       xbar_upper_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_1_routeFrom_847_BIT_ETC___d4880 =
	     xbar_upper_lower_merges_1_routeFrom[0] ?
	       xbar_upper_lower_merges_1_fi1_D_OUT[0] :
	       xbar_upper_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4784 =
	     (xbar_upper_lower_merges_fi0HasPrio ?
		!xbar_upper_lower_merges_fi0_D_OUT[1] :
		!xbar_upper_lower_merges_fi1_D_OUT[1]) ||
	     xbar_upper_lower_merges_fo_FULL_N ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4785 =
	     (xbar_upper_lower_merges_fi0HasPrio ?
		xbar_upper_lower_merges_fi0_EMPTY_N :
		xbar_upper_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4784 ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798 =
	     xbar_upper_lower_merges_fi0HasPrio ?
	       xbar_upper_lower_merges_fi0_D_OUT[1] :
	       xbar_upper_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4810 =
	     IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798 &&
	     (xbar_upper_lower_merges_fi0HasPrio ?
		!xbar_upper_lower_merges_fi0_D_OUT[0] :
		!xbar_upper_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4815 =
	     xbar_upper_lower_merges_fi0HasPrio ?
	       xbar_upper_lower_merges_fi0_D_OUT[0] :
	       xbar_upper_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_routeFrom_772_BIT_0_ETC___d4805 =
	     xbar_upper_lower_merges_routeFrom[0] ?
	       xbar_upper_lower_merges_fi1_D_OUT[0] :
	       xbar_upper_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_NOT_ETC___d5031 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[1] :
		!xbar_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5032 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		xbar_upper_merges_1_fi0_EMPTY_N :
		xbar_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_NOT_ETC___d5031 ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[1] :
	       xbar_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5057 =
	     IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045 &&
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[0] :
		!xbar_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5062 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[0] :
	       xbar_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_routeFrom_019_BIT_0_021_ETC___d5052 =
	     xbar_upper_merges_1_routeFrom[0] ?
	       xbar_upper_merges_1_fi1_D_OUT[0] :
	       xbar_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_NOT_ETC___d5106 =
	     (xbar_upper_merges_2_fi0HasPrio ?
		!xbar_upper_merges_2_fi0_D_OUT[1] :
		!xbar_upper_merges_2_fi1_D_OUT[1]) ||
	     xbar_upper_merges_2_fo_FULL_N ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5107 =
	     (xbar_upper_merges_2_fi0HasPrio ?
		xbar_upper_merges_2_fi0_EMPTY_N :
		xbar_upper_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_NOT_ETC___d5106 ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120 =
	     xbar_upper_merges_2_fi0HasPrio ?
	       xbar_upper_merges_2_fi0_D_OUT[1] :
	       xbar_upper_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5132 =
	     IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120 &&
	     (xbar_upper_merges_2_fi0HasPrio ?
		!xbar_upper_merges_2_fi0_D_OUT[0] :
		!xbar_upper_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5137 =
	     xbar_upper_merges_2_fi0HasPrio ?
	       xbar_upper_merges_2_fi0_D_OUT[0] :
	       xbar_upper_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_2_routeFrom_094_BIT_0_096_ETC___d5127 =
	     xbar_upper_merges_2_routeFrom[0] ?
	       xbar_upper_merges_2_fi1_D_OUT[0] :
	       xbar_upper_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_NOT_ETC___d5181 =
	     (xbar_upper_merges_3_fi0HasPrio ?
		!xbar_upper_merges_3_fi0_D_OUT[1] :
		!xbar_upper_merges_3_fi1_D_OUT[1]) ||
	     xbar_upper_merges_3_fo_FULL_N ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5182 =
	     (xbar_upper_merges_3_fi0HasPrio ?
		xbar_upper_merges_3_fi0_EMPTY_N :
		xbar_upper_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_NOT_ETC___d5181 ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195 =
	     xbar_upper_merges_3_fi0HasPrio ?
	       xbar_upper_merges_3_fi0_D_OUT[1] :
	       xbar_upper_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5207 =
	     IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195 &&
	     (xbar_upper_merges_3_fi0HasPrio ?
		!xbar_upper_merges_3_fi0_D_OUT[0] :
		!xbar_upper_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5212 =
	     xbar_upper_merges_3_fi0HasPrio ?
	       xbar_upper_merges_3_fi0_D_OUT[0] :
	       xbar_upper_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_3_routeFrom_169_BIT_0_171_ETC___d5202 =
	     xbar_upper_merges_3_routeFrom[0] ?
	       xbar_upper_merges_3_fi1_D_OUT[0] :
	       xbar_upper_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_fi0HasPrio_949_THEN_NOT_x_ETC___d4956 =
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[1] :
		!xbar_upper_merges_fi1_D_OUT[1]) ||
	     xbar_upper_merges_fo_FULL_N ;
  assign IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4957 =
	     (xbar_upper_merges_fi0HasPrio ?
		xbar_upper_merges_fi0_EMPTY_N :
		xbar_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_fi0HasPrio_949_THEN_NOT_x_ETC___d4956 ;
  assign IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[1] :
	       xbar_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4982 =
	     IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970 &&
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[0] :
		!xbar_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4987 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[0] :
	       xbar_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_routeFrom_944_BIT_0_946_T_ETC___d4977 =
	     xbar_upper_merges_routeFrom[0] ?
	       xbar_upper_merges_fi1_D_OUT[0] :
	       xbar_upper_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4685 =
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		!xbar_upper_upper_merges_1_fi0_D_OUT[1] :
		!xbar_upper_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4686 =
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		xbar_upper_upper_merges_1_fi0_EMPTY_N :
		xbar_upper_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4685 ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699 =
	     xbar_upper_upper_merges_1_fi0HasPrio ?
	       xbar_upper_upper_merges_1_fi0_D_OUT[1] :
	       xbar_upper_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4711 =
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699 &&
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		!xbar_upper_upper_merges_1_fi0_D_OUT[0] :
		!xbar_upper_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4716 =
	     xbar_upper_upper_merges_1_fi0HasPrio ?
	       xbar_upper_upper_merges_1_fi0_D_OUT[0] :
	       xbar_upper_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_1_routeFrom_673_BIT_ETC___d4706 =
	     xbar_upper_upper_merges_1_routeFrom[0] ?
	       xbar_upper_upper_merges_1_fi1_D_OUT[0] :
	       xbar_upper_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4610 =
	     (xbar_upper_upper_merges_fi0HasPrio ?
		!xbar_upper_upper_merges_fi0_D_OUT[1] :
		!xbar_upper_upper_merges_fi1_D_OUT[1]) ||
	     xbar_upper_upper_merges_fo_FULL_N ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4611 =
	     (xbar_upper_upper_merges_fi0HasPrio ?
		xbar_upper_upper_merges_fi0_EMPTY_N :
		xbar_upper_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4610 ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624 =
	     xbar_upper_upper_merges_fi0HasPrio ?
	       xbar_upper_upper_merges_fi0_D_OUT[1] :
	       xbar_upper_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4636 =
	     IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624 &&
	     (xbar_upper_upper_merges_fi0HasPrio ?
		!xbar_upper_upper_merges_fi0_D_OUT[0] :
		!xbar_upper_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4641 =
	     xbar_upper_upper_merges_fi0HasPrio ?
	       xbar_upper_upper_merges_fi0_D_OUT[0] :
	       xbar_upper_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_routeFrom_598_BIT_0_ETC___d4631 =
	     xbar_upper_upper_merges_routeFrom[0] ?
	       xbar_upper_upper_merges_fi1_D_OUT[0] :
	       xbar_upper_upper_merges_fi0_D_OUT[0] ;
  assign NOT_IF_ringToMac_0_fifoTxData_read_block_339_T_ETC___d2434 =
	     IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377 !=
	     8'd0 &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354) ?
		   ringToMac_0_fifoTxData_block1[106] :
		   ringToMac_0_fifoTxData_block1[0]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345) ?
		   ringToMac_0_fifoTxData_block0[106] :
		   ringToMac_0_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_1_fifoTxData_read_block_783_T_ETC___d2878 =
	     IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821 !=
	     8'd0 &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798) ?
		   ringToMac_1_fifoTxData_block1[106] :
		   ringToMac_1_fifoTxData_block1[0]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789) ?
		   ringToMac_1_fifoTxData_block0[106] :
		   ringToMac_1_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_2_fifoTxData_read_block_227_T_ETC___d3322 =
	     IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265 !=
	     8'd0 &&
	     (ringToMac_2_fifoTxData_read_block ?
		((!ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240 &&
		  ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242) ?
		   ringToMac_2_fifoTxData_block1[106] :
		   ringToMac_2_fifoTxData_block1[0]) :
		((!ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231 &&
		  ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233) ?
		   ringToMac_2_fifoTxData_block0[106] :
		   ringToMac_2_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_3_fifoTxData_read_block_671_T_ETC___d3766 =
	     IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709 !=
	     8'd0 &&
	     (ringToMac_3_fifoTxData_read_block ?
		((!ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684 &&
		  ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686) ?
		   ringToMac_3_fifoTxData_block1[106] :
		   ringToMac_3_fifoTxData_block1[0]) :
		((!ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675 &&
		  ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677) ?
		   ringToMac_3_fifoTxData_block0[106] :
		   ringToMac_3_fifoTxData_block0[0])) ;
  assign NOT_ringToMac_0_fifoTxData_read_block_339_340__ETC___d2362 =
	     (!ringToMac_0_fifoTxData_read_block && x__h94234 != 2'd3 ||
	      ringToMac_0_fifoTxData_read_block && x__h94613 != 2'd3) &&
	     !ringToMac_0_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_0_fifoTxData_write_block_299_300_ETC___d2320 =
	     (!ringToMac_0_fifoTxData_write_block && x__h89986 == 2'd3 ||
	      ringToMac_0_fifoTxData_write_block && x__h90441 == 2'd3) &&
	     !ringToMac_0_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_read_block_783_784__ETC___d2806 =
	     (!ringToMac_1_fifoTxData_read_block && x__h112868 != 2'd3 ||
	      ringToMac_1_fifoTxData_read_block && x__h113247 != 2'd3) &&
	     !ringToMac_1_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_write_block_743_744_ETC___d2764 =
	     (!ringToMac_1_fifoTxData_write_block && x__h108623 == 2'd3 ||
	      ringToMac_1_fifoTxData_write_block && x__h109075 == 2'd3) &&
	     !ringToMac_1_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_2_fifoTxData_read_block_227_228__ETC___d3250 =
	     (!ringToMac_2_fifoTxData_read_block && x__h131502 != 2'd3 ||
	      ringToMac_2_fifoTxData_read_block && x__h131881 != 2'd3) &&
	     !ringToMac_2_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_2_fifoTxData_write_block_187_188_ETC___d3208 =
	     (!ringToMac_2_fifoTxData_write_block && x__h127257 == 2'd3 ||
	      ringToMac_2_fifoTxData_write_block && x__h127709 == 2'd3) &&
	     !ringToMac_2_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_3_fifoTxData_read_block_671_672__ETC___d3694 =
	     (!ringToMac_3_fifoTxData_read_block && x__h150136 != 2'd3 ||
	      ringToMac_3_fifoTxData_read_block && x__h150515 != 2'd3) &&
	     !ringToMac_3_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_3_fifoTxData_write_block_631_632_ETC___d3652 =
	     (!ringToMac_3_fifoTxData_write_block && x__h145891 == 2'd3 ||
	      ringToMac_3_fifoTxData_write_block && x__h146343 == 2'd3) &&
	     !ringToMac_3_fifoTxData_sInReset_pre_isInReset ;
  assign ab__h102026 = 2'd0 ;
  assign ab__h120660 = 2'd0 ;
  assign ab__h139294 = 2'd0 ;
  assign ab__h83389 = 2'd0 ;
  assign mask__h115121 =
	     (!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787 &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789) ?
	       ringToMac_1_fifoTxData_block0[115:108] :
	       ringToMac_1_fifoTxData_block0[9:2] ;
  assign mask__h115230 =
	     (!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796 &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798) ?
	       ringToMac_1_fifoTxData_block1[115:108] :
	       ringToMac_1_fifoTxData_block1[9:2] ;
  assign mask__h133755 =
	     (!ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231 &&
	      ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233) ?
	       ringToMac_2_fifoTxData_block0[115:108] :
	       ringToMac_2_fifoTxData_block0[9:2] ;
  assign mask__h133864 =
	     (!ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240 &&
	      ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242) ?
	       ringToMac_2_fifoTxData_block1[115:108] :
	       ringToMac_2_fifoTxData_block1[9:2] ;
  assign mask__h152389 =
	     (!ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675 &&
	      ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677) ?
	       ringToMac_3_fifoTxData_block0[115:108] :
	       ringToMac_3_fifoTxData_block0[9:2] ;
  assign mask__h152498 =
	     (!ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684 &&
	      ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686) ?
	       ringToMac_3_fifoTxData_block1[115:108] :
	       ringToMac_3_fifoTxData_block1[9:2] ;
  assign mask__h96487 =
	     (!ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343 &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345) ?
	       ringToMac_0_fifoTxData_block0[115:108] :
	       ringToMac_0_fifoTxData_block0[9:2] ;
  assign mask__h96596 =
	     (!ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352 &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354) ?
	       ringToMac_0_fifoTxData_block1[115:108] :
	       ringToMac_0_fifoTxData_block1[9:2] ;
  assign newPacketLen__h102996 = pktBuff_1_packetLen + { 11'd0, x__h103085 } ;
  assign newPacketLen__h121630 = pktBuff_2_packetLen + { 11'd0, x__h121719 } ;
  assign newPacketLen__h140264 = pktBuff_3_packetLen + { 11'd0, x__h140353 } ;
  assign newPacketLen__h84359 = pktBuff_0_packetLen + { 11'd0, x__h84448 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_054_SLT_3___d2223 =
	     (pktBuff_0_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_119_PLU_ETC___d2125 =
	     pktBuff_0_memBuffer_serverAdapterB_cnt +
	     (pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_119_SLT_3___d2249 =
	     (pktBuff_0_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_498_SLT_3___d2667 =
	     (pktBuff_1_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_563_PLU_ETC___d2569 =
	     pktBuff_1_memBuffer_serverAdapterB_cnt +
	     (pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_563_SLT_3___d2693 =
	     (pktBuff_1_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_942_SLT_3___d3111 =
	     (pktBuff_2_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_007_PLU_ETC___d3013 =
	     pktBuff_2_memBuffer_serverAdapterB_cnt +
	     (pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_007_SLT_3___d3137 =
	     (pktBuff_2_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_386_SLT_3___d3555 =
	     (pktBuff_3_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_451_PLU_ETC___d3457 =
	     pktBuff_3_memBuffer_serverAdapterB_cnt +
	     (pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_451_SLT_3___d3581 =
	     (pktBuff_3_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345 =
	     ringToMac_0_fifoTxData_elem0_status_0 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343 =
	     ringToMac_0_fifoTxData_elem0_status_1 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354 =
	     ringToMac_0_fifoTxData_elem1_status_0 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352 =
	     ringToMac_0_fifoTxData_elem1_status_1 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789 =
	     ringToMac_1_fifoTxData_elem0_status_0 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787 =
	     ringToMac_1_fifoTxData_elem0_status_1 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798 =
	     ringToMac_1_fifoTxData_elem1_status_0 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796 =
	     ringToMac_1_fifoTxData_elem1_status_1 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233 =
	     ringToMac_2_fifoTxData_elem0_status_0 ==
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231 =
	     ringToMac_2_fifoTxData_elem0_status_1 ==
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242 =
	     ringToMac_2_fifoTxData_elem1_status_0 ==
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240 =
	     ringToMac_2_fifoTxData_elem1_status_1 ==
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677 =
	     ringToMac_3_fifoTxData_elem0_status_0 ==
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675 =
	     ringToMac_3_fifoTxData_elem0_status_1 ==
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686 =
	     ringToMac_3_fifoTxData_elem1_status_0 ==
	     ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684 =
	     ringToMac_3_fifoTxData_elem1_status_1 ==
	     ringToMac_3_fifoTxData_block1_status ;
  assign verbose_ff_1_i_notFull__084_AND_verbose_ff_2_i_ETC___d8153 =
	     verbose_ff_1_FULL_N && verbose_ff_2_FULL_N &&
	     verbose_ff_3_FULL_N &&
	     verbose_ff_0_FULL_N &&
	     verbose_ff_0_3_FULL_N &&
	     verbose_ff_1_2_FULL_N &&
	     verbose_ff_2_2_i_notFull__483_AND_verbose_ff_3_ETC___d8147 ;
  assign verbose_ff_2_2_i_notFull__483_AND_verbose_ff_3_ETC___d8147 =
	     verbose_ff_2_2_FULL_N && verbose_ff_3_2_FULL_N &&
	     verbose_ff_0_2_FULL_N &&
	     verbose_ff_1_1_FULL_N &&
	     verbose_ff_2_1_FULL_N &&
	     verbose_ff_3_1_FULL_N &&
	     verbose_ff_4_FULL_N ;
  assign x__h103085 = x__h103100 + y__h103101 ;
  assign x__h103100 = x__h103112 + y__h103113 ;
  assign x__h103112 = x__h103124 + y__h103125 ;
  assign x__h103124 = x__h103136 + y__h103137 ;
  assign x__h103136 = x__h103148 + y__h103149 ;
  assign x__h103148 = x__h103160 + y__h103161 ;
  assign x__h103160 = x__h103172 + y__h103173 ;
  assign x__h103172 = x__h103184 + y__h103185 ;
  assign x__h103184 = x__h103196 + y__h103197 ;
  assign x__h103196 = x__h103208 + y__h103209 ;
  assign x__h103208 = x__h103220 + y__h103221 ;
  assign x__h103220 = x__h103232 + y__h103233 ;
  assign x__h103232 = x__h103244 + y__h103245 ;
  assign x__h103244 = x__h103256 + y__h103257 ;
  assign x__h103256 = x__h103268 + y__h103269 ;
  assign x__h103268 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[17] } ;
  assign x__h108623 =
	     { ringToMac_1_fifoTxData_elem0_status_1 ==
	       ringToMac_1_fifoTxData_block0_status,
	       ringToMac_1_fifoTxData_elem0_status_0 ==
	       ringToMac_1_fifoTxData_block0_status } ;
  assign x__h109075 =
	     { ringToMac_1_fifoTxData_elem1_status_1 ==
	       ringToMac_1_fifoTxData_block1_status,
	       ringToMac_1_fifoTxData_elem1_status_0 ==
	       ringToMac_1_fifoTxData_block1_status } ;
  assign x__h112868 =
	     { ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d2787,
	       ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d2789 } ;
  assign x__h113247 =
	     { ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d2796,
	       ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d2798 } ;
  assign x__h115487 = x__h115503 + y__h115504 ;
  assign x__h115503 = x__h115515 + y__h115516 ;
  assign x__h115515 = x__h115527 + y__h115528 ;
  assign x__h115527 = x__h115539 + y__h115540 ;
  assign x__h115539 = x__h115551 + y__h115552 ;
  assign x__h115551 = x__h115563 + y__h115564 ;
  assign x__h115563 = x__h115575 + y__h115576 ;
  assign x__h115575 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[7] } ;
  assign x__h121719 = x__h121734 + y__h121735 ;
  assign x__h121734 = x__h121746 + y__h121747 ;
  assign x__h121746 = x__h121758 + y__h121759 ;
  assign x__h121758 = x__h121770 + y__h121771 ;
  assign x__h121770 = x__h121782 + y__h121783 ;
  assign x__h121782 = x__h121794 + y__h121795 ;
  assign x__h121794 = x__h121806 + y__h121807 ;
  assign x__h121806 = x__h121818 + y__h121819 ;
  assign x__h121818 = x__h121830 + y__h121831 ;
  assign x__h121830 = x__h121842 + y__h121843 ;
  assign x__h121842 = x__h121854 + y__h121855 ;
  assign x__h121854 = x__h121866 + y__h121867 ;
  assign x__h121866 = x__h121878 + y__h121879 ;
  assign x__h121878 = x__h121890 + y__h121891 ;
  assign x__h121890 = x__h121902 + y__h121903 ;
  assign x__h121902 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[17] } ;
  assign x__h12440 = x__h12455 + y__h12456 ;
  assign x__h12455 = x__h12467 + y__h12468 ;
  assign x__h12467 = x__h12479 + y__h12480 ;
  assign x__h12479 = x__h12491 + y__h12492 ;
  assign x__h12491 = x__h12503 + y__h12504 ;
  assign x__h12503 = x__h12515 + y__h12516 ;
  assign x__h12515 = x__h12527 + y__h12528 ;
  assign x__h12527 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[9] } ;
  assign x__h127257 =
	     { ringToMac_2_fifoTxData_elem0_status_1 ==
	       ringToMac_2_fifoTxData_block0_status,
	       ringToMac_2_fifoTxData_elem0_status_0 ==
	       ringToMac_2_fifoTxData_block0_status } ;
  assign x__h127709 =
	     { ringToMac_2_fifoTxData_elem1_status_1 ==
	       ringToMac_2_fifoTxData_block1_status,
	       ringToMac_2_fifoTxData_elem1_status_0 ==
	       ringToMac_2_fifoTxData_block1_status } ;
  assign x__h131502 =
	     { ringToMac_2_fifoTxData_elem0_status_1__read__2_ETC___d3231,
	       ringToMac_2_fifoTxData_elem0_status_0__read__2_ETC___d3233 } ;
  assign x__h131881 =
	     { ringToMac_2_fifoTxData_elem1_status_1__read__2_ETC___d3240,
	       ringToMac_2_fifoTxData_elem1_status_0__read__2_ETC___d3242 } ;
  assign x__h134121 = x__h134137 + y__h134138 ;
  assign x__h134137 = x__h134149 + y__h134150 ;
  assign x__h134149 = x__h134161 + y__h134162 ;
  assign x__h134161 = x__h134173 + y__h134174 ;
  assign x__h134173 = x__h134185 + y__h134186 ;
  assign x__h134185 = x__h134197 + y__h134198 ;
  assign x__h134197 = x__h134209 + y__h134210 ;
  assign x__h134209 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[7] } ;
  assign x__h140353 = x__h140368 + y__h140369 ;
  assign x__h140368 = x__h140380 + y__h140381 ;
  assign x__h140380 = x__h140392 + y__h140393 ;
  assign x__h140392 = x__h140404 + y__h140405 ;
  assign x__h140404 = x__h140416 + y__h140417 ;
  assign x__h140416 = x__h140428 + y__h140429 ;
  assign x__h140428 = x__h140440 + y__h140441 ;
  assign x__h140440 = x__h140452 + y__h140453 ;
  assign x__h140452 = x__h140464 + y__h140465 ;
  assign x__h140464 = x__h140476 + y__h140477 ;
  assign x__h140476 = x__h140488 + y__h140489 ;
  assign x__h140488 = x__h140500 + y__h140501 ;
  assign x__h140500 = x__h140512 + y__h140513 ;
  assign x__h140512 = x__h140524 + y__h140525 ;
  assign x__h140524 = x__h140536 + y__h140537 ;
  assign x__h140536 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[17] } ;
  assign x__h145891 =
	     { ringToMac_3_fifoTxData_elem0_status_1 ==
	       ringToMac_3_fifoTxData_block0_status,
	       ringToMac_3_fifoTxData_elem0_status_0 ==
	       ringToMac_3_fifoTxData_block0_status } ;
  assign x__h146343 =
	     { ringToMac_3_fifoTxData_elem1_status_1 ==
	       ringToMac_3_fifoTxData_block1_status,
	       ringToMac_3_fifoTxData_elem1_status_0 ==
	       ringToMac_3_fifoTxData_block1_status } ;
  assign x__h150136 =
	     { ringToMac_3_fifoTxData_elem0_status_1__read__6_ETC___d3675,
	       ringToMac_3_fifoTxData_elem0_status_0__read__6_ETC___d3677 } ;
  assign x__h150515 =
	     { ringToMac_3_fifoTxData_elem1_status_1__read__6_ETC___d3684,
	       ringToMac_3_fifoTxData_elem1_status_0__read__6_ETC___d3686 } ;
  assign x__h152755 = x__h152771 + y__h152772 ;
  assign x__h152771 = x__h152783 + y__h152784 ;
  assign x__h152783 = x__h152795 + y__h152796 ;
  assign x__h152795 = x__h152807 + y__h152808 ;
  assign x__h152807 = x__h152819 + y__h152820 ;
  assign x__h152819 = x__h152831 + y__h152832 ;
  assign x__h152831 = x__h152843 + y__h152844 ;
  assign x__h152843 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[7] } ;
  assign x__h21071 = x__h21086 + y__h21087 ;
  assign x__h21086 = x__h21098 + y__h21099 ;
  assign x__h21098 = x__h21110 + y__h21111 ;
  assign x__h21110 = x__h21122 + y__h21123 ;
  assign x__h21122 = x__h21134 + y__h21135 ;
  assign x__h21134 = x__h21146 + y__h21147 ;
  assign x__h21146 = x__h21158 + y__h21159 ;
  assign x__h21158 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[9] } ;
  assign x__h29702 = x__h29717 + y__h29718 ;
  assign x__h29717 = x__h29729 + y__h29730 ;
  assign x__h29729 = x__h29741 + y__h29742 ;
  assign x__h29741 = x__h29753 + y__h29754 ;
  assign x__h29753 = x__h29765 + y__h29766 ;
  assign x__h29765 = x__h29777 + y__h29778 ;
  assign x__h29777 = x__h29789 + y__h29790 ;
  assign x__h29789 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[9] } ;
  assign x__h38333 = x__h38348 + y__h38349 ;
  assign x__h38348 = x__h38360 + y__h38361 ;
  assign x__h38360 = x__h38372 + y__h38373 ;
  assign x__h38372 = x__h38384 + y__h38385 ;
  assign x__h38384 = x__h38396 + y__h38397 ;
  assign x__h38396 = x__h38408 + y__h38409 ;
  assign x__h38408 = x__h38420 + y__h38421 ;
  assign x__h38420 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[9] } ;
  assign x__h84448 = x__h84463 + y__h84464 ;
  assign x__h84463 = x__h84475 + y__h84476 ;
  assign x__h84475 = x__h84487 + y__h84488 ;
  assign x__h84487 = x__h84499 + y__h84500 ;
  assign x__h84499 = x__h84511 + y__h84512 ;
  assign x__h84511 = x__h84523 + y__h84524 ;
  assign x__h84523 = x__h84535 + y__h84536 ;
  assign x__h84535 = x__h84547 + y__h84548 ;
  assign x__h84547 = x__h84559 + y__h84560 ;
  assign x__h84559 = x__h84571 + y__h84572 ;
  assign x__h84571 = x__h84583 + y__h84584 ;
  assign x__h84583 = x__h84595 + y__h84596 ;
  assign x__h84595 = x__h84607 + y__h84608 ;
  assign x__h84607 = x__h84619 + y__h84620 ;
  assign x__h84619 = x__h84631 + y__h84632 ;
  assign x__h84631 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[17] } ;
  assign x__h89986 =
	     { ringToMac_0_fifoTxData_elem0_status_1 ==
	       ringToMac_0_fifoTxData_block0_status,
	       ringToMac_0_fifoTxData_elem0_status_0 ==
	       ringToMac_0_fifoTxData_block0_status } ;
  assign x__h90441 =
	     { ringToMac_0_fifoTxData_elem1_status_1 ==
	       ringToMac_0_fifoTxData_block1_status,
	       ringToMac_0_fifoTxData_elem1_status_0 ==
	       ringToMac_0_fifoTxData_block1_status } ;
  assign x__h94234 =
	     { ringToMac_0_fifoTxData_elem0_status_1__read__3_ETC___d2343,
	       ringToMac_0_fifoTxData_elem0_status_0__read__3_ETC___d2345 } ;
  assign x__h94613 =
	     { ringToMac_0_fifoTxData_elem1_status_1__read__3_ETC___d2352,
	       ringToMac_0_fifoTxData_elem1_status_0__read__3_ETC___d2354 } ;
  assign x__h96853 = x__h96869 + y__h96870 ;
  assign x__h96869 = x__h96881 + y__h96882 ;
  assign x__h96881 = x__h96893 + y__h96894 ;
  assign x__h96893 = x__h96905 + y__h96906 ;
  assign x__h96905 = x__h96917 + y__h96918 ;
  assign x__h96917 = x__h96929 + y__h96930 ;
  assign x__h96929 = x__h96941 + y__h96942 ;
  assign x__h96941 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[7] } ;
  assign x_data__h12861 = { 64'd0, macToRing_0_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h13819 =
	     { macToRing_0_gearbox_in_ff_D_OUT[73:10],
	       macToRing_0_gearbox_v_prev[73:10] } ;
  assign x_data__h21492 = { 64'd0, macToRing_1_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h22450 =
	     { macToRing_1_gearbox_in_ff_D_OUT[73:10],
	       macToRing_1_gearbox_v_prev[73:10] } ;
  assign x_data__h30123 = { 64'd0, macToRing_2_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h31081 =
	     { macToRing_2_gearbox_in_ff_D_OUT[73:10],
	       macToRing_2_gearbox_v_prev[73:10] } ;
  assign x_data__h38754 = { 64'd0, macToRing_3_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h39712 =
	     { macToRing_3_gearbox_in_ff_D_OUT[73:10],
	       macToRing_3_gearbox_v_prev[73:10] } ;
  assign x_mask__h13820 =
	     { macToRing_0_gearbox_in_ff_D_OUT[9:2],
	       macToRing_0_gearbox_v_prev[9:2] } ;
  assign x_mask__h22451 =
	     { macToRing_1_gearbox_in_ff_D_OUT[9:2],
	       macToRing_1_gearbox_v_prev[9:2] } ;
  assign x_mask__h31082 =
	     { macToRing_2_gearbox_in_ff_D_OUT[9:2],
	       macToRing_2_gearbox_v_prev[9:2] } ;
  assign x_mask__h39713 =
	     { macToRing_3_gearbox_in_ff_D_OUT[9:2],
	       macToRing_3_gearbox_v_prev[9:2] } ;
  assign xbar_lower_lower_merges_1_fo_i_notFull__525_AN_ETC___d5541 =
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     (xbar_lower_lower_merges_1_routeFrom[0] ?
		xbar_lower_lower_merges_1_fi1_EMPTY_N :
		xbar_lower_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_lower_merges_1_routeFrom_537_BIT_1__ETC___d5583 =
	     xbar_lower_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_1_routeFrom_537_BIT_ETC___d5570 ||
	     !xbar_lower_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563 &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5580 ;
  assign xbar_lower_lower_merges_fo_i_notFull__450_AND__ETC___d5466 =
	     xbar_lower_lower_merges_fo_FULL_N &&
	     (xbar_lower_lower_merges_routeFrom[0] ?
		xbar_lower_lower_merges_fi1_EMPTY_N :
		xbar_lower_lower_merges_fi0_EMPTY_N) ;
  assign xbar_lower_lower_merges_routeFrom_462_BIT_1_46_ETC___d5508 =
	     xbar_lower_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_routeFrom_462_BIT_0_ETC___d5495 ||
	     !xbar_lower_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488 &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5505 ;
  assign xbar_lower_merges_1_fo_i_notFull__697_AND_IF_x_ETC___d5713 =
	     xbar_lower_merges_1_fo_FULL_N &&
	     (xbar_lower_merges_1_routeFrom[0] ?
		xbar_lower_merges_1_fi1_EMPTY_N :
		xbar_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_merges_1_routeFrom_709_BIT_1_710_AN_ETC___d5755 =
	     xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_routeFrom_709_BIT_0_711_ETC___d5742 ||
	     !xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735 &&
	     IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5752 ;
  assign xbar_lower_merges_2_fo_i_notFull__772_AND_IF_x_ETC___d5788 =
	     xbar_lower_merges_2_fo_FULL_N &&
	     (xbar_lower_merges_2_routeFrom[0] ?
		xbar_lower_merges_2_fi1_EMPTY_N :
		xbar_lower_merges_2_fi0_EMPTY_N) ;
  assign xbar_lower_merges_2_routeFrom_784_BIT_1_785_AN_ETC___d5830 =
	     xbar_lower_merges_2_routeFrom[1] &&
	     IF_xbar_lower_merges_2_routeFrom_784_BIT_0_786_ETC___d5817 ||
	     !xbar_lower_merges_2_routeFrom[1] &&
	     IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810 &&
	     IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5827 ;
  assign xbar_lower_merges_3_fo_i_notFull__847_AND_IF_x_ETC___d5863 =
	     xbar_lower_merges_3_fo_FULL_N &&
	     (xbar_lower_merges_3_routeFrom[0] ?
		xbar_lower_merges_3_fi1_EMPTY_N :
		xbar_lower_merges_3_fi0_EMPTY_N) ;
  assign xbar_lower_merges_3_routeFrom_859_BIT_1_860_AN_ETC___d5905 =
	     xbar_lower_merges_3_routeFrom[1] &&
	     IF_xbar_lower_merges_3_routeFrom_859_BIT_0_861_ETC___d5892 ||
	     !xbar_lower_merges_3_routeFrom[1] &&
	     IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885 &&
	     IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5902 ;
  assign xbar_lower_merges_fo_i_notFull__622_AND_IF_xba_ETC___d5638 =
	     xbar_lower_merges_fo_FULL_N &&
	     (xbar_lower_merges_routeFrom[0] ?
		xbar_lower_merges_fi1_EMPTY_N :
		xbar_lower_merges_fi0_EMPTY_N) ;
  assign xbar_lower_merges_routeFrom_634_BIT_1_635_AND__ETC___d5680 =
	     xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_routeFrom_634_BIT_0_636_T_ETC___d5667 ||
	     !xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660 &&
	     IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5677 ;
  assign xbar_lower_upper_merges_1_fo_i_notFull__353_AN_ETC___d5369 =
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     (xbar_lower_upper_merges_1_routeFrom[0] ?
		xbar_lower_upper_merges_1_fi1_EMPTY_N :
		xbar_lower_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_upper_merges_1_routeFrom_365_BIT_1__ETC___d5411 =
	     xbar_lower_upper_merges_1_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_1_routeFrom_365_BIT_ETC___d5398 ||
	     !xbar_lower_upper_merges_1_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391 &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5408 ;
  assign xbar_lower_upper_merges_fo_i_notFull__278_AND__ETC___d5294 =
	     xbar_lower_upper_merges_fo_FULL_N &&
	     (xbar_lower_upper_merges_routeFrom[0] ?
		xbar_lower_upper_merges_fi1_EMPTY_N :
		xbar_lower_upper_merges_fi0_EMPTY_N) ;
  assign xbar_lower_upper_merges_routeFrom_290_BIT_1_29_ETC___d5336 =
	     xbar_lower_upper_merges_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_routeFrom_290_BIT_0_ETC___d5323 ||
	     !xbar_lower_upper_merges_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316 &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5333 ;
  assign xbar_merges_1_fo_i_notFull__041_AND_IF_xbar_me_ETC___d6057 =
	     xbar_merges_1_fo_FULL_N &&
	     (xbar_merges_1_routeFrom[0] ?
		xbar_merges_1_fi1_EMPTY_N :
		xbar_merges_1_fi0_EMPTY_N) ;
  assign xbar_merges_1_routeFrom_053_BIT_1_054_AND_IF_x_ETC___d6099 =
	     xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_routeFrom_053_BIT_0_055_THEN__ETC___d6086 ||
	     !xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079 &&
	     IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6096 ;
  assign xbar_merges_2_fo_i_notFull__116_AND_IF_xbar_me_ETC___d6132 =
	     xbar_merges_2_fo_FULL_N &&
	     (xbar_merges_2_routeFrom[0] ?
		xbar_merges_2_fi1_EMPTY_N :
		xbar_merges_2_fi0_EMPTY_N) ;
  assign xbar_merges_2_routeFrom_128_BIT_1_129_AND_IF_x_ETC___d6174 =
	     xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_routeFrom_128_BIT_0_130_THEN__ETC___d6161 ||
	     !xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154 &&
	     IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6171 ;
  assign xbar_merges_3_fo_i_notFull__191_AND_IF_xbar_me_ETC___d6207 =
	     xbar_merges_3_fo_FULL_N &&
	     (xbar_merges_3_routeFrom[0] ?
		xbar_merges_3_fi1_EMPTY_N :
		xbar_merges_3_fi0_EMPTY_N) ;
  assign xbar_merges_3_routeFrom_203_BIT_1_204_AND_IF_x_ETC___d6249 =
	     xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_routeFrom_203_BIT_0_205_THEN__ETC___d6236 ||
	     !xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229 &&
	     IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6246 ;
  assign xbar_merges_4_fo_i_notFull__266_AND_IF_xbar_me_ETC___d6282 =
	     xbar_merges_4_fo_FULL_N &&
	     (xbar_merges_4_routeFrom[0] ?
		xbar_merges_4_fi1_EMPTY_N :
		xbar_merges_4_fi0_EMPTY_N) ;
  assign xbar_merges_4_routeFrom_278_BIT_1_279_AND_IF_x_ETC___d6324 =
	     xbar_merges_4_routeFrom[1] &&
	     IF_xbar_merges_4_routeFrom_278_BIT_0_280_THEN__ETC___d6311 ||
	     !xbar_merges_4_routeFrom[1] &&
	     IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304 &&
	     IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6321 ;
  assign xbar_merges_5_fo_i_notFull__341_AND_IF_xbar_me_ETC___d6357 =
	     xbar_merges_5_fo_FULL_N &&
	     (xbar_merges_5_routeFrom[0] ?
		xbar_merges_5_fi1_EMPTY_N :
		xbar_merges_5_fi0_EMPTY_N) ;
  assign xbar_merges_5_routeFrom_353_BIT_1_354_AND_IF_x_ETC___d6399 =
	     xbar_merges_5_routeFrom[1] &&
	     IF_xbar_merges_5_routeFrom_353_BIT_0_355_THEN__ETC___d6386 ||
	     !xbar_merges_5_routeFrom[1] &&
	     IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379 &&
	     IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6396 ;
  assign xbar_merges_6_fo_i_notFull__416_AND_IF_xbar_me_ETC___d6432 =
	     xbar_merges_6_fo_FULL_N &&
	     (xbar_merges_6_routeFrom[0] ?
		xbar_merges_6_fi1_EMPTY_N :
		xbar_merges_6_fi0_EMPTY_N) ;
  assign xbar_merges_6_routeFrom_428_BIT_1_429_AND_IF_x_ETC___d6474 =
	     xbar_merges_6_routeFrom[1] &&
	     IF_xbar_merges_6_routeFrom_428_BIT_0_430_THEN__ETC___d6461 ||
	     !xbar_merges_6_routeFrom[1] &&
	     IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454 &&
	     IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6471 ;
  assign xbar_merges_7_fo_i_notFull__491_AND_IF_xbar_me_ETC___d6507 =
	     xbar_merges_7_fo_FULL_N &&
	     (xbar_merges_7_routeFrom[0] ?
		xbar_merges_7_fi1_EMPTY_N :
		xbar_merges_7_fi0_EMPTY_N) ;
  assign xbar_merges_7_routeFrom_503_BIT_1_504_AND_IF_x_ETC___d6549 =
	     xbar_merges_7_routeFrom[1] &&
	     IF_xbar_merges_7_routeFrom_503_BIT_0_505_THEN__ETC___d6536 ||
	     !xbar_merges_7_routeFrom[1] &&
	     IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529 &&
	     IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6546 ;
  assign xbar_merges_fo_i_notFull__966_AND_IF_xbar_merg_ETC___d5982 =
	     xbar_merges_fo_FULL_N &&
	     (xbar_merges_routeFrom[0] ?
		xbar_merges_fi1_EMPTY_N :
		xbar_merges_fi0_EMPTY_N) ;
  assign xbar_merges_routeFrom_978_BIT_1_979_AND_IF_xba_ETC___d6024 =
	     xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_routeFrom_978_BIT_0_980_THEN_xb_ETC___d6011 ||
	     !xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004 &&
	     IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6021 ;
  assign xbar_upper_lower_merges_1_fo_i_notFull__835_AN_ETC___d4851 =
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     (xbar_upper_lower_merges_1_routeFrom[0] ?
		xbar_upper_lower_merges_1_fi1_EMPTY_N :
		xbar_upper_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_lower_merges_1_routeFrom_847_BIT_1__ETC___d4893 =
	     xbar_upper_lower_merges_1_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_1_routeFrom_847_BIT_ETC___d4880 ||
	     !xbar_upper_lower_merges_1_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873 &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4890 ;
  assign xbar_upper_lower_merges_fo_i_notFull__760_AND__ETC___d4776 =
	     xbar_upper_lower_merges_fo_FULL_N &&
	     (xbar_upper_lower_merges_routeFrom[0] ?
		xbar_upper_lower_merges_fi1_EMPTY_N :
		xbar_upper_lower_merges_fi0_EMPTY_N) ;
  assign xbar_upper_lower_merges_routeFrom_772_BIT_1_77_ETC___d4818 =
	     xbar_upper_lower_merges_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_routeFrom_772_BIT_0_ETC___d4805 ||
	     !xbar_upper_lower_merges_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798 &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4815 ;
  assign xbar_upper_merges_1_fo_i_notFull__007_AND_IF_x_ETC___d5023 =
	     xbar_upper_merges_1_fo_FULL_N &&
	     (xbar_upper_merges_1_routeFrom[0] ?
		xbar_upper_merges_1_fi1_EMPTY_N :
		xbar_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_merges_1_routeFrom_019_BIT_1_020_AN_ETC___d5065 =
	     xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_routeFrom_019_BIT_0_021_ETC___d5052 ||
	     !xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045 &&
	     IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5062 ;
  assign xbar_upper_merges_2_fo_i_notFull__082_AND_IF_x_ETC___d5098 =
	     xbar_upper_merges_2_fo_FULL_N &&
	     (xbar_upper_merges_2_routeFrom[0] ?
		xbar_upper_merges_2_fi1_EMPTY_N :
		xbar_upper_merges_2_fi0_EMPTY_N) ;
  assign xbar_upper_merges_2_routeFrom_094_BIT_1_095_AN_ETC___d5140 =
	     xbar_upper_merges_2_routeFrom[1] &&
	     IF_xbar_upper_merges_2_routeFrom_094_BIT_0_096_ETC___d5127 ||
	     !xbar_upper_merges_2_routeFrom[1] &&
	     IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120 &&
	     IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5137 ;
  assign xbar_upper_merges_3_fo_i_notFull__157_AND_IF_x_ETC___d5173 =
	     xbar_upper_merges_3_fo_FULL_N &&
	     (xbar_upper_merges_3_routeFrom[0] ?
		xbar_upper_merges_3_fi1_EMPTY_N :
		xbar_upper_merges_3_fi0_EMPTY_N) ;
  assign xbar_upper_merges_3_routeFrom_169_BIT_1_170_AN_ETC___d5215 =
	     xbar_upper_merges_3_routeFrom[1] &&
	     IF_xbar_upper_merges_3_routeFrom_169_BIT_0_171_ETC___d5202 ||
	     !xbar_upper_merges_3_routeFrom[1] &&
	     IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195 &&
	     IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5212 ;
  assign xbar_upper_merges_fo_i_notFull__932_AND_IF_xba_ETC___d4948 =
	     xbar_upper_merges_fo_FULL_N &&
	     (xbar_upper_merges_routeFrom[0] ?
		xbar_upper_merges_fi1_EMPTY_N :
		xbar_upper_merges_fi0_EMPTY_N) ;
  assign xbar_upper_merges_routeFrom_944_BIT_1_945_AND__ETC___d4990 =
	     xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_routeFrom_944_BIT_0_946_T_ETC___d4977 ||
	     !xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970 &&
	     IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4987 ;
  assign xbar_upper_upper_merges_1_fo_i_notFull__661_AN_ETC___d4677 =
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     (xbar_upper_upper_merges_1_routeFrom[0] ?
		xbar_upper_upper_merges_1_fi1_EMPTY_N :
		xbar_upper_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_upper_merges_1_routeFrom_673_BIT_1__ETC___d4719 =
	     xbar_upper_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_1_routeFrom_673_BIT_ETC___d4706 ||
	     !xbar_upper_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699 &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4716 ;
  assign xbar_upper_upper_merges_fo_i_notFull__586_AND__ETC___d4602 =
	     xbar_upper_upper_merges_fo_FULL_N &&
	     (xbar_upper_upper_merges_routeFrom[0] ?
		xbar_upper_upper_merges_fi1_EMPTY_N :
		xbar_upper_upper_merges_fi0_EMPTY_N) ;
  assign xbar_upper_upper_merges_routeFrom_598_BIT_1_59_ETC___d4644 =
	     xbar_upper_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_routeFrom_598_BIT_0_ETC___d4631 ||
	     !xbar_upper_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624 &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4641 ;
  assign y__h103101 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[2] } ;
  assign y__h103113 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[3] } ;
  assign y__h103125 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[4] } ;
  assign y__h103137 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[5] } ;
  assign y__h103149 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[6] } ;
  assign y__h103161 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[7] } ;
  assign y__h103173 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[8] } ;
  assign y__h103185 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[9] } ;
  assign y__h103197 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[10] } ;
  assign y__h103209 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[11] } ;
  assign y__h103221 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[12] } ;
  assign y__h103233 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[13] } ;
  assign y__h103245 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[14] } ;
  assign y__h103257 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[15] } ;
  assign y__h103269 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[16] } ;
  assign y__h108451 = ringToMac_1_cycle_cnt - ringToMac_1_last_endofpacket ;
  assign y__h108538 = ringToMac_1_cycle_cnt - ringToMac_1_last_startofpacket ;
  assign y__h115483 = { 60'd0, x__h115487 } ;
  assign y__h115504 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[0] } ;
  assign y__h115516 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[1] } ;
  assign y__h115528 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[2] } ;
  assign y__h115540 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[3] } ;
  assign y__h115552 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[4] } ;
  assign y__h115564 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[5] } ;
  assign y__h115576 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_783_THEN__ETC___d2821[6] } ;
  assign y__h121735 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[2] } ;
  assign y__h121747 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[3] } ;
  assign y__h121759 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[4] } ;
  assign y__h121771 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[5] } ;
  assign y__h121783 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[6] } ;
  assign y__h121795 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[7] } ;
  assign y__h121807 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[8] } ;
  assign y__h121819 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[9] } ;
  assign y__h121831 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[10] } ;
  assign y__h121843 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[11] } ;
  assign y__h121855 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[12] } ;
  assign y__h121867 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[13] } ;
  assign y__h121879 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[14] } ;
  assign y__h121891 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[15] } ;
  assign y__h121903 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[16] } ;
  assign y__h12437 = { 60'd0, x__h12440 } ;
  assign y__h12456 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[2] } ;
  assign y__h12468 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[3] } ;
  assign y__h12480 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[4] } ;
  assign y__h12492 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[5] } ;
  assign y__h12504 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[6] } ;
  assign y__h12516 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[7] } ;
  assign y__h12528 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[8] } ;
  assign y__h127085 = ringToMac_2_cycle_cnt - ringToMac_2_last_endofpacket ;
  assign y__h127172 = ringToMac_2_cycle_cnt - ringToMac_2_last_startofpacket ;
  assign y__h134117 = { 60'd0, x__h134121 } ;
  assign y__h134138 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[0] } ;
  assign y__h134150 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[1] } ;
  assign y__h134162 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[2] } ;
  assign y__h134174 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[3] } ;
  assign y__h134186 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[4] } ;
  assign y__h134198 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[5] } ;
  assign y__h134210 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_227_THEN__ETC___d3265[6] } ;
  assign y__h140369 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[2] } ;
  assign y__h140381 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[3] } ;
  assign y__h140393 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[4] } ;
  assign y__h140405 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[5] } ;
  assign y__h140417 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[6] } ;
  assign y__h140429 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[7] } ;
  assign y__h140441 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[8] } ;
  assign y__h140453 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[9] } ;
  assign y__h140465 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[10] } ;
  assign y__h140477 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[11] } ;
  assign y__h140489 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[12] } ;
  assign y__h140501 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[13] } ;
  assign y__h140513 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[14] } ;
  assign y__h140525 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[15] } ;
  assign y__h140537 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[16] } ;
  assign y__h145719 = ringToMac_3_cycle_cnt - ringToMac_3_last_endofpacket ;
  assign y__h145806 = ringToMac_3_cycle_cnt - ringToMac_3_last_startofpacket ;
  assign y__h152751 = { 60'd0, x__h152755 } ;
  assign y__h152772 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[0] } ;
  assign y__h152784 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[1] } ;
  assign y__h152796 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[2] } ;
  assign y__h152808 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[3] } ;
  assign y__h152820 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[4] } ;
  assign y__h152832 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[5] } ;
  assign y__h152844 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_671_THEN__ETC___d3709[6] } ;
  assign y__h21068 = { 60'd0, x__h21071 } ;
  assign y__h21087 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[2] } ;
  assign y__h21099 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[3] } ;
  assign y__h21111 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[4] } ;
  assign y__h21123 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[5] } ;
  assign y__h21135 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[6] } ;
  assign y__h21147 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[7] } ;
  assign y__h21159 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[8] } ;
  assign y__h29699 = { 60'd0, x__h29702 } ;
  assign y__h29718 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[2] } ;
  assign y__h29730 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[3] } ;
  assign y__h29742 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[4] } ;
  assign y__h29754 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[5] } ;
  assign y__h29766 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[6] } ;
  assign y__h29778 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[7] } ;
  assign y__h29790 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[8] } ;
  assign y__h38330 = { 60'd0, x__h38333 } ;
  assign y__h38349 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[2] } ;
  assign y__h38361 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[3] } ;
  assign y__h38373 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[4] } ;
  assign y__h38385 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[5] } ;
  assign y__h38397 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[6] } ;
  assign y__h38409 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[7] } ;
  assign y__h38421 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[8] } ;
  assign y__h84464 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[2] } ;
  assign y__h84476 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[3] } ;
  assign y__h84488 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[4] } ;
  assign y__h84500 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[5] } ;
  assign y__h84512 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[6] } ;
  assign y__h84524 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[7] } ;
  assign y__h84536 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[8] } ;
  assign y__h84548 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[9] } ;
  assign y__h84560 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[10] } ;
  assign y__h84572 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[11] } ;
  assign y__h84584 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[12] } ;
  assign y__h84596 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[13] } ;
  assign y__h84608 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[14] } ;
  assign y__h84620 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[15] } ;
  assign y__h84632 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[16] } ;
  assign y__h89814 = ringToMac_0_cycle_cnt - ringToMac_0_last_endofpacket ;
  assign y__h89901 = ringToMac_0_cycle_cnt - ringToMac_0_last_startofpacket ;
  assign y__h96849 = { 60'd0, x__h96853 } ;
  assign y__h96870 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[0] } ;
  assign y__h96882 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[1] } ;
  assign y__h96894 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[2] } ;
  assign y__h96906 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[3] } ;
  assign y__h96918 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[4] } ;
  assign y__h96930 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[5] } ;
  assign y__h96942 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_339_THEN__ETC___d2377[6] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (localReset_OUT_RST == `BSV_RESET_VALUE)
      begin
        hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_2_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_3_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_2_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_2_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_2_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_2_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_3_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_3_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_3_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_3_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_3_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_4_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readStarted_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	xbar_lower_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_4_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_4_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_5_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_5_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_6_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_6_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_7_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_7_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (hostchan_0_readStarted_EN)
	  hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_0_readStarted_D_IN;
	if (hostchan_1_readStarted_EN)
	  hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_1_readStarted_D_IN;
	if (hostchan_2_readStarted_EN)
	  hostchan_2_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_2_readStarted_D_IN;
	if (hostchan_3_readStarted_EN)
	  hostchan_3_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_3_readStarted_D_IN;
	if (pktBuff_0_eopDeq_EN)
	  pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopDeq_D_IN;
	if (pktBuff_0_eopEnq_EN)
	  pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopEnq_D_IN;
	if (pktBuff_0_inPacket_EN)
	  pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_0_inPacket_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_0_outPacket_EN)
	  pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_outPacket_D_IN;
	if (pktBuff_0_packetLen_EN)
	  pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_packetLen_D_IN;
	if (pktBuff_0_rdCurrPtr_EN)
	  pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_rdCurrPtr_D_IN;
	if (pktBuff_0_readStarted_EN)
	  pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_readStarted_D_IN;
	if (pktBuff_0_sopDeq_EN)
	  pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopDeq_D_IN;
	if (pktBuff_0_sopEnq_EN)
	  pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopEnq_D_IN;
	if (pktBuff_0_wrCurrPtr_EN)
	  pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_wrCurrPtr_D_IN;
	if (pktBuff_1_eopDeq_EN)
	  pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopDeq_D_IN;
	if (pktBuff_1_eopEnq_EN)
	  pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopEnq_D_IN;
	if (pktBuff_1_inPacket_EN)
	  pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_1_inPacket_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_1_outPacket_EN)
	  pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_outPacket_D_IN;
	if (pktBuff_1_packetLen_EN)
	  pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_packetLen_D_IN;
	if (pktBuff_1_rdCurrPtr_EN)
	  pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_rdCurrPtr_D_IN;
	if (pktBuff_1_readStarted_EN)
	  pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_readStarted_D_IN;
	if (pktBuff_1_sopDeq_EN)
	  pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopDeq_D_IN;
	if (pktBuff_1_sopEnq_EN)
	  pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopEnq_D_IN;
	if (pktBuff_1_wrCurrPtr_EN)
	  pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_wrCurrPtr_D_IN;
	if (pktBuff_2_eopDeq_EN)
	  pktBuff_2_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_eopDeq_D_IN;
	if (pktBuff_2_eopEnq_EN)
	  pktBuff_2_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_eopEnq_D_IN;
	if (pktBuff_2_inPacket_EN)
	  pktBuff_2_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_2_inPacket_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_2_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_2_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_2_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_2_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_2_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_2_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_2_outPacket_EN)
	  pktBuff_2_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_outPacket_D_IN;
	if (pktBuff_2_packetLen_EN)
	  pktBuff_2_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_packetLen_D_IN;
	if (pktBuff_2_rdCurrPtr_EN)
	  pktBuff_2_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_rdCurrPtr_D_IN;
	if (pktBuff_2_readStarted_EN)
	  pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_readStarted_D_IN;
	if (pktBuff_2_sopDeq_EN)
	  pktBuff_2_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_sopDeq_D_IN;
	if (pktBuff_2_sopEnq_EN)
	  pktBuff_2_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_sopEnq_D_IN;
	if (pktBuff_2_wrCurrPtr_EN)
	  pktBuff_2_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_wrCurrPtr_D_IN;
	if (pktBuff_3_eopDeq_EN)
	  pktBuff_3_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_eopDeq_D_IN;
	if (pktBuff_3_eopEnq_EN)
	  pktBuff_3_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_eopEnq_D_IN;
	if (pktBuff_3_inPacket_EN)
	  pktBuff_3_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_3_inPacket_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_3_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_3_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_3_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_3_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_3_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_3_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_3_outPacket_EN)
	  pktBuff_3_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_outPacket_D_IN;
	if (pktBuff_3_packetLen_EN)
	  pktBuff_3_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_packetLen_D_IN;
	if (pktBuff_3_rdCurrPtr_EN)
	  pktBuff_3_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_rdCurrPtr_D_IN;
	if (pktBuff_3_readStarted_EN)
	  pktBuff_3_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_readStarted_D_IN;
	if (pktBuff_3_sopDeq_EN)
	  pktBuff_3_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_sopDeq_D_IN;
	if (pktBuff_3_sopEnq_EN)
	  pktBuff_3_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_sopEnq_D_IN;
	if (pktBuff_3_wrCurrPtr_EN)
	  pktBuff_3_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_wrCurrPtr_D_IN;
	if (pktBuff_4_readStarted_EN)
	  pktBuff_4_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_4_readStarted_D_IN;
	if (readStarted_0_EN)
	  readStarted_0 <= `BSV_ASSIGNMENT_DELAY readStarted_0_D_IN;
	if (ringToMac_0_cycle_cnt_EN)
	  ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_cycle_cnt_D_IN;
	if (ringToMac_0_goodputCount_EN)
	  ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_goodputCount_D_IN;
	if (ringToMac_0_idleCount_EN)
	  ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idleCount_D_IN;
	if (ringToMac_0_last_endofpacket_EN)
	  ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_endofpacket_D_IN;
	if (ringToMac_0_last_startofpacket_EN)
	  ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_startofpacket_D_IN;
	if (ringToMac_1_cycle_cnt_EN)
	  ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_cycle_cnt_D_IN;
	if (ringToMac_1_goodputCount_EN)
	  ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_goodputCount_D_IN;
	if (ringToMac_1_idleCount_EN)
	  ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idleCount_D_IN;
	if (ringToMac_1_last_endofpacket_EN)
	  ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_endofpacket_D_IN;
	if (ringToMac_1_last_startofpacket_EN)
	  ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_startofpacket_D_IN;
	if (ringToMac_2_cycle_cnt_EN)
	  ringToMac_2_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_cycle_cnt_D_IN;
	if (ringToMac_2_goodputCount_EN)
	  ringToMac_2_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_goodputCount_D_IN;
	if (ringToMac_2_idleCount_EN)
	  ringToMac_2_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_idleCount_D_IN;
	if (ringToMac_2_last_endofpacket_EN)
	  ringToMac_2_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_last_endofpacket_D_IN;
	if (ringToMac_2_last_startofpacket_EN)
	  ringToMac_2_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_last_startofpacket_D_IN;
	if (ringToMac_3_cycle_cnt_EN)
	  ringToMac_3_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_cycle_cnt_D_IN;
	if (ringToMac_3_goodputCount_EN)
	  ringToMac_3_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_goodputCount_D_IN;
	if (ringToMac_3_idleCount_EN)
	  ringToMac_3_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_idleCount_D_IN;
	if (ringToMac_3_last_endofpacket_EN)
	  ringToMac_3_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_last_endofpacket_D_IN;
	if (ringToMac_3_last_startofpacket_EN)
	  ringToMac_3_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_last_startofpacket_D_IN;
	if (xbar_lower_lower_merges_1_fi0HasPrio_EN)
	  xbar_lower_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_lower_merges_1_routeFrom_EN)
	  xbar_lower_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_1_routeFrom_D_IN;
	if (xbar_lower_lower_merges_fi0HasPrio_EN)
	  xbar_lower_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_fi0HasPrio_D_IN;
	if (xbar_lower_lower_merges_routeFrom_EN)
	  xbar_lower_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_routeFrom_D_IN;
	if (xbar_lower_merges_1_fi0HasPrio_EN)
	  xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_merges_1_routeFrom_EN)
	  xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_routeFrom_D_IN;
	if (xbar_lower_merges_2_fi0HasPrio_EN)
	  xbar_lower_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_2_fi0HasPrio_D_IN;
	if (xbar_lower_merges_2_routeFrom_EN)
	  xbar_lower_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_2_routeFrom_D_IN;
	if (xbar_lower_merges_3_fi0HasPrio_EN)
	  xbar_lower_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_3_fi0HasPrio_D_IN;
	if (xbar_lower_merges_3_routeFrom_EN)
	  xbar_lower_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_3_routeFrom_D_IN;
	if (xbar_lower_merges_fi0HasPrio_EN)
	  xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_fi0HasPrio_D_IN;
	if (xbar_lower_merges_routeFrom_EN)
	  xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_routeFrom_D_IN;
	if (xbar_lower_upper_merges_1_fi0HasPrio_EN)
	  xbar_lower_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_upper_merges_1_routeFrom_EN)
	  xbar_lower_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_1_routeFrom_D_IN;
	if (xbar_lower_upper_merges_fi0HasPrio_EN)
	  xbar_lower_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_fi0HasPrio_D_IN;
	if (xbar_lower_upper_merges_routeFrom_EN)
	  xbar_lower_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_routeFrom_D_IN;
	if (xbar_merges_1_fi0HasPrio_EN)
	  xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_fi0HasPrio_D_IN;
	if (xbar_merges_1_routeFrom_EN)
	  xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_routeFrom_D_IN;
	if (xbar_merges_2_fi0HasPrio_EN)
	  xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_fi0HasPrio_D_IN;
	if (xbar_merges_2_routeFrom_EN)
	  xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_routeFrom_D_IN;
	if (xbar_merges_3_fi0HasPrio_EN)
	  xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_fi0HasPrio_D_IN;
	if (xbar_merges_3_routeFrom_EN)
	  xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_routeFrom_D_IN;
	if (xbar_merges_4_fi0HasPrio_EN)
	  xbar_merges_4_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_4_fi0HasPrio_D_IN;
	if (xbar_merges_4_routeFrom_EN)
	  xbar_merges_4_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_4_routeFrom_D_IN;
	if (xbar_merges_5_fi0HasPrio_EN)
	  xbar_merges_5_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_5_fi0HasPrio_D_IN;
	if (xbar_merges_5_routeFrom_EN)
	  xbar_merges_5_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_5_routeFrom_D_IN;
	if (xbar_merges_6_fi0HasPrio_EN)
	  xbar_merges_6_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_6_fi0HasPrio_D_IN;
	if (xbar_merges_6_routeFrom_EN)
	  xbar_merges_6_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_6_routeFrom_D_IN;
	if (xbar_merges_7_fi0HasPrio_EN)
	  xbar_merges_7_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_7_fi0HasPrio_D_IN;
	if (xbar_merges_7_routeFrom_EN)
	  xbar_merges_7_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_7_routeFrom_D_IN;
	if (xbar_merges_fi0HasPrio_EN)
	  xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_fi0HasPrio_D_IN;
	if (xbar_merges_routeFrom_EN)
	  xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_routeFrom_D_IN;
	if (xbar_upper_lower_merges_1_fi0HasPrio_EN)
	  xbar_upper_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_lower_merges_1_routeFrom_EN)
	  xbar_upper_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_1_routeFrom_D_IN;
	if (xbar_upper_lower_merges_fi0HasPrio_EN)
	  xbar_upper_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_fi0HasPrio_D_IN;
	if (xbar_upper_lower_merges_routeFrom_EN)
	  xbar_upper_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_routeFrom_D_IN;
	if (xbar_upper_merges_1_fi0HasPrio_EN)
	  xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_merges_1_routeFrom_EN)
	  xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_routeFrom_D_IN;
	if (xbar_upper_merges_2_fi0HasPrio_EN)
	  xbar_upper_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_2_fi0HasPrio_D_IN;
	if (xbar_upper_merges_2_routeFrom_EN)
	  xbar_upper_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_2_routeFrom_D_IN;
	if (xbar_upper_merges_3_fi0HasPrio_EN)
	  xbar_upper_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_3_fi0HasPrio_D_IN;
	if (xbar_upper_merges_3_routeFrom_EN)
	  xbar_upper_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_3_routeFrom_D_IN;
	if (xbar_upper_merges_fi0HasPrio_EN)
	  xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_fi0HasPrio_D_IN;
	if (xbar_upper_merges_routeFrom_EN)
	  xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_routeFrom_D_IN;
	if (xbar_upper_upper_merges_1_fi0HasPrio_EN)
	  xbar_upper_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_upper_merges_1_routeFrom_EN)
	  xbar_upper_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_1_routeFrom_D_IN;
	if (xbar_upper_upper_merges_fi0HasPrio_EN)
	  xbar_upper_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_fi0HasPrio_D_IN;
	if (xbar_upper_upper_merges_routeFrom_EN)
	  xbar_upper_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_routeFrom_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
    if (cf_verbosity_0_EN)
      cf_verbosity_0 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_D_IN;
    if (cf_verbosity_0_1_EN)
      cf_verbosity_0_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_1_D_IN;
    if (cf_verbosity_0_2_EN)
      cf_verbosity_0_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_2_D_IN;
    if (cf_verbosity_0_3_EN)
      cf_verbosity_0_3 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_3_D_IN;
    if (cf_verbosity_1_EN)
      cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_D_IN;
    if (cf_verbosity_1_1_EN)
      cf_verbosity_1_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_1_D_IN;
    if (cf_verbosity_1_2_EN)
      cf_verbosity_1_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_2_D_IN;
    if (cf_verbosity_2_EN)
      cf_verbosity_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_D_IN;
    if (cf_verbosity_2_1_EN)
      cf_verbosity_2_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_1_D_IN;
    if (cf_verbosity_2_2_EN)
      cf_verbosity_2_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_2_D_IN;
    if (cf_verbosity_3_EN)
      cf_verbosity_3 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_D_IN;
    if (cf_verbosity_3_1_EN)
      cf_verbosity_3_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_1_D_IN;
    if (cf_verbosity_3_2_EN)
      cf_verbosity_3_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_2_D_IN;
    if (cf_verbosity_4_EN)
      cf_verbosity_4 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_4_D_IN;
    if (hostchan_0_cf_verbosity_EN)
      hostchan_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_0_cf_verbosity_D_IN;
    if (hostchan_1_cf_verbosity_EN)
      hostchan_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_1_cf_verbosity_D_IN;
    if (hostchan_2_cf_verbosity_EN)
      hostchan_2_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_2_cf_verbosity_D_IN;
    if (hostchan_3_cf_verbosity_EN)
      hostchan_3_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_3_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_EN)
      pktBuff_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_1_EN)
      pktBuff_0_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_1_D_IN;
    if (pktBuff_1_cf_verbosity_EN)
      pktBuff_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_D_IN;
    if (pktBuff_1_cf_verbosity_1_EN)
      pktBuff_1_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_1_D_IN;
    if (pktBuff_2_cf_verbosity_EN)
      pktBuff_2_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_2_cf_verbosity_D_IN;
    if (pktBuff_2_cf_verbosity_1_EN)
      pktBuff_2_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_2_cf_verbosity_1_D_IN;
    if (pktBuff_3_cf_verbosity_EN)
      pktBuff_3_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_3_cf_verbosity_D_IN;
    if (pktBuff_3_cf_verbosity_1_EN)
      pktBuff_3_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_3_cf_verbosity_1_D_IN;
    if (pktBuff_4_cf_verbosity_EN)
      pktBuff_4_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_4_cf_verbosity_D_IN;
  end

  always@(posedge CLK_p0)
  begin
    if (RST_N_p1 == `BSV_RESET_VALUE)
      begin
        macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_2_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_2_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_2_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_3_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_3_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_3_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (macToRing_0_data_bytes_EN)
	  macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_data_bytes_D_IN;
	if (macToRing_0_gearbox_data_bytes_EN)
	  macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_data_bytes_D_IN;
	if (macToRing_0_gearbox_eopCount_EN)
	  macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_eopCount_D_IN;
	if (macToRing_0_gearbox_idle_cycles_EN)
	  macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_idle_cycles_D_IN;
	if (macToRing_0_gearbox_inProgress_EN)
	  macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_inProgress_D_IN;
	if (macToRing_0_gearbox_oddBeat_EN)
	  macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_oddBeat_D_IN;
	if (macToRing_0_gearbox_sopCount_EN)
	  macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_sopCount_D_IN;
	if (macToRing_0_gearbox_v_prev_EN)
	  macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_v_prev_D_IN;
	if (macToRing_0_total_cycles_EN)
	  macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_total_cycles_D_IN;
	if (macToRing_1_data_bytes_EN)
	  macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_data_bytes_D_IN;
	if (macToRing_1_gearbox_data_bytes_EN)
	  macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_data_bytes_D_IN;
	if (macToRing_1_gearbox_eopCount_EN)
	  macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_eopCount_D_IN;
	if (macToRing_1_gearbox_idle_cycles_EN)
	  macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_idle_cycles_D_IN;
	if (macToRing_1_gearbox_inProgress_EN)
	  macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_inProgress_D_IN;
	if (macToRing_1_gearbox_oddBeat_EN)
	  macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_oddBeat_D_IN;
	if (macToRing_1_gearbox_sopCount_EN)
	  macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_sopCount_D_IN;
	if (macToRing_1_gearbox_v_prev_EN)
	  macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_v_prev_D_IN;
	if (macToRing_1_total_cycles_EN)
	  macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_total_cycles_D_IN;
	if (macToRing_2_data_bytes_EN)
	  macToRing_2_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_data_bytes_D_IN;
	if (macToRing_2_gearbox_data_bytes_EN)
	  macToRing_2_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_data_bytes_D_IN;
	if (macToRing_2_gearbox_eopCount_EN)
	  macToRing_2_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_eopCount_D_IN;
	if (macToRing_2_gearbox_idle_cycles_EN)
	  macToRing_2_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_idle_cycles_D_IN;
	if (macToRing_2_gearbox_inProgress_EN)
	  macToRing_2_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_inProgress_D_IN;
	if (macToRing_2_gearbox_oddBeat_EN)
	  macToRing_2_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_oddBeat_D_IN;
	if (macToRing_2_gearbox_sopCount_EN)
	  macToRing_2_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_sopCount_D_IN;
	if (macToRing_2_gearbox_v_prev_EN)
	  macToRing_2_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_v_prev_D_IN;
	if (macToRing_2_total_cycles_EN)
	  macToRing_2_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_total_cycles_D_IN;
	if (macToRing_3_data_bytes_EN)
	  macToRing_3_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_data_bytes_D_IN;
	if (macToRing_3_gearbox_data_bytes_EN)
	  macToRing_3_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_data_bytes_D_IN;
	if (macToRing_3_gearbox_eopCount_EN)
	  macToRing_3_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_eopCount_D_IN;
	if (macToRing_3_gearbox_idle_cycles_EN)
	  macToRing_3_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_idle_cycles_D_IN;
	if (macToRing_3_gearbox_inProgress_EN)
	  macToRing_3_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_inProgress_D_IN;
	if (macToRing_3_gearbox_oddBeat_EN)
	  macToRing_3_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_oddBeat_D_IN;
	if (macToRing_3_gearbox_sopCount_EN)
	  macToRing_3_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_sopCount_D_IN;
	if (macToRing_3_gearbox_v_prev_EN)
	  macToRing_3_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_v_prev_D_IN;
	if (macToRing_3_total_cycles_EN)
	  macToRing_3_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2)
  begin
    if (RST_N_p3 == `BSV_RESET_VALUE)
      begin
        ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_2_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_2_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_3_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_3_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (ringToMac_0_data_bytes_EN)
	  ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_data_bytes_D_IN;
	if (ringToMac_0_eopCount_EN)
	  ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_eopCount_D_IN;
	if (ringToMac_0_fifoTxData_block0_EN)
	  ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_D_IN;
	if (ringToMac_0_fifoTxData_block0_status_EN)
	  ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_status_D_IN;
	if (ringToMac_0_fifoTxData_block1_EN)
	  ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_D_IN;
	if (ringToMac_0_fifoTxData_block1_status_EN)
	  ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_status_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_0_EN)
	  ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_1_EN)
	  ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_0_EN)
	  ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_1_EN)
	  ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_0_fifoTxData_read_block_EN)
	  ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_read_block_D_IN;
	if (ringToMac_0_fifoTxData_write_block_EN)
	  ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_write_block_D_IN;
	if (ringToMac_0_idle_cycles_EN)
	  ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idle_cycles_D_IN;
	if (ringToMac_0_sopCount_EN)
	  ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_sopCount_D_IN;
	if (ringToMac_0_total_cycles_EN)
	  ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_total_cycles_D_IN;
	if (ringToMac_1_data_bytes_EN)
	  ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_data_bytes_D_IN;
	if (ringToMac_1_eopCount_EN)
	  ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_eopCount_D_IN;
	if (ringToMac_1_fifoTxData_block0_EN)
	  ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_D_IN;
	if (ringToMac_1_fifoTxData_block0_status_EN)
	  ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_status_D_IN;
	if (ringToMac_1_fifoTxData_block1_EN)
	  ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_D_IN;
	if (ringToMac_1_fifoTxData_block1_status_EN)
	  ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_status_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_0_EN)
	  ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_1_EN)
	  ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_0_EN)
	  ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_1_EN)
	  ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_1_fifoTxData_read_block_EN)
	  ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_read_block_D_IN;
	if (ringToMac_1_fifoTxData_write_block_EN)
	  ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_write_block_D_IN;
	if (ringToMac_1_idle_cycles_EN)
	  ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idle_cycles_D_IN;
	if (ringToMac_1_sopCount_EN)
	  ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_sopCount_D_IN;
	if (ringToMac_1_total_cycles_EN)
	  ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_total_cycles_D_IN;
	if (ringToMac_2_data_bytes_EN)
	  ringToMac_2_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_data_bytes_D_IN;
	if (ringToMac_2_eopCount_EN)
	  ringToMac_2_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_eopCount_D_IN;
	if (ringToMac_2_fifoTxData_block0_EN)
	  ringToMac_2_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block0_D_IN;
	if (ringToMac_2_fifoTxData_block0_status_EN)
	  ringToMac_2_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block0_status_D_IN;
	if (ringToMac_2_fifoTxData_block1_EN)
	  ringToMac_2_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block1_D_IN;
	if (ringToMac_2_fifoTxData_block1_status_EN)
	  ringToMac_2_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block1_status_D_IN;
	if (ringToMac_2_fifoTxData_elem0_status_0_EN)
	  ringToMac_2_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_2_fifoTxData_elem0_status_1_EN)
	  ringToMac_2_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_2_fifoTxData_elem1_status_0_EN)
	  ringToMac_2_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_2_fifoTxData_elem1_status_1_EN)
	  ringToMac_2_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_2_fifoTxData_read_block_EN)
	  ringToMac_2_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_read_block_D_IN;
	if (ringToMac_2_fifoTxData_write_block_EN)
	  ringToMac_2_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_write_block_D_IN;
	if (ringToMac_2_idle_cycles_EN)
	  ringToMac_2_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_idle_cycles_D_IN;
	if (ringToMac_2_sopCount_EN)
	  ringToMac_2_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_sopCount_D_IN;
	if (ringToMac_2_total_cycles_EN)
	  ringToMac_2_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_total_cycles_D_IN;
	if (ringToMac_3_data_bytes_EN)
	  ringToMac_3_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_data_bytes_D_IN;
	if (ringToMac_3_eopCount_EN)
	  ringToMac_3_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_eopCount_D_IN;
	if (ringToMac_3_fifoTxData_block0_EN)
	  ringToMac_3_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block0_D_IN;
	if (ringToMac_3_fifoTxData_block0_status_EN)
	  ringToMac_3_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block0_status_D_IN;
	if (ringToMac_3_fifoTxData_block1_EN)
	  ringToMac_3_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block1_D_IN;
	if (ringToMac_3_fifoTxData_block1_status_EN)
	  ringToMac_3_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block1_status_D_IN;
	if (ringToMac_3_fifoTxData_elem0_status_0_EN)
	  ringToMac_3_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_3_fifoTxData_elem0_status_1_EN)
	  ringToMac_3_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_3_fifoTxData_elem1_status_0_EN)
	  ringToMac_3_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_3_fifoTxData_elem1_status_1_EN)
	  ringToMac_3_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_3_fifoTxData_read_block_EN)
	  ringToMac_3_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_read_block_D_IN;
	if (ringToMac_3_fifoTxData_write_block_EN)
	  ringToMac_3_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_write_block_D_IN;
	if (ringToMac_3_idle_cycles_EN)
	  ringToMac_3_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_idle_cycles_D_IN;
	if (ringToMac_3_sopCount_EN)
	  ringToMac_3_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_sopCount_D_IN;
	if (ringToMac_3_total_cycles_EN)
	  ringToMac_3_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_3_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_3_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_3_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_3_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_3_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_3_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_3_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_3_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_2_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_2_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_2_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_2_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_2_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_2_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_2_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_2_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    cf_verbosity_0 = 32'hAAAAAAAA;
    cf_verbosity_0_1 = 32'hAAAAAAAA;
    cf_verbosity_0_2 = 32'hAAAAAAAA;
    cf_verbosity_0_3 = 32'hAAAAAAAA;
    cf_verbosity_1 = 32'hAAAAAAAA;
    cf_verbosity_1_1 = 32'hAAAAAAAA;
    cf_verbosity_1_2 = 32'hAAAAAAAA;
    cf_verbosity_2 = 32'hAAAAAAAA;
    cf_verbosity_2_1 = 32'hAAAAAAAA;
    cf_verbosity_2_2 = 32'hAAAAAAAA;
    cf_verbosity_3 = 32'hAAAAAAAA;
    cf_verbosity_3_1 = 32'hAAAAAAAA;
    cf_verbosity_3_2 = 32'hAAAAAAAA;
    cf_verbosity_4 = 32'hAAAAAAAA;
    hostchan_0_cf_verbosity = 32'hAAAAAAAA;
    hostchan_0_readStarted = 1'h0;
    hostchan_1_cf_verbosity = 32'hAAAAAAAA;
    hostchan_1_readStarted = 1'h0;
    hostchan_2_cf_verbosity = 32'hAAAAAAAA;
    hostchan_2_readStarted = 1'h0;
    hostchan_3_cf_verbosity = 32'hAAAAAAAA;
    hostchan_3_readStarted = 1'h0;
    macToRing_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_inProgress = 1'h0;
    macToRing_0_gearbox_oddBeat = 1'h0;
    macToRing_0_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_inProgress = 1'h0;
    macToRing_1_gearbox_oddBeat = 1'h0;
    macToRing_1_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_inProgress = 1'h0;
    macToRing_2_gearbox_oddBeat = 1'h0;
    macToRing_2_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_2_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_inProgress = 1'h0;
    macToRing_3_gearbox_oddBeat = 1'h0;
    macToRing_3_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_3_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_0_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_0_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_inPacket = 1'h0;
    pktBuff_0_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_0_outPacket = 1'h0;
    pktBuff_0_packetLen = 16'hAAAA;
    pktBuff_0_rdCurrPtr = 8'hAA;
    pktBuff_0_readStarted = 1'h0;
    pktBuff_0_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_wrCurrPtr = 8'hAA;
    pktBuff_1_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_1_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_1_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_inPacket = 1'h0;
    pktBuff_1_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_1_outPacket = 1'h0;
    pktBuff_1_packetLen = 16'hAAAA;
    pktBuff_1_rdCurrPtr = 8'hAA;
    pktBuff_1_readStarted = 1'h0;
    pktBuff_1_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_wrCurrPtr = 8'hAA;
    pktBuff_2_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_2_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_2_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_inPacket = 1'h0;
    pktBuff_2_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_2_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_2_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_2_outPacket = 1'h0;
    pktBuff_2_packetLen = 16'hAAAA;
    pktBuff_2_rdCurrPtr = 8'hAA;
    pktBuff_2_readStarted = 1'h0;
    pktBuff_2_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_wrCurrPtr = 8'hAA;
    pktBuff_3_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_3_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_3_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_inPacket = 1'h0;
    pktBuff_3_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_3_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_3_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_3_outPacket = 1'h0;
    pktBuff_3_packetLen = 16'hAAAA;
    pktBuff_3_rdCurrPtr = 8'hAA;
    pktBuff_3_readStarted = 1'h0;
    pktBuff_3_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_wrCurrPtr = 8'hAA;
    pktBuff_4_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_4_readStarted = 1'h0;
    readStarted_0 = 1'h0;
    ringToMac_0_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0_status = 1'h0;
    ringToMac_0_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block1_status = 1'h0;
    ringToMac_0_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_0_fifoTxData_read_block = 1'h0;
    ringToMac_0_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_write_block = 1'h0;
    ringToMac_0_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0_status = 1'h0;
    ringToMac_1_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block1_status = 1'h0;
    ringToMac_1_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_1_fifoTxData_read_block = 1'h0;
    ringToMac_1_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_write_block = 1'h0;
    ringToMac_1_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block0_status = 1'h0;
    ringToMac_2_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block1_status = 1'h0;
    ringToMac_2_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_2_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_2_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_2_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_2_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_2_fifoTxData_read_block = 1'h0;
    ringToMac_2_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_2_fifoTxData_write_block = 1'h0;
    ringToMac_2_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block0_status = 1'h0;
    ringToMac_3_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block1_status = 1'h0;
    ringToMac_3_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_3_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_3_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_3_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_3_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_3_fifoTxData_read_block = 1'h0;
    ringToMac_3_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_3_fifoTxData_write_block = 1'h0;
    ringToMac_3_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    xbar_lower_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_lower_merges_1_routeFrom = 2'h2;
    xbar_lower_lower_merges_fi0HasPrio = 1'h0;
    xbar_lower_lower_merges_routeFrom = 2'h2;
    xbar_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_merges_1_routeFrom = 2'h2;
    xbar_lower_merges_2_fi0HasPrio = 1'h0;
    xbar_lower_merges_2_routeFrom = 2'h2;
    xbar_lower_merges_3_fi0HasPrio = 1'h0;
    xbar_lower_merges_3_routeFrom = 2'h2;
    xbar_lower_merges_fi0HasPrio = 1'h0;
    xbar_lower_merges_routeFrom = 2'h2;
    xbar_lower_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_upper_merges_1_routeFrom = 2'h2;
    xbar_lower_upper_merges_fi0HasPrio = 1'h0;
    xbar_lower_upper_merges_routeFrom = 2'h2;
    xbar_merges_1_fi0HasPrio = 1'h0;
    xbar_merges_1_routeFrom = 2'h2;
    xbar_merges_2_fi0HasPrio = 1'h0;
    xbar_merges_2_routeFrom = 2'h2;
    xbar_merges_3_fi0HasPrio = 1'h0;
    xbar_merges_3_routeFrom = 2'h2;
    xbar_merges_4_fi0HasPrio = 1'h0;
    xbar_merges_4_routeFrom = 2'h2;
    xbar_merges_5_fi0HasPrio = 1'h0;
    xbar_merges_5_routeFrom = 2'h2;
    xbar_merges_6_fi0HasPrio = 1'h0;
    xbar_merges_6_routeFrom = 2'h2;
    xbar_merges_7_fi0HasPrio = 1'h0;
    xbar_merges_7_routeFrom = 2'h2;
    xbar_merges_fi0HasPrio = 1'h0;
    xbar_merges_routeFrom = 2'h2;
    xbar_upper_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_lower_merges_1_routeFrom = 2'h2;
    xbar_upper_lower_merges_fi0HasPrio = 1'h0;
    xbar_upper_lower_merges_routeFrom = 2'h2;
    xbar_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_merges_1_routeFrom = 2'h2;
    xbar_upper_merges_2_fi0HasPrio = 1'h0;
    xbar_upper_merges_2_routeFrom = 2'h2;
    xbar_upper_merges_3_fi0HasPrio = 1'h0;
    xbar_upper_merges_3_routeFrom = 2'h2;
    xbar_upper_merges_fi0HasPrio = 1'h0;
    xbar_upper_merges_routeFrom = 2'h2;
    xbar_upper_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_upper_merges_1_routeFrom = 2'h2;
    xbar_upper_upper_merges_fi0HasPrio = 1'h0;
    xbar_upper_upper_merges_routeFrom = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	begin
	  v__h267393 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	$display("(%0d) set verbosity to %d",
		 v__h267393,
		 $signed(set_verbosity_verbosity));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	begin
	  v___1__h230463 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h230463);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_0_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_0_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_0_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_0_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_0_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	begin
	  v___1__h230720 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h230720);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_5_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_5_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_5_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_5_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_5_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	begin
	  v___1__h230980 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h230980);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_6_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_6_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_6_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_6_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_6_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	begin
	  v___1__h231240 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h231240);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_7_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_7_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_7_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_7_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_7_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_2_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_2_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_3_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_3_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	begin
	  v__h182579 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h182579,
	       xbar_upper_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[577:66] :
		 xbar_upper_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[65:2] :
		 xbar_upper_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[609:578] :
		 xbar_upper_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[1] :
		 xbar_upper_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_routeFrom_598_BIT_0_ETC___d4631);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	begin
	  v__h182646 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h182646);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[577:66] :
		 xbar_upper_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[65:2] :
		 xbar_upper_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[609:578] :
		 xbar_upper_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4624);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_fi0HasPrio_603_THEN_ETC___d4641);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	begin
	  v__h183626 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h183626,
	       xbar_upper_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[1] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_1_routeFrom_673_BIT_ETC___d4706);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	begin
	  v__h183692 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h183692);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4699);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_1_fi0HasPrio_678_TH_ETC___d4716);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route)
	$display("%x %x %d",
		 xbar_upper_upper_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  xbar_upper_upper_upper_f_D_OUT[578])
	begin
	  v__h184334 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  xbar_upper_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h184334,
		 $signed(32'd1),
		 xbar_upper_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  !xbar_upper_upper_upper_f_D_OUT[578])
	begin
	  v__h184275 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  !xbar_upper_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h184275,
		 $signed(32'd0),
		 xbar_upper_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1)
	$display("%x %x %d",
		 xbar_upper_upper_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  xbar_upper_upper_lower_f_D_OUT[578])
	begin
	  v__h184691 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  xbar_upper_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h184691,
		 $signed(32'd1),
		 !xbar_upper_upper_lower_f_D_OUT[578],
		 xbar_upper_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  !xbar_upper_upper_lower_f_D_OUT[578])
	begin
	  v__h184744 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  !xbar_upper_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h184744,
		 $signed(32'd0),
		 !xbar_upper_upper_lower_f_D_OUT[578],
		 xbar_upper_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	begin
	  v__h185786 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h185786,
	       xbar_upper_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[577:66] :
		 xbar_upper_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[65:2] :
		 xbar_upper_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[609:578] :
		 xbar_upper_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[1] :
		 xbar_upper_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_routeFrom_772_BIT_0_ETC___d4805);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	begin
	  v__h185852 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h185852);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[577:66] :
		 xbar_upper_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[65:2] :
		 xbar_upper_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[609:578] :
		 xbar_upper_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4798);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_fi0HasPrio_777_THEN_ETC___d4815);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	begin
	  v__h186832 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h186832,
	       xbar_upper_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[1] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_1_routeFrom_847_BIT_ETC___d4880);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	begin
	  v__h186898 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h186898);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4873);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_1_fi0HasPrio_852_TH_ETC___d4890);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route)
	$display("%x %x %d",
		 xbar_upper_lower_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  xbar_upper_lower_upper_f_D_OUT[578])
	begin
	  v__h187540 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  xbar_upper_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187540,
		 $signed(32'd1),
		 xbar_upper_lower_upper_f_D_OUT[578],
		 xbar_upper_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  !xbar_upper_lower_upper_f_D_OUT[578])
	begin
	  v__h187481 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  !xbar_upper_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187481,
		 $signed(32'd0),
		 xbar_upper_lower_upper_f_D_OUT[578],
		 xbar_upper_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1)
	$display("%x %x %d",
		 xbar_upper_lower_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  xbar_upper_lower_lower_f_D_OUT[578])
	begin
	  v__h187897 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  xbar_upper_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187897,
		 $signed(32'd1),
		 !xbar_upper_lower_lower_f_D_OUT[578],
		 xbar_upper_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  !xbar_upper_lower_lower_f_D_OUT[578])
	begin
	  v__h187950 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  !xbar_upper_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187950,
		 $signed(32'd0),
		 !xbar_upper_lower_lower_f_D_OUT[578],
		 xbar_upper_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	begin
	  v__h188754 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h188754,
	       xbar_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[577:66] :
		 xbar_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[65:2] :
		 xbar_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[609:578] :
		 xbar_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[1] :
		 xbar_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_routeFrom_944_BIT_0_946_T_ETC___d4977);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	begin
	  v__h188820 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h188820);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[577:66] :
		 xbar_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[65:2] :
		 xbar_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[609:578] :
		 xbar_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4970);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_949_THEN_xbar__ETC___d4987);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h189800 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h189800,
	       xbar_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[1] :
		 xbar_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_routeFrom_019_BIT_0_021_ETC___d5052);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h189866 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h189866);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5045);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_024_THEN_xba_ETC___d5062);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	begin
	  v__h190846 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h190846,
	       xbar_upper_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[577:66] :
		 xbar_upper_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[65:2] :
		 xbar_upper_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[609:578] :
		 xbar_upper_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[1] :
		 xbar_upper_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_2_routeFrom_094_BIT_0_096_ETC___d5127);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	begin
	  v__h190912 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h190912);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[577:66] :
		 xbar_upper_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[65:2] :
		 xbar_upper_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[609:578] :
		 xbar_upper_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5120);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_2_fi0HasPrio_099_THEN_xba_ETC___d5137);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route)
	$display("%x %x %d",
		 xbar_upper_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  xbar_upper_upper_merges_fo_D_OUT[579])
	begin
	  v__h192631 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  xbar_upper_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h192631,
		 $signed(32'd2),
		 xbar_upper_upper_merges_fo_D_OUT[579],
		 xbar_upper_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  !xbar_upper_upper_merges_fo_D_OUT[579])
	begin
	  v__h192572 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  !xbar_upper_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h192572,
		 $signed(32'd0),
		 xbar_upper_upper_merges_fo_D_OUT[579],
		 xbar_upper_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2)
	$display("%x %x %d",
		 xbar_upper_lower_merges_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  xbar_upper_lower_merges_fo_D_OUT[579])
	begin
	  v__h193453 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  xbar_upper_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193453,
		 $signed(32'd2),
		 !xbar_upper_lower_merges_fo_D_OUT[579],
		 xbar_upper_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  !xbar_upper_lower_merges_fo_D_OUT[579])
	begin
	  v__h193506 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  !xbar_upper_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193506,
		 $signed(32'd0),
		 !xbar_upper_lower_merges_fo_D_OUT[579],
		 xbar_upper_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	begin
	  v__h191892 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h191892,
	       xbar_upper_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[577:66] :
		 xbar_upper_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[65:2] :
		 xbar_upper_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[609:578] :
		 xbar_upper_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[1] :
		 xbar_upper_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_3_routeFrom_169_BIT_0_171_ETC___d5202);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	begin
	  v__h191958 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h191958);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[577:66] :
		 xbar_upper_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[65:2] :
		 xbar_upper_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[609:578] :
		 xbar_upper_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5195);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_3_fi0HasPrio_174_THEN_xba_ETC___d5212);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1)
	$display("%x %x %d",
		 xbar_upper_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  xbar_upper_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h193059 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  xbar_upper_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193059,
		 $signed(32'd3),
		 xbar_upper_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  !xbar_upper_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h193005 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  !xbar_upper_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193005,
		 $signed(32'd1),
		 xbar_upper_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3)
	$display("%x %x %d",
		 xbar_upper_lower_merges_1_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  xbar_upper_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h193879 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  xbar_upper_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193879,
		 $signed(32'd3),
		 !xbar_upper_lower_merges_1_fo_D_OUT[579],
		 xbar_upper_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  !xbar_upper_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h193932 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  !xbar_upper_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193932,
		 $signed(32'd1),
		 !xbar_upper_lower_merges_1_fo_D_OUT[579],
		 xbar_upper_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	begin
	  v__h194999 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h194999,
	       xbar_lower_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[577:66] :
		 xbar_lower_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[65:2] :
		 xbar_lower_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[609:578] :
		 xbar_lower_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[1] :
		 xbar_lower_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_routeFrom_290_BIT_0_ETC___d5323);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	begin
	  v__h195065 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h195065);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[577:66] :
		 xbar_lower_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[65:2] :
		 xbar_lower_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[609:578] :
		 xbar_lower_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5316);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_fi0HasPrio_295_THEN_ETC___d5333);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	begin
	  v__h196045 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h196045,
	       xbar_lower_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[1] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_1_routeFrom_365_BIT_ETC___d5398);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	begin
	  v__h196111 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h196111);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5391);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_1_fi0HasPrio_370_TH_ETC___d5408);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route)
	$display("%x %x %d",
		 xbar_lower_upper_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  xbar_lower_upper_upper_f_D_OUT[578])
	begin
	  v__h196753 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  xbar_lower_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h196753,
		 $signed(32'd1),
		 xbar_lower_upper_upper_f_D_OUT[578],
		 xbar_lower_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  !xbar_lower_upper_upper_f_D_OUT[578])
	begin
	  v__h196694 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  !xbar_lower_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h196694,
		 $signed(32'd0),
		 xbar_lower_upper_upper_f_D_OUT[578],
		 xbar_lower_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1)
	$display("%x %x %d",
		 xbar_lower_upper_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  xbar_lower_upper_lower_f_D_OUT[578])
	begin
	  v__h197110 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  xbar_lower_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h197110,
		 $signed(32'd1),
		 !xbar_lower_upper_lower_f_D_OUT[578],
		 xbar_lower_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  !xbar_lower_upper_lower_f_D_OUT[578])
	begin
	  v__h197163 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  !xbar_lower_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h197163,
		 $signed(32'd0),
		 !xbar_lower_upper_lower_f_D_OUT[578],
		 xbar_lower_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	begin
	  v__h198205 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h198205,
	       xbar_lower_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[577:66] :
		 xbar_lower_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[65:2] :
		 xbar_lower_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[609:578] :
		 xbar_lower_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[1] :
		 xbar_lower_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_routeFrom_462_BIT_0_ETC___d5495);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	begin
	  v__h198271 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h198271);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[577:66] :
		 xbar_lower_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[65:2] :
		 xbar_lower_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[609:578] :
		 xbar_lower_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5488);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_fi0HasPrio_467_THEN_ETC___d5505);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	begin
	  v__h199251 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h199251,
	       xbar_lower_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[1] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_1_routeFrom_537_BIT_ETC___d5570);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	begin
	  v__h199317 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h199317);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5563);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_1_fi0HasPrio_542_TH_ETC___d5580);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route)
	$display("%x %x %d",
		 xbar_lower_lower_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  xbar_lower_lower_upper_f_D_OUT[578])
	begin
	  v__h199959 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  xbar_lower_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199959,
		 $signed(32'd1),
		 xbar_lower_lower_upper_f_D_OUT[578],
		 xbar_lower_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  !xbar_lower_lower_upper_f_D_OUT[578])
	begin
	  v__h199900 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  !xbar_lower_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199900,
		 $signed(32'd0),
		 xbar_lower_lower_upper_f_D_OUT[578],
		 xbar_lower_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1)
	$display("%x %x %d",
		 xbar_lower_lower_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  xbar_lower_lower_lower_f_D_OUT[578])
	begin
	  v__h200316 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  xbar_lower_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h200316,
		 $signed(32'd1),
		 !xbar_lower_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  !xbar_lower_lower_lower_f_D_OUT[578])
	begin
	  v__h200369 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  !xbar_lower_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h200369,
		 $signed(32'd0),
		 !xbar_lower_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	begin
	  v__h201173 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h201173,
	       xbar_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[577:66] :
		 xbar_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[65:2] :
		 xbar_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[609:578] :
		 xbar_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[1] :
		 xbar_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_routeFrom_634_BIT_0_636_T_ETC___d5667);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	begin
	  v__h201239 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h201239);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[577:66] :
		 xbar_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[65:2] :
		 xbar_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[609:578] :
		 xbar_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5660);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_639_THEN_xbar__ETC___d5677);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h202219 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h202219,
	       xbar_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[1] :
		 xbar_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_routeFrom_709_BIT_0_711_ETC___d5742);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h202285 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h202285);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5735);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_714_THEN_xba_ETC___d5752);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	begin
	  v__h203265 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h203265,
	       xbar_lower_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[577:66] :
		 xbar_lower_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[65:2] :
		 xbar_lower_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[609:578] :
		 xbar_lower_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[1] :
		 xbar_lower_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_2_routeFrom_784_BIT_0_786_ETC___d5817);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	begin
	  v__h203331 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h203331);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[577:66] :
		 xbar_lower_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[65:2] :
		 xbar_lower_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[609:578] :
		 xbar_lower_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5810);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_2_fi0HasPrio_789_THEN_xba_ETC___d5827);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route)
	$display("%x %x %d",
		 xbar_lower_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  xbar_lower_upper_merges_fo_D_OUT[579])
	begin
	  v__h205050 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  xbar_lower_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h205050,
		 $signed(32'd2),
		 xbar_lower_upper_merges_fo_D_OUT[579],
		 xbar_lower_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  !xbar_lower_upper_merges_fo_D_OUT[579])
	begin
	  v__h204991 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  !xbar_lower_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h204991,
		 $signed(32'd0),
		 xbar_lower_upper_merges_fo_D_OUT[579],
		 xbar_lower_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2)
	$display("%x %x %d",
		 xbar_lower_lower_merges_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  xbar_lower_lower_merges_fo_D_OUT[579])
	begin
	  v__h205872 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  xbar_lower_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h205872,
		 $signed(32'd2),
		 !xbar_lower_lower_merges_fo_D_OUT[579],
		 xbar_lower_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  !xbar_lower_lower_merges_fo_D_OUT[579])
	begin
	  v__h205925 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  !xbar_lower_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h205925,
		 $signed(32'd0),
		 !xbar_lower_lower_merges_fo_D_OUT[579],
		 xbar_lower_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	begin
	  v__h204311 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h204311,
	       xbar_lower_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[577:66] :
		 xbar_lower_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[65:2] :
		 xbar_lower_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[609:578] :
		 xbar_lower_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[1] :
		 xbar_lower_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_3_routeFrom_859_BIT_0_861_ETC___d5892);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	begin
	  v__h204377 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h204377);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[577:66] :
		 xbar_lower_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[65:2] :
		 xbar_lower_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[609:578] :
		 xbar_lower_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5885);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_3_fi0HasPrio_864_THEN_xba_ETC___d5902);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1)
	$display("%x %x %d",
		 xbar_lower_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  xbar_lower_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h205478 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  xbar_lower_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h205478,
		 $signed(32'd3),
		 xbar_lower_upper_merges_1_fo_D_OUT[579],
		 xbar_lower_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  !xbar_lower_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h205424 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  !xbar_lower_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h205424,
		 $signed(32'd1),
		 xbar_lower_upper_merges_1_fo_D_OUT[579],
		 xbar_lower_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3)
	$display("%x %x %d",
		 xbar_lower_lower_merges_1_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  xbar_lower_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h206298 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  xbar_lower_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h206298,
		 $signed(32'd3),
		 !xbar_lower_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  !xbar_lower_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h206351 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  !xbar_lower_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h206351,
		 $signed(32'd1),
		 !xbar_lower_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	begin
	  v__h207164 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("(%0d) both avail %d ", v__h207164, xbar_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[577:66] :
		 xbar_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[65:2] :
		 xbar_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[609:578] :
		 xbar_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[1] :
		 xbar_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_routeFrom_978_BIT_0_980_THEN_xb_ETC___d6011);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	begin
	  v__h207230 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h207230);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[577:66] :
		 xbar_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[65:2] :
		 xbar_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[609:578] :
		 xbar_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6004);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_fi0HasPrio_983_THEN_xbar_merges_ETC___d6021);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	begin
	  v__h208210 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h208210,
	       xbar_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[577:66] :
		 xbar_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[65:2] :
		 xbar_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[609:578] :
		 xbar_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[1] :
		 xbar_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_routeFrom_053_BIT_0_055_THEN__ETC___d6086);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	begin
	  v__h208276 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h208276);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[577:66] :
		 xbar_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[65:2] :
		 xbar_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[609:578] :
		 xbar_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6079);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_fi0HasPrio_058_THEN_xbar_merg_ETC___d6096);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	begin
	  v__h209256 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h209256,
	       xbar_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[577:66] :
		 xbar_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[65:2] :
		 xbar_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[609:578] :
		 xbar_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[1] :
		 xbar_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_routeFrom_128_BIT_0_130_THEN__ETC___d6161);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	begin
	  v__h209322 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h209322);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[577:66] :
		 xbar_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[65:2] :
		 xbar_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[609:578] :
		 xbar_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6154);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_fi0HasPrio_133_THEN_xbar_merg_ETC___d6171);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	begin
	  v__h210302 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h210302,
	       xbar_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[577:66] :
		 xbar_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[65:2] :
		 xbar_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[609:578] :
		 xbar_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[1] :
		 xbar_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_routeFrom_203_BIT_0_205_THEN__ETC___d6236);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	begin
	  v__h210368 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h210368);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[577:66] :
		 xbar_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[65:2] :
		 xbar_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[609:578] :
		 xbar_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6229);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_fi0HasPrio_208_THEN_xbar_merg_ETC___d6246);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	begin
	  v__h211348 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h211348,
	       xbar_merges_4_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[577:66] :
		 xbar_merges_4_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[65:2] :
		 xbar_merges_4_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[609:578] :
		 xbar_merges_4_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[1] :
		 xbar_merges_4_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_4_routeFrom_278_BIT_0_280_THEN__ETC___d6311);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	begin
	  v__h211414 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write("(%0d) both avail ", v__h211414);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[577:66] :
		 xbar_merges_4_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[65:2] :
		 xbar_merges_4_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[609:578] :
		 xbar_merges_4_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6304);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_4_fi0HasPrio_283_THEN_xbar_merg_ETC___d6321);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route)
	$display("%x %x %d",
		 xbar_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580])
	begin
	  v__h215249 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h215249,
		 $signed(32'd4),
		 xbar_upper_merges_fo_D_OUT[580],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580])
	begin
	  v__h215190 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h215190,
		 $signed(32'd0),
		 xbar_upper_merges_fo_D_OUT[580],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4)
	$display("%x %x %d",
		 xbar_lower_merges_fo_D_OUT[609:578],
		 32'd4,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580])
	begin
	  v__h217017 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217017,
		 $signed(32'd4),
		 !xbar_lower_merges_fo_D_OUT[580],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580])
	begin
	  v__h217070 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217070,
		 $signed(32'd0),
		 !xbar_lower_merges_fo_D_OUT[580],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	begin
	  v__h212394 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h212394,
	       xbar_merges_5_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[577:66] :
		 xbar_merges_5_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[65:2] :
		 xbar_merges_5_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[609:578] :
		 xbar_merges_5_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[1] :
		 xbar_merges_5_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_5_routeFrom_353_BIT_0_355_THEN__ETC___d6386);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	begin
	  v__h212460 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write("(%0d) both avail ", v__h212460);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[577:66] :
		 xbar_merges_5_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[65:2] :
		 xbar_merges_5_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[609:578] :
		 xbar_merges_5_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6379);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_5_fi0HasPrio_358_THEN_xbar_merg_ETC___d6396);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1)
	$display("%x %x %d",
		 xbar_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580])
	begin
	  v__h215683 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h215683,
		 $signed(32'd5),
		 xbar_upper_merges_1_fo_D_OUT[580],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580])
	begin
	  v__h215629 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h215629,
		 $signed(32'd1),
		 xbar_upper_merges_1_fo_D_OUT[580],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5)
	$display("%x %x %d",
		 xbar_lower_merges_1_fo_D_OUT[609:578],
		 32'd5,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580])
	begin
	  v__h217455 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217455,
		 $signed(32'd5),
		 !xbar_lower_merges_1_fo_D_OUT[580],
		 xbar_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580])
	begin
	  v__h217508 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217508,
		 $signed(32'd1),
		 !xbar_lower_merges_1_fo_D_OUT[580],
		 xbar_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	begin
	  v__h213440 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h213440,
	       xbar_merges_6_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[577:66] :
		 xbar_merges_6_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[65:2] :
		 xbar_merges_6_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[609:578] :
		 xbar_merges_6_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[1] :
		 xbar_merges_6_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_6_routeFrom_428_BIT_0_430_THEN__ETC___d6461);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	begin
	  v__h213506 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write("(%0d) both avail ", v__h213506);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[577:66] :
		 xbar_merges_6_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[65:2] :
		 xbar_merges_6_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[609:578] :
		 xbar_merges_6_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6454);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_6_fi0HasPrio_433_THEN_xbar_merg_ETC___d6471);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2)
	$display("%x %x %d",
		 xbar_upper_merges_2_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580])
	begin
	  v__h216129 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h216129,
		 $signed(32'd6),
		 xbar_upper_merges_2_fo_D_OUT[580],
		 xbar_upper_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580])
	begin
	  v__h216075 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h216075,
		 $signed(32'd2),
		 xbar_upper_merges_2_fo_D_OUT[580],
		 xbar_upper_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6)
	$display("%x %x %d",
		 xbar_lower_merges_2_fo_D_OUT[609:578],
		 32'd6,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580])
	begin
	  v__h217905 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217905,
		 $signed(32'd6),
		 !xbar_lower_merges_2_fo_D_OUT[580],
		 xbar_lower_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580])
	begin
	  v__h217958 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h217958,
		 $signed(32'd2),
		 !xbar_lower_merges_2_fo_D_OUT[580],
		 xbar_lower_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	begin
	  v__h214486 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h214486,
	       xbar_merges_7_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[577:66] :
		 xbar_merges_7_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[65:2] :
		 xbar_merges_7_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[609:578] :
		 xbar_merges_7_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[1] :
		 xbar_merges_7_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_7_routeFrom_503_BIT_0_505_THEN__ETC___d6536);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	begin
	  v__h214552 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write("(%0d) both avail ", v__h214552);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[577:66] :
		 xbar_merges_7_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[65:2] :
		 xbar_merges_7_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[609:578] :
		 xbar_merges_7_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6529);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_7_fi0HasPrio_508_THEN_xbar_merg_ETC___d6546);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3)
	$display("%x %x %d",
		 xbar_upper_merges_3_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580])
	begin
	  v__h216587 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h216587,
		 $signed(32'd7),
		 xbar_upper_merges_3_fo_D_OUT[580],
		 xbar_upper_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580])
	begin
	  v__h216533 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h216533,
		 $signed(32'd3),
		 xbar_upper_merges_3_fo_D_OUT[580],
		 xbar_upper_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7)
	$display("%x %x %d",
		 xbar_lower_merges_3_fo_D_OUT[609:578],
		 32'd7,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580])
	begin
	  v__h218367 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h218367,
		 $signed(32'd7),
		 !xbar_lower_merges_3_fo_D_OUT[580],
		 xbar_lower_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580])
	begin
	  v__h218420 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h218420,
		 $signed(32'd3),
		 !xbar_lower_merges_3_fo_D_OUT[580],
		 xbar_lower_merges_3_fo_D_OUT);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_p0)
  begin
    #0;
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	begin
	  v__h14551 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h14551);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	begin
	  v__h23182 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h23182);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_2_writeData &&
	  macToRing_2_gearbox_out_ff_D_OUT[1])
	begin
	  v__h31813 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_2_writeData &&
	  macToRing_2_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h31813);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_3_writeData &&
	  macToRing_3_gearbox_out_ff_D_OUT[1])
	begin
	  v__h40444 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_3_writeData &&
	  macToRing_3_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h40444);
  end
  // synopsys translate_on
endmodule  // mkRuntime_4_4_1

