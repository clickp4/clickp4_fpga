//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Sun Jun  4 11:09:48 CST 2017
//
// BVI format method schedule info:
// schedule rxchan_0_macRx_put  CF ( rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_0_macRx_put  C ( rxchan_0_macRx_put );
//
// schedule rxchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_0_writeClient_first  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_0_writeClient_deq  C ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_0_writeClient_notEmpty  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_0_next_first  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_0_next_deq  C ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_0_next_notEmpty  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_0_verbose_enq  C ( rxchan_0_verbose_enq, set_verbosity );
//
// schedule rxchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_0_verbose_notFull  SBR ( rxchan_0_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_1_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_1_macRx_put  C ( rxchan_1_macRx_put );
//
// schedule rxchan_1_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_1_writeClient_first  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_1_writeClient_deq  C ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_1_writeClient_notEmpty  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_1_next_first  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_1_next_deq  C ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_1_next_notEmpty  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_1_verbose_enq  C ( rxchan_1_verbose_enq, set_verbosity );
//
// schedule rxchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_1_verbose_notFull  SBR ( rxchan_1_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_2_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_2_macRx_put  C ( rxchan_2_macRx_put );
//
// schedule rxchan_2_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_2_writeClient_first  SB ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_2_writeClient_deq  C ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_deq,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_2_writeClient_notEmpty  SB ( rxchan_2_writeClient_deq );
//
// schedule rxchan_2_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_2_next_first  SB ( rxchan_2_next_deq );
//
// schedule rxchan_2_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_next_first,
// 				 rxchan_3_next_deq,
// 				 rxchan_3_next_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_2_next_deq  C ( rxchan_2_next_deq );
//
// schedule rxchan_2_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_2_next_notEmpty  SB ( rxchan_2_next_deq );
//
// schedule rxchan_2_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_2_verbose_enq  C ( rxchan_2_verbose_enq, set_verbosity );
//
// schedule rxchan_2_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_2_verbose_notFull  SBR ( rxchan_2_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_3_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule rxchan_3_macRx_put  C ( rxchan_3_macRx_put );
//
// schedule rxchan_3_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule rxchan_3_writeClient_first  SB ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule rxchan_3_writeClient_deq  C ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     rxchan_2_macRx_put,
// 					     rxchan_2_writeClient_first,
// 					     rxchan_2_writeClient_deq,
// 					     rxchan_2_writeClient_notEmpty,
// 					     rxchan_2_next_first,
// 					     rxchan_2_next_deq,
// 					     rxchan_2_next_notEmpty,
// 					     rxchan_2_verbose_enq,
// 					     rxchan_2_verbose_notFull,
// 					     rxchan_3_macRx_put,
// 					     rxchan_3_writeClient_first,
// 					     rxchan_3_writeClient_notEmpty,
// 					     rxchan_3_next_first,
// 					     rxchan_3_next_deq,
// 					     rxchan_3_next_notEmpty,
// 					     rxchan_3_verbose_enq,
// 					     rxchan_3_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     txchan_2_writeServer_enq,
// 					     txchan_2_writeServer_notFull,
// 					     txchan_2_macTx_get,
// 					     txchan_2_verbose_enq,
// 					     txchan_2_verbose_notFull,
// 					     txchan_3_writeServer_enq,
// 					     txchan_3_writeServer_notFull,
// 					     txchan_3_macTx_get,
// 					     txchan_3_verbose_enq,
// 					     txchan_3_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     prev_3_enq,
// 					     prev_3_notFull,
// 					     prev_4_enq,
// 					     prev_4_notFull,
// 					     set_verbosity );
// schedule rxchan_3_writeClient_notEmpty  SB ( rxchan_3_writeClient_deq );
//
// schedule rxchan_3_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule rxchan_3_next_first  SB ( rxchan_3_next_deq );
//
// schedule rxchan_3_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 rxchan_2_macRx_put,
// 				 rxchan_2_writeClient_first,
// 				 rxchan_2_writeClient_deq,
// 				 rxchan_2_writeClient_notEmpty,
// 				 rxchan_2_next_first,
// 				 rxchan_2_next_deq,
// 				 rxchan_2_next_notEmpty,
// 				 rxchan_2_verbose_enq,
// 				 rxchan_2_verbose_notFull,
// 				 rxchan_3_macRx_put,
// 				 rxchan_3_writeClient_first,
// 				 rxchan_3_writeClient_deq,
// 				 rxchan_3_writeClient_notEmpty,
// 				 rxchan_3_verbose_enq,
// 				 rxchan_3_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 txchan_2_writeServer_enq,
// 				 txchan_2_writeServer_notFull,
// 				 txchan_2_macTx_get,
// 				 txchan_2_verbose_enq,
// 				 txchan_2_verbose_notFull,
// 				 txchan_3_writeServer_enq,
// 				 txchan_3_writeServer_notFull,
// 				 txchan_3_macTx_get,
// 				 txchan_3_verbose_enq,
// 				 txchan_3_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 prev_3_enq,
// 				 prev_3_notFull,
// 				 prev_4_enq,
// 				 prev_4_notFull,
// 				 set_verbosity );
// schedule rxchan_3_next_deq  C ( rxchan_3_next_deq );
//
// schedule rxchan_3_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull,
// 				      set_verbosity );
// schedule rxchan_3_next_notEmpty  SB ( rxchan_3_next_deq );
//
// schedule rxchan_3_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule rxchan_3_verbose_enq  C ( rxchan_3_verbose_enq, set_verbosity );
//
// schedule rxchan_3_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule rxchan_3_verbose_notFull  SBR ( rxchan_3_verbose_enq,
// 					 set_verbosity );
//
// schedule hostchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeServer_enq  C ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					      rxchan_0_writeClient_first,
// 					      rxchan_0_writeClient_deq,
// 					      rxchan_0_writeClient_notEmpty,
// 					      rxchan_0_next_first,
// 					      rxchan_0_next_deq,
// 					      rxchan_0_next_notEmpty,
// 					      rxchan_0_verbose_enq,
// 					      rxchan_0_verbose_notFull,
// 					      rxchan_1_macRx_put,
// 					      rxchan_1_writeClient_first,
// 					      rxchan_1_writeClient_deq,
// 					      rxchan_1_writeClient_notEmpty,
// 					      rxchan_1_next_first,
// 					      rxchan_1_next_deq,
// 					      rxchan_1_next_notEmpty,
// 					      rxchan_1_verbose_enq,
// 					      rxchan_1_verbose_notFull,
// 					      rxchan_2_macRx_put,
// 					      rxchan_2_writeClient_first,
// 					      rxchan_2_writeClient_deq,
// 					      rxchan_2_writeClient_notEmpty,
// 					      rxchan_2_next_first,
// 					      rxchan_2_next_deq,
// 					      rxchan_2_next_notEmpty,
// 					      rxchan_2_verbose_enq,
// 					      rxchan_2_verbose_notFull,
// 					      rxchan_3_macRx_put,
// 					      rxchan_3_writeClient_first,
// 					      rxchan_3_writeClient_deq,
// 					      rxchan_3_writeClient_notEmpty,
// 					      rxchan_3_next_first,
// 					      rxchan_3_next_deq,
// 					      rxchan_3_next_notEmpty,
// 					      rxchan_3_verbose_enq,
// 					      rxchan_3_verbose_notFull,
// 					      hostchan_0_writeServer_notFull,
// 					      hostchan_0_writeClient_first,
// 					      hostchan_0_writeClient_deq,
// 					      hostchan_0_writeClient_notEmpty,
// 					      hostchan_0_next_first,
// 					      hostchan_0_next_deq,
// 					      hostchan_0_next_notEmpty,
// 					      hostchan_0_verbose_enq,
// 					      hostchan_0_verbose_notFull,
// 					      txchan_0_writeServer_enq,
// 					      txchan_0_writeServer_notFull,
// 					      txchan_0_macTx_get,
// 					      txchan_0_verbose_enq,
// 					      txchan_0_verbose_notFull,
// 					      txchan_1_writeServer_enq,
// 					      txchan_1_writeServer_notFull,
// 					      txchan_1_macTx_get,
// 					      txchan_1_verbose_enq,
// 					      txchan_1_verbose_notFull,
// 					      txchan_2_writeServer_enq,
// 					      txchan_2_writeServer_notFull,
// 					      txchan_2_macTx_get,
// 					      txchan_2_verbose_enq,
// 					      txchan_2_verbose_notFull,
// 					      txchan_3_writeServer_enq,
// 					      txchan_3_writeServer_notFull,
// 					      txchan_3_macTx_get,
// 					      txchan_3_verbose_enq,
// 					      txchan_3_verbose_notFull,
// 					      prev_0_enq,
// 					      prev_0_notFull,
// 					      prev_1_enq,
// 					      prev_1_notFull,
// 					      prev_2_enq,
// 					      prev_2_notFull,
// 					      prev_3_enq,
// 					      prev_3_notFull,
// 					      prev_4_enq,
// 					      prev_4_notFull,
// 					      set_verbosity );
// schedule hostchan_0_writeServer_notFull  SB ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule hostchan_0_writeClient_first  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeClient_deq  C ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					       rxchan_0_writeClient_first,
// 					       rxchan_0_writeClient_deq,
// 					       rxchan_0_writeClient_notEmpty,
// 					       rxchan_0_next_first,
// 					       rxchan_0_next_deq,
// 					       rxchan_0_next_notEmpty,
// 					       rxchan_0_verbose_enq,
// 					       rxchan_0_verbose_notFull,
// 					       rxchan_1_macRx_put,
// 					       rxchan_1_writeClient_first,
// 					       rxchan_1_writeClient_deq,
// 					       rxchan_1_writeClient_notEmpty,
// 					       rxchan_1_next_first,
// 					       rxchan_1_next_deq,
// 					       rxchan_1_next_notEmpty,
// 					       rxchan_1_verbose_enq,
// 					       rxchan_1_verbose_notFull,
// 					       rxchan_2_macRx_put,
// 					       rxchan_2_writeClient_first,
// 					       rxchan_2_writeClient_deq,
// 					       rxchan_2_writeClient_notEmpty,
// 					       rxchan_2_next_first,
// 					       rxchan_2_next_deq,
// 					       rxchan_2_next_notEmpty,
// 					       rxchan_2_verbose_enq,
// 					       rxchan_2_verbose_notFull,
// 					       rxchan_3_macRx_put,
// 					       rxchan_3_writeClient_first,
// 					       rxchan_3_writeClient_deq,
// 					       rxchan_3_writeClient_notEmpty,
// 					       rxchan_3_next_first,
// 					       rxchan_3_next_deq,
// 					       rxchan_3_next_notEmpty,
// 					       rxchan_3_verbose_enq,
// 					       rxchan_3_verbose_notFull,
// 					       hostchan_0_writeServer_enq,
// 					       hostchan_0_writeServer_notFull,
// 					       hostchan_0_writeClient_first,
// 					       hostchan_0_writeClient_notEmpty,
// 					       hostchan_0_next_first,
// 					       hostchan_0_next_deq,
// 					       hostchan_0_next_notEmpty,
// 					       hostchan_0_verbose_enq,
// 					       hostchan_0_verbose_notFull,
// 					       txchan_0_writeServer_enq,
// 					       txchan_0_writeServer_notFull,
// 					       txchan_0_macTx_get,
// 					       txchan_0_verbose_enq,
// 					       txchan_0_verbose_notFull,
// 					       txchan_1_writeServer_enq,
// 					       txchan_1_writeServer_notFull,
// 					       txchan_1_macTx_get,
// 					       txchan_1_verbose_enq,
// 					       txchan_1_verbose_notFull,
// 					       txchan_2_writeServer_enq,
// 					       txchan_2_writeServer_notFull,
// 					       txchan_2_macTx_get,
// 					       txchan_2_verbose_enq,
// 					       txchan_2_verbose_notFull,
// 					       txchan_3_writeServer_enq,
// 					       txchan_3_writeServer_notFull,
// 					       txchan_3_macTx_get,
// 					       txchan_3_verbose_enq,
// 					       txchan_3_verbose_notFull,
// 					       prev_0_enq,
// 					       prev_0_notFull,
// 					       prev_1_enq,
// 					       prev_1_notFull,
// 					       prev_2_enq,
// 					       prev_2_notFull,
// 					       prev_3_enq,
// 					       prev_3_notFull,
// 					       prev_4_enq,
// 					       prev_4_notFull,
// 					       set_verbosity );
// schedule hostchan_0_writeClient_notEmpty  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				     rxchan_0_writeClient_first,
// 				     rxchan_0_writeClient_deq,
// 				     rxchan_0_writeClient_notEmpty,
// 				     rxchan_0_next_first,
// 				     rxchan_0_next_deq,
// 				     rxchan_0_next_notEmpty,
// 				     rxchan_0_verbose_enq,
// 				     rxchan_0_verbose_notFull,
// 				     rxchan_1_macRx_put,
// 				     rxchan_1_writeClient_first,
// 				     rxchan_1_writeClient_deq,
// 				     rxchan_1_writeClient_notEmpty,
// 				     rxchan_1_next_first,
// 				     rxchan_1_next_deq,
// 				     rxchan_1_next_notEmpty,
// 				     rxchan_1_verbose_enq,
// 				     rxchan_1_verbose_notFull,
// 				     rxchan_2_macRx_put,
// 				     rxchan_2_writeClient_first,
// 				     rxchan_2_writeClient_deq,
// 				     rxchan_2_writeClient_notEmpty,
// 				     rxchan_2_next_first,
// 				     rxchan_2_next_deq,
// 				     rxchan_2_next_notEmpty,
// 				     rxchan_2_verbose_enq,
// 				     rxchan_2_verbose_notFull,
// 				     rxchan_3_macRx_put,
// 				     rxchan_3_writeClient_first,
// 				     rxchan_3_writeClient_deq,
// 				     rxchan_3_writeClient_notEmpty,
// 				     rxchan_3_next_first,
// 				     rxchan_3_next_deq,
// 				     rxchan_3_next_notEmpty,
// 				     rxchan_3_verbose_enq,
// 				     rxchan_3_verbose_notFull,
// 				     hostchan_0_writeServer_enq,
// 				     hostchan_0_writeServer_notFull,
// 				     hostchan_0_writeClient_first,
// 				     hostchan_0_writeClient_deq,
// 				     hostchan_0_writeClient_notEmpty,
// 				     hostchan_0_next_first,
// 				     hostchan_0_next_notEmpty,
// 				     hostchan_0_verbose_enq,
// 				     hostchan_0_verbose_notFull,
// 				     txchan_0_writeServer_enq,
// 				     txchan_0_writeServer_notFull,
// 				     txchan_0_macTx_get,
// 				     txchan_0_verbose_enq,
// 				     txchan_0_verbose_notFull,
// 				     txchan_1_writeServer_enq,
// 				     txchan_1_writeServer_notFull,
// 				     txchan_1_macTx_get,
// 				     txchan_1_verbose_enq,
// 				     txchan_1_verbose_notFull,
// 				     txchan_2_writeServer_enq,
// 				     txchan_2_writeServer_notFull,
// 				     txchan_2_macTx_get,
// 				     txchan_2_verbose_enq,
// 				     txchan_2_verbose_notFull,
// 				     txchan_3_writeServer_enq,
// 				     txchan_3_writeServer_notFull,
// 				     txchan_3_macTx_get,
// 				     txchan_3_verbose_enq,
// 				     txchan_3_verbose_notFull,
// 				     prev_0_enq,
// 				     prev_0_notFull,
// 				     prev_1_enq,
// 				     prev_1_notFull,
// 				     prev_2_enq,
// 				     prev_2_notFull,
// 				     prev_3_enq,
// 				     prev_3_notFull,
// 				     prev_4_enq,
// 				     prev_4_notFull,
// 				     set_verbosity );
// schedule hostchan_0_next_first  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   rxchan_2_macRx_put,
// 				   rxchan_2_writeClient_first,
// 				   rxchan_2_writeClient_deq,
// 				   rxchan_2_writeClient_notEmpty,
// 				   rxchan_2_next_first,
// 				   rxchan_2_next_deq,
// 				   rxchan_2_next_notEmpty,
// 				   rxchan_2_verbose_enq,
// 				   rxchan_2_verbose_notFull,
// 				   rxchan_3_macRx_put,
// 				   rxchan_3_writeClient_first,
// 				   rxchan_3_writeClient_deq,
// 				   rxchan_3_writeClient_notEmpty,
// 				   rxchan_3_next_first,
// 				   rxchan_3_next_deq,
// 				   rxchan_3_next_notEmpty,
// 				   rxchan_3_verbose_enq,
// 				   rxchan_3_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   txchan_2_writeServer_enq,
// 				   txchan_2_writeServer_notFull,
// 				   txchan_2_macTx_get,
// 				   txchan_2_verbose_enq,
// 				   txchan_2_verbose_notFull,
// 				   txchan_3_writeServer_enq,
// 				   txchan_3_writeServer_notFull,
// 				   txchan_3_macTx_get,
// 				   txchan_3_verbose_enq,
// 				   txchan_3_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   prev_3_enq,
// 				   prev_3_notFull,
// 				   prev_4_enq,
// 				   prev_4_notFull,
// 				   set_verbosity );
// schedule hostchan_0_next_deq  C ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule hostchan_0_next_notEmpty  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      rxchan_2_macRx_put,
// 				      rxchan_2_writeClient_first,
// 				      rxchan_2_writeClient_deq,
// 				      rxchan_2_writeClient_notEmpty,
// 				      rxchan_2_next_first,
// 				      rxchan_2_next_deq,
// 				      rxchan_2_next_notEmpty,
// 				      rxchan_2_verbose_enq,
// 				      rxchan_2_verbose_notFull,
// 				      rxchan_3_macRx_put,
// 				      rxchan_3_writeClient_first,
// 				      rxchan_3_writeClient_deq,
// 				      rxchan_3_writeClient_notEmpty,
// 				      rxchan_3_next_first,
// 				      rxchan_3_next_deq,
// 				      rxchan_3_next_notEmpty,
// 				      rxchan_3_verbose_enq,
// 				      rxchan_3_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      txchan_2_writeServer_enq,
// 				      txchan_2_writeServer_notFull,
// 				      txchan_2_macTx_get,
// 				      txchan_2_verbose_enq,
// 				      txchan_2_verbose_notFull,
// 				      txchan_3_writeServer_enq,
// 				      txchan_3_writeServer_notFull,
// 				      txchan_3_macTx_get,
// 				      txchan_3_verbose_enq,
// 				      txchan_3_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      prev_3_enq,
// 				      prev_3_notFull,
// 				      prev_4_enq,
// 				      prev_4_notFull );
// schedule hostchan_0_verbose_enq  C ( hostchan_0_verbose_enq, set_verbosity );
//
// schedule hostchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  rxchan_2_macRx_put,
// 					  rxchan_2_writeClient_first,
// 					  rxchan_2_writeClient_deq,
// 					  rxchan_2_writeClient_notEmpty,
// 					  rxchan_2_next_first,
// 					  rxchan_2_next_deq,
// 					  rxchan_2_next_notEmpty,
// 					  rxchan_2_verbose_enq,
// 					  rxchan_2_verbose_notFull,
// 					  rxchan_3_macRx_put,
// 					  rxchan_3_writeClient_first,
// 					  rxchan_3_writeClient_deq,
// 					  rxchan_3_writeClient_notEmpty,
// 					  rxchan_3_next_first,
// 					  rxchan_3_next_deq,
// 					  rxchan_3_next_notEmpty,
// 					  rxchan_3_verbose_enq,
// 					  rxchan_3_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  txchan_2_writeServer_enq,
// 					  txchan_2_writeServer_notFull,
// 					  txchan_2_macTx_get,
// 					  txchan_2_verbose_enq,
// 					  txchan_2_verbose_notFull,
// 					  txchan_3_writeServer_enq,
// 					  txchan_3_writeServer_notFull,
// 					  txchan_3_macTx_get,
// 					  txchan_3_verbose_enq,
// 					  txchan_3_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  prev_3_enq,
// 					  prev_3_notFull,
// 					  prev_4_enq,
// 					  prev_4_notFull );
// schedule hostchan_0_verbose_notFull  SBR ( hostchan_0_verbose_enq,
// 					   set_verbosity );
//
// schedule txchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_0_writeServer_enq  C ( txchan_0_writeServer_enq );
//
// schedule txchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_0_writeServer_notFull  SB ( txchan_0_writeServer_enq );
//
// schedule txchan_0_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_0_macTx_get  C ( txchan_0_macTx_get );
//
// schedule txchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_0_verbose_enq  C ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_0_verbose_notFull  SB ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_1_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_1_writeServer_enq  C ( txchan_1_writeServer_enq );
//
// schedule txchan_1_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_1_writeServer_notFull  SB ( txchan_1_writeServer_enq );
//
// schedule txchan_1_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_1_macTx_get  C ( txchan_1_macTx_get );
//
// schedule txchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_1_verbose_enq  C ( txchan_1_verbose_enq, set_verbosity );
//
// schedule txchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_1_verbose_notFull  SB ( txchan_1_verbose_enq, set_verbosity );
//
// schedule txchan_2_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_2_writeServer_enq  C ( txchan_2_writeServer_enq );
//
// schedule txchan_2_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_enq,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_2_writeServer_notFull  SB ( txchan_2_writeServer_enq );
//
// schedule txchan_2_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_macTx_get,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_2_macTx_get  C ( txchan_2_macTx_get );
//
// schedule txchan_2_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    txchan_3_verbose_enq,
// 				    txchan_3_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_2_verbose_enq  C ( txchan_2_verbose_enq, set_verbosity );
//
// schedule txchan_2_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_2_verbose_notFull  SB ( txchan_2_verbose_enq, set_verbosity );
//
// schedule txchan_3_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_enq,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull,
// 					set_verbosity );
// schedule txchan_3_writeServer_enq  C ( txchan_3_writeServer_enq );
//
// schedule txchan_3_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    rxchan_2_macRx_put,
// 					    rxchan_2_writeClient_first,
// 					    rxchan_2_writeClient_deq,
// 					    rxchan_2_writeClient_notEmpty,
// 					    rxchan_2_next_first,
// 					    rxchan_2_next_deq,
// 					    rxchan_2_next_notEmpty,
// 					    rxchan_2_verbose_enq,
// 					    rxchan_2_verbose_notFull,
// 					    rxchan_3_macRx_put,
// 					    rxchan_3_writeClient_first,
// 					    rxchan_3_writeClient_deq,
// 					    rxchan_3_writeClient_notEmpty,
// 					    rxchan_3_next_first,
// 					    rxchan_3_next_deq,
// 					    rxchan_3_next_notEmpty,
// 					    rxchan_3_verbose_enq,
// 					    rxchan_3_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    txchan_2_writeServer_enq,
// 					    txchan_2_writeServer_notFull,
// 					    txchan_2_macTx_get,
// 					    txchan_2_verbose_enq,
// 					    txchan_2_verbose_notFull,
// 					    txchan_3_writeServer_notFull,
// 					    txchan_3_macTx_get,
// 					    txchan_3_verbose_enq,
// 					    txchan_3_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    prev_3_enq,
// 					    prev_3_notFull,
// 					    prev_4_enq,
// 					    prev_4_notFull,
// 					    set_verbosity );
// schedule txchan_3_writeServer_notFull  SB ( txchan_3_writeServer_enq );
//
// schedule txchan_3_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  rxchan_2_macRx_put,
// 				  rxchan_2_writeClient_first,
// 				  rxchan_2_writeClient_deq,
// 				  rxchan_2_writeClient_notEmpty,
// 				  rxchan_2_next_first,
// 				  rxchan_2_next_deq,
// 				  rxchan_2_next_notEmpty,
// 				  rxchan_2_verbose_enq,
// 				  rxchan_2_verbose_notFull,
// 				  rxchan_3_macRx_put,
// 				  rxchan_3_writeClient_first,
// 				  rxchan_3_writeClient_deq,
// 				  rxchan_3_writeClient_notEmpty,
// 				  rxchan_3_next_first,
// 				  rxchan_3_next_deq,
// 				  rxchan_3_next_notEmpty,
// 				  rxchan_3_verbose_enq,
// 				  rxchan_3_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  txchan_2_writeServer_enq,
// 				  txchan_2_writeServer_notFull,
// 				  txchan_2_macTx_get,
// 				  txchan_2_verbose_enq,
// 				  txchan_2_verbose_notFull,
// 				  txchan_3_writeServer_enq,
// 				  txchan_3_writeServer_notFull,
// 				  txchan_3_verbose_enq,
// 				  txchan_3_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  prev_3_enq,
// 				  prev_3_notFull,
// 				  prev_4_enq,
// 				  prev_4_notFull,
// 				  set_verbosity );
// schedule txchan_3_macTx_get  C ( txchan_3_macTx_get );
//
// schedule txchan_3_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    rxchan_2_macRx_put,
// 				    rxchan_2_writeClient_first,
// 				    rxchan_2_writeClient_deq,
// 				    rxchan_2_writeClient_notEmpty,
// 				    rxchan_2_next_first,
// 				    rxchan_2_next_deq,
// 				    rxchan_2_next_notEmpty,
// 				    rxchan_2_verbose_enq,
// 				    rxchan_2_verbose_notFull,
// 				    rxchan_3_macRx_put,
// 				    rxchan_3_writeClient_first,
// 				    rxchan_3_writeClient_deq,
// 				    rxchan_3_writeClient_notEmpty,
// 				    rxchan_3_next_first,
// 				    rxchan_3_next_deq,
// 				    rxchan_3_next_notEmpty,
// 				    rxchan_3_verbose_enq,
// 				    rxchan_3_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    txchan_2_writeServer_enq,
// 				    txchan_2_writeServer_notFull,
// 				    txchan_2_macTx_get,
// 				    txchan_2_verbose_enq,
// 				    txchan_2_verbose_notFull,
// 				    txchan_3_writeServer_enq,
// 				    txchan_3_writeServer_notFull,
// 				    txchan_3_macTx_get,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull,
// 				    prev_3_enq,
// 				    prev_3_notFull,
// 				    prev_4_enq,
// 				    prev_4_notFull );
// schedule txchan_3_verbose_enq  C ( txchan_3_verbose_enq, set_verbosity );
//
// schedule txchan_3_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					rxchan_2_macRx_put,
// 					rxchan_2_writeClient_first,
// 					rxchan_2_writeClient_deq,
// 					rxchan_2_writeClient_notEmpty,
// 					rxchan_2_next_first,
// 					rxchan_2_next_deq,
// 					rxchan_2_next_notEmpty,
// 					rxchan_2_verbose_enq,
// 					rxchan_2_verbose_notFull,
// 					rxchan_3_macRx_put,
// 					rxchan_3_writeClient_first,
// 					rxchan_3_writeClient_deq,
// 					rxchan_3_writeClient_notEmpty,
// 					rxchan_3_next_first,
// 					rxchan_3_next_deq,
// 					rxchan_3_next_notEmpty,
// 					rxchan_3_verbose_enq,
// 					rxchan_3_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					txchan_2_writeServer_enq,
// 					txchan_2_writeServer_notFull,
// 					txchan_2_macTx_get,
// 					txchan_2_verbose_enq,
// 					txchan_2_verbose_notFull,
// 					txchan_3_writeServer_enq,
// 					txchan_3_writeServer_notFull,
// 					txchan_3_macTx_get,
// 					txchan_3_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					prev_3_enq,
// 					prev_3_notFull,
// 					prev_4_enq,
// 					prev_4_notFull );
// schedule txchan_3_verbose_notFull  SB ( txchan_3_verbose_enq, set_verbosity );
//
// schedule prev_0_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_0_enq  C ( prev_0_enq );
//
// schedule prev_0_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_0_notFull  SB ( prev_0_enq );
//
// schedule prev_1_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_1_enq  C ( prev_1_enq );
//
// schedule prev_1_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_1_notFull  SB ( prev_1_enq );
//
// schedule prev_2_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_2_enq  C ( prev_2_enq );
//
// schedule prev_2_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_2_notFull  SB ( prev_2_enq );
//
// schedule prev_3_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_4_enq,
// 			  prev_4_notFull,
// 			  set_verbosity );
// schedule prev_3_enq  C ( prev_3_enq );
//
// schedule prev_3_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_notFull,
// 			      prev_4_enq,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_3_notFull  SB ( prev_3_enq );
//
// schedule prev_4_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  rxchan_2_macRx_put,
// 			  rxchan_2_writeClient_first,
// 			  rxchan_2_writeClient_deq,
// 			  rxchan_2_writeClient_notEmpty,
// 			  rxchan_2_next_first,
// 			  rxchan_2_next_deq,
// 			  rxchan_2_next_notEmpty,
// 			  rxchan_2_verbose_enq,
// 			  rxchan_2_verbose_notFull,
// 			  rxchan_3_macRx_put,
// 			  rxchan_3_writeClient_first,
// 			  rxchan_3_writeClient_deq,
// 			  rxchan_3_writeClient_notEmpty,
// 			  rxchan_3_next_first,
// 			  rxchan_3_next_deq,
// 			  rxchan_3_next_notEmpty,
// 			  rxchan_3_verbose_enq,
// 			  rxchan_3_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  txchan_2_writeServer_enq,
// 			  txchan_2_writeServer_notFull,
// 			  txchan_2_macTx_get,
// 			  txchan_2_verbose_enq,
// 			  txchan_2_verbose_notFull,
// 			  txchan_3_writeServer_enq,
// 			  txchan_3_writeServer_notFull,
// 			  txchan_3_macTx_get,
// 			  txchan_3_verbose_enq,
// 			  txchan_3_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  prev_3_enq,
// 			  prev_3_notFull,
// 			  set_verbosity );
// schedule prev_4_enq  C ( prev_4_enq );
//
// schedule prev_4_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      rxchan_2_macRx_put,
// 			      rxchan_2_writeClient_first,
// 			      rxchan_2_writeClient_deq,
// 			      rxchan_2_writeClient_notEmpty,
// 			      rxchan_2_next_first,
// 			      rxchan_2_next_deq,
// 			      rxchan_2_next_notEmpty,
// 			      rxchan_2_verbose_enq,
// 			      rxchan_2_verbose_notFull,
// 			      rxchan_3_macRx_put,
// 			      rxchan_3_writeClient_first,
// 			      rxchan_3_writeClient_deq,
// 			      rxchan_3_writeClient_notEmpty,
// 			      rxchan_3_next_first,
// 			      rxchan_3_next_deq,
// 			      rxchan_3_next_notEmpty,
// 			      rxchan_3_verbose_enq,
// 			      rxchan_3_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      txchan_2_writeServer_enq,
// 			      txchan_2_writeServer_notFull,
// 			      txchan_2_macTx_get,
// 			      txchan_2_verbose_enq,
// 			      txchan_2_verbose_notFull,
// 			      txchan_3_writeServer_enq,
// 			      txchan_3_writeServer_notFull,
// 			      txchan_3_macTx_get,
// 			      txchan_3_verbose_enq,
// 			      txchan_3_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      prev_3_enq,
// 			      prev_3_notFull,
// 			      prev_4_notFull,
// 			      set_verbosity );
// schedule prev_4_notFull  SB ( prev_4_enq );
//
// schedule set_verbosity  CF ( rxchan_0_macRx_put,
// 			     rxchan_0_writeClient_first,
// 			     rxchan_0_writeClient_deq,
// 			     rxchan_0_writeClient_notEmpty,
// 			     rxchan_0_next_first,
// 			     rxchan_0_next_deq,
// 			     rxchan_0_next_notEmpty,
// 			     rxchan_1_macRx_put,
// 			     rxchan_1_writeClient_first,
// 			     rxchan_1_writeClient_deq,
// 			     rxchan_1_writeClient_notEmpty,
// 			     rxchan_1_next_first,
// 			     rxchan_1_next_deq,
// 			     rxchan_1_next_notEmpty,
// 			     rxchan_2_macRx_put,
// 			     rxchan_2_writeClient_first,
// 			     rxchan_2_writeClient_deq,
// 			     rxchan_2_writeClient_notEmpty,
// 			     rxchan_2_next_first,
// 			     rxchan_2_next_deq,
// 			     rxchan_2_next_notEmpty,
// 			     rxchan_3_macRx_put,
// 			     rxchan_3_writeClient_first,
// 			     rxchan_3_writeClient_deq,
// 			     rxchan_3_writeClient_notEmpty,
// 			     rxchan_3_next_first,
// 			     rxchan_3_next_deq,
// 			     rxchan_3_next_notEmpty,
// 			     hostchan_0_writeServer_enq,
// 			     hostchan_0_writeServer_notFull,
// 			     hostchan_0_writeClient_first,
// 			     hostchan_0_writeClient_deq,
// 			     hostchan_0_writeClient_notEmpty,
// 			     hostchan_0_next_first,
// 			     hostchan_0_next_deq,
// 			     hostchan_0_next_notEmpty,
// 			     txchan_0_writeServer_enq,
// 			     txchan_0_writeServer_notFull,
// 			     txchan_0_macTx_get,
// 			     txchan_1_writeServer_enq,
// 			     txchan_1_writeServer_notFull,
// 			     txchan_1_macTx_get,
// 			     txchan_2_writeServer_enq,
// 			     txchan_2_writeServer_notFull,
// 			     txchan_2_macTx_get,
// 			     txchan_3_writeServer_enq,
// 			     txchan_3_writeServer_notFull,
// 			     txchan_3_macTx_get,
// 			     prev_0_enq,
// 			     prev_0_notFull,
// 			     prev_1_enq,
// 			     prev_1_notFull,
// 			     prev_2_enq,
// 			     prev_2_notFull,
// 			     prev_3_enq,
// 			     prev_3_notFull,
// 			     prev_4_enq,
// 			     prev_4_notFull );
// schedule set_verbosity  C ( rxchan_0_verbose_enq,
// 			    rxchan_1_verbose_enq,
// 			    rxchan_2_verbose_enq,
// 			    rxchan_3_verbose_enq,
// 			    hostchan_0_verbose_enq,
// 			    txchan_0_verbose_enq,
// 			    txchan_1_verbose_enq,
// 			    txchan_2_verbose_enq,
// 			    txchan_3_verbose_enq,
// 			    set_verbosity );
//
//
// Ports:
// Name                         I/O  size props
// RDY_rxchan_0_macRx_put         O     1 reg
// rxchan_0_writeClient_first     O   178 reg
// RDY_rxchan_0_writeClient_first  O     1 reg
// RDY_rxchan_0_writeClient_deq   O     1 reg
// rxchan_0_writeClient_notEmpty  O     1 reg
// RDY_rxchan_0_writeClient_notEmpty  O     1 const
// rxchan_0_next_first            O  1499 reg
// RDY_rxchan_0_next_first        O     1 reg
// RDY_rxchan_0_next_deq          O     1 reg
// rxchan_0_next_notEmpty         O     1 reg
// RDY_rxchan_0_next_notEmpty     O     1 const
// RDY_rxchan_0_verbose_enq       O     1 reg
// rxchan_0_verbose_notFull       O     1 reg
// RDY_rxchan_0_verbose_notFull   O     1 const
// RDY_rxchan_1_macRx_put         O     1 reg
// rxchan_1_writeClient_first     O   178 reg
// RDY_rxchan_1_writeClient_first  O     1 reg
// RDY_rxchan_1_writeClient_deq   O     1 reg
// rxchan_1_writeClient_notEmpty  O     1 reg
// RDY_rxchan_1_writeClient_notEmpty  O     1 const
// rxchan_1_next_first            O  1499 reg
// RDY_rxchan_1_next_first        O     1 reg
// RDY_rxchan_1_next_deq          O     1 reg
// rxchan_1_next_notEmpty         O     1 reg
// RDY_rxchan_1_next_notEmpty     O     1 const
// RDY_rxchan_1_verbose_enq       O     1 reg
// rxchan_1_verbose_notFull       O     1 reg
// RDY_rxchan_1_verbose_notFull   O     1 const
// RDY_rxchan_2_macRx_put         O     1 reg
// rxchan_2_writeClient_first     O   178 reg
// RDY_rxchan_2_writeClient_first  O     1 reg
// RDY_rxchan_2_writeClient_deq   O     1 reg
// rxchan_2_writeClient_notEmpty  O     1 reg
// RDY_rxchan_2_writeClient_notEmpty  O     1 const
// rxchan_2_next_first            O  1499 reg
// RDY_rxchan_2_next_first        O     1 reg
// RDY_rxchan_2_next_deq          O     1 reg
// rxchan_2_next_notEmpty         O     1 reg
// RDY_rxchan_2_next_notEmpty     O     1 const
// RDY_rxchan_2_verbose_enq       O     1 reg
// rxchan_2_verbose_notFull       O     1 reg
// RDY_rxchan_2_verbose_notFull   O     1 const
// RDY_rxchan_3_macRx_put         O     1 reg
// rxchan_3_writeClient_first     O   178 reg
// RDY_rxchan_3_writeClient_first  O     1 reg
// RDY_rxchan_3_writeClient_deq   O     1 reg
// rxchan_3_writeClient_notEmpty  O     1 reg
// RDY_rxchan_3_writeClient_notEmpty  O     1 const
// rxchan_3_next_first            O  1499 reg
// RDY_rxchan_3_next_first        O     1 reg
// RDY_rxchan_3_next_deq          O     1 reg
// rxchan_3_next_notEmpty         O     1 reg
// RDY_rxchan_3_next_notEmpty     O     1 const
// RDY_rxchan_3_verbose_enq       O     1 reg
// rxchan_3_verbose_notFull       O     1 reg
// RDY_rxchan_3_verbose_notFull   O     1 const
// RDY_hostchan_0_writeServer_enq  O     1 reg
// hostchan_0_writeServer_notFull  O     1 reg
// RDY_hostchan_0_writeServer_notFull  O     1 const
// hostchan_0_writeClient_first   O   178 reg
// RDY_hostchan_0_writeClient_first  O     1 reg
// RDY_hostchan_0_writeClient_deq  O     1 reg
// hostchan_0_writeClient_notEmpty  O     1 reg
// RDY_hostchan_0_writeClient_notEmpty  O     1 const
// hostchan_0_next_first          O  1499 reg
// RDY_hostchan_0_next_first      O     1 reg
// RDY_hostchan_0_next_deq        O     1 reg
// hostchan_0_next_notEmpty       O     1 reg
// RDY_hostchan_0_next_notEmpty   O     1 const
// RDY_hostchan_0_verbose_enq     O     1 reg
// hostchan_0_verbose_notFull     O     1 reg
// RDY_hostchan_0_verbose_notFull  O     1 const
// RDY_txchan_0_writeServer_enq   O     1 reg
// txchan_0_writeServer_notFull   O     1 reg
// RDY_txchan_0_writeServer_notFull  O     1 const
// txchan_0_macTx_get             O   106 reg
// RDY_txchan_0_macTx_get         O     1 reg
// RDY_txchan_0_verbose_enq       O     1 reg
// txchan_0_verbose_notFull       O     1 reg
// RDY_txchan_0_verbose_notFull   O     1 const
// RDY_txchan_1_writeServer_enq   O     1 reg
// txchan_1_writeServer_notFull   O     1 reg
// RDY_txchan_1_writeServer_notFull  O     1 const
// txchan_1_macTx_get             O   106 reg
// RDY_txchan_1_macTx_get         O     1 reg
// RDY_txchan_1_verbose_enq       O     1 reg
// txchan_1_verbose_notFull       O     1 reg
// RDY_txchan_1_verbose_notFull   O     1 const
// RDY_txchan_2_writeServer_enq   O     1 reg
// txchan_2_writeServer_notFull   O     1 reg
// RDY_txchan_2_writeServer_notFull  O     1 const
// txchan_2_macTx_get             O   106 reg
// RDY_txchan_2_macTx_get         O     1 reg
// RDY_txchan_2_verbose_enq       O     1 reg
// txchan_2_verbose_notFull       O     1 reg
// RDY_txchan_2_verbose_notFull   O     1 const
// RDY_txchan_3_writeServer_enq   O     1 reg
// txchan_3_writeServer_notFull   O     1 reg
// RDY_txchan_3_writeServer_notFull  O     1 const
// txchan_3_macTx_get             O   106 reg
// RDY_txchan_3_macTx_get         O     1 reg
// RDY_txchan_3_verbose_enq       O     1 reg
// txchan_3_verbose_notFull       O     1 reg
// RDY_txchan_3_verbose_notFull   O     1 const
// RDY_prev_0_enq                 O     1 reg
// prev_0_notFull                 O     1 reg
// RDY_prev_0_notFull             O     1 const
// RDY_prev_1_enq                 O     1 reg
// prev_1_notFull                 O     1 reg
// RDY_prev_1_notFull             O     1 const
// RDY_prev_2_enq                 O     1 reg
// prev_2_notFull                 O     1 reg
// RDY_prev_2_notFull             O     1 const
// RDY_prev_3_enq                 O     1 reg
// prev_3_notFull                 O     1 reg
// RDY_prev_3_notFull             O     1 const
// RDY_prev_4_enq                 O     1 reg
// prev_4_notFull                 O     1 reg
// RDY_prev_4_notFull             O     1 const
// RDY_set_verbosity              O     1
// CLK_p0                         I     1 clock
// RST_N_p1                       I     1 reset
// CLK_p2                         I     1 clock
// RST_N_p3                       I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rxchan_0_macRx_put             I   106 reg
// rxchan_0_verbose_enq_v         I    32
// rxchan_1_macRx_put             I   106 reg
// rxchan_1_verbose_enq_v         I    32
// rxchan_2_macRx_put             I   106 reg
// rxchan_2_verbose_enq_v         I    32
// rxchan_3_macRx_put             I   106 reg
// rxchan_3_verbose_enq_v         I    32
// hostchan_0_writeServer_enq_v   I   178 reg
// hostchan_0_verbose_enq_v       I    32
// txchan_0_writeServer_enq_v     I   178
// txchan_0_verbose_enq_v         I    32
// txchan_1_writeServer_enq_v     I   178
// txchan_1_verbose_enq_v         I    32
// txchan_2_writeServer_enq_v     I   178
// txchan_2_verbose_enq_v         I    32
// txchan_3_writeServer_enq_v     I   178
// txchan_3_verbose_enq_v         I    32
// prev_0_enq_v                   I  1499 reg
// prev_1_enq_v                   I  1499 reg
// prev_2_enq_v                   I  1499 reg
// prev_3_enq_v                   I  1499 reg
// prev_4_enq_v                   I  1499 reg
// set_verbosity_verbosity        I    32
// EN_rxchan_0_macRx_put          I     1
// EN_rxchan_0_writeClient_deq    I     1
// EN_rxchan_0_next_deq           I     1
// EN_rxchan_0_verbose_enq        I     1
// EN_rxchan_1_macRx_put          I     1
// EN_rxchan_1_writeClient_deq    I     1
// EN_rxchan_1_next_deq           I     1
// EN_rxchan_1_verbose_enq        I     1
// EN_rxchan_2_macRx_put          I     1
// EN_rxchan_2_writeClient_deq    I     1
// EN_rxchan_2_next_deq           I     1
// EN_rxchan_2_verbose_enq        I     1
// EN_rxchan_3_macRx_put          I     1
// EN_rxchan_3_writeClient_deq    I     1
// EN_rxchan_3_next_deq           I     1
// EN_rxchan_3_verbose_enq        I     1
// EN_hostchan_0_writeServer_enq  I     1
// EN_hostchan_0_writeClient_deq  I     1
// EN_hostchan_0_next_deq         I     1
// EN_hostchan_0_verbose_enq      I     1
// EN_txchan_0_writeServer_enq    I     1
// EN_txchan_0_verbose_enq        I     1
// EN_txchan_1_writeServer_enq    I     1
// EN_txchan_1_verbose_enq        I     1
// EN_txchan_2_writeServer_enq    I     1
// EN_txchan_2_verbose_enq        I     1
// EN_txchan_3_writeServer_enq    I     1
// EN_txchan_3_verbose_enq        I     1
// EN_prev_0_enq                  I     1
// EN_prev_1_enq                  I     1
// EN_prev_2_enq                  I     1
// EN_prev_3_enq                  I     1
// EN_prev_4_enq                  I     1
// EN_set_verbosity               I     1
// EN_txchan_0_macTx_get          I     1
// EN_txchan_1_macTx_get          I     1
// EN_txchan_2_macTx_get          I     1
// EN_txchan_3_macTx_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRuntime_4_4_1(CLK_p0,
		       RST_N_p1,
		       CLK_p2,
		       RST_N_p3,
		       CLK,
		       RST_N,

		       rxchan_0_macRx_put,
		       EN_rxchan_0_macRx_put,
		       RDY_rxchan_0_macRx_put,

		       rxchan_0_writeClient_first,
		       RDY_rxchan_0_writeClient_first,

		       EN_rxchan_0_writeClient_deq,
		       RDY_rxchan_0_writeClient_deq,

		       rxchan_0_writeClient_notEmpty,
		       RDY_rxchan_0_writeClient_notEmpty,

		       rxchan_0_next_first,
		       RDY_rxchan_0_next_first,

		       EN_rxchan_0_next_deq,
		       RDY_rxchan_0_next_deq,

		       rxchan_0_next_notEmpty,
		       RDY_rxchan_0_next_notEmpty,

		       rxchan_0_verbose_enq_v,
		       EN_rxchan_0_verbose_enq,
		       RDY_rxchan_0_verbose_enq,

		       rxchan_0_verbose_notFull,
		       RDY_rxchan_0_verbose_notFull,

		       rxchan_1_macRx_put,
		       EN_rxchan_1_macRx_put,
		       RDY_rxchan_1_macRx_put,

		       rxchan_1_writeClient_first,
		       RDY_rxchan_1_writeClient_first,

		       EN_rxchan_1_writeClient_deq,
		       RDY_rxchan_1_writeClient_deq,

		       rxchan_1_writeClient_notEmpty,
		       RDY_rxchan_1_writeClient_notEmpty,

		       rxchan_1_next_first,
		       RDY_rxchan_1_next_first,

		       EN_rxchan_1_next_deq,
		       RDY_rxchan_1_next_deq,

		       rxchan_1_next_notEmpty,
		       RDY_rxchan_1_next_notEmpty,

		       rxchan_1_verbose_enq_v,
		       EN_rxchan_1_verbose_enq,
		       RDY_rxchan_1_verbose_enq,

		       rxchan_1_verbose_notFull,
		       RDY_rxchan_1_verbose_notFull,

		       rxchan_2_macRx_put,
		       EN_rxchan_2_macRx_put,
		       RDY_rxchan_2_macRx_put,

		       rxchan_2_writeClient_first,
		       RDY_rxchan_2_writeClient_first,

		       EN_rxchan_2_writeClient_deq,
		       RDY_rxchan_2_writeClient_deq,

		       rxchan_2_writeClient_notEmpty,
		       RDY_rxchan_2_writeClient_notEmpty,

		       rxchan_2_next_first,
		       RDY_rxchan_2_next_first,

		       EN_rxchan_2_next_deq,
		       RDY_rxchan_2_next_deq,

		       rxchan_2_next_notEmpty,
		       RDY_rxchan_2_next_notEmpty,

		       rxchan_2_verbose_enq_v,
		       EN_rxchan_2_verbose_enq,
		       RDY_rxchan_2_verbose_enq,

		       rxchan_2_verbose_notFull,
		       RDY_rxchan_2_verbose_notFull,

		       rxchan_3_macRx_put,
		       EN_rxchan_3_macRx_put,
		       RDY_rxchan_3_macRx_put,

		       rxchan_3_writeClient_first,
		       RDY_rxchan_3_writeClient_first,

		       EN_rxchan_3_writeClient_deq,
		       RDY_rxchan_3_writeClient_deq,

		       rxchan_3_writeClient_notEmpty,
		       RDY_rxchan_3_writeClient_notEmpty,

		       rxchan_3_next_first,
		       RDY_rxchan_3_next_first,

		       EN_rxchan_3_next_deq,
		       RDY_rxchan_3_next_deq,

		       rxchan_3_next_notEmpty,
		       RDY_rxchan_3_next_notEmpty,

		       rxchan_3_verbose_enq_v,
		       EN_rxchan_3_verbose_enq,
		       RDY_rxchan_3_verbose_enq,

		       rxchan_3_verbose_notFull,
		       RDY_rxchan_3_verbose_notFull,

		       hostchan_0_writeServer_enq_v,
		       EN_hostchan_0_writeServer_enq,
		       RDY_hostchan_0_writeServer_enq,

		       hostchan_0_writeServer_notFull,
		       RDY_hostchan_0_writeServer_notFull,

		       hostchan_0_writeClient_first,
		       RDY_hostchan_0_writeClient_first,

		       EN_hostchan_0_writeClient_deq,
		       RDY_hostchan_0_writeClient_deq,

		       hostchan_0_writeClient_notEmpty,
		       RDY_hostchan_0_writeClient_notEmpty,

		       hostchan_0_next_first,
		       RDY_hostchan_0_next_first,

		       EN_hostchan_0_next_deq,
		       RDY_hostchan_0_next_deq,

		       hostchan_0_next_notEmpty,
		       RDY_hostchan_0_next_notEmpty,

		       hostchan_0_verbose_enq_v,
		       EN_hostchan_0_verbose_enq,
		       RDY_hostchan_0_verbose_enq,

		       hostchan_0_verbose_notFull,
		       RDY_hostchan_0_verbose_notFull,

		       txchan_0_writeServer_enq_v,
		       EN_txchan_0_writeServer_enq,
		       RDY_txchan_0_writeServer_enq,

		       txchan_0_writeServer_notFull,
		       RDY_txchan_0_writeServer_notFull,

		       EN_txchan_0_macTx_get,
		       txchan_0_macTx_get,
		       RDY_txchan_0_macTx_get,

		       txchan_0_verbose_enq_v,
		       EN_txchan_0_verbose_enq,
		       RDY_txchan_0_verbose_enq,

		       txchan_0_verbose_notFull,
		       RDY_txchan_0_verbose_notFull,

		       txchan_1_writeServer_enq_v,
		       EN_txchan_1_writeServer_enq,
		       RDY_txchan_1_writeServer_enq,

		       txchan_1_writeServer_notFull,
		       RDY_txchan_1_writeServer_notFull,

		       EN_txchan_1_macTx_get,
		       txchan_1_macTx_get,
		       RDY_txchan_1_macTx_get,

		       txchan_1_verbose_enq_v,
		       EN_txchan_1_verbose_enq,
		       RDY_txchan_1_verbose_enq,

		       txchan_1_verbose_notFull,
		       RDY_txchan_1_verbose_notFull,

		       txchan_2_writeServer_enq_v,
		       EN_txchan_2_writeServer_enq,
		       RDY_txchan_2_writeServer_enq,

		       txchan_2_writeServer_notFull,
		       RDY_txchan_2_writeServer_notFull,

		       EN_txchan_2_macTx_get,
		       txchan_2_macTx_get,
		       RDY_txchan_2_macTx_get,

		       txchan_2_verbose_enq_v,
		       EN_txchan_2_verbose_enq,
		       RDY_txchan_2_verbose_enq,

		       txchan_2_verbose_notFull,
		       RDY_txchan_2_verbose_notFull,

		       txchan_3_writeServer_enq_v,
		       EN_txchan_3_writeServer_enq,
		       RDY_txchan_3_writeServer_enq,

		       txchan_3_writeServer_notFull,
		       RDY_txchan_3_writeServer_notFull,

		       EN_txchan_3_macTx_get,
		       txchan_3_macTx_get,
		       RDY_txchan_3_macTx_get,

		       txchan_3_verbose_enq_v,
		       EN_txchan_3_verbose_enq,
		       RDY_txchan_3_verbose_enq,

		       txchan_3_verbose_notFull,
		       RDY_txchan_3_verbose_notFull,

		       prev_0_enq_v,
		       EN_prev_0_enq,
		       RDY_prev_0_enq,

		       prev_0_notFull,
		       RDY_prev_0_notFull,

		       prev_1_enq_v,
		       EN_prev_1_enq,
		       RDY_prev_1_enq,

		       prev_1_notFull,
		       RDY_prev_1_notFull,

		       prev_2_enq_v,
		       EN_prev_2_enq,
		       RDY_prev_2_enq,

		       prev_2_notFull,
		       RDY_prev_2_notFull,

		       prev_3_enq_v,
		       EN_prev_3_enq,
		       RDY_prev_3_enq,

		       prev_3_notFull,
		       RDY_prev_3_notFull,

		       prev_4_enq_v,
		       EN_prev_4_enq,
		       RDY_prev_4_enq,

		       prev_4_notFull,
		       RDY_prev_4_notFull,

		       set_verbosity_verbosity,
		       EN_set_verbosity,
		       RDY_set_verbosity);
  input  CLK_p0;
  input  RST_N_p1;
  input  CLK_p2;
  input  RST_N_p3;
  input  CLK;
  input  RST_N;

  // action method rxchan_0_macRx_put
  input  [105 : 0] rxchan_0_macRx_put;
  input  EN_rxchan_0_macRx_put;
  output RDY_rxchan_0_macRx_put;

  // value method rxchan_0_writeClient_first
  output [177 : 0] rxchan_0_writeClient_first;
  output RDY_rxchan_0_writeClient_first;

  // action method rxchan_0_writeClient_deq
  input  EN_rxchan_0_writeClient_deq;
  output RDY_rxchan_0_writeClient_deq;

  // value method rxchan_0_writeClient_notEmpty
  output rxchan_0_writeClient_notEmpty;
  output RDY_rxchan_0_writeClient_notEmpty;

  // value method rxchan_0_next_first
  output [1498 : 0] rxchan_0_next_first;
  output RDY_rxchan_0_next_first;

  // action method rxchan_0_next_deq
  input  EN_rxchan_0_next_deq;
  output RDY_rxchan_0_next_deq;

  // value method rxchan_0_next_notEmpty
  output rxchan_0_next_notEmpty;
  output RDY_rxchan_0_next_notEmpty;

  // action method rxchan_0_verbose_enq
  input  [31 : 0] rxchan_0_verbose_enq_v;
  input  EN_rxchan_0_verbose_enq;
  output RDY_rxchan_0_verbose_enq;

  // value method rxchan_0_verbose_notFull
  output rxchan_0_verbose_notFull;
  output RDY_rxchan_0_verbose_notFull;

  // action method rxchan_1_macRx_put
  input  [105 : 0] rxchan_1_macRx_put;
  input  EN_rxchan_1_macRx_put;
  output RDY_rxchan_1_macRx_put;

  // value method rxchan_1_writeClient_first
  output [177 : 0] rxchan_1_writeClient_first;
  output RDY_rxchan_1_writeClient_first;

  // action method rxchan_1_writeClient_deq
  input  EN_rxchan_1_writeClient_deq;
  output RDY_rxchan_1_writeClient_deq;

  // value method rxchan_1_writeClient_notEmpty
  output rxchan_1_writeClient_notEmpty;
  output RDY_rxchan_1_writeClient_notEmpty;

  // value method rxchan_1_next_first
  output [1498 : 0] rxchan_1_next_first;
  output RDY_rxchan_1_next_first;

  // action method rxchan_1_next_deq
  input  EN_rxchan_1_next_deq;
  output RDY_rxchan_1_next_deq;

  // value method rxchan_1_next_notEmpty
  output rxchan_1_next_notEmpty;
  output RDY_rxchan_1_next_notEmpty;

  // action method rxchan_1_verbose_enq
  input  [31 : 0] rxchan_1_verbose_enq_v;
  input  EN_rxchan_1_verbose_enq;
  output RDY_rxchan_1_verbose_enq;

  // value method rxchan_1_verbose_notFull
  output rxchan_1_verbose_notFull;
  output RDY_rxchan_1_verbose_notFull;

  // action method rxchan_2_macRx_put
  input  [105 : 0] rxchan_2_macRx_put;
  input  EN_rxchan_2_macRx_put;
  output RDY_rxchan_2_macRx_put;

  // value method rxchan_2_writeClient_first
  output [177 : 0] rxchan_2_writeClient_first;
  output RDY_rxchan_2_writeClient_first;

  // action method rxchan_2_writeClient_deq
  input  EN_rxchan_2_writeClient_deq;
  output RDY_rxchan_2_writeClient_deq;

  // value method rxchan_2_writeClient_notEmpty
  output rxchan_2_writeClient_notEmpty;
  output RDY_rxchan_2_writeClient_notEmpty;

  // value method rxchan_2_next_first
  output [1498 : 0] rxchan_2_next_first;
  output RDY_rxchan_2_next_first;

  // action method rxchan_2_next_deq
  input  EN_rxchan_2_next_deq;
  output RDY_rxchan_2_next_deq;

  // value method rxchan_2_next_notEmpty
  output rxchan_2_next_notEmpty;
  output RDY_rxchan_2_next_notEmpty;

  // action method rxchan_2_verbose_enq
  input  [31 : 0] rxchan_2_verbose_enq_v;
  input  EN_rxchan_2_verbose_enq;
  output RDY_rxchan_2_verbose_enq;

  // value method rxchan_2_verbose_notFull
  output rxchan_2_verbose_notFull;
  output RDY_rxchan_2_verbose_notFull;

  // action method rxchan_3_macRx_put
  input  [105 : 0] rxchan_3_macRx_put;
  input  EN_rxchan_3_macRx_put;
  output RDY_rxchan_3_macRx_put;

  // value method rxchan_3_writeClient_first
  output [177 : 0] rxchan_3_writeClient_first;
  output RDY_rxchan_3_writeClient_first;

  // action method rxchan_3_writeClient_deq
  input  EN_rxchan_3_writeClient_deq;
  output RDY_rxchan_3_writeClient_deq;

  // value method rxchan_3_writeClient_notEmpty
  output rxchan_3_writeClient_notEmpty;
  output RDY_rxchan_3_writeClient_notEmpty;

  // value method rxchan_3_next_first
  output [1498 : 0] rxchan_3_next_first;
  output RDY_rxchan_3_next_first;

  // action method rxchan_3_next_deq
  input  EN_rxchan_3_next_deq;
  output RDY_rxchan_3_next_deq;

  // value method rxchan_3_next_notEmpty
  output rxchan_3_next_notEmpty;
  output RDY_rxchan_3_next_notEmpty;

  // action method rxchan_3_verbose_enq
  input  [31 : 0] rxchan_3_verbose_enq_v;
  input  EN_rxchan_3_verbose_enq;
  output RDY_rxchan_3_verbose_enq;

  // value method rxchan_3_verbose_notFull
  output rxchan_3_verbose_notFull;
  output RDY_rxchan_3_verbose_notFull;

  // action method hostchan_0_writeServer_enq
  input  [177 : 0] hostchan_0_writeServer_enq_v;
  input  EN_hostchan_0_writeServer_enq;
  output RDY_hostchan_0_writeServer_enq;

  // value method hostchan_0_writeServer_notFull
  output hostchan_0_writeServer_notFull;
  output RDY_hostchan_0_writeServer_notFull;

  // value method hostchan_0_writeClient_first
  output [177 : 0] hostchan_0_writeClient_first;
  output RDY_hostchan_0_writeClient_first;

  // action method hostchan_0_writeClient_deq
  input  EN_hostchan_0_writeClient_deq;
  output RDY_hostchan_0_writeClient_deq;

  // value method hostchan_0_writeClient_notEmpty
  output hostchan_0_writeClient_notEmpty;
  output RDY_hostchan_0_writeClient_notEmpty;

  // value method hostchan_0_next_first
  output [1498 : 0] hostchan_0_next_first;
  output RDY_hostchan_0_next_first;

  // action method hostchan_0_next_deq
  input  EN_hostchan_0_next_deq;
  output RDY_hostchan_0_next_deq;

  // value method hostchan_0_next_notEmpty
  output hostchan_0_next_notEmpty;
  output RDY_hostchan_0_next_notEmpty;

  // action method hostchan_0_verbose_enq
  input  [31 : 0] hostchan_0_verbose_enq_v;
  input  EN_hostchan_0_verbose_enq;
  output RDY_hostchan_0_verbose_enq;

  // value method hostchan_0_verbose_notFull
  output hostchan_0_verbose_notFull;
  output RDY_hostchan_0_verbose_notFull;

  // action method txchan_0_writeServer_enq
  input  [177 : 0] txchan_0_writeServer_enq_v;
  input  EN_txchan_0_writeServer_enq;
  output RDY_txchan_0_writeServer_enq;

  // value method txchan_0_writeServer_notFull
  output txchan_0_writeServer_notFull;
  output RDY_txchan_0_writeServer_notFull;

  // actionvalue method txchan_0_macTx_get
  input  EN_txchan_0_macTx_get;
  output [105 : 0] txchan_0_macTx_get;
  output RDY_txchan_0_macTx_get;

  // action method txchan_0_verbose_enq
  input  [31 : 0] txchan_0_verbose_enq_v;
  input  EN_txchan_0_verbose_enq;
  output RDY_txchan_0_verbose_enq;

  // value method txchan_0_verbose_notFull
  output txchan_0_verbose_notFull;
  output RDY_txchan_0_verbose_notFull;

  // action method txchan_1_writeServer_enq
  input  [177 : 0] txchan_1_writeServer_enq_v;
  input  EN_txchan_1_writeServer_enq;
  output RDY_txchan_1_writeServer_enq;

  // value method txchan_1_writeServer_notFull
  output txchan_1_writeServer_notFull;
  output RDY_txchan_1_writeServer_notFull;

  // actionvalue method txchan_1_macTx_get
  input  EN_txchan_1_macTx_get;
  output [105 : 0] txchan_1_macTx_get;
  output RDY_txchan_1_macTx_get;

  // action method txchan_1_verbose_enq
  input  [31 : 0] txchan_1_verbose_enq_v;
  input  EN_txchan_1_verbose_enq;
  output RDY_txchan_1_verbose_enq;

  // value method txchan_1_verbose_notFull
  output txchan_1_verbose_notFull;
  output RDY_txchan_1_verbose_notFull;

  // action method txchan_2_writeServer_enq
  input  [177 : 0] txchan_2_writeServer_enq_v;
  input  EN_txchan_2_writeServer_enq;
  output RDY_txchan_2_writeServer_enq;

  // value method txchan_2_writeServer_notFull
  output txchan_2_writeServer_notFull;
  output RDY_txchan_2_writeServer_notFull;

  // actionvalue method txchan_2_macTx_get
  input  EN_txchan_2_macTx_get;
  output [105 : 0] txchan_2_macTx_get;
  output RDY_txchan_2_macTx_get;

  // action method txchan_2_verbose_enq
  input  [31 : 0] txchan_2_verbose_enq_v;
  input  EN_txchan_2_verbose_enq;
  output RDY_txchan_2_verbose_enq;

  // value method txchan_2_verbose_notFull
  output txchan_2_verbose_notFull;
  output RDY_txchan_2_verbose_notFull;

  // action method txchan_3_writeServer_enq
  input  [177 : 0] txchan_3_writeServer_enq_v;
  input  EN_txchan_3_writeServer_enq;
  output RDY_txchan_3_writeServer_enq;

  // value method txchan_3_writeServer_notFull
  output txchan_3_writeServer_notFull;
  output RDY_txchan_3_writeServer_notFull;

  // actionvalue method txchan_3_macTx_get
  input  EN_txchan_3_macTx_get;
  output [105 : 0] txchan_3_macTx_get;
  output RDY_txchan_3_macTx_get;

  // action method txchan_3_verbose_enq
  input  [31 : 0] txchan_3_verbose_enq_v;
  input  EN_txchan_3_verbose_enq;
  output RDY_txchan_3_verbose_enq;

  // value method txchan_3_verbose_notFull
  output txchan_3_verbose_notFull;
  output RDY_txchan_3_verbose_notFull;

  // action method prev_0_enq
  input  [1498 : 0] prev_0_enq_v;
  input  EN_prev_0_enq;
  output RDY_prev_0_enq;

  // value method prev_0_notFull
  output prev_0_notFull;
  output RDY_prev_0_notFull;

  // action method prev_1_enq
  input  [1498 : 0] prev_1_enq_v;
  input  EN_prev_1_enq;
  output RDY_prev_1_enq;

  // value method prev_1_notFull
  output prev_1_notFull;
  output RDY_prev_1_notFull;

  // action method prev_2_enq
  input  [1498 : 0] prev_2_enq_v;
  input  EN_prev_2_enq;
  output RDY_prev_2_enq;

  // value method prev_2_notFull
  output prev_2_notFull;
  output RDY_prev_2_notFull;

  // action method prev_3_enq
  input  [1498 : 0] prev_3_enq_v;
  input  EN_prev_3_enq;
  output RDY_prev_3_enq;

  // value method prev_3_notFull
  output prev_3_notFull;
  output RDY_prev_3_notFull;

  // action method prev_4_enq
  input  [1498 : 0] prev_4_enq_v;
  input  EN_prev_4_enq;
  output RDY_prev_4_enq;

  // value method prev_4_notFull
  output prev_4_notFull;
  output RDY_prev_4_notFull;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [1498 : 0] hostchan_0_next_first,
		  rxchan_0_next_first,
		  rxchan_1_next_first,
		  rxchan_2_next_first,
		  rxchan_3_next_first;
  wire [177 : 0] hostchan_0_writeClient_first,
		 rxchan_0_writeClient_first,
		 rxchan_1_writeClient_first,
		 rxchan_2_writeClient_first,
		 rxchan_3_writeClient_first;
  wire [105 : 0] txchan_0_macTx_get,
		 txchan_1_macTx_get,
		 txchan_2_macTx_get,
		 txchan_3_macTx_get;
  wire RDY_hostchan_0_next_deq,
       RDY_hostchan_0_next_first,
       RDY_hostchan_0_next_notEmpty,
       RDY_hostchan_0_verbose_enq,
       RDY_hostchan_0_verbose_notFull,
       RDY_hostchan_0_writeClient_deq,
       RDY_hostchan_0_writeClient_first,
       RDY_hostchan_0_writeClient_notEmpty,
       RDY_hostchan_0_writeServer_enq,
       RDY_hostchan_0_writeServer_notFull,
       RDY_prev_0_enq,
       RDY_prev_0_notFull,
       RDY_prev_1_enq,
       RDY_prev_1_notFull,
       RDY_prev_2_enq,
       RDY_prev_2_notFull,
       RDY_prev_3_enq,
       RDY_prev_3_notFull,
       RDY_prev_4_enq,
       RDY_prev_4_notFull,
       RDY_rxchan_0_macRx_put,
       RDY_rxchan_0_next_deq,
       RDY_rxchan_0_next_first,
       RDY_rxchan_0_next_notEmpty,
       RDY_rxchan_0_verbose_enq,
       RDY_rxchan_0_verbose_notFull,
       RDY_rxchan_0_writeClient_deq,
       RDY_rxchan_0_writeClient_first,
       RDY_rxchan_0_writeClient_notEmpty,
       RDY_rxchan_1_macRx_put,
       RDY_rxchan_1_next_deq,
       RDY_rxchan_1_next_first,
       RDY_rxchan_1_next_notEmpty,
       RDY_rxchan_1_verbose_enq,
       RDY_rxchan_1_verbose_notFull,
       RDY_rxchan_1_writeClient_deq,
       RDY_rxchan_1_writeClient_first,
       RDY_rxchan_1_writeClient_notEmpty,
       RDY_rxchan_2_macRx_put,
       RDY_rxchan_2_next_deq,
       RDY_rxchan_2_next_first,
       RDY_rxchan_2_next_notEmpty,
       RDY_rxchan_2_verbose_enq,
       RDY_rxchan_2_verbose_notFull,
       RDY_rxchan_2_writeClient_deq,
       RDY_rxchan_2_writeClient_first,
       RDY_rxchan_2_writeClient_notEmpty,
       RDY_rxchan_3_macRx_put,
       RDY_rxchan_3_next_deq,
       RDY_rxchan_3_next_first,
       RDY_rxchan_3_next_notEmpty,
       RDY_rxchan_3_verbose_enq,
       RDY_rxchan_3_verbose_notFull,
       RDY_rxchan_3_writeClient_deq,
       RDY_rxchan_3_writeClient_first,
       RDY_rxchan_3_writeClient_notEmpty,
       RDY_set_verbosity,
       RDY_txchan_0_macTx_get,
       RDY_txchan_0_verbose_enq,
       RDY_txchan_0_verbose_notFull,
       RDY_txchan_0_writeServer_enq,
       RDY_txchan_0_writeServer_notFull,
       RDY_txchan_1_macTx_get,
       RDY_txchan_1_verbose_enq,
       RDY_txchan_1_verbose_notFull,
       RDY_txchan_1_writeServer_enq,
       RDY_txchan_1_writeServer_notFull,
       RDY_txchan_2_macTx_get,
       RDY_txchan_2_verbose_enq,
       RDY_txchan_2_verbose_notFull,
       RDY_txchan_2_writeServer_enq,
       RDY_txchan_2_writeServer_notFull,
       RDY_txchan_3_macTx_get,
       RDY_txchan_3_verbose_enq,
       RDY_txchan_3_verbose_notFull,
       RDY_txchan_3_writeServer_enq,
       RDY_txchan_3_writeServer_notFull,
       hostchan_0_next_notEmpty,
       hostchan_0_verbose_notFull,
       hostchan_0_writeClient_notEmpty,
       hostchan_0_writeServer_notFull,
       prev_0_notFull,
       prev_1_notFull,
       prev_2_notFull,
       prev_3_notFull,
       prev_4_notFull,
       rxchan_0_next_notEmpty,
       rxchan_0_verbose_notFull,
       rxchan_0_writeClient_notEmpty,
       rxchan_1_next_notEmpty,
       rxchan_1_verbose_notFull,
       rxchan_1_writeClient_notEmpty,
       rxchan_2_next_notEmpty,
       rxchan_2_verbose_notFull,
       rxchan_2_writeClient_notEmpty,
       rxchan_3_next_notEmpty,
       rxchan_3_verbose_notFull,
       rxchan_3_writeClient_notEmpty,
       txchan_0_verbose_notFull,
       txchan_0_writeServer_notFull,
       txchan_1_verbose_notFull,
       txchan_1_writeServer_notFull,
       txchan_2_verbose_notFull,
       txchan_2_writeServer_notFull,
       txchan_3_verbose_notFull,
       txchan_3_writeServer_notFull;

  // inlined wires
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget;
  wire pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_0_memBuffer_serverAdapterB_s1_1_whas,
       pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas,
       pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas,
       pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register cf_verbosity_0
  reg [31 : 0] cf_verbosity_0;
  wire [31 : 0] cf_verbosity_0_D_IN;
  wire cf_verbosity_0_EN;

  // register cf_verbosity_0_1
  reg [31 : 0] cf_verbosity_0_1;
  wire [31 : 0] cf_verbosity_0_1_D_IN;
  wire cf_verbosity_0_1_EN;

  // register cf_verbosity_0_2
  reg [31 : 0] cf_verbosity_0_2;
  wire [31 : 0] cf_verbosity_0_2_D_IN;
  wire cf_verbosity_0_2_EN;

  // register cf_verbosity_0_3
  reg [31 : 0] cf_verbosity_0_3;
  wire [31 : 0] cf_verbosity_0_3_D_IN;
  wire cf_verbosity_0_3_EN;

  // register cf_verbosity_1
  reg [31 : 0] cf_verbosity_1;
  wire [31 : 0] cf_verbosity_1_D_IN;
  wire cf_verbosity_1_EN;

  // register cf_verbosity_1_1
  reg [31 : 0] cf_verbosity_1_1;
  wire [31 : 0] cf_verbosity_1_1_D_IN;
  wire cf_verbosity_1_1_EN;

  // register cf_verbosity_1_2
  reg [31 : 0] cf_verbosity_1_2;
  wire [31 : 0] cf_verbosity_1_2_D_IN;
  wire cf_verbosity_1_2_EN;

  // register cf_verbosity_2
  reg [31 : 0] cf_verbosity_2;
  wire [31 : 0] cf_verbosity_2_D_IN;
  wire cf_verbosity_2_EN;

  // register cf_verbosity_2_1
  reg [31 : 0] cf_verbosity_2_1;
  wire [31 : 0] cf_verbosity_2_1_D_IN;
  wire cf_verbosity_2_1_EN;

  // register cf_verbosity_2_2
  reg [31 : 0] cf_verbosity_2_2;
  wire [31 : 0] cf_verbosity_2_2_D_IN;
  wire cf_verbosity_2_2_EN;

  // register cf_verbosity_3
  reg [31 : 0] cf_verbosity_3;
  wire [31 : 0] cf_verbosity_3_D_IN;
  wire cf_verbosity_3_EN;

  // register cf_verbosity_3_1
  reg [31 : 0] cf_verbosity_3_1;
  wire [31 : 0] cf_verbosity_3_1_D_IN;
  wire cf_verbosity_3_1_EN;

  // register cf_verbosity_3_2
  reg [31 : 0] cf_verbosity_3_2;
  wire [31 : 0] cf_verbosity_3_2_D_IN;
  wire cf_verbosity_3_2_EN;

  // register cf_verbosity_4
  reg [31 : 0] cf_verbosity_4;
  wire [31 : 0] cf_verbosity_4_D_IN;
  wire cf_verbosity_4_EN;

  // register hostchan_0_cf_verbosity
  reg [31 : 0] hostchan_0_cf_verbosity;
  wire [31 : 0] hostchan_0_cf_verbosity_D_IN;
  wire hostchan_0_cf_verbosity_EN;

  // register hostchan_0_readStarted
  reg hostchan_0_readStarted;
  wire hostchan_0_readStarted_D_IN, hostchan_0_readStarted_EN;

  // register hostchan_1_cf_verbosity
  reg [31 : 0] hostchan_1_cf_verbosity;
  wire [31 : 0] hostchan_1_cf_verbosity_D_IN;
  wire hostchan_1_cf_verbosity_EN;

  // register hostchan_1_readStarted
  reg hostchan_1_readStarted;
  wire hostchan_1_readStarted_D_IN, hostchan_1_readStarted_EN;

  // register hostchan_2_cf_verbosity
  reg [31 : 0] hostchan_2_cf_verbosity;
  wire [31 : 0] hostchan_2_cf_verbosity_D_IN;
  wire hostchan_2_cf_verbosity_EN;

  // register hostchan_2_readStarted
  reg hostchan_2_readStarted;
  wire hostchan_2_readStarted_D_IN, hostchan_2_readStarted_EN;

  // register hostchan_3_cf_verbosity
  reg [31 : 0] hostchan_3_cf_verbosity;
  wire [31 : 0] hostchan_3_cf_verbosity_D_IN;
  wire hostchan_3_cf_verbosity_EN;

  // register hostchan_3_readStarted
  reg hostchan_3_readStarted;
  wire hostchan_3_readStarted_D_IN, hostchan_3_readStarted_EN;

  // register macToRing_0_data_bytes
  reg [63 : 0] macToRing_0_data_bytes;
  wire [63 : 0] macToRing_0_data_bytes_D_IN;
  wire macToRing_0_data_bytes_EN;

  // register macToRing_0_gearbox_data_bytes
  reg [63 : 0] macToRing_0_gearbox_data_bytes;
  wire [63 : 0] macToRing_0_gearbox_data_bytes_D_IN;
  wire macToRing_0_gearbox_data_bytes_EN;

  // register macToRing_0_gearbox_eopCount
  reg [63 : 0] macToRing_0_gearbox_eopCount;
  wire [63 : 0] macToRing_0_gearbox_eopCount_D_IN;
  wire macToRing_0_gearbox_eopCount_EN;

  // register macToRing_0_gearbox_idle_cycles
  reg [63 : 0] macToRing_0_gearbox_idle_cycles;
  wire [63 : 0] macToRing_0_gearbox_idle_cycles_D_IN;
  wire macToRing_0_gearbox_idle_cycles_EN;

  // register macToRing_0_gearbox_inProgress
  reg macToRing_0_gearbox_inProgress;
  wire macToRing_0_gearbox_inProgress_D_IN, macToRing_0_gearbox_inProgress_EN;

  // register macToRing_0_gearbox_oddBeat
  reg macToRing_0_gearbox_oddBeat;
  wire macToRing_0_gearbox_oddBeat_D_IN, macToRing_0_gearbox_oddBeat_EN;

  // register macToRing_0_gearbox_sopCount
  reg [63 : 0] macToRing_0_gearbox_sopCount;
  wire [63 : 0] macToRing_0_gearbox_sopCount_D_IN;
  wire macToRing_0_gearbox_sopCount_EN;

  // register macToRing_0_gearbox_v_prev
  reg [105 : 0] macToRing_0_gearbox_v_prev;
  wire [105 : 0] macToRing_0_gearbox_v_prev_D_IN;
  wire macToRing_0_gearbox_v_prev_EN;

  // register macToRing_0_total_cycles
  reg [63 : 0] macToRing_0_total_cycles;
  wire [63 : 0] macToRing_0_total_cycles_D_IN;
  wire macToRing_0_total_cycles_EN;

  // register macToRing_1_data_bytes
  reg [63 : 0] macToRing_1_data_bytes;
  wire [63 : 0] macToRing_1_data_bytes_D_IN;
  wire macToRing_1_data_bytes_EN;

  // register macToRing_1_gearbox_data_bytes
  reg [63 : 0] macToRing_1_gearbox_data_bytes;
  wire [63 : 0] macToRing_1_gearbox_data_bytes_D_IN;
  wire macToRing_1_gearbox_data_bytes_EN;

  // register macToRing_1_gearbox_eopCount
  reg [63 : 0] macToRing_1_gearbox_eopCount;
  wire [63 : 0] macToRing_1_gearbox_eopCount_D_IN;
  wire macToRing_1_gearbox_eopCount_EN;

  // register macToRing_1_gearbox_idle_cycles
  reg [63 : 0] macToRing_1_gearbox_idle_cycles;
  wire [63 : 0] macToRing_1_gearbox_idle_cycles_D_IN;
  wire macToRing_1_gearbox_idle_cycles_EN;

  // register macToRing_1_gearbox_inProgress
  reg macToRing_1_gearbox_inProgress;
  wire macToRing_1_gearbox_inProgress_D_IN, macToRing_1_gearbox_inProgress_EN;

  // register macToRing_1_gearbox_oddBeat
  reg macToRing_1_gearbox_oddBeat;
  wire macToRing_1_gearbox_oddBeat_D_IN, macToRing_1_gearbox_oddBeat_EN;

  // register macToRing_1_gearbox_sopCount
  reg [63 : 0] macToRing_1_gearbox_sopCount;
  wire [63 : 0] macToRing_1_gearbox_sopCount_D_IN;
  wire macToRing_1_gearbox_sopCount_EN;

  // register macToRing_1_gearbox_v_prev
  reg [105 : 0] macToRing_1_gearbox_v_prev;
  wire [105 : 0] macToRing_1_gearbox_v_prev_D_IN;
  wire macToRing_1_gearbox_v_prev_EN;

  // register macToRing_1_total_cycles
  reg [63 : 0] macToRing_1_total_cycles;
  wire [63 : 0] macToRing_1_total_cycles_D_IN;
  wire macToRing_1_total_cycles_EN;

  // register macToRing_2_data_bytes
  reg [63 : 0] macToRing_2_data_bytes;
  wire [63 : 0] macToRing_2_data_bytes_D_IN;
  wire macToRing_2_data_bytes_EN;

  // register macToRing_2_gearbox_data_bytes
  reg [63 : 0] macToRing_2_gearbox_data_bytes;
  wire [63 : 0] macToRing_2_gearbox_data_bytes_D_IN;
  wire macToRing_2_gearbox_data_bytes_EN;

  // register macToRing_2_gearbox_eopCount
  reg [63 : 0] macToRing_2_gearbox_eopCount;
  wire [63 : 0] macToRing_2_gearbox_eopCount_D_IN;
  wire macToRing_2_gearbox_eopCount_EN;

  // register macToRing_2_gearbox_idle_cycles
  reg [63 : 0] macToRing_2_gearbox_idle_cycles;
  wire [63 : 0] macToRing_2_gearbox_idle_cycles_D_IN;
  wire macToRing_2_gearbox_idle_cycles_EN;

  // register macToRing_2_gearbox_inProgress
  reg macToRing_2_gearbox_inProgress;
  wire macToRing_2_gearbox_inProgress_D_IN, macToRing_2_gearbox_inProgress_EN;

  // register macToRing_2_gearbox_oddBeat
  reg macToRing_2_gearbox_oddBeat;
  wire macToRing_2_gearbox_oddBeat_D_IN, macToRing_2_gearbox_oddBeat_EN;

  // register macToRing_2_gearbox_sopCount
  reg [63 : 0] macToRing_2_gearbox_sopCount;
  wire [63 : 0] macToRing_2_gearbox_sopCount_D_IN;
  wire macToRing_2_gearbox_sopCount_EN;

  // register macToRing_2_gearbox_v_prev
  reg [105 : 0] macToRing_2_gearbox_v_prev;
  wire [105 : 0] macToRing_2_gearbox_v_prev_D_IN;
  wire macToRing_2_gearbox_v_prev_EN;

  // register macToRing_2_total_cycles
  reg [63 : 0] macToRing_2_total_cycles;
  wire [63 : 0] macToRing_2_total_cycles_D_IN;
  wire macToRing_2_total_cycles_EN;

  // register macToRing_3_data_bytes
  reg [63 : 0] macToRing_3_data_bytes;
  wire [63 : 0] macToRing_3_data_bytes_D_IN;
  wire macToRing_3_data_bytes_EN;

  // register macToRing_3_gearbox_data_bytes
  reg [63 : 0] macToRing_3_gearbox_data_bytes;
  wire [63 : 0] macToRing_3_gearbox_data_bytes_D_IN;
  wire macToRing_3_gearbox_data_bytes_EN;

  // register macToRing_3_gearbox_eopCount
  reg [63 : 0] macToRing_3_gearbox_eopCount;
  wire [63 : 0] macToRing_3_gearbox_eopCount_D_IN;
  wire macToRing_3_gearbox_eopCount_EN;

  // register macToRing_3_gearbox_idle_cycles
  reg [63 : 0] macToRing_3_gearbox_idle_cycles;
  wire [63 : 0] macToRing_3_gearbox_idle_cycles_D_IN;
  wire macToRing_3_gearbox_idle_cycles_EN;

  // register macToRing_3_gearbox_inProgress
  reg macToRing_3_gearbox_inProgress;
  wire macToRing_3_gearbox_inProgress_D_IN, macToRing_3_gearbox_inProgress_EN;

  // register macToRing_3_gearbox_oddBeat
  reg macToRing_3_gearbox_oddBeat;
  wire macToRing_3_gearbox_oddBeat_D_IN, macToRing_3_gearbox_oddBeat_EN;

  // register macToRing_3_gearbox_sopCount
  reg [63 : 0] macToRing_3_gearbox_sopCount;
  wire [63 : 0] macToRing_3_gearbox_sopCount_D_IN;
  wire macToRing_3_gearbox_sopCount_EN;

  // register macToRing_3_gearbox_v_prev
  reg [105 : 0] macToRing_3_gearbox_v_prev;
  wire [105 : 0] macToRing_3_gearbox_v_prev_D_IN;
  wire macToRing_3_gearbox_v_prev_EN;

  // register macToRing_3_total_cycles
  reg [63 : 0] macToRing_3_total_cycles;
  wire [63 : 0] macToRing_3_total_cycles_D_IN;
  wire macToRing_3_total_cycles_EN;

  // register pktBuff_0_cf_verbosity
  reg [31 : 0] pktBuff_0_cf_verbosity;
  wire [31 : 0] pktBuff_0_cf_verbosity_D_IN;
  wire pktBuff_0_cf_verbosity_EN;

  // register pktBuff_0_cf_verbosity_1
  reg [31 : 0] pktBuff_0_cf_verbosity_1;
  wire [31 : 0] pktBuff_0_cf_verbosity_1_D_IN;
  wire pktBuff_0_cf_verbosity_1_EN;

  // register pktBuff_0_eopDeq
  reg [63 : 0] pktBuff_0_eopDeq;
  wire [63 : 0] pktBuff_0_eopDeq_D_IN;
  wire pktBuff_0_eopDeq_EN;

  // register pktBuff_0_eopEnq
  reg [63 : 0] pktBuff_0_eopEnq;
  wire [63 : 0] pktBuff_0_eopEnq_D_IN;
  wire pktBuff_0_eopEnq_EN;

  // register pktBuff_0_inPacket
  reg pktBuff_0_inPacket;
  wire pktBuff_0_inPacket_D_IN, pktBuff_0_inPacket_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_0_outPacket
  reg pktBuff_0_outPacket;
  wire pktBuff_0_outPacket_D_IN, pktBuff_0_outPacket_EN;

  // register pktBuff_0_packetLen
  reg [15 : 0] pktBuff_0_packetLen;
  wire [15 : 0] pktBuff_0_packetLen_D_IN;
  wire pktBuff_0_packetLen_EN;

  // register pktBuff_0_rdCurrPtr
  reg [7 : 0] pktBuff_0_rdCurrPtr;
  wire [7 : 0] pktBuff_0_rdCurrPtr_D_IN;
  wire pktBuff_0_rdCurrPtr_EN;

  // register pktBuff_0_readStarted
  reg pktBuff_0_readStarted;
  wire pktBuff_0_readStarted_D_IN, pktBuff_0_readStarted_EN;

  // register pktBuff_0_sopDeq
  reg [63 : 0] pktBuff_0_sopDeq;
  wire [63 : 0] pktBuff_0_sopDeq_D_IN;
  wire pktBuff_0_sopDeq_EN;

  // register pktBuff_0_sopEnq
  reg [63 : 0] pktBuff_0_sopEnq;
  wire [63 : 0] pktBuff_0_sopEnq_D_IN;
  wire pktBuff_0_sopEnq_EN;

  // register pktBuff_0_wrCurrPtr
  reg [7 : 0] pktBuff_0_wrCurrPtr;
  wire [7 : 0] pktBuff_0_wrCurrPtr_D_IN;
  wire pktBuff_0_wrCurrPtr_EN;

  // register pktBuff_1_cf_verbosity
  reg [31 : 0] pktBuff_1_cf_verbosity;
  wire [31 : 0] pktBuff_1_cf_verbosity_D_IN;
  wire pktBuff_1_cf_verbosity_EN;

  // register pktBuff_1_cf_verbosity_1
  reg [31 : 0] pktBuff_1_cf_verbosity_1;
  wire [31 : 0] pktBuff_1_cf_verbosity_1_D_IN;
  wire pktBuff_1_cf_verbosity_1_EN;

  // register pktBuff_1_eopDeq
  reg [63 : 0] pktBuff_1_eopDeq;
  wire [63 : 0] pktBuff_1_eopDeq_D_IN;
  wire pktBuff_1_eopDeq_EN;

  // register pktBuff_1_eopEnq
  reg [63 : 0] pktBuff_1_eopEnq;
  wire [63 : 0] pktBuff_1_eopEnq_D_IN;
  wire pktBuff_1_eopEnq_EN;

  // register pktBuff_1_inPacket
  reg pktBuff_1_inPacket;
  wire pktBuff_1_inPacket_D_IN, pktBuff_1_inPacket_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_1_outPacket
  reg pktBuff_1_outPacket;
  wire pktBuff_1_outPacket_D_IN, pktBuff_1_outPacket_EN;

  // register pktBuff_1_packetLen
  reg [15 : 0] pktBuff_1_packetLen;
  wire [15 : 0] pktBuff_1_packetLen_D_IN;
  wire pktBuff_1_packetLen_EN;

  // register pktBuff_1_rdCurrPtr
  reg [7 : 0] pktBuff_1_rdCurrPtr;
  wire [7 : 0] pktBuff_1_rdCurrPtr_D_IN;
  wire pktBuff_1_rdCurrPtr_EN;

  // register pktBuff_1_readStarted
  reg pktBuff_1_readStarted;
  wire pktBuff_1_readStarted_D_IN, pktBuff_1_readStarted_EN;

  // register pktBuff_1_sopDeq
  reg [63 : 0] pktBuff_1_sopDeq;
  wire [63 : 0] pktBuff_1_sopDeq_D_IN;
  wire pktBuff_1_sopDeq_EN;

  // register pktBuff_1_sopEnq
  reg [63 : 0] pktBuff_1_sopEnq;
  wire [63 : 0] pktBuff_1_sopEnq_D_IN;
  wire pktBuff_1_sopEnq_EN;

  // register pktBuff_1_wrCurrPtr
  reg [7 : 0] pktBuff_1_wrCurrPtr;
  wire [7 : 0] pktBuff_1_wrCurrPtr_D_IN;
  wire pktBuff_1_wrCurrPtr_EN;

  // register pktBuff_2_cf_verbosity
  reg [31 : 0] pktBuff_2_cf_verbosity;
  wire [31 : 0] pktBuff_2_cf_verbosity_D_IN;
  wire pktBuff_2_cf_verbosity_EN;

  // register pktBuff_2_cf_verbosity_1
  reg [31 : 0] pktBuff_2_cf_verbosity_1;
  wire [31 : 0] pktBuff_2_cf_verbosity_1_D_IN;
  wire pktBuff_2_cf_verbosity_1_EN;

  // register pktBuff_2_eopDeq
  reg [63 : 0] pktBuff_2_eopDeq;
  wire [63 : 0] pktBuff_2_eopDeq_D_IN;
  wire pktBuff_2_eopDeq_EN;

  // register pktBuff_2_eopEnq
  reg [63 : 0] pktBuff_2_eopEnq;
  wire [63 : 0] pktBuff_2_eopEnq_D_IN;
  wire pktBuff_2_eopEnq_EN;

  // register pktBuff_2_inPacket
  reg pktBuff_2_inPacket;
  wire pktBuff_2_inPacket_D_IN, pktBuff_2_inPacket_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_2_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_2_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_2_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_2_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_2_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_2_outPacket
  reg pktBuff_2_outPacket;
  wire pktBuff_2_outPacket_D_IN, pktBuff_2_outPacket_EN;

  // register pktBuff_2_packetLen
  reg [15 : 0] pktBuff_2_packetLen;
  wire [15 : 0] pktBuff_2_packetLen_D_IN;
  wire pktBuff_2_packetLen_EN;

  // register pktBuff_2_rdCurrPtr
  reg [7 : 0] pktBuff_2_rdCurrPtr;
  wire [7 : 0] pktBuff_2_rdCurrPtr_D_IN;
  wire pktBuff_2_rdCurrPtr_EN;

  // register pktBuff_2_readStarted
  reg pktBuff_2_readStarted;
  wire pktBuff_2_readStarted_D_IN, pktBuff_2_readStarted_EN;

  // register pktBuff_2_sopDeq
  reg [63 : 0] pktBuff_2_sopDeq;
  wire [63 : 0] pktBuff_2_sopDeq_D_IN;
  wire pktBuff_2_sopDeq_EN;

  // register pktBuff_2_sopEnq
  reg [63 : 0] pktBuff_2_sopEnq;
  wire [63 : 0] pktBuff_2_sopEnq_D_IN;
  wire pktBuff_2_sopEnq_EN;

  // register pktBuff_2_wrCurrPtr
  reg [7 : 0] pktBuff_2_wrCurrPtr;
  wire [7 : 0] pktBuff_2_wrCurrPtr_D_IN;
  wire pktBuff_2_wrCurrPtr_EN;

  // register pktBuff_3_cf_verbosity
  reg [31 : 0] pktBuff_3_cf_verbosity;
  wire [31 : 0] pktBuff_3_cf_verbosity_D_IN;
  wire pktBuff_3_cf_verbosity_EN;

  // register pktBuff_3_cf_verbosity_1
  reg [31 : 0] pktBuff_3_cf_verbosity_1;
  wire [31 : 0] pktBuff_3_cf_verbosity_1_D_IN;
  wire pktBuff_3_cf_verbosity_1_EN;

  // register pktBuff_3_eopDeq
  reg [63 : 0] pktBuff_3_eopDeq;
  wire [63 : 0] pktBuff_3_eopDeq_D_IN;
  wire pktBuff_3_eopDeq_EN;

  // register pktBuff_3_eopEnq
  reg [63 : 0] pktBuff_3_eopEnq;
  wire [63 : 0] pktBuff_3_eopEnq_D_IN;
  wire pktBuff_3_eopEnq_EN;

  // register pktBuff_3_inPacket
  reg pktBuff_3_inPacket;
  wire pktBuff_3_inPacket_D_IN, pktBuff_3_inPacket_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_3_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_3_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_3_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_3_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_3_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_3_outPacket
  reg pktBuff_3_outPacket;
  wire pktBuff_3_outPacket_D_IN, pktBuff_3_outPacket_EN;

  // register pktBuff_3_packetLen
  reg [15 : 0] pktBuff_3_packetLen;
  wire [15 : 0] pktBuff_3_packetLen_D_IN;
  wire pktBuff_3_packetLen_EN;

  // register pktBuff_3_rdCurrPtr
  reg [7 : 0] pktBuff_3_rdCurrPtr;
  wire [7 : 0] pktBuff_3_rdCurrPtr_D_IN;
  wire pktBuff_3_rdCurrPtr_EN;

  // register pktBuff_3_readStarted
  reg pktBuff_3_readStarted;
  wire pktBuff_3_readStarted_D_IN, pktBuff_3_readStarted_EN;

  // register pktBuff_3_sopDeq
  reg [63 : 0] pktBuff_3_sopDeq;
  wire [63 : 0] pktBuff_3_sopDeq_D_IN;
  wire pktBuff_3_sopDeq_EN;

  // register pktBuff_3_sopEnq
  reg [63 : 0] pktBuff_3_sopEnq;
  wire [63 : 0] pktBuff_3_sopEnq_D_IN;
  wire pktBuff_3_sopEnq_EN;

  // register pktBuff_3_wrCurrPtr
  reg [7 : 0] pktBuff_3_wrCurrPtr;
  wire [7 : 0] pktBuff_3_wrCurrPtr_D_IN;
  wire pktBuff_3_wrCurrPtr_EN;

  // register pktBuff_4_cf_verbosity
  reg [31 : 0] pktBuff_4_cf_verbosity;
  wire [31 : 0] pktBuff_4_cf_verbosity_D_IN;
  wire pktBuff_4_cf_verbosity_EN;

  // register pktBuff_4_readStarted
  reg pktBuff_4_readStarted;
  wire pktBuff_4_readStarted_D_IN, pktBuff_4_readStarted_EN;

  // register readStarted_0
  reg readStarted_0;
  wire readStarted_0_D_IN, readStarted_0_EN;

  // register ringToMac_0_cycle_cnt
  reg [63 : 0] ringToMac_0_cycle_cnt;
  wire [63 : 0] ringToMac_0_cycle_cnt_D_IN;
  wire ringToMac_0_cycle_cnt_EN;

  // register ringToMac_0_data_bytes
  reg [63 : 0] ringToMac_0_data_bytes;
  wire [63 : 0] ringToMac_0_data_bytes_D_IN;
  wire ringToMac_0_data_bytes_EN;

  // register ringToMac_0_eopCount
  reg [63 : 0] ringToMac_0_eopCount;
  wire [63 : 0] ringToMac_0_eopCount_D_IN;
  wire ringToMac_0_eopCount_EN;

  // register ringToMac_0_fifoTxData_block0
  reg [211 : 0] ringToMac_0_fifoTxData_block0;
  wire [211 : 0] ringToMac_0_fifoTxData_block0_D_IN;
  wire ringToMac_0_fifoTxData_block0_EN;

  // register ringToMac_0_fifoTxData_block0_status
  reg ringToMac_0_fifoTxData_block0_status;
  wire ringToMac_0_fifoTxData_block0_status_D_IN,
       ringToMac_0_fifoTxData_block0_status_EN;

  // register ringToMac_0_fifoTxData_block1
  reg [211 : 0] ringToMac_0_fifoTxData_block1;
  wire [211 : 0] ringToMac_0_fifoTxData_block1_D_IN;
  wire ringToMac_0_fifoTxData_block1_EN;

  // register ringToMac_0_fifoTxData_block1_status
  reg ringToMac_0_fifoTxData_block1_status;
  wire ringToMac_0_fifoTxData_block1_status_D_IN,
       ringToMac_0_fifoTxData_block1_status_EN;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_elem0_status_0
  reg ringToMac_0_fifoTxData_elem0_status_0;
  wire ringToMac_0_fifoTxData_elem0_status_0_D_IN,
       ringToMac_0_fifoTxData_elem0_status_0_EN;

  // register ringToMac_0_fifoTxData_elem0_status_1
  reg ringToMac_0_fifoTxData_elem0_status_1;
  wire ringToMac_0_fifoTxData_elem0_status_1_D_IN,
       ringToMac_0_fifoTxData_elem0_status_1_EN;

  // register ringToMac_0_fifoTxData_elem1_status_0
  reg ringToMac_0_fifoTxData_elem1_status_0;
  wire ringToMac_0_fifoTxData_elem1_status_0_D_IN,
       ringToMac_0_fifoTxData_elem1_status_0_EN;

  // register ringToMac_0_fifoTxData_elem1_status_1
  reg ringToMac_0_fifoTxData_elem1_status_1;
  wire ringToMac_0_fifoTxData_elem1_status_1_D_IN,
       ringToMac_0_fifoTxData_elem1_status_1_EN;

  // register ringToMac_0_fifoTxData_read_block
  reg ringToMac_0_fifoTxData_read_block;
  wire ringToMac_0_fifoTxData_read_block_D_IN,
       ringToMac_0_fifoTxData_read_block_EN;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_write_block
  reg ringToMac_0_fifoTxData_write_block;
  wire ringToMac_0_fifoTxData_write_block_D_IN,
       ringToMac_0_fifoTxData_write_block_EN;

  // register ringToMac_0_goodputCount
  reg [63 : 0] ringToMac_0_goodputCount;
  wire [63 : 0] ringToMac_0_goodputCount_D_IN;
  wire ringToMac_0_goodputCount_EN;

  // register ringToMac_0_idleCount
  reg [63 : 0] ringToMac_0_idleCount;
  wire [63 : 0] ringToMac_0_idleCount_D_IN;
  wire ringToMac_0_idleCount_EN;

  // register ringToMac_0_idle_cycles
  reg [63 : 0] ringToMac_0_idle_cycles;
  wire [63 : 0] ringToMac_0_idle_cycles_D_IN;
  wire ringToMac_0_idle_cycles_EN;

  // register ringToMac_0_last_endofpacket
  reg [63 : 0] ringToMac_0_last_endofpacket;
  wire [63 : 0] ringToMac_0_last_endofpacket_D_IN;
  wire ringToMac_0_last_endofpacket_EN;

  // register ringToMac_0_last_startofpacket
  reg [63 : 0] ringToMac_0_last_startofpacket;
  wire [63 : 0] ringToMac_0_last_startofpacket_D_IN;
  wire ringToMac_0_last_startofpacket_EN;

  // register ringToMac_0_sopCount
  reg [63 : 0] ringToMac_0_sopCount;
  wire [63 : 0] ringToMac_0_sopCount_D_IN;
  wire ringToMac_0_sopCount_EN;

  // register ringToMac_0_total_cycles
  reg [63 : 0] ringToMac_0_total_cycles;
  wire [63 : 0] ringToMac_0_total_cycles_D_IN;
  wire ringToMac_0_total_cycles_EN;

  // register ringToMac_1_cycle_cnt
  reg [63 : 0] ringToMac_1_cycle_cnt;
  wire [63 : 0] ringToMac_1_cycle_cnt_D_IN;
  wire ringToMac_1_cycle_cnt_EN;

  // register ringToMac_1_data_bytes
  reg [63 : 0] ringToMac_1_data_bytes;
  wire [63 : 0] ringToMac_1_data_bytes_D_IN;
  wire ringToMac_1_data_bytes_EN;

  // register ringToMac_1_eopCount
  reg [63 : 0] ringToMac_1_eopCount;
  wire [63 : 0] ringToMac_1_eopCount_D_IN;
  wire ringToMac_1_eopCount_EN;

  // register ringToMac_1_fifoTxData_block0
  reg [211 : 0] ringToMac_1_fifoTxData_block0;
  wire [211 : 0] ringToMac_1_fifoTxData_block0_D_IN;
  wire ringToMac_1_fifoTxData_block0_EN;

  // register ringToMac_1_fifoTxData_block0_status
  reg ringToMac_1_fifoTxData_block0_status;
  wire ringToMac_1_fifoTxData_block0_status_D_IN,
       ringToMac_1_fifoTxData_block0_status_EN;

  // register ringToMac_1_fifoTxData_block1
  reg [211 : 0] ringToMac_1_fifoTxData_block1;
  wire [211 : 0] ringToMac_1_fifoTxData_block1_D_IN;
  wire ringToMac_1_fifoTxData_block1_EN;

  // register ringToMac_1_fifoTxData_block1_status
  reg ringToMac_1_fifoTxData_block1_status;
  wire ringToMac_1_fifoTxData_block1_status_D_IN,
       ringToMac_1_fifoTxData_block1_status_EN;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_elem0_status_0
  reg ringToMac_1_fifoTxData_elem0_status_0;
  wire ringToMac_1_fifoTxData_elem0_status_0_D_IN,
       ringToMac_1_fifoTxData_elem0_status_0_EN;

  // register ringToMac_1_fifoTxData_elem0_status_1
  reg ringToMac_1_fifoTxData_elem0_status_1;
  wire ringToMac_1_fifoTxData_elem0_status_1_D_IN,
       ringToMac_1_fifoTxData_elem0_status_1_EN;

  // register ringToMac_1_fifoTxData_elem1_status_0
  reg ringToMac_1_fifoTxData_elem1_status_0;
  wire ringToMac_1_fifoTxData_elem1_status_0_D_IN,
       ringToMac_1_fifoTxData_elem1_status_0_EN;

  // register ringToMac_1_fifoTxData_elem1_status_1
  reg ringToMac_1_fifoTxData_elem1_status_1;
  wire ringToMac_1_fifoTxData_elem1_status_1_D_IN,
       ringToMac_1_fifoTxData_elem1_status_1_EN;

  // register ringToMac_1_fifoTxData_read_block
  reg ringToMac_1_fifoTxData_read_block;
  wire ringToMac_1_fifoTxData_read_block_D_IN,
       ringToMac_1_fifoTxData_read_block_EN;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_write_block
  reg ringToMac_1_fifoTxData_write_block;
  wire ringToMac_1_fifoTxData_write_block_D_IN,
       ringToMac_1_fifoTxData_write_block_EN;

  // register ringToMac_1_goodputCount
  reg [63 : 0] ringToMac_1_goodputCount;
  wire [63 : 0] ringToMac_1_goodputCount_D_IN;
  wire ringToMac_1_goodputCount_EN;

  // register ringToMac_1_idleCount
  reg [63 : 0] ringToMac_1_idleCount;
  wire [63 : 0] ringToMac_1_idleCount_D_IN;
  wire ringToMac_1_idleCount_EN;

  // register ringToMac_1_idle_cycles
  reg [63 : 0] ringToMac_1_idle_cycles;
  wire [63 : 0] ringToMac_1_idle_cycles_D_IN;
  wire ringToMac_1_idle_cycles_EN;

  // register ringToMac_1_last_endofpacket
  reg [63 : 0] ringToMac_1_last_endofpacket;
  wire [63 : 0] ringToMac_1_last_endofpacket_D_IN;
  wire ringToMac_1_last_endofpacket_EN;

  // register ringToMac_1_last_startofpacket
  reg [63 : 0] ringToMac_1_last_startofpacket;
  wire [63 : 0] ringToMac_1_last_startofpacket_D_IN;
  wire ringToMac_1_last_startofpacket_EN;

  // register ringToMac_1_sopCount
  reg [63 : 0] ringToMac_1_sopCount;
  wire [63 : 0] ringToMac_1_sopCount_D_IN;
  wire ringToMac_1_sopCount_EN;

  // register ringToMac_1_total_cycles
  reg [63 : 0] ringToMac_1_total_cycles;
  wire [63 : 0] ringToMac_1_total_cycles_D_IN;
  wire ringToMac_1_total_cycles_EN;

  // register ringToMac_2_cycle_cnt
  reg [63 : 0] ringToMac_2_cycle_cnt;
  wire [63 : 0] ringToMac_2_cycle_cnt_D_IN;
  wire ringToMac_2_cycle_cnt_EN;

  // register ringToMac_2_data_bytes
  reg [63 : 0] ringToMac_2_data_bytes;
  wire [63 : 0] ringToMac_2_data_bytes_D_IN;
  wire ringToMac_2_data_bytes_EN;

  // register ringToMac_2_eopCount
  reg [63 : 0] ringToMac_2_eopCount;
  wire [63 : 0] ringToMac_2_eopCount_D_IN;
  wire ringToMac_2_eopCount_EN;

  // register ringToMac_2_fifoTxData_block0
  reg [211 : 0] ringToMac_2_fifoTxData_block0;
  wire [211 : 0] ringToMac_2_fifoTxData_block0_D_IN;
  wire ringToMac_2_fifoTxData_block0_EN;

  // register ringToMac_2_fifoTxData_block0_status
  reg ringToMac_2_fifoTxData_block0_status;
  wire ringToMac_2_fifoTxData_block0_status_D_IN,
       ringToMac_2_fifoTxData_block0_status_EN;

  // register ringToMac_2_fifoTxData_block1
  reg [211 : 0] ringToMac_2_fifoTxData_block1;
  wire [211 : 0] ringToMac_2_fifoTxData_block1_D_IN;
  wire ringToMac_2_fifoTxData_block1_EN;

  // register ringToMac_2_fifoTxData_block1_status
  reg ringToMac_2_fifoTxData_block1_status;
  wire ringToMac_2_fifoTxData_block1_status_D_IN,
       ringToMac_2_fifoTxData_block1_status_EN;

  // register ringToMac_2_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_2_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_2_fifoTxData_elem0_status_0
  reg ringToMac_2_fifoTxData_elem0_status_0;
  wire ringToMac_2_fifoTxData_elem0_status_0_D_IN,
       ringToMac_2_fifoTxData_elem0_status_0_EN;

  // register ringToMac_2_fifoTxData_elem0_status_1
  reg ringToMac_2_fifoTxData_elem0_status_1;
  wire ringToMac_2_fifoTxData_elem0_status_1_D_IN,
       ringToMac_2_fifoTxData_elem0_status_1_EN;

  // register ringToMac_2_fifoTxData_elem1_status_0
  reg ringToMac_2_fifoTxData_elem1_status_0;
  wire ringToMac_2_fifoTxData_elem1_status_0_D_IN,
       ringToMac_2_fifoTxData_elem1_status_0_EN;

  // register ringToMac_2_fifoTxData_elem1_status_1
  reg ringToMac_2_fifoTxData_elem1_status_1;
  wire ringToMac_2_fifoTxData_elem1_status_1_D_IN,
       ringToMac_2_fifoTxData_elem1_status_1_EN;

  // register ringToMac_2_fifoTxData_read_block
  reg ringToMac_2_fifoTxData_read_block;
  wire ringToMac_2_fifoTxData_read_block_D_IN,
       ringToMac_2_fifoTxData_read_block_EN;

  // register ringToMac_2_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_2_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_2_fifoTxData_write_block
  reg ringToMac_2_fifoTxData_write_block;
  wire ringToMac_2_fifoTxData_write_block_D_IN,
       ringToMac_2_fifoTxData_write_block_EN;

  // register ringToMac_2_goodputCount
  reg [63 : 0] ringToMac_2_goodputCount;
  wire [63 : 0] ringToMac_2_goodputCount_D_IN;
  wire ringToMac_2_goodputCount_EN;

  // register ringToMac_2_idleCount
  reg [63 : 0] ringToMac_2_idleCount;
  wire [63 : 0] ringToMac_2_idleCount_D_IN;
  wire ringToMac_2_idleCount_EN;

  // register ringToMac_2_idle_cycles
  reg [63 : 0] ringToMac_2_idle_cycles;
  wire [63 : 0] ringToMac_2_idle_cycles_D_IN;
  wire ringToMac_2_idle_cycles_EN;

  // register ringToMac_2_last_endofpacket
  reg [63 : 0] ringToMac_2_last_endofpacket;
  wire [63 : 0] ringToMac_2_last_endofpacket_D_IN;
  wire ringToMac_2_last_endofpacket_EN;

  // register ringToMac_2_last_startofpacket
  reg [63 : 0] ringToMac_2_last_startofpacket;
  wire [63 : 0] ringToMac_2_last_startofpacket_D_IN;
  wire ringToMac_2_last_startofpacket_EN;

  // register ringToMac_2_sopCount
  reg [63 : 0] ringToMac_2_sopCount;
  wire [63 : 0] ringToMac_2_sopCount_D_IN;
  wire ringToMac_2_sopCount_EN;

  // register ringToMac_2_total_cycles
  reg [63 : 0] ringToMac_2_total_cycles;
  wire [63 : 0] ringToMac_2_total_cycles_D_IN;
  wire ringToMac_2_total_cycles_EN;

  // register ringToMac_3_cycle_cnt
  reg [63 : 0] ringToMac_3_cycle_cnt;
  wire [63 : 0] ringToMac_3_cycle_cnt_D_IN;
  wire ringToMac_3_cycle_cnt_EN;

  // register ringToMac_3_data_bytes
  reg [63 : 0] ringToMac_3_data_bytes;
  wire [63 : 0] ringToMac_3_data_bytes_D_IN;
  wire ringToMac_3_data_bytes_EN;

  // register ringToMac_3_eopCount
  reg [63 : 0] ringToMac_3_eopCount;
  wire [63 : 0] ringToMac_3_eopCount_D_IN;
  wire ringToMac_3_eopCount_EN;

  // register ringToMac_3_fifoTxData_block0
  reg [211 : 0] ringToMac_3_fifoTxData_block0;
  wire [211 : 0] ringToMac_3_fifoTxData_block0_D_IN;
  wire ringToMac_3_fifoTxData_block0_EN;

  // register ringToMac_3_fifoTxData_block0_status
  reg ringToMac_3_fifoTxData_block0_status;
  wire ringToMac_3_fifoTxData_block0_status_D_IN,
       ringToMac_3_fifoTxData_block0_status_EN;

  // register ringToMac_3_fifoTxData_block1
  reg [211 : 0] ringToMac_3_fifoTxData_block1;
  wire [211 : 0] ringToMac_3_fifoTxData_block1_D_IN;
  wire ringToMac_3_fifoTxData_block1_EN;

  // register ringToMac_3_fifoTxData_block1_status
  reg ringToMac_3_fifoTxData_block1_status;
  wire ringToMac_3_fifoTxData_block1_status_D_IN,
       ringToMac_3_fifoTxData_block1_status_EN;

  // register ringToMac_3_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_3_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_3_fifoTxData_elem0_status_0
  reg ringToMac_3_fifoTxData_elem0_status_0;
  wire ringToMac_3_fifoTxData_elem0_status_0_D_IN,
       ringToMac_3_fifoTxData_elem0_status_0_EN;

  // register ringToMac_3_fifoTxData_elem0_status_1
  reg ringToMac_3_fifoTxData_elem0_status_1;
  wire ringToMac_3_fifoTxData_elem0_status_1_D_IN,
       ringToMac_3_fifoTxData_elem0_status_1_EN;

  // register ringToMac_3_fifoTxData_elem1_status_0
  reg ringToMac_3_fifoTxData_elem1_status_0;
  wire ringToMac_3_fifoTxData_elem1_status_0_D_IN,
       ringToMac_3_fifoTxData_elem1_status_0_EN;

  // register ringToMac_3_fifoTxData_elem1_status_1
  reg ringToMac_3_fifoTxData_elem1_status_1;
  wire ringToMac_3_fifoTxData_elem1_status_1_D_IN,
       ringToMac_3_fifoTxData_elem1_status_1_EN;

  // register ringToMac_3_fifoTxData_read_block
  reg ringToMac_3_fifoTxData_read_block;
  wire ringToMac_3_fifoTxData_read_block_D_IN,
       ringToMac_3_fifoTxData_read_block_EN;

  // register ringToMac_3_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_3_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_3_fifoTxData_write_block
  reg ringToMac_3_fifoTxData_write_block;
  wire ringToMac_3_fifoTxData_write_block_D_IN,
       ringToMac_3_fifoTxData_write_block_EN;

  // register ringToMac_3_goodputCount
  reg [63 : 0] ringToMac_3_goodputCount;
  wire [63 : 0] ringToMac_3_goodputCount_D_IN;
  wire ringToMac_3_goodputCount_EN;

  // register ringToMac_3_idleCount
  reg [63 : 0] ringToMac_3_idleCount;
  wire [63 : 0] ringToMac_3_idleCount_D_IN;
  wire ringToMac_3_idleCount_EN;

  // register ringToMac_3_idle_cycles
  reg [63 : 0] ringToMac_3_idle_cycles;
  wire [63 : 0] ringToMac_3_idle_cycles_D_IN;
  wire ringToMac_3_idle_cycles_EN;

  // register ringToMac_3_last_endofpacket
  reg [63 : 0] ringToMac_3_last_endofpacket;
  wire [63 : 0] ringToMac_3_last_endofpacket_D_IN;
  wire ringToMac_3_last_endofpacket_EN;

  // register ringToMac_3_last_startofpacket
  reg [63 : 0] ringToMac_3_last_startofpacket;
  wire [63 : 0] ringToMac_3_last_startofpacket_D_IN;
  wire ringToMac_3_last_startofpacket_EN;

  // register ringToMac_3_sopCount
  reg [63 : 0] ringToMac_3_sopCount;
  wire [63 : 0] ringToMac_3_sopCount_D_IN;
  wire ringToMac_3_sopCount_EN;

  // register ringToMac_3_total_cycles
  reg [63 : 0] ringToMac_3_total_cycles;
  wire [63 : 0] ringToMac_3_total_cycles_D_IN;
  wire ringToMac_3_total_cycles_EN;

  // register xbar_lower_lower_merges_1_fi0HasPrio
  reg xbar_lower_lower_merges_1_fi0HasPrio;
  reg xbar_lower_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_lower_merges_1_fi0HasPrio_EN;

  // register xbar_lower_lower_merges_1_routeFrom
  reg [1 : 0] xbar_lower_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_lower_merges_1_routeFrom_D_IN;
  wire xbar_lower_lower_merges_1_routeFrom_EN;

  // register xbar_lower_lower_merges_fi0HasPrio
  reg xbar_lower_lower_merges_fi0HasPrio;
  reg xbar_lower_lower_merges_fi0HasPrio_D_IN;
  wire xbar_lower_lower_merges_fi0HasPrio_EN;

  // register xbar_lower_lower_merges_routeFrom
  reg [1 : 0] xbar_lower_lower_merges_routeFrom;
  wire [1 : 0] xbar_lower_lower_merges_routeFrom_D_IN;
  wire xbar_lower_lower_merges_routeFrom_EN;

  // register xbar_lower_merges_1_fi0HasPrio
  reg xbar_lower_merges_1_fi0HasPrio;
  reg xbar_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_merges_1_fi0HasPrio_EN;

  // register xbar_lower_merges_1_routeFrom
  reg [1 : 0] xbar_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_merges_1_routeFrom_D_IN;
  wire xbar_lower_merges_1_routeFrom_EN;

  // register xbar_lower_merges_2_fi0HasPrio
  reg xbar_lower_merges_2_fi0HasPrio;
  reg xbar_lower_merges_2_fi0HasPrio_D_IN;
  wire xbar_lower_merges_2_fi0HasPrio_EN;

  // register xbar_lower_merges_2_routeFrom
  reg [1 : 0] xbar_lower_merges_2_routeFrom;
  wire [1 : 0] xbar_lower_merges_2_routeFrom_D_IN;
  wire xbar_lower_merges_2_routeFrom_EN;

  // register xbar_lower_merges_3_fi0HasPrio
  reg xbar_lower_merges_3_fi0HasPrio;
  reg xbar_lower_merges_3_fi0HasPrio_D_IN;
  wire xbar_lower_merges_3_fi0HasPrio_EN;

  // register xbar_lower_merges_3_routeFrom
  reg [1 : 0] xbar_lower_merges_3_routeFrom;
  wire [1 : 0] xbar_lower_merges_3_routeFrom_D_IN;
  wire xbar_lower_merges_3_routeFrom_EN;

  // register xbar_lower_merges_fi0HasPrio
  reg xbar_lower_merges_fi0HasPrio;
  reg xbar_lower_merges_fi0HasPrio_D_IN;
  wire xbar_lower_merges_fi0HasPrio_EN;

  // register xbar_lower_merges_routeFrom
  reg [1 : 0] xbar_lower_merges_routeFrom;
  wire [1 : 0] xbar_lower_merges_routeFrom_D_IN;
  wire xbar_lower_merges_routeFrom_EN;

  // register xbar_lower_upper_merges_1_fi0HasPrio
  reg xbar_lower_upper_merges_1_fi0HasPrio;
  reg xbar_lower_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_upper_merges_1_fi0HasPrio_EN;

  // register xbar_lower_upper_merges_1_routeFrom
  reg [1 : 0] xbar_lower_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_upper_merges_1_routeFrom_D_IN;
  wire xbar_lower_upper_merges_1_routeFrom_EN;

  // register xbar_lower_upper_merges_fi0HasPrio
  reg xbar_lower_upper_merges_fi0HasPrio;
  reg xbar_lower_upper_merges_fi0HasPrio_D_IN;
  wire xbar_lower_upper_merges_fi0HasPrio_EN;

  // register xbar_lower_upper_merges_routeFrom
  reg [1 : 0] xbar_lower_upper_merges_routeFrom;
  wire [1 : 0] xbar_lower_upper_merges_routeFrom_D_IN;
  wire xbar_lower_upper_merges_routeFrom_EN;

  // register xbar_merges_1_fi0HasPrio
  reg xbar_merges_1_fi0HasPrio;
  reg xbar_merges_1_fi0HasPrio_D_IN;
  wire xbar_merges_1_fi0HasPrio_EN;

  // register xbar_merges_1_routeFrom
  reg [1 : 0] xbar_merges_1_routeFrom;
  wire [1 : 0] xbar_merges_1_routeFrom_D_IN;
  wire xbar_merges_1_routeFrom_EN;

  // register xbar_merges_2_fi0HasPrio
  reg xbar_merges_2_fi0HasPrio;
  reg xbar_merges_2_fi0HasPrio_D_IN;
  wire xbar_merges_2_fi0HasPrio_EN;

  // register xbar_merges_2_routeFrom
  reg [1 : 0] xbar_merges_2_routeFrom;
  wire [1 : 0] xbar_merges_2_routeFrom_D_IN;
  wire xbar_merges_2_routeFrom_EN;

  // register xbar_merges_3_fi0HasPrio
  reg xbar_merges_3_fi0HasPrio;
  reg xbar_merges_3_fi0HasPrio_D_IN;
  wire xbar_merges_3_fi0HasPrio_EN;

  // register xbar_merges_3_routeFrom
  reg [1 : 0] xbar_merges_3_routeFrom;
  wire [1 : 0] xbar_merges_3_routeFrom_D_IN;
  wire xbar_merges_3_routeFrom_EN;

  // register xbar_merges_4_fi0HasPrio
  reg xbar_merges_4_fi0HasPrio;
  reg xbar_merges_4_fi0HasPrio_D_IN;
  wire xbar_merges_4_fi0HasPrio_EN;

  // register xbar_merges_4_routeFrom
  reg [1 : 0] xbar_merges_4_routeFrom;
  wire [1 : 0] xbar_merges_4_routeFrom_D_IN;
  wire xbar_merges_4_routeFrom_EN;

  // register xbar_merges_5_fi0HasPrio
  reg xbar_merges_5_fi0HasPrio;
  reg xbar_merges_5_fi0HasPrio_D_IN;
  wire xbar_merges_5_fi0HasPrio_EN;

  // register xbar_merges_5_routeFrom
  reg [1 : 0] xbar_merges_5_routeFrom;
  wire [1 : 0] xbar_merges_5_routeFrom_D_IN;
  wire xbar_merges_5_routeFrom_EN;

  // register xbar_merges_6_fi0HasPrio
  reg xbar_merges_6_fi0HasPrio;
  reg xbar_merges_6_fi0HasPrio_D_IN;
  wire xbar_merges_6_fi0HasPrio_EN;

  // register xbar_merges_6_routeFrom
  reg [1 : 0] xbar_merges_6_routeFrom;
  wire [1 : 0] xbar_merges_6_routeFrom_D_IN;
  wire xbar_merges_6_routeFrom_EN;

  // register xbar_merges_7_fi0HasPrio
  reg xbar_merges_7_fi0HasPrio;
  reg xbar_merges_7_fi0HasPrio_D_IN;
  wire xbar_merges_7_fi0HasPrio_EN;

  // register xbar_merges_7_routeFrom
  reg [1 : 0] xbar_merges_7_routeFrom;
  wire [1 : 0] xbar_merges_7_routeFrom_D_IN;
  wire xbar_merges_7_routeFrom_EN;

  // register xbar_merges_fi0HasPrio
  reg xbar_merges_fi0HasPrio;
  reg xbar_merges_fi0HasPrio_D_IN;
  wire xbar_merges_fi0HasPrio_EN;

  // register xbar_merges_routeFrom
  reg [1 : 0] xbar_merges_routeFrom;
  wire [1 : 0] xbar_merges_routeFrom_D_IN;
  wire xbar_merges_routeFrom_EN;

  // register xbar_upper_lower_merges_1_fi0HasPrio
  reg xbar_upper_lower_merges_1_fi0HasPrio;
  reg xbar_upper_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_lower_merges_1_fi0HasPrio_EN;

  // register xbar_upper_lower_merges_1_routeFrom
  reg [1 : 0] xbar_upper_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_lower_merges_1_routeFrom_D_IN;
  wire xbar_upper_lower_merges_1_routeFrom_EN;

  // register xbar_upper_lower_merges_fi0HasPrio
  reg xbar_upper_lower_merges_fi0HasPrio;
  reg xbar_upper_lower_merges_fi0HasPrio_D_IN;
  wire xbar_upper_lower_merges_fi0HasPrio_EN;

  // register xbar_upper_lower_merges_routeFrom
  reg [1 : 0] xbar_upper_lower_merges_routeFrom;
  wire [1 : 0] xbar_upper_lower_merges_routeFrom_D_IN;
  wire xbar_upper_lower_merges_routeFrom_EN;

  // register xbar_upper_merges_1_fi0HasPrio
  reg xbar_upper_merges_1_fi0HasPrio;
  reg xbar_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_merges_1_fi0HasPrio_EN;

  // register xbar_upper_merges_1_routeFrom
  reg [1 : 0] xbar_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_merges_1_routeFrom_D_IN;
  wire xbar_upper_merges_1_routeFrom_EN;

  // register xbar_upper_merges_2_fi0HasPrio
  reg xbar_upper_merges_2_fi0HasPrio;
  reg xbar_upper_merges_2_fi0HasPrio_D_IN;
  wire xbar_upper_merges_2_fi0HasPrio_EN;

  // register xbar_upper_merges_2_routeFrom
  reg [1 : 0] xbar_upper_merges_2_routeFrom;
  wire [1 : 0] xbar_upper_merges_2_routeFrom_D_IN;
  wire xbar_upper_merges_2_routeFrom_EN;

  // register xbar_upper_merges_3_fi0HasPrio
  reg xbar_upper_merges_3_fi0HasPrio;
  reg xbar_upper_merges_3_fi0HasPrio_D_IN;
  wire xbar_upper_merges_3_fi0HasPrio_EN;

  // register xbar_upper_merges_3_routeFrom
  reg [1 : 0] xbar_upper_merges_3_routeFrom;
  wire [1 : 0] xbar_upper_merges_3_routeFrom_D_IN;
  wire xbar_upper_merges_3_routeFrom_EN;

  // register xbar_upper_merges_fi0HasPrio
  reg xbar_upper_merges_fi0HasPrio;
  reg xbar_upper_merges_fi0HasPrio_D_IN;
  wire xbar_upper_merges_fi0HasPrio_EN;

  // register xbar_upper_merges_routeFrom
  reg [1 : 0] xbar_upper_merges_routeFrom;
  wire [1 : 0] xbar_upper_merges_routeFrom_D_IN;
  wire xbar_upper_merges_routeFrom_EN;

  // register xbar_upper_upper_merges_1_fi0HasPrio
  reg xbar_upper_upper_merges_1_fi0HasPrio;
  reg xbar_upper_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_upper_merges_1_fi0HasPrio_EN;

  // register xbar_upper_upper_merges_1_routeFrom
  reg [1 : 0] xbar_upper_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_upper_merges_1_routeFrom_D_IN;
  wire xbar_upper_upper_merges_1_routeFrom_EN;

  // register xbar_upper_upper_merges_fi0HasPrio
  reg xbar_upper_upper_merges_fi0HasPrio;
  reg xbar_upper_upper_merges_fi0HasPrio_D_IN;
  wire xbar_upper_upper_merges_fi0HasPrio_EN;

  // register xbar_upper_upper_merges_routeFrom
  reg [1 : 0] xbar_upper_upper_merges_routeFrom;
  wire [1 : 0] xbar_upper_upper_merges_routeFrom_D_IN;
  wire xbar_upper_upper_merges_routeFrom_EN;

  // ports of submodule gearbox_dn_16_0
  wire [321 : 0] gearbox_dn_16_0_datain_put;
  wire [177 : 0] gearbox_dn_16_0_dataout_get;
  wire gearbox_dn_16_0_EN_datain_put,
       gearbox_dn_16_0_EN_dataout_get,
       gearbox_dn_16_0_RDY_datain_put,
       gearbox_dn_16_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_1
  wire [321 : 0] gearbox_dn_16_1_datain_put;
  wire [177 : 0] gearbox_dn_16_1_dataout_get;
  wire gearbox_dn_16_1_EN_datain_put,
       gearbox_dn_16_1_EN_dataout_get,
       gearbox_dn_16_1_RDY_datain_put,
       gearbox_dn_16_1_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_2
  wire [321 : 0] gearbox_dn_16_2_datain_put;
  wire [177 : 0] gearbox_dn_16_2_dataout_get;
  wire gearbox_dn_16_2_EN_datain_put,
       gearbox_dn_16_2_EN_dataout_get,
       gearbox_dn_16_2_RDY_datain_put,
       gearbox_dn_16_2_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_3
  wire [321 : 0] gearbox_dn_16_3_datain_put;
  wire [177 : 0] gearbox_dn_16_3_dataout_get;
  wire gearbox_dn_16_3_EN_datain_put,
       gearbox_dn_16_3_EN_dataout_get,
       gearbox_dn_16_3_RDY_datain_put,
       gearbox_dn_16_3_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_0
  wire [609 : 0] gearbox_dn_32_0_datain_put;
  wire [321 : 0] gearbox_dn_32_0_dataout_get;
  wire gearbox_dn_32_0_EN_datain_put,
       gearbox_dn_32_0_EN_dataout_get,
       gearbox_dn_32_0_RDY_datain_put,
       gearbox_dn_32_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_1
  wire [609 : 0] gearbox_dn_32_1_datain_put;
  wire [321 : 0] gearbox_dn_32_1_dataout_get;
  wire gearbox_dn_32_1_EN_datain_put,
       gearbox_dn_32_1_EN_dataout_get,
       gearbox_dn_32_1_RDY_datain_put,
       gearbox_dn_32_1_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_2
  wire [609 : 0] gearbox_dn_32_2_datain_put;
  wire [321 : 0] gearbox_dn_32_2_dataout_get;
  wire gearbox_dn_32_2_EN_datain_put,
       gearbox_dn_32_2_EN_dataout_get,
       gearbox_dn_32_2_RDY_datain_put,
       gearbox_dn_32_2_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_3
  wire [609 : 0] gearbox_dn_32_3_datain_put;
  wire [321 : 0] gearbox_dn_32_3_dataout_get;
  wire gearbox_dn_32_3_EN_datain_put,
       gearbox_dn_32_3_EN_dataout_get,
       gearbox_dn_32_3_RDY_datain_put,
       gearbox_dn_32_3_RDY_dataout_get;

  // ports of submodule gearbox_up_16_0
  wire [321 : 0] gearbox_up_16_0_dataout_get;
  wire [177 : 0] gearbox_up_16_0_datain_put;
  wire gearbox_up_16_0_EN_datain_put,
       gearbox_up_16_0_EN_dataout_get,
       gearbox_up_16_0_RDY_datain_put,
       gearbox_up_16_0_RDY_dataout_get;

  // ports of submodule gearbox_up_16_1
  wire [321 : 0] gearbox_up_16_1_dataout_get;
  wire [177 : 0] gearbox_up_16_1_datain_put;
  wire gearbox_up_16_1_EN_datain_put,
       gearbox_up_16_1_EN_dataout_get,
       gearbox_up_16_1_RDY_datain_put,
       gearbox_up_16_1_RDY_dataout_get;

  // ports of submodule gearbox_up_16_2
  wire [321 : 0] gearbox_up_16_2_dataout_get;
  wire [177 : 0] gearbox_up_16_2_datain_put;
  wire gearbox_up_16_2_EN_datain_put,
       gearbox_up_16_2_EN_dataout_get,
       gearbox_up_16_2_RDY_datain_put,
       gearbox_up_16_2_RDY_dataout_get;

  // ports of submodule gearbox_up_16_3
  wire [321 : 0] gearbox_up_16_3_dataout_get;
  wire [177 : 0] gearbox_up_16_3_datain_put;
  wire gearbox_up_16_3_EN_datain_put,
       gearbox_up_16_3_EN_dataout_get,
       gearbox_up_16_3_RDY_datain_put,
       gearbox_up_16_3_RDY_dataout_get;

  // ports of submodule gearbox_up_16_4
  wire [321 : 0] gearbox_up_16_4_dataout_get;
  wire [177 : 0] gearbox_up_16_4_datain_put;
  wire gearbox_up_16_4_EN_datain_put,
       gearbox_up_16_4_EN_dataout_get,
       gearbox_up_16_4_RDY_datain_put,
       gearbox_up_16_4_RDY_dataout_get;

  // ports of submodule gearbox_up_32_0
  wire [609 : 0] gearbox_up_32_0_dataout_get;
  wire [321 : 0] gearbox_up_32_0_datain_put;
  wire gearbox_up_32_0_EN_datain_put,
       gearbox_up_32_0_EN_dataout_get,
       gearbox_up_32_0_RDY_datain_put,
       gearbox_up_32_0_RDY_dataout_get;

  // ports of submodule gearbox_up_32_1
  wire [609 : 0] gearbox_up_32_1_dataout_get;
  wire [321 : 0] gearbox_up_32_1_datain_put;
  wire gearbox_up_32_1_EN_datain_put,
       gearbox_up_32_1_EN_dataout_get,
       gearbox_up_32_1_RDY_datain_put,
       gearbox_up_32_1_RDY_dataout_get;

  // ports of submodule gearbox_up_32_2
  wire [609 : 0] gearbox_up_32_2_dataout_get;
  wire [321 : 0] gearbox_up_32_2_datain_put;
  wire gearbox_up_32_2_EN_datain_put,
       gearbox_up_32_2_EN_dataout_get,
       gearbox_up_32_2_RDY_datain_put,
       gearbox_up_32_2_RDY_dataout_get;

  // ports of submodule gearbox_up_32_3
  wire [609 : 0] gearbox_up_32_3_dataout_get;
  wire [321 : 0] gearbox_up_32_3_datain_put;
  wire gearbox_up_32_3_EN_datain_put,
       gearbox_up_32_3_EN_dataout_get,
       gearbox_up_32_3_RDY_datain_put,
       gearbox_up_32_3_RDY_dataout_get;

  // ports of submodule gearbox_up_32_4
  wire [609 : 0] gearbox_up_32_4_dataout_get;
  wire [321 : 0] gearbox_up_32_4_datain_put;
  wire gearbox_up_32_4_EN_datain_put,
       gearbox_up_32_4_EN_dataout_get,
       gearbox_up_32_4_RDY_datain_put,
       gearbox_up_32_4_RDY_dataout_get;

  // ports of submodule hostchan_0_outReqFifo
  wire [1498 : 0] hostchan_0_outReqFifo_D_IN, hostchan_0_outReqFifo_D_OUT;
  wire hostchan_0_outReqFifo_CLR,
       hostchan_0_outReqFifo_DEQ,
       hostchan_0_outReqFifo_EMPTY_N,
       hostchan_0_outReqFifo_ENQ,
       hostchan_0_outReqFifo_FULL_N;

  // ports of submodule hostchan_0_parser
  wire [1477 : 0] hostchan_0_parser_meta_get;
  wire [177 : 0] hostchan_0_parser_frameIn_put;
  wire [31 : 0] hostchan_0_parser_set_verbosity_verbosity;
  wire hostchan_0_parser_EN_frameIn_put,
       hostchan_0_parser_EN_meta_get,
       hostchan_0_parser_EN_set_verbosity,
       hostchan_0_parser_RDY_frameIn_put,
       hostchan_0_parser_RDY_meta_get;

  // ports of submodule hostchan_0_pktBuff
  wire [177 : 0] hostchan_0_pktBuff_readServer_readData_get,
		 hostchan_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_0_pktBuff_readServer_readLen_get,
		hostchan_0_pktBuff_readServer_readReq_put;
  wire hostchan_0_pktBuff_EN_readServer_readData_get,
       hostchan_0_pktBuff_EN_readServer_readLen_get,
       hostchan_0_pktBuff_EN_readServer_readReq_put,
       hostchan_0_pktBuff_EN_set_verbosity,
       hostchan_0_pktBuff_EN_writeServer_enq,
       hostchan_0_pktBuff_RDY_readServer_readData_get,
       hostchan_0_pktBuff_RDY_readServer_readLen_get,
       hostchan_0_pktBuff_RDY_readServer_readReq_put,
       hostchan_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_0_pktLenFifo
  wire [15 : 0] hostchan_0_pktLenFifo_D_IN, hostchan_0_pktLenFifo_D_OUT;
  wire hostchan_0_pktLenFifo_CLR,
       hostchan_0_pktLenFifo_DEQ,
       hostchan_0_pktLenFifo_EMPTY_N,
       hostchan_0_pktLenFifo_ENQ,
       hostchan_0_pktLenFifo_FULL_N;

  // ports of submodule hostchan_0_readDataFifo
  wire [177 : 0] hostchan_0_readDataFifo_D_IN, hostchan_0_readDataFifo_D_OUT;
  wire hostchan_0_readDataFifo_CLR,
       hostchan_0_readDataFifo_DEQ,
       hostchan_0_readDataFifo_EMPTY_N,
       hostchan_0_readDataFifo_ENQ,
       hostchan_0_readDataFifo_FULL_N;

  // ports of submodule hostchan_0_readLenFifo
  wire [15 : 0] hostchan_0_readLenFifo_D_IN, hostchan_0_readLenFifo_D_OUT;
  wire hostchan_0_readLenFifo_CLR,
       hostchan_0_readLenFifo_DEQ,
       hostchan_0_readLenFifo_EMPTY_N,
       hostchan_0_readLenFifo_ENQ,
       hostchan_0_readLenFifo_FULL_N;

  // ports of submodule hostchan_0_readReqFifo
  wire [15 : 0] hostchan_0_readReqFifo_D_IN, hostchan_0_readReqFifo_D_OUT;
  wire hostchan_0_readReqFifo_CLR,
       hostchan_0_readReqFifo_DEQ,
       hostchan_0_readReqFifo_EMPTY_N,
       hostchan_0_readReqFifo_ENQ,
       hostchan_0_readReqFifo_FULL_N;

  // ports of submodule hostchan_0_verbose_ff
  wire [31 : 0] hostchan_0_verbose_ff_D_IN, hostchan_0_verbose_ff_D_OUT;
  wire hostchan_0_verbose_ff_CLR,
       hostchan_0_verbose_ff_DEQ,
       hostchan_0_verbose_ff_EMPTY_N,
       hostchan_0_verbose_ff_ENQ;

  // ports of submodule hostchan_0_writeDataFifo
  wire [177 : 0] hostchan_0_writeDataFifo_D_IN,
		 hostchan_0_writeDataFifo_D_OUT;
  wire hostchan_0_writeDataFifo_CLR,
       hostchan_0_writeDataFifo_DEQ,
       hostchan_0_writeDataFifo_EMPTY_N,
       hostchan_0_writeDataFifo_ENQ,
       hostchan_0_writeDataFifo_FULL_N;

  // ports of submodule hostchan_1_outReqFifo
  wire [1498 : 0] hostchan_1_outReqFifo_D_IN, hostchan_1_outReqFifo_D_OUT;
  wire hostchan_1_outReqFifo_CLR,
       hostchan_1_outReqFifo_DEQ,
       hostchan_1_outReqFifo_EMPTY_N,
       hostchan_1_outReqFifo_ENQ,
       hostchan_1_outReqFifo_FULL_N;

  // ports of submodule hostchan_1_parser
  wire [1477 : 0] hostchan_1_parser_meta_get;
  wire [177 : 0] hostchan_1_parser_frameIn_put;
  wire [31 : 0] hostchan_1_parser_set_verbosity_verbosity;
  wire hostchan_1_parser_EN_frameIn_put,
       hostchan_1_parser_EN_meta_get,
       hostchan_1_parser_EN_set_verbosity,
       hostchan_1_parser_RDY_frameIn_put,
       hostchan_1_parser_RDY_meta_get;

  // ports of submodule hostchan_1_pktBuff
  wire [177 : 0] hostchan_1_pktBuff_readServer_readData_get,
		 hostchan_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_1_pktBuff_readServer_readLen_get,
		hostchan_1_pktBuff_readServer_readReq_put;
  wire hostchan_1_pktBuff_EN_readServer_readData_get,
       hostchan_1_pktBuff_EN_readServer_readLen_get,
       hostchan_1_pktBuff_EN_readServer_readReq_put,
       hostchan_1_pktBuff_EN_set_verbosity,
       hostchan_1_pktBuff_EN_writeServer_enq,
       hostchan_1_pktBuff_RDY_readServer_readData_get,
       hostchan_1_pktBuff_RDY_readServer_readLen_get,
       hostchan_1_pktBuff_RDY_readServer_readReq_put,
       hostchan_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_1_pktLenFifo
  wire [15 : 0] hostchan_1_pktLenFifo_D_IN, hostchan_1_pktLenFifo_D_OUT;
  wire hostchan_1_pktLenFifo_CLR,
       hostchan_1_pktLenFifo_DEQ,
       hostchan_1_pktLenFifo_EMPTY_N,
       hostchan_1_pktLenFifo_ENQ,
       hostchan_1_pktLenFifo_FULL_N;

  // ports of submodule hostchan_1_readDataFifo
  wire [177 : 0] hostchan_1_readDataFifo_D_IN, hostchan_1_readDataFifo_D_OUT;
  wire hostchan_1_readDataFifo_CLR,
       hostchan_1_readDataFifo_DEQ,
       hostchan_1_readDataFifo_EMPTY_N,
       hostchan_1_readDataFifo_ENQ,
       hostchan_1_readDataFifo_FULL_N;

  // ports of submodule hostchan_1_readLenFifo
  wire [15 : 0] hostchan_1_readLenFifo_D_IN, hostchan_1_readLenFifo_D_OUT;
  wire hostchan_1_readLenFifo_CLR,
       hostchan_1_readLenFifo_DEQ,
       hostchan_1_readLenFifo_EMPTY_N,
       hostchan_1_readLenFifo_ENQ,
       hostchan_1_readLenFifo_FULL_N;

  // ports of submodule hostchan_1_readReqFifo
  wire [15 : 0] hostchan_1_readReqFifo_D_IN, hostchan_1_readReqFifo_D_OUT;
  wire hostchan_1_readReqFifo_CLR,
       hostchan_1_readReqFifo_DEQ,
       hostchan_1_readReqFifo_EMPTY_N,
       hostchan_1_readReqFifo_ENQ,
       hostchan_1_readReqFifo_FULL_N;

  // ports of submodule hostchan_1_verbose_ff
  wire [31 : 0] hostchan_1_verbose_ff_D_IN, hostchan_1_verbose_ff_D_OUT;
  wire hostchan_1_verbose_ff_CLR,
       hostchan_1_verbose_ff_DEQ,
       hostchan_1_verbose_ff_EMPTY_N,
       hostchan_1_verbose_ff_ENQ;

  // ports of submodule hostchan_1_writeDataFifo
  wire [177 : 0] hostchan_1_writeDataFifo_D_IN,
		 hostchan_1_writeDataFifo_D_OUT;
  wire hostchan_1_writeDataFifo_CLR,
       hostchan_1_writeDataFifo_DEQ,
       hostchan_1_writeDataFifo_EMPTY_N,
       hostchan_1_writeDataFifo_ENQ,
       hostchan_1_writeDataFifo_FULL_N;

  // ports of submodule hostchan_2_outReqFifo
  wire [1498 : 0] hostchan_2_outReqFifo_D_IN, hostchan_2_outReqFifo_D_OUT;
  wire hostchan_2_outReqFifo_CLR,
       hostchan_2_outReqFifo_DEQ,
       hostchan_2_outReqFifo_EMPTY_N,
       hostchan_2_outReqFifo_ENQ,
       hostchan_2_outReqFifo_FULL_N;

  // ports of submodule hostchan_2_parser
  wire [1477 : 0] hostchan_2_parser_meta_get;
  wire [177 : 0] hostchan_2_parser_frameIn_put;
  wire [31 : 0] hostchan_2_parser_set_verbosity_verbosity;
  wire hostchan_2_parser_EN_frameIn_put,
       hostchan_2_parser_EN_meta_get,
       hostchan_2_parser_EN_set_verbosity,
       hostchan_2_parser_RDY_frameIn_put,
       hostchan_2_parser_RDY_meta_get;

  // ports of submodule hostchan_2_pktBuff
  wire [177 : 0] hostchan_2_pktBuff_readServer_readData_get,
		 hostchan_2_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_2_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_2_pktBuff_readServer_readLen_get,
		hostchan_2_pktBuff_readServer_readReq_put;
  wire hostchan_2_pktBuff_EN_readServer_readData_get,
       hostchan_2_pktBuff_EN_readServer_readLen_get,
       hostchan_2_pktBuff_EN_readServer_readReq_put,
       hostchan_2_pktBuff_EN_set_verbosity,
       hostchan_2_pktBuff_EN_writeServer_enq,
       hostchan_2_pktBuff_RDY_readServer_readData_get,
       hostchan_2_pktBuff_RDY_readServer_readLen_get,
       hostchan_2_pktBuff_RDY_readServer_readReq_put,
       hostchan_2_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_2_pktLenFifo
  wire [15 : 0] hostchan_2_pktLenFifo_D_IN, hostchan_2_pktLenFifo_D_OUT;
  wire hostchan_2_pktLenFifo_CLR,
       hostchan_2_pktLenFifo_DEQ,
       hostchan_2_pktLenFifo_EMPTY_N,
       hostchan_2_pktLenFifo_ENQ,
       hostchan_2_pktLenFifo_FULL_N;

  // ports of submodule hostchan_2_readDataFifo
  wire [177 : 0] hostchan_2_readDataFifo_D_IN, hostchan_2_readDataFifo_D_OUT;
  wire hostchan_2_readDataFifo_CLR,
       hostchan_2_readDataFifo_DEQ,
       hostchan_2_readDataFifo_EMPTY_N,
       hostchan_2_readDataFifo_ENQ,
       hostchan_2_readDataFifo_FULL_N;

  // ports of submodule hostchan_2_readLenFifo
  wire [15 : 0] hostchan_2_readLenFifo_D_IN, hostchan_2_readLenFifo_D_OUT;
  wire hostchan_2_readLenFifo_CLR,
       hostchan_2_readLenFifo_DEQ,
       hostchan_2_readLenFifo_EMPTY_N,
       hostchan_2_readLenFifo_ENQ,
       hostchan_2_readLenFifo_FULL_N;

  // ports of submodule hostchan_2_readReqFifo
  wire [15 : 0] hostchan_2_readReqFifo_D_IN, hostchan_2_readReqFifo_D_OUT;
  wire hostchan_2_readReqFifo_CLR,
       hostchan_2_readReqFifo_DEQ,
       hostchan_2_readReqFifo_EMPTY_N,
       hostchan_2_readReqFifo_ENQ,
       hostchan_2_readReqFifo_FULL_N;

  // ports of submodule hostchan_2_verbose_ff
  wire [31 : 0] hostchan_2_verbose_ff_D_IN, hostchan_2_verbose_ff_D_OUT;
  wire hostchan_2_verbose_ff_CLR,
       hostchan_2_verbose_ff_DEQ,
       hostchan_2_verbose_ff_EMPTY_N,
       hostchan_2_verbose_ff_ENQ;

  // ports of submodule hostchan_2_writeDataFifo
  wire [177 : 0] hostchan_2_writeDataFifo_D_IN,
		 hostchan_2_writeDataFifo_D_OUT;
  wire hostchan_2_writeDataFifo_CLR,
       hostchan_2_writeDataFifo_DEQ,
       hostchan_2_writeDataFifo_EMPTY_N,
       hostchan_2_writeDataFifo_ENQ,
       hostchan_2_writeDataFifo_FULL_N;

  // ports of submodule hostchan_3_outReqFifo
  wire [1498 : 0] hostchan_3_outReqFifo_D_IN, hostchan_3_outReqFifo_D_OUT;
  wire hostchan_3_outReqFifo_CLR,
       hostchan_3_outReqFifo_DEQ,
       hostchan_3_outReqFifo_EMPTY_N,
       hostchan_3_outReqFifo_ENQ,
       hostchan_3_outReqFifo_FULL_N;

  // ports of submodule hostchan_3_parser
  wire [1477 : 0] hostchan_3_parser_meta_get;
  wire [177 : 0] hostchan_3_parser_frameIn_put;
  wire [31 : 0] hostchan_3_parser_set_verbosity_verbosity;
  wire hostchan_3_parser_EN_frameIn_put,
       hostchan_3_parser_EN_meta_get,
       hostchan_3_parser_EN_set_verbosity,
       hostchan_3_parser_RDY_frameIn_put,
       hostchan_3_parser_RDY_meta_get;

  // ports of submodule hostchan_3_pktBuff
  wire [177 : 0] hostchan_3_pktBuff_readServer_readData_get,
		 hostchan_3_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_3_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_3_pktBuff_readServer_readLen_get,
		hostchan_3_pktBuff_readServer_readReq_put;
  wire hostchan_3_pktBuff_EN_readServer_readData_get,
       hostchan_3_pktBuff_EN_readServer_readLen_get,
       hostchan_3_pktBuff_EN_readServer_readReq_put,
       hostchan_3_pktBuff_EN_set_verbosity,
       hostchan_3_pktBuff_EN_writeServer_enq,
       hostchan_3_pktBuff_RDY_readServer_readData_get,
       hostchan_3_pktBuff_RDY_readServer_readLen_get,
       hostchan_3_pktBuff_RDY_readServer_readReq_put,
       hostchan_3_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_3_pktLenFifo
  wire [15 : 0] hostchan_3_pktLenFifo_D_IN, hostchan_3_pktLenFifo_D_OUT;
  wire hostchan_3_pktLenFifo_CLR,
       hostchan_3_pktLenFifo_DEQ,
       hostchan_3_pktLenFifo_EMPTY_N,
       hostchan_3_pktLenFifo_ENQ,
       hostchan_3_pktLenFifo_FULL_N;

  // ports of submodule hostchan_3_readDataFifo
  wire [177 : 0] hostchan_3_readDataFifo_D_IN, hostchan_3_readDataFifo_D_OUT;
  wire hostchan_3_readDataFifo_CLR,
       hostchan_3_readDataFifo_DEQ,
       hostchan_3_readDataFifo_EMPTY_N,
       hostchan_3_readDataFifo_ENQ,
       hostchan_3_readDataFifo_FULL_N;

  // ports of submodule hostchan_3_readLenFifo
  wire [15 : 0] hostchan_3_readLenFifo_D_IN, hostchan_3_readLenFifo_D_OUT;
  wire hostchan_3_readLenFifo_CLR,
       hostchan_3_readLenFifo_DEQ,
       hostchan_3_readLenFifo_EMPTY_N,
       hostchan_3_readLenFifo_ENQ,
       hostchan_3_readLenFifo_FULL_N;

  // ports of submodule hostchan_3_readReqFifo
  wire [15 : 0] hostchan_3_readReqFifo_D_IN, hostchan_3_readReqFifo_D_OUT;
  wire hostchan_3_readReqFifo_CLR,
       hostchan_3_readReqFifo_DEQ,
       hostchan_3_readReqFifo_EMPTY_N,
       hostchan_3_readReqFifo_ENQ,
       hostchan_3_readReqFifo_FULL_N;

  // ports of submodule hostchan_3_verbose_ff
  wire [31 : 0] hostchan_3_verbose_ff_D_IN, hostchan_3_verbose_ff_D_OUT;
  wire hostchan_3_verbose_ff_CLR,
       hostchan_3_verbose_ff_DEQ,
       hostchan_3_verbose_ff_EMPTY_N,
       hostchan_3_verbose_ff_ENQ;

  // ports of submodule hostchan_3_writeDataFifo
  wire [177 : 0] hostchan_3_writeDataFifo_D_IN,
		 hostchan_3_writeDataFifo_D_OUT;
  wire hostchan_3_writeDataFifo_CLR,
       hostchan_3_writeDataFifo_DEQ,
       hostchan_3_writeDataFifo_EMPTY_N,
       hostchan_3_writeDataFifo_ENQ,
       hostchan_3_writeDataFifo_FULL_N;

  // ports of submodule input_queues_0
  wire [609 : 0] input_queues_0_readServer_readData_get,
		 input_queues_0_writeServer_enq_v;
  wire [31 : 0] input_queues_0_set_verbosity_verbosity;
  wire [15 : 0] input_queues_0_readServer_readLen_get,
		input_queues_0_readServer_readReq_put;
  wire input_queues_0_EN_readServer_readData_get,
       input_queues_0_EN_readServer_readLen_get,
       input_queues_0_EN_readServer_readReq_put,
       input_queues_0_EN_set_verbosity,
       input_queues_0_EN_writeServer_enq,
       input_queues_0_RDY_readServer_readData_get,
       input_queues_0_RDY_readServer_readLen_get,
       input_queues_0_RDY_readServer_readReq_put,
       input_queues_0_RDY_writeServer_enq;

  // ports of submodule input_queues_1
  wire [609 : 0] input_queues_1_readServer_readData_get,
		 input_queues_1_writeServer_enq_v;
  wire [31 : 0] input_queues_1_set_verbosity_verbosity;
  wire [15 : 0] input_queues_1_readServer_readLen_get,
		input_queues_1_readServer_readReq_put;
  wire input_queues_1_EN_readServer_readData_get,
       input_queues_1_EN_readServer_readLen_get,
       input_queues_1_EN_readServer_readReq_put,
       input_queues_1_EN_set_verbosity,
       input_queues_1_EN_writeServer_enq,
       input_queues_1_RDY_readServer_readData_get,
       input_queues_1_RDY_readServer_readLen_get,
       input_queues_1_RDY_readServer_readReq_put,
       input_queues_1_RDY_writeServer_enq;

  // ports of submodule input_queues_2
  wire [609 : 0] input_queues_2_readServer_readData_get,
		 input_queues_2_writeServer_enq_v;
  wire [31 : 0] input_queues_2_set_verbosity_verbosity;
  wire [15 : 0] input_queues_2_readServer_readLen_get,
		input_queues_2_readServer_readReq_put;
  wire input_queues_2_EN_readServer_readData_get,
       input_queues_2_EN_readServer_readLen_get,
       input_queues_2_EN_readServer_readReq_put,
       input_queues_2_EN_set_verbosity,
       input_queues_2_EN_writeServer_enq,
       input_queues_2_RDY_readServer_readData_get,
       input_queues_2_RDY_readServer_readLen_get,
       input_queues_2_RDY_readServer_readReq_put,
       input_queues_2_RDY_writeServer_enq;

  // ports of submodule input_queues_3
  wire [609 : 0] input_queues_3_readServer_readData_get,
		 input_queues_3_writeServer_enq_v;
  wire [31 : 0] input_queues_3_set_verbosity_verbosity;
  wire [15 : 0] input_queues_3_readServer_readLen_get,
		input_queues_3_readServer_readReq_put;
  wire input_queues_3_EN_readServer_readData_get,
       input_queues_3_EN_readServer_readLen_get,
       input_queues_3_EN_readServer_readReq_put,
       input_queues_3_EN_set_verbosity,
       input_queues_3_EN_writeServer_enq,
       input_queues_3_RDY_readServer_readData_get,
       input_queues_3_RDY_readServer_readLen_get,
       input_queues_3_RDY_readServer_readReq_put,
       input_queues_3_RDY_writeServer_enq;

  // ports of submodule input_queues_4
  wire [609 : 0] input_queues_4_readServer_readData_get,
		 input_queues_4_writeServer_enq_v;
  wire [31 : 0] input_queues_4_set_verbosity_verbosity;
  wire [15 : 0] input_queues_4_readServer_readLen_get,
		input_queues_4_readServer_readReq_put;
  wire input_queues_4_EN_readServer_readData_get,
       input_queues_4_EN_readServer_readLen_get,
       input_queues_4_EN_readServer_readReq_put,
       input_queues_4_EN_set_verbosity,
       input_queues_4_EN_writeServer_enq,
       input_queues_4_RDY_readServer_readData_get,
       input_queues_4_RDY_readServer_readLen_get,
       input_queues_4_RDY_readServer_readReq_put,
       input_queues_4_RDY_writeServer_enq;

  // ports of submodule localReset
  wire localReset_OUT_RST;

  // ports of submodule macToRing_0_gearbox_in_ff
  wire [105 : 0] macToRing_0_gearbox_in_ff_D_IN,
		 macToRing_0_gearbox_in_ff_D_OUT;
  wire macToRing_0_gearbox_in_ff_CLR,
       macToRing_0_gearbox_in_ff_DEQ,
       macToRing_0_gearbox_in_ff_EMPTY_N,
       macToRing_0_gearbox_in_ff_ENQ,
       macToRing_0_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_0_gearbox_out_ff
  wire [177 : 0] macToRing_0_gearbox_out_ff_D_IN,
		 macToRing_0_gearbox_out_ff_D_OUT;
  wire macToRing_0_gearbox_out_ff_CLR,
       macToRing_0_gearbox_out_ff_DEQ,
       macToRing_0_gearbox_out_ff_EMPTY_N,
       macToRing_0_gearbox_out_ff_ENQ,
       macToRing_0_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_0_writeDataFifo
  wire [177 : 0] macToRing_0_writeDataFifo_dD_OUT,
		 macToRing_0_writeDataFifo_sD_IN;
  wire macToRing_0_writeDataFifo_dDEQ,
       macToRing_0_writeDataFifo_dEMPTY_N,
       macToRing_0_writeDataFifo_sENQ,
       macToRing_0_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_1_gearbox_in_ff
  wire [105 : 0] macToRing_1_gearbox_in_ff_D_IN,
		 macToRing_1_gearbox_in_ff_D_OUT;
  wire macToRing_1_gearbox_in_ff_CLR,
       macToRing_1_gearbox_in_ff_DEQ,
       macToRing_1_gearbox_in_ff_EMPTY_N,
       macToRing_1_gearbox_in_ff_ENQ,
       macToRing_1_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_1_gearbox_out_ff
  wire [177 : 0] macToRing_1_gearbox_out_ff_D_IN,
		 macToRing_1_gearbox_out_ff_D_OUT;
  wire macToRing_1_gearbox_out_ff_CLR,
       macToRing_1_gearbox_out_ff_DEQ,
       macToRing_1_gearbox_out_ff_EMPTY_N,
       macToRing_1_gearbox_out_ff_ENQ,
       macToRing_1_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_1_writeDataFifo
  wire [177 : 0] macToRing_1_writeDataFifo_dD_OUT,
		 macToRing_1_writeDataFifo_sD_IN;
  wire macToRing_1_writeDataFifo_dDEQ,
       macToRing_1_writeDataFifo_dEMPTY_N,
       macToRing_1_writeDataFifo_sENQ,
       macToRing_1_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_2_gearbox_in_ff
  wire [105 : 0] macToRing_2_gearbox_in_ff_D_IN,
		 macToRing_2_gearbox_in_ff_D_OUT;
  wire macToRing_2_gearbox_in_ff_CLR,
       macToRing_2_gearbox_in_ff_DEQ,
       macToRing_2_gearbox_in_ff_EMPTY_N,
       macToRing_2_gearbox_in_ff_ENQ,
       macToRing_2_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_2_gearbox_out_ff
  wire [177 : 0] macToRing_2_gearbox_out_ff_D_IN,
		 macToRing_2_gearbox_out_ff_D_OUT;
  wire macToRing_2_gearbox_out_ff_CLR,
       macToRing_2_gearbox_out_ff_DEQ,
       macToRing_2_gearbox_out_ff_EMPTY_N,
       macToRing_2_gearbox_out_ff_ENQ,
       macToRing_2_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_2_writeDataFifo
  wire [177 : 0] macToRing_2_writeDataFifo_dD_OUT,
		 macToRing_2_writeDataFifo_sD_IN;
  wire macToRing_2_writeDataFifo_dDEQ,
       macToRing_2_writeDataFifo_dEMPTY_N,
       macToRing_2_writeDataFifo_sENQ,
       macToRing_2_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_3_gearbox_in_ff
  wire [105 : 0] macToRing_3_gearbox_in_ff_D_IN,
		 macToRing_3_gearbox_in_ff_D_OUT;
  wire macToRing_3_gearbox_in_ff_CLR,
       macToRing_3_gearbox_in_ff_DEQ,
       macToRing_3_gearbox_in_ff_EMPTY_N,
       macToRing_3_gearbox_in_ff_ENQ,
       macToRing_3_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_3_gearbox_out_ff
  wire [177 : 0] macToRing_3_gearbox_out_ff_D_IN,
		 macToRing_3_gearbox_out_ff_D_OUT;
  wire macToRing_3_gearbox_out_ff_CLR,
       macToRing_3_gearbox_out_ff_DEQ,
       macToRing_3_gearbox_out_ff_EMPTY_N,
       macToRing_3_gearbox_out_ff_ENQ,
       macToRing_3_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_3_writeDataFifo
  wire [177 : 0] macToRing_3_writeDataFifo_dD_OUT,
		 macToRing_3_writeDataFifo_sD_IN;
  wire macToRing_3_writeDataFifo_dDEQ,
       macToRing_3_writeDataFifo_dEMPTY_N,
       macToRing_3_writeDataFifo_sENQ,
       macToRing_3_writeDataFifo_sFULL_N;

  // ports of submodule meta_ff_0
  wire [1498 : 0] meta_ff_0_D_IN, meta_ff_0_D_OUT;
  wire meta_ff_0_CLR,
       meta_ff_0_DEQ,
       meta_ff_0_EMPTY_N,
       meta_ff_0_ENQ,
       meta_ff_0_FULL_N;

  // ports of submodule meta_ff_0_1
  wire [1498 : 0] meta_ff_0_1_D_IN, meta_ff_0_1_D_OUT;
  wire meta_ff_0_1_CLR,
       meta_ff_0_1_DEQ,
       meta_ff_0_1_EMPTY_N,
       meta_ff_0_1_ENQ,
       meta_ff_0_1_FULL_N;

  // ports of submodule meta_ff_1
  wire [1498 : 0] meta_ff_1_D_IN, meta_ff_1_D_OUT;
  wire meta_ff_1_CLR,
       meta_ff_1_DEQ,
       meta_ff_1_EMPTY_N,
       meta_ff_1_ENQ,
       meta_ff_1_FULL_N;

  // ports of submodule meta_ff_1_1
  wire [1498 : 0] meta_ff_1_1_D_IN, meta_ff_1_1_D_OUT;
  wire meta_ff_1_1_CLR,
       meta_ff_1_1_DEQ,
       meta_ff_1_1_EMPTY_N,
       meta_ff_1_1_ENQ,
       meta_ff_1_1_FULL_N;

  // ports of submodule meta_ff_2
  wire [1498 : 0] meta_ff_2_D_IN, meta_ff_2_D_OUT;
  wire meta_ff_2_CLR,
       meta_ff_2_DEQ,
       meta_ff_2_EMPTY_N,
       meta_ff_2_ENQ,
       meta_ff_2_FULL_N;

  // ports of submodule meta_ff_2_1
  wire [1498 : 0] meta_ff_2_1_D_IN, meta_ff_2_1_D_OUT;
  wire meta_ff_2_1_CLR,
       meta_ff_2_1_DEQ,
       meta_ff_2_1_EMPTY_N,
       meta_ff_2_1_ENQ,
       meta_ff_2_1_FULL_N;

  // ports of submodule meta_ff_3
  wire [1498 : 0] meta_ff_3_D_IN, meta_ff_3_D_OUT;
  wire meta_ff_3_CLR,
       meta_ff_3_DEQ,
       meta_ff_3_EMPTY_N,
       meta_ff_3_ENQ,
       meta_ff_3_FULL_N;

  // ports of submodule meta_ff_3_1
  wire [1498 : 0] meta_ff_3_1_D_IN, meta_ff_3_1_D_OUT;
  wire meta_ff_3_1_CLR,
       meta_ff_3_1_DEQ,
       meta_ff_3_1_EMPTY_N,
       meta_ff_3_1_ENQ,
       meta_ff_3_1_FULL_N;

  // ports of submodule meta_ff_4
  wire [1498 : 0] meta_ff_4_D_IN, meta_ff_4_D_OUT;
  wire meta_ff_4_CLR,
       meta_ff_4_DEQ,
       meta_ff_4_EMPTY_N,
       meta_ff_4_ENQ,
       meta_ff_4_FULL_N;

  // ports of submodule meta_ff_4_1
  wire [1498 : 0] meta_ff_4_1_D_IN, meta_ff_4_1_D_OUT;
  wire meta_ff_4_1_CLR,
       meta_ff_4_1_DEQ,
       meta_ff_4_1_EMPTY_N,
       meta_ff_4_1_ENQ,
       meta_ff_4_1_FULL_N;

  // ports of submodule modifier_0
  wire [1498 : 0] modifier_0_prev_enq_v;
  wire [177 : 0] modifier_0_writeClient_first, modifier_0_writeServer_enq_v;
  wire [31 : 0] modifier_0_set_verbosity_verbosity;
  wire modifier_0_EN_prev_enq,
       modifier_0_EN_set_verbosity,
       modifier_0_EN_writeClient_deq,
       modifier_0_EN_writeServer_enq,
       modifier_0_RDY_prev_enq,
       modifier_0_RDY_writeClient_deq,
       modifier_0_RDY_writeClient_first,
       modifier_0_RDY_writeServer_enq;

  // ports of submodule modifier_1
  wire [1498 : 0] modifier_1_prev_enq_v;
  wire [177 : 0] modifier_1_writeClient_first, modifier_1_writeServer_enq_v;
  wire [31 : 0] modifier_1_set_verbosity_verbosity;
  wire modifier_1_EN_prev_enq,
       modifier_1_EN_set_verbosity,
       modifier_1_EN_writeClient_deq,
       modifier_1_EN_writeServer_enq,
       modifier_1_RDY_prev_enq,
       modifier_1_RDY_writeClient_deq,
       modifier_1_RDY_writeClient_first,
       modifier_1_RDY_writeServer_enq;

  // ports of submodule modifier_2
  wire [1498 : 0] modifier_2_prev_enq_v;
  wire [177 : 0] modifier_2_writeClient_first, modifier_2_writeServer_enq_v;
  wire [31 : 0] modifier_2_set_verbosity_verbosity;
  wire modifier_2_EN_prev_enq,
       modifier_2_EN_set_verbosity,
       modifier_2_EN_writeClient_deq,
       modifier_2_EN_writeServer_enq,
       modifier_2_RDY_prev_enq,
       modifier_2_RDY_writeClient_deq,
       modifier_2_RDY_writeClient_first,
       modifier_2_RDY_writeServer_enq;

  // ports of submodule modifier_3
  wire [1498 : 0] modifier_3_prev_enq_v;
  wire [177 : 0] modifier_3_writeClient_first, modifier_3_writeServer_enq_v;
  wire [31 : 0] modifier_3_set_verbosity_verbosity;
  wire modifier_3_EN_prev_enq,
       modifier_3_EN_set_verbosity,
       modifier_3_EN_writeClient_deq,
       modifier_3_EN_writeServer_enq,
       modifier_3_RDY_prev_enq,
       modifier_3_RDY_writeClient_deq,
       modifier_3_RDY_writeClient_first,
       modifier_3_RDY_writeServer_enq;

  // ports of submodule modifier_4
  wire [1498 : 0] modifier_4_prev_enq_v;
  wire [177 : 0] modifier_4_writeClient_first, modifier_4_writeServer_enq_v;
  wire [31 : 0] modifier_4_set_verbosity_verbosity;
  wire modifier_4_EN_prev_enq,
       modifier_4_EN_set_verbosity,
       modifier_4_EN_writeClient_deq,
       modifier_4_EN_writeServer_enq,
       modifier_4_RDY_prev_enq,
       modifier_4_RDY_writeClient_deq,
       modifier_4_RDY_writeClient_first,
       modifier_4_RDY_writeServer_enq;

  // ports of submodule outReqFifo_0
  wire [1498 : 0] outReqFifo_0_D_IN, outReqFifo_0_D_OUT;
  wire outReqFifo_0_CLR,
       outReqFifo_0_DEQ,
       outReqFifo_0_EMPTY_N,
       outReqFifo_0_ENQ,
       outReqFifo_0_FULL_N;

  // ports of submodule output_queues_0
  wire [609 : 0] output_queues_0_readServer_readData_get,
		 output_queues_0_writeServer_enq_v;
  wire [31 : 0] output_queues_0_set_verbosity_verbosity;
  wire [15 : 0] output_queues_0_readServer_readLen_get,
		output_queues_0_readServer_readReq_put;
  wire output_queues_0_EN_readServer_readData_get,
       output_queues_0_EN_readServer_readLen_get,
       output_queues_0_EN_readServer_readReq_put,
       output_queues_0_EN_set_verbosity,
       output_queues_0_EN_writeServer_enq,
       output_queues_0_RDY_readServer_readData_get,
       output_queues_0_RDY_readServer_readLen_get,
       output_queues_0_RDY_readServer_readReq_put,
       output_queues_0_RDY_writeServer_enq;

  // ports of submodule output_queues_1
  wire [609 : 0] output_queues_1_readServer_readData_get,
		 output_queues_1_writeServer_enq_v;
  wire [31 : 0] output_queues_1_set_verbosity_verbosity;
  wire [15 : 0] output_queues_1_readServer_readLen_get,
		output_queues_1_readServer_readReq_put;
  wire output_queues_1_EN_readServer_readData_get,
       output_queues_1_EN_readServer_readLen_get,
       output_queues_1_EN_readServer_readReq_put,
       output_queues_1_EN_set_verbosity,
       output_queues_1_EN_writeServer_enq,
       output_queues_1_RDY_readServer_readData_get,
       output_queues_1_RDY_readServer_readLen_get,
       output_queues_1_RDY_readServer_readReq_put,
       output_queues_1_RDY_writeServer_enq;

  // ports of submodule output_queues_2
  wire [609 : 0] output_queues_2_readServer_readData_get,
		 output_queues_2_writeServer_enq_v;
  wire [31 : 0] output_queues_2_set_verbosity_verbosity;
  wire [15 : 0] output_queues_2_readServer_readLen_get,
		output_queues_2_readServer_readReq_put;
  wire output_queues_2_EN_readServer_readData_get,
       output_queues_2_EN_readServer_readLen_get,
       output_queues_2_EN_readServer_readReq_put,
       output_queues_2_EN_set_verbosity,
       output_queues_2_EN_writeServer_enq,
       output_queues_2_RDY_readServer_readData_get,
       output_queues_2_RDY_readServer_readLen_get,
       output_queues_2_RDY_readServer_readReq_put,
       output_queues_2_RDY_writeServer_enq;

  // ports of submodule output_queues_3
  wire [609 : 0] output_queues_3_readServer_readData_get,
		 output_queues_3_writeServer_enq_v;
  wire [31 : 0] output_queues_3_set_verbosity_verbosity;
  wire [15 : 0] output_queues_3_readServer_readLen_get,
		output_queues_3_readServer_readReq_put;
  wire output_queues_3_EN_readServer_readData_get,
       output_queues_3_EN_readServer_readLen_get,
       output_queues_3_EN_readServer_readReq_put,
       output_queues_3_EN_set_verbosity,
       output_queues_3_EN_writeServer_enq,
       output_queues_3_RDY_readServer_readData_get,
       output_queues_3_RDY_readServer_readLen_get,
       output_queues_3_RDY_readServer_readReq_put,
       output_queues_3_RDY_writeServer_enq;

  // ports of submodule output_queues_4
  wire [609 : 0] output_queues_4_readServer_readData_get,
		 output_queues_4_writeServer_enq_v;
  wire [31 : 0] output_queues_4_set_verbosity_verbosity;
  wire [15 : 0] output_queues_4_readServer_readLen_get,
		output_queues_4_readServer_readReq_put;
  wire output_queues_4_EN_readServer_readData_get,
       output_queues_4_EN_readServer_readLen_get,
       output_queues_4_EN_readServer_readReq_put,
       output_queues_4_EN_set_verbosity,
       output_queues_4_EN_writeServer_enq,
       output_queues_4_RDY_readServer_readData_get,
       output_queues_4_RDY_readServer_readLen_get,
       output_queues_4_RDY_readServer_readReq_put,
       output_queues_4_RDY_writeServer_enq;

  // ports of submodule output_queues_5
  wire [609 : 0] output_queues_5_readServer_readData_get,
		 output_queues_5_writeServer_enq_v;
  wire [31 : 0] output_queues_5_set_verbosity_verbosity;
  wire [15 : 0] output_queues_5_readServer_readLen_get,
		output_queues_5_readServer_readReq_put;
  wire output_queues_5_EN_readServer_readData_get,
       output_queues_5_EN_readServer_readLen_get,
       output_queues_5_EN_readServer_readReq_put,
       output_queues_5_EN_set_verbosity,
       output_queues_5_EN_writeServer_enq,
       output_queues_5_RDY_readServer_readData_get,
       output_queues_5_RDY_readServer_readLen_get,
       output_queues_5_RDY_readServer_readReq_put,
       output_queues_5_RDY_writeServer_enq;

  // ports of submodule output_queues_6
  wire [609 : 0] output_queues_6_readServer_readData_get,
		 output_queues_6_writeServer_enq_v;
  wire [31 : 0] output_queues_6_set_verbosity_verbosity;
  wire [15 : 0] output_queues_6_readServer_readLen_get,
		output_queues_6_readServer_readReq_put;
  wire output_queues_6_EN_readServer_readData_get,
       output_queues_6_EN_readServer_readLen_get,
       output_queues_6_EN_readServer_readReq_put,
       output_queues_6_EN_set_verbosity,
       output_queues_6_EN_writeServer_enq,
       output_queues_6_RDY_readServer_readData_get,
       output_queues_6_RDY_readServer_readLen_get,
       output_queues_6_RDY_readServer_readReq_put,
       output_queues_6_RDY_writeServer_enq;

  // ports of submodule output_queues_7
  wire [609 : 0] output_queues_7_readServer_readData_get,
		 output_queues_7_writeServer_enq_v;
  wire [31 : 0] output_queues_7_set_verbosity_verbosity;
  wire [15 : 0] output_queues_7_readServer_readLen_get,
		output_queues_7_readServer_readReq_put;
  wire output_queues_7_EN_readServer_readData_get,
       output_queues_7_EN_readServer_readLen_get,
       output_queues_7_EN_readServer_readReq_put,
       output_queues_7_EN_set_verbosity,
       output_queues_7_EN_writeServer_enq,
       output_queues_7_RDY_readServer_readData_get,
       output_queues_7_RDY_readServer_readLen_get,
       output_queues_7_RDY_readServer_readReq_put,
       output_queues_7_RDY_writeServer_enq;

  // ports of submodule parser_0
  wire [1477 : 0] parser_0_meta_get;
  wire [177 : 0] parser_0_frameIn_put;
  wire [31 : 0] parser_0_set_verbosity_verbosity;
  wire parser_0_EN_frameIn_put,
       parser_0_EN_meta_get,
       parser_0_EN_set_verbosity,
       parser_0_RDY_frameIn_put,
       parser_0_RDY_meta_get;

  // ports of submodule pktBuff_0
  wire [177 : 0] pktBuff_0_readServer_readData_get,
		 pktBuff_0_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_readServer_readLen_get,
		pktBuff_0_readServer_readReq_put;
  wire pktBuff_0_EN_readServer_readData_get,
       pktBuff_0_EN_readServer_readLen_get,
       pktBuff_0_EN_readServer_readReq_put,
       pktBuff_0_EN_set_verbosity,
       pktBuff_0_EN_writeServer_enq,
       pktBuff_0_RDY_readServer_readData_get,
       pktBuff_0_RDY_readServer_readLen_get,
       pktBuff_0_RDY_readServer_readReq_put,
       pktBuff_0_RDY_writeServer_enq,
       pktBuff_0_writeServer_notFull;

  // ports of submodule pktBuff_0_fifoEop
  wire [15 : 0] pktBuff_0_fifoEop_D_IN, pktBuff_0_fifoEop_D_OUT;
  wire pktBuff_0_fifoEop_CLR,
       pktBuff_0_fifoEop_DEQ,
       pktBuff_0_fifoEop_EMPTY_N,
       pktBuff_0_fifoEop_ENQ,
       pktBuff_0_fifoEop_FULL_N;

  // ports of submodule pktBuff_0_fifoLen
  wire [15 : 0] pktBuff_0_fifoLen_D_IN, pktBuff_0_fifoLen_D_OUT;
  wire pktBuff_0_fifoLen_CLR,
       pktBuff_0_fifoLen_DEQ,
       pktBuff_0_fifoLen_EMPTY_N,
       pktBuff_0_fifoLen_ENQ,
       pktBuff_0_fifoLen_FULL_N;

  // ports of submodule pktBuff_0_fifoReadData
  wire [177 : 0] pktBuff_0_fifoReadData_D_IN, pktBuff_0_fifoReadData_D_OUT;
  wire pktBuff_0_fifoReadData_CLR,
       pktBuff_0_fifoReadData_DEQ,
       pktBuff_0_fifoReadData_EMPTY_N,
       pktBuff_0_fifoReadData_ENQ,
       pktBuff_0_fifoReadData_FULL_N;

  // ports of submodule pktBuff_0_fifoReadReq
  wire [15 : 0] pktBuff_0_fifoReadReq_D_IN;
  wire pktBuff_0_fifoReadReq_CLR,
       pktBuff_0_fifoReadReq_DEQ,
       pktBuff_0_fifoReadReq_EMPTY_N,
       pktBuff_0_fifoReadReq_ENQ,
       pktBuff_0_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_0_fifoWriteData
  wire [177 : 0] pktBuff_0_fifoWriteData_D_IN, pktBuff_0_fifoWriteData_D_OUT;
  wire pktBuff_0_fifoWriteData_CLR,
       pktBuff_0_fifoWriteData_DEQ,
       pktBuff_0_fifoWriteData_EMPTY_N,
       pktBuff_0_fifoWriteData_ENQ,
       pktBuff_0_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_0_incomingReqs
  wire [185 : 0] pktBuff_0_incomingReqs_D_IN, pktBuff_0_incomingReqs_D_OUT;
  wire pktBuff_0_incomingReqs_CLR,
       pktBuff_0_incomingReqs_DEQ,
       pktBuff_0_incomingReqs_EMPTY_N,
       pktBuff_0_incomingReqs_ENQ,
       pktBuff_0_incomingReqs_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_memory
  wire [177 : 0] pktBuff_0_memBuffer_memory_DIA,
		 pktBuff_0_memBuffer_memory_DIB,
		 pktBuff_0_memBuffer_memory_DOA,
		 pktBuff_0_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_0_memBuffer_memory_ADDRA,
	       pktBuff_0_memBuffer_memory_ADDRB;
  wire pktBuff_0_memBuffer_memory_ENA,
       pktBuff_0_memBuffer_memory_ENB,
       pktBuff_0_memBuffer_memory_WEA,
       pktBuff_0_memBuffer_memory_WEB;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_meta_ff
  wire [1498 : 0] pktBuff_0_meta_ff_D_IN;
  wire pktBuff_0_meta_ff_CLR,
       pktBuff_0_meta_ff_DEQ,
       pktBuff_0_meta_ff_EMPTY_N,
       pktBuff_0_meta_ff_ENQ,
       pktBuff_0_meta_ff_FULL_N;

  // ports of submodule pktBuff_0_pktBuff
  wire [177 : 0] pktBuff_0_pktBuff_readServer_readData_get,
		 pktBuff_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_pktBuff_readServer_readLen_get,
		pktBuff_0_pktBuff_readServer_readReq_put;
  wire pktBuff_0_pktBuff_EN_readServer_readData_get,
       pktBuff_0_pktBuff_EN_readServer_readLen_get,
       pktBuff_0_pktBuff_EN_readServer_readReq_put,
       pktBuff_0_pktBuff_EN_set_verbosity,
       pktBuff_0_pktBuff_EN_writeServer_enq,
       pktBuff_0_pktBuff_RDY_readServer_readData_get,
       pktBuff_0_pktBuff_RDY_readServer_readLen_get,
       pktBuff_0_pktBuff_RDY_readServer_readReq_put,
       pktBuff_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_0_readDataFifo
  wire [177 : 0] pktBuff_0_readDataFifo_D_IN, pktBuff_0_readDataFifo_D_OUT;
  wire pktBuff_0_readDataFifo_CLR,
       pktBuff_0_readDataFifo_DEQ,
       pktBuff_0_readDataFifo_EMPTY_N,
       pktBuff_0_readDataFifo_ENQ,
       pktBuff_0_readDataFifo_FULL_N;

  // ports of submodule pktBuff_0_readLenFifo
  wire [15 : 0] pktBuff_0_readLenFifo_D_IN, pktBuff_0_readLenFifo_D_OUT;
  wire pktBuff_0_readLenFifo_CLR,
       pktBuff_0_readLenFifo_DEQ,
       pktBuff_0_readLenFifo_EMPTY_N,
       pktBuff_0_readLenFifo_ENQ,
       pktBuff_0_readLenFifo_FULL_N;

  // ports of submodule pktBuff_0_readReqFifo
  wire [15 : 0] pktBuff_0_readReqFifo_D_IN, pktBuff_0_readReqFifo_D_OUT;
  wire pktBuff_0_readReqFifo_CLR,
       pktBuff_0_readReqFifo_DEQ,
       pktBuff_0_readReqFifo_EMPTY_N,
       pktBuff_0_readReqFifo_ENQ,
       pktBuff_0_readReqFifo_FULL_N;

  // ports of submodule pktBuff_0_writeDataFifo
  wire [177 : 0] pktBuff_0_writeDataFifo_D_IN, pktBuff_0_writeDataFifo_D_OUT;
  wire pktBuff_0_writeDataFifo_CLR,
       pktBuff_0_writeDataFifo_DEQ,
       pktBuff_0_writeDataFifo_EMPTY_N,
       pktBuff_0_writeDataFifo_ENQ,
       pktBuff_0_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_1_fifoEop
  wire [15 : 0] pktBuff_1_fifoEop_D_IN, pktBuff_1_fifoEop_D_OUT;
  wire pktBuff_1_fifoEop_CLR,
       pktBuff_1_fifoEop_DEQ,
       pktBuff_1_fifoEop_EMPTY_N,
       pktBuff_1_fifoEop_ENQ,
       pktBuff_1_fifoEop_FULL_N;

  // ports of submodule pktBuff_1_fifoLen
  wire [15 : 0] pktBuff_1_fifoLen_D_IN, pktBuff_1_fifoLen_D_OUT;
  wire pktBuff_1_fifoLen_CLR,
       pktBuff_1_fifoLen_DEQ,
       pktBuff_1_fifoLen_EMPTY_N,
       pktBuff_1_fifoLen_ENQ,
       pktBuff_1_fifoLen_FULL_N;

  // ports of submodule pktBuff_1_fifoReadData
  wire [177 : 0] pktBuff_1_fifoReadData_D_IN, pktBuff_1_fifoReadData_D_OUT;
  wire pktBuff_1_fifoReadData_CLR,
       pktBuff_1_fifoReadData_DEQ,
       pktBuff_1_fifoReadData_EMPTY_N,
       pktBuff_1_fifoReadData_ENQ,
       pktBuff_1_fifoReadData_FULL_N;

  // ports of submodule pktBuff_1_fifoReadReq
  wire [15 : 0] pktBuff_1_fifoReadReq_D_IN;
  wire pktBuff_1_fifoReadReq_CLR,
       pktBuff_1_fifoReadReq_DEQ,
       pktBuff_1_fifoReadReq_EMPTY_N,
       pktBuff_1_fifoReadReq_ENQ,
       pktBuff_1_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_1_fifoWriteData
  wire [177 : 0] pktBuff_1_fifoWriteData_D_IN, pktBuff_1_fifoWriteData_D_OUT;
  wire pktBuff_1_fifoWriteData_CLR,
       pktBuff_1_fifoWriteData_DEQ,
       pktBuff_1_fifoWriteData_EMPTY_N,
       pktBuff_1_fifoWriteData_ENQ,
       pktBuff_1_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_1_incomingReqs
  wire [185 : 0] pktBuff_1_incomingReqs_D_IN, pktBuff_1_incomingReqs_D_OUT;
  wire pktBuff_1_incomingReqs_CLR,
       pktBuff_1_incomingReqs_DEQ,
       pktBuff_1_incomingReqs_EMPTY_N,
       pktBuff_1_incomingReqs_ENQ,
       pktBuff_1_incomingReqs_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_memory
  wire [177 : 0] pktBuff_1_memBuffer_memory_DIA,
		 pktBuff_1_memBuffer_memory_DIB,
		 pktBuff_1_memBuffer_memory_DOA,
		 pktBuff_1_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_1_memBuffer_memory_ADDRA,
	       pktBuff_1_memBuffer_memory_ADDRB;
  wire pktBuff_1_memBuffer_memory_ENA,
       pktBuff_1_memBuffer_memory_ENB,
       pktBuff_1_memBuffer_memory_WEA,
       pktBuff_1_memBuffer_memory_WEB;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_meta_ff
  wire [1498 : 0] pktBuff_1_meta_ff_D_IN;
  wire pktBuff_1_meta_ff_CLR,
       pktBuff_1_meta_ff_DEQ,
       pktBuff_1_meta_ff_EMPTY_N,
       pktBuff_1_meta_ff_ENQ,
       pktBuff_1_meta_ff_FULL_N;

  // ports of submodule pktBuff_1_pktBuff
  wire [177 : 0] pktBuff_1_pktBuff_readServer_readData_get,
		 pktBuff_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_1_pktBuff_readServer_readLen_get,
		pktBuff_1_pktBuff_readServer_readReq_put;
  wire pktBuff_1_pktBuff_EN_readServer_readData_get,
       pktBuff_1_pktBuff_EN_readServer_readLen_get,
       pktBuff_1_pktBuff_EN_readServer_readReq_put,
       pktBuff_1_pktBuff_EN_set_verbosity,
       pktBuff_1_pktBuff_EN_writeServer_enq,
       pktBuff_1_pktBuff_RDY_readServer_readData_get,
       pktBuff_1_pktBuff_RDY_readServer_readLen_get,
       pktBuff_1_pktBuff_RDY_readServer_readReq_put,
       pktBuff_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_1_readDataFifo
  wire [177 : 0] pktBuff_1_readDataFifo_D_IN, pktBuff_1_readDataFifo_D_OUT;
  wire pktBuff_1_readDataFifo_CLR,
       pktBuff_1_readDataFifo_DEQ,
       pktBuff_1_readDataFifo_EMPTY_N,
       pktBuff_1_readDataFifo_ENQ,
       pktBuff_1_readDataFifo_FULL_N;

  // ports of submodule pktBuff_1_readLenFifo
  wire [15 : 0] pktBuff_1_readLenFifo_D_IN, pktBuff_1_readLenFifo_D_OUT;
  wire pktBuff_1_readLenFifo_CLR,
       pktBuff_1_readLenFifo_DEQ,
       pktBuff_1_readLenFifo_EMPTY_N,
       pktBuff_1_readLenFifo_ENQ,
       pktBuff_1_readLenFifo_FULL_N;

  // ports of submodule pktBuff_1_readReqFifo
  wire [15 : 0] pktBuff_1_readReqFifo_D_IN, pktBuff_1_readReqFifo_D_OUT;
  wire pktBuff_1_readReqFifo_CLR,
       pktBuff_1_readReqFifo_DEQ,
       pktBuff_1_readReqFifo_EMPTY_N,
       pktBuff_1_readReqFifo_ENQ,
       pktBuff_1_readReqFifo_FULL_N;

  // ports of submodule pktBuff_1_writeDataFifo
  wire [177 : 0] pktBuff_1_writeDataFifo_D_IN, pktBuff_1_writeDataFifo_D_OUT;
  wire pktBuff_1_writeDataFifo_CLR,
       pktBuff_1_writeDataFifo_DEQ,
       pktBuff_1_writeDataFifo_EMPTY_N,
       pktBuff_1_writeDataFifo_ENQ,
       pktBuff_1_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_2_fifoEop
  wire [15 : 0] pktBuff_2_fifoEop_D_IN, pktBuff_2_fifoEop_D_OUT;
  wire pktBuff_2_fifoEop_CLR,
       pktBuff_2_fifoEop_DEQ,
       pktBuff_2_fifoEop_EMPTY_N,
       pktBuff_2_fifoEop_ENQ,
       pktBuff_2_fifoEop_FULL_N;

  // ports of submodule pktBuff_2_fifoLen
  wire [15 : 0] pktBuff_2_fifoLen_D_IN, pktBuff_2_fifoLen_D_OUT;
  wire pktBuff_2_fifoLen_CLR,
       pktBuff_2_fifoLen_DEQ,
       pktBuff_2_fifoLen_EMPTY_N,
       pktBuff_2_fifoLen_ENQ,
       pktBuff_2_fifoLen_FULL_N;

  // ports of submodule pktBuff_2_fifoReadData
  wire [177 : 0] pktBuff_2_fifoReadData_D_IN, pktBuff_2_fifoReadData_D_OUT;
  wire pktBuff_2_fifoReadData_CLR,
       pktBuff_2_fifoReadData_DEQ,
       pktBuff_2_fifoReadData_EMPTY_N,
       pktBuff_2_fifoReadData_ENQ,
       pktBuff_2_fifoReadData_FULL_N;

  // ports of submodule pktBuff_2_fifoReadReq
  wire [15 : 0] pktBuff_2_fifoReadReq_D_IN;
  wire pktBuff_2_fifoReadReq_CLR,
       pktBuff_2_fifoReadReq_DEQ,
       pktBuff_2_fifoReadReq_EMPTY_N,
       pktBuff_2_fifoReadReq_ENQ,
       pktBuff_2_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_2_fifoWriteData
  wire [177 : 0] pktBuff_2_fifoWriteData_D_IN, pktBuff_2_fifoWriteData_D_OUT;
  wire pktBuff_2_fifoWriteData_CLR,
       pktBuff_2_fifoWriteData_DEQ,
       pktBuff_2_fifoWriteData_EMPTY_N,
       pktBuff_2_fifoWriteData_ENQ,
       pktBuff_2_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_2_incomingReqs
  wire [185 : 0] pktBuff_2_incomingReqs_D_IN, pktBuff_2_incomingReqs_D_OUT;
  wire pktBuff_2_incomingReqs_CLR,
       pktBuff_2_incomingReqs_DEQ,
       pktBuff_2_incomingReqs_EMPTY_N,
       pktBuff_2_incomingReqs_ENQ,
       pktBuff_2_incomingReqs_FULL_N;

  // ports of submodule pktBuff_2_memBuffer_memory
  wire [177 : 0] pktBuff_2_memBuffer_memory_DIA,
		 pktBuff_2_memBuffer_memory_DIB,
		 pktBuff_2_memBuffer_memory_DOA,
		 pktBuff_2_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_2_memBuffer_memory_ADDRA,
	       pktBuff_2_memBuffer_memory_ADDRB;
  wire pktBuff_2_memBuffer_memory_ENA,
       pktBuff_2_memBuffer_memory_ENB,
       pktBuff_2_memBuffer_memory_WEA,
       pktBuff_2_memBuffer_memory_WEB;

  // ports of submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_2_meta_ff
  wire [1498 : 0] pktBuff_2_meta_ff_D_IN;
  wire pktBuff_2_meta_ff_CLR,
       pktBuff_2_meta_ff_DEQ,
       pktBuff_2_meta_ff_EMPTY_N,
       pktBuff_2_meta_ff_ENQ,
       pktBuff_2_meta_ff_FULL_N;

  // ports of submodule pktBuff_2_pktBuff
  wire [177 : 0] pktBuff_2_pktBuff_readServer_readData_get,
		 pktBuff_2_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_2_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_2_pktBuff_readServer_readLen_get,
		pktBuff_2_pktBuff_readServer_readReq_put;
  wire pktBuff_2_pktBuff_EN_readServer_readData_get,
       pktBuff_2_pktBuff_EN_readServer_readLen_get,
       pktBuff_2_pktBuff_EN_readServer_readReq_put,
       pktBuff_2_pktBuff_EN_set_verbosity,
       pktBuff_2_pktBuff_EN_writeServer_enq,
       pktBuff_2_pktBuff_RDY_readServer_readData_get,
       pktBuff_2_pktBuff_RDY_readServer_readLen_get,
       pktBuff_2_pktBuff_RDY_readServer_readReq_put,
       pktBuff_2_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_2_readDataFifo
  wire [177 : 0] pktBuff_2_readDataFifo_D_IN, pktBuff_2_readDataFifo_D_OUT;
  wire pktBuff_2_readDataFifo_CLR,
       pktBuff_2_readDataFifo_DEQ,
       pktBuff_2_readDataFifo_EMPTY_N,
       pktBuff_2_readDataFifo_ENQ,
       pktBuff_2_readDataFifo_FULL_N;

  // ports of submodule pktBuff_2_readLenFifo
  wire [15 : 0] pktBuff_2_readLenFifo_D_IN, pktBuff_2_readLenFifo_D_OUT;
  wire pktBuff_2_readLenFifo_CLR,
       pktBuff_2_readLenFifo_DEQ,
       pktBuff_2_readLenFifo_EMPTY_N,
       pktBuff_2_readLenFifo_ENQ,
       pktBuff_2_readLenFifo_FULL_N;

  // ports of submodule pktBuff_2_readReqFifo
  wire [15 : 0] pktBuff_2_readReqFifo_D_IN, pktBuff_2_readReqFifo_D_OUT;
  wire pktBuff_2_readReqFifo_CLR,
       pktBuff_2_readReqFifo_DEQ,
       pktBuff_2_readReqFifo_EMPTY_N,
       pktBuff_2_readReqFifo_ENQ,
       pktBuff_2_readReqFifo_FULL_N;

  // ports of submodule pktBuff_2_writeDataFifo
  wire [177 : 0] pktBuff_2_writeDataFifo_D_IN, pktBuff_2_writeDataFifo_D_OUT;
  wire pktBuff_2_writeDataFifo_CLR,
       pktBuff_2_writeDataFifo_DEQ,
       pktBuff_2_writeDataFifo_EMPTY_N,
       pktBuff_2_writeDataFifo_ENQ,
       pktBuff_2_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_3_fifoEop
  wire [15 : 0] pktBuff_3_fifoEop_D_IN, pktBuff_3_fifoEop_D_OUT;
  wire pktBuff_3_fifoEop_CLR,
       pktBuff_3_fifoEop_DEQ,
       pktBuff_3_fifoEop_EMPTY_N,
       pktBuff_3_fifoEop_ENQ,
       pktBuff_3_fifoEop_FULL_N;

  // ports of submodule pktBuff_3_fifoLen
  wire [15 : 0] pktBuff_3_fifoLen_D_IN, pktBuff_3_fifoLen_D_OUT;
  wire pktBuff_3_fifoLen_CLR,
       pktBuff_3_fifoLen_DEQ,
       pktBuff_3_fifoLen_EMPTY_N,
       pktBuff_3_fifoLen_ENQ,
       pktBuff_3_fifoLen_FULL_N;

  // ports of submodule pktBuff_3_fifoReadData
  wire [177 : 0] pktBuff_3_fifoReadData_D_IN, pktBuff_3_fifoReadData_D_OUT;
  wire pktBuff_3_fifoReadData_CLR,
       pktBuff_3_fifoReadData_DEQ,
       pktBuff_3_fifoReadData_EMPTY_N,
       pktBuff_3_fifoReadData_ENQ,
       pktBuff_3_fifoReadData_FULL_N;

  // ports of submodule pktBuff_3_fifoReadReq
  wire [15 : 0] pktBuff_3_fifoReadReq_D_IN;
  wire pktBuff_3_fifoReadReq_CLR,
       pktBuff_3_fifoReadReq_DEQ,
       pktBuff_3_fifoReadReq_EMPTY_N,
       pktBuff_3_fifoReadReq_ENQ,
       pktBuff_3_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_3_fifoWriteData
  wire [177 : 0] pktBuff_3_fifoWriteData_D_IN, pktBuff_3_fifoWriteData_D_OUT;
  wire pktBuff_3_fifoWriteData_CLR,
       pktBuff_3_fifoWriteData_DEQ,
       pktBuff_3_fifoWriteData_EMPTY_N,
       pktBuff_3_fifoWriteData_ENQ,
       pktBuff_3_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_3_incomingReqs
  wire [185 : 0] pktBuff_3_incomingReqs_D_IN, pktBuff_3_incomingReqs_D_OUT;
  wire pktBuff_3_incomingReqs_CLR,
       pktBuff_3_incomingReqs_DEQ,
       pktBuff_3_incomingReqs_EMPTY_N,
       pktBuff_3_incomingReqs_ENQ,
       pktBuff_3_incomingReqs_FULL_N;

  // ports of submodule pktBuff_3_memBuffer_memory
  wire [177 : 0] pktBuff_3_memBuffer_memory_DIA,
		 pktBuff_3_memBuffer_memory_DIB,
		 pktBuff_3_memBuffer_memory_DOA,
		 pktBuff_3_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_3_memBuffer_memory_ADDRA,
	       pktBuff_3_memBuffer_memory_ADDRB;
  wire pktBuff_3_memBuffer_memory_ENA,
       pktBuff_3_memBuffer_memory_ENB,
       pktBuff_3_memBuffer_memory_WEA,
       pktBuff_3_memBuffer_memory_WEB;

  // ports of submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_3_meta_ff
  wire [1498 : 0] pktBuff_3_meta_ff_D_IN;
  wire pktBuff_3_meta_ff_CLR,
       pktBuff_3_meta_ff_DEQ,
       pktBuff_3_meta_ff_EMPTY_N,
       pktBuff_3_meta_ff_ENQ,
       pktBuff_3_meta_ff_FULL_N;

  // ports of submodule pktBuff_3_pktBuff
  wire [177 : 0] pktBuff_3_pktBuff_readServer_readData_get,
		 pktBuff_3_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_3_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_3_pktBuff_readServer_readLen_get,
		pktBuff_3_pktBuff_readServer_readReq_put;
  wire pktBuff_3_pktBuff_EN_readServer_readData_get,
       pktBuff_3_pktBuff_EN_readServer_readLen_get,
       pktBuff_3_pktBuff_EN_readServer_readReq_put,
       pktBuff_3_pktBuff_EN_set_verbosity,
       pktBuff_3_pktBuff_EN_writeServer_enq,
       pktBuff_3_pktBuff_RDY_readServer_readData_get,
       pktBuff_3_pktBuff_RDY_readServer_readLen_get,
       pktBuff_3_pktBuff_RDY_readServer_readReq_put,
       pktBuff_3_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_3_readDataFifo
  wire [177 : 0] pktBuff_3_readDataFifo_D_IN, pktBuff_3_readDataFifo_D_OUT;
  wire pktBuff_3_readDataFifo_CLR,
       pktBuff_3_readDataFifo_DEQ,
       pktBuff_3_readDataFifo_EMPTY_N,
       pktBuff_3_readDataFifo_ENQ,
       pktBuff_3_readDataFifo_FULL_N;

  // ports of submodule pktBuff_3_readLenFifo
  wire [15 : 0] pktBuff_3_readLenFifo_D_IN, pktBuff_3_readLenFifo_D_OUT;
  wire pktBuff_3_readLenFifo_CLR,
       pktBuff_3_readLenFifo_DEQ,
       pktBuff_3_readLenFifo_EMPTY_N,
       pktBuff_3_readLenFifo_ENQ,
       pktBuff_3_readLenFifo_FULL_N;

  // ports of submodule pktBuff_3_readReqFifo
  wire [15 : 0] pktBuff_3_readReqFifo_D_IN, pktBuff_3_readReqFifo_D_OUT;
  wire pktBuff_3_readReqFifo_CLR,
       pktBuff_3_readReqFifo_DEQ,
       pktBuff_3_readReqFifo_EMPTY_N,
       pktBuff_3_readReqFifo_ENQ,
       pktBuff_3_readReqFifo_FULL_N;

  // ports of submodule pktBuff_3_writeDataFifo
  wire [177 : 0] pktBuff_3_writeDataFifo_D_IN, pktBuff_3_writeDataFifo_D_OUT;
  wire pktBuff_3_writeDataFifo_CLR,
       pktBuff_3_writeDataFifo_DEQ,
       pktBuff_3_writeDataFifo_EMPTY_N,
       pktBuff_3_writeDataFifo_ENQ,
       pktBuff_3_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_4_meta_ff
  wire [1498 : 0] pktBuff_4_meta_ff_D_IN;
  wire pktBuff_4_meta_ff_CLR,
       pktBuff_4_meta_ff_DEQ,
       pktBuff_4_meta_ff_EMPTY_N,
       pktBuff_4_meta_ff_ENQ,
       pktBuff_4_meta_ff_FULL_N;

  // ports of submodule pktBuff_4_pktBuff
  wire [177 : 0] pktBuff_4_pktBuff_readServer_readData_get,
		 pktBuff_4_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_4_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_4_pktBuff_readServer_readLen_get,
		pktBuff_4_pktBuff_readServer_readReq_put;
  wire pktBuff_4_pktBuff_EN_readServer_readData_get,
       pktBuff_4_pktBuff_EN_readServer_readLen_get,
       pktBuff_4_pktBuff_EN_readServer_readReq_put,
       pktBuff_4_pktBuff_EN_set_verbosity,
       pktBuff_4_pktBuff_EN_writeServer_enq,
       pktBuff_4_pktBuff_RDY_readServer_readData_get,
       pktBuff_4_pktBuff_RDY_readServer_readLen_get,
       pktBuff_4_pktBuff_RDY_readServer_readReq_put,
       pktBuff_4_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_4_readDataFifo
  wire [177 : 0] pktBuff_4_readDataFifo_D_IN, pktBuff_4_readDataFifo_D_OUT;
  wire pktBuff_4_readDataFifo_CLR,
       pktBuff_4_readDataFifo_DEQ,
       pktBuff_4_readDataFifo_EMPTY_N,
       pktBuff_4_readDataFifo_ENQ,
       pktBuff_4_readDataFifo_FULL_N;

  // ports of submodule pktBuff_4_readLenFifo
  wire [15 : 0] pktBuff_4_readLenFifo_D_IN, pktBuff_4_readLenFifo_D_OUT;
  wire pktBuff_4_readLenFifo_CLR,
       pktBuff_4_readLenFifo_DEQ,
       pktBuff_4_readLenFifo_EMPTY_N,
       pktBuff_4_readLenFifo_ENQ,
       pktBuff_4_readLenFifo_FULL_N;

  // ports of submodule pktBuff_4_readReqFifo
  wire [15 : 0] pktBuff_4_readReqFifo_D_IN, pktBuff_4_readReqFifo_D_OUT;
  wire pktBuff_4_readReqFifo_CLR,
       pktBuff_4_readReqFifo_DEQ,
       pktBuff_4_readReqFifo_EMPTY_N,
       pktBuff_4_readReqFifo_ENQ,
       pktBuff_4_readReqFifo_FULL_N;

  // ports of submodule pktBuff_4_writeDataFifo
  wire [177 : 0] pktBuff_4_writeDataFifo_D_IN, pktBuff_4_writeDataFifo_D_OUT;
  wire pktBuff_4_writeDataFifo_CLR,
       pktBuff_4_writeDataFifo_DEQ,
       pktBuff_4_writeDataFifo_EMPTY_N,
       pktBuff_4_writeDataFifo_ENQ,
       pktBuff_4_writeDataFifo_FULL_N;

  // ports of submodule pktLenFifo_0
  wire [15 : 0] pktLenFifo_0_D_IN, pktLenFifo_0_D_OUT;
  wire pktLenFifo_0_CLR,
       pktLenFifo_0_DEQ,
       pktLenFifo_0_EMPTY_N,
       pktLenFifo_0_ENQ,
       pktLenFifo_0_FULL_N;

  // ports of submodule readDataFifo_0
  wire [177 : 0] readDataFifo_0_D_IN, readDataFifo_0_D_OUT;
  wire readDataFifo_0_CLR,
       readDataFifo_0_DEQ,
       readDataFifo_0_EMPTY_N,
       readDataFifo_0_ENQ,
       readDataFifo_0_FULL_N;

  // ports of submodule readLenFifo_0
  wire [15 : 0] readLenFifo_0_D_IN, readLenFifo_0_D_OUT;
  wire readLenFifo_0_CLR,
       readLenFifo_0_DEQ,
       readLenFifo_0_EMPTY_N,
       readLenFifo_0_ENQ,
       readLenFifo_0_FULL_N;

  // ports of submodule readReqFifo_0
  wire [15 : 0] readReqFifo_0_D_IN, readReqFifo_0_D_OUT;
  wire readReqFifo_0_CLR,
       readReqFifo_0_DEQ,
       readReqFifo_0_EMPTY_N,
       readReqFifo_0_ENQ,
       readReqFifo_0_FULL_N;

  // ports of submodule ringToMac_0_fifoTxData_dCombinedReset
  wire ringToMac_0_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_dCrossedsReset
  wire ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_0_fifoTxData_sCombinedReset
  wire ringToMac_0_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_sCrosseddReset
  wire ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_0_readDataFifo
  wire [177 : 0] ringToMac_0_readDataFifo_D_IN,
		 ringToMac_0_readDataFifo_D_OUT;
  wire ringToMac_0_readDataFifo_CLR,
       ringToMac_0_readDataFifo_DEQ,
       ringToMac_0_readDataFifo_EMPTY_N,
       ringToMac_0_readDataFifo_ENQ,
       ringToMac_0_readDataFifo_FULL_N;

  // ports of submodule ringToMac_0_readLenFifo
  wire [15 : 0] ringToMac_0_readLenFifo_D_IN, ringToMac_0_readLenFifo_D_OUT;
  wire ringToMac_0_readLenFifo_CLR,
       ringToMac_0_readLenFifo_DEQ,
       ringToMac_0_readLenFifo_EMPTY_N,
       ringToMac_0_readLenFifo_ENQ,
       ringToMac_0_readLenFifo_FULL_N;

  // ports of submodule ringToMac_0_readReqFifo
  wire [15 : 0] ringToMac_0_readReqFifo_D_IN, ringToMac_0_readReqFifo_D_OUT;
  wire ringToMac_0_readReqFifo_CLR,
       ringToMac_0_readReqFifo_DEQ,
       ringToMac_0_readReqFifo_EMPTY_N,
       ringToMac_0_readReqFifo_ENQ,
       ringToMac_0_readReqFifo_FULL_N;

  // ports of submodule ringToMac_0_tx_fifo
  wire [177 : 0] ringToMac_0_tx_fifo_dD_OUT, ringToMac_0_tx_fifo_sD_IN;
  wire ringToMac_0_tx_fifo_dDEQ,
       ringToMac_0_tx_fifo_dEMPTY_N,
       ringToMac_0_tx_fifo_sENQ,
       ringToMac_0_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_0_writeMacFifo
  wire [105 : 0] ringToMac_0_writeMacFifo_D_IN,
		 ringToMac_0_writeMacFifo_D_OUT;
  wire ringToMac_0_writeMacFifo_CLR,
       ringToMac_0_writeMacFifo_DEQ,
       ringToMac_0_writeMacFifo_EMPTY_N,
       ringToMac_0_writeMacFifo_ENQ,
       ringToMac_0_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_1_fifoTxData_dCombinedReset
  wire ringToMac_1_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_dCrossedsReset
  wire ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_1_fifoTxData_sCombinedReset
  wire ringToMac_1_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_sCrosseddReset
  wire ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_1_readDataFifo
  wire [177 : 0] ringToMac_1_readDataFifo_D_IN,
		 ringToMac_1_readDataFifo_D_OUT;
  wire ringToMac_1_readDataFifo_CLR,
       ringToMac_1_readDataFifo_DEQ,
       ringToMac_1_readDataFifo_EMPTY_N,
       ringToMac_1_readDataFifo_ENQ,
       ringToMac_1_readDataFifo_FULL_N;

  // ports of submodule ringToMac_1_readLenFifo
  wire [15 : 0] ringToMac_1_readLenFifo_D_IN, ringToMac_1_readLenFifo_D_OUT;
  wire ringToMac_1_readLenFifo_CLR,
       ringToMac_1_readLenFifo_DEQ,
       ringToMac_1_readLenFifo_EMPTY_N,
       ringToMac_1_readLenFifo_ENQ,
       ringToMac_1_readLenFifo_FULL_N;

  // ports of submodule ringToMac_1_readReqFifo
  wire [15 : 0] ringToMac_1_readReqFifo_D_IN, ringToMac_1_readReqFifo_D_OUT;
  wire ringToMac_1_readReqFifo_CLR,
       ringToMac_1_readReqFifo_DEQ,
       ringToMac_1_readReqFifo_EMPTY_N,
       ringToMac_1_readReqFifo_ENQ,
       ringToMac_1_readReqFifo_FULL_N;

  // ports of submodule ringToMac_1_tx_fifo
  wire [177 : 0] ringToMac_1_tx_fifo_dD_OUT, ringToMac_1_tx_fifo_sD_IN;
  wire ringToMac_1_tx_fifo_dDEQ,
       ringToMac_1_tx_fifo_dEMPTY_N,
       ringToMac_1_tx_fifo_sENQ,
       ringToMac_1_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_1_writeMacFifo
  wire [105 : 0] ringToMac_1_writeMacFifo_D_IN,
		 ringToMac_1_writeMacFifo_D_OUT;
  wire ringToMac_1_writeMacFifo_CLR,
       ringToMac_1_writeMacFifo_DEQ,
       ringToMac_1_writeMacFifo_EMPTY_N,
       ringToMac_1_writeMacFifo_ENQ,
       ringToMac_1_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_2_fifoTxData_dCombinedReset
  wire ringToMac_2_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_2_fifoTxData_dCrossedsReset
  wire ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_2_fifoTxData_sCombinedReset
  wire ringToMac_2_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_2_fifoTxData_sCrosseddReset
  wire ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_2_readDataFifo
  wire [177 : 0] ringToMac_2_readDataFifo_D_IN,
		 ringToMac_2_readDataFifo_D_OUT;
  wire ringToMac_2_readDataFifo_CLR,
       ringToMac_2_readDataFifo_DEQ,
       ringToMac_2_readDataFifo_EMPTY_N,
       ringToMac_2_readDataFifo_ENQ,
       ringToMac_2_readDataFifo_FULL_N;

  // ports of submodule ringToMac_2_readLenFifo
  wire [15 : 0] ringToMac_2_readLenFifo_D_IN, ringToMac_2_readLenFifo_D_OUT;
  wire ringToMac_2_readLenFifo_CLR,
       ringToMac_2_readLenFifo_DEQ,
       ringToMac_2_readLenFifo_EMPTY_N,
       ringToMac_2_readLenFifo_ENQ,
       ringToMac_2_readLenFifo_FULL_N;

  // ports of submodule ringToMac_2_readReqFifo
  wire [15 : 0] ringToMac_2_readReqFifo_D_IN, ringToMac_2_readReqFifo_D_OUT;
  wire ringToMac_2_readReqFifo_CLR,
       ringToMac_2_readReqFifo_DEQ,
       ringToMac_2_readReqFifo_EMPTY_N,
       ringToMac_2_readReqFifo_ENQ,
       ringToMac_2_readReqFifo_FULL_N;

  // ports of submodule ringToMac_2_tx_fifo
  wire [177 : 0] ringToMac_2_tx_fifo_dD_OUT, ringToMac_2_tx_fifo_sD_IN;
  wire ringToMac_2_tx_fifo_dDEQ,
       ringToMac_2_tx_fifo_dEMPTY_N,
       ringToMac_2_tx_fifo_sENQ,
       ringToMac_2_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_2_writeMacFifo
  wire [105 : 0] ringToMac_2_writeMacFifo_D_IN,
		 ringToMac_2_writeMacFifo_D_OUT;
  wire ringToMac_2_writeMacFifo_CLR,
       ringToMac_2_writeMacFifo_DEQ,
       ringToMac_2_writeMacFifo_EMPTY_N,
       ringToMac_2_writeMacFifo_ENQ,
       ringToMac_2_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_3_fifoTxData_dCombinedReset
  wire ringToMac_3_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_3_fifoTxData_dCrossedsReset
  wire ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_3_fifoTxData_sCombinedReset
  wire ringToMac_3_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_3_fifoTxData_sCrosseddReset
  wire ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_3_readDataFifo
  wire [177 : 0] ringToMac_3_readDataFifo_D_IN,
		 ringToMac_3_readDataFifo_D_OUT;
  wire ringToMac_3_readDataFifo_CLR,
       ringToMac_3_readDataFifo_DEQ,
       ringToMac_3_readDataFifo_EMPTY_N,
       ringToMac_3_readDataFifo_ENQ,
       ringToMac_3_readDataFifo_FULL_N;

  // ports of submodule ringToMac_3_readLenFifo
  wire [15 : 0] ringToMac_3_readLenFifo_D_IN, ringToMac_3_readLenFifo_D_OUT;
  wire ringToMac_3_readLenFifo_CLR,
       ringToMac_3_readLenFifo_DEQ,
       ringToMac_3_readLenFifo_EMPTY_N,
       ringToMac_3_readLenFifo_ENQ,
       ringToMac_3_readLenFifo_FULL_N;

  // ports of submodule ringToMac_3_readReqFifo
  wire [15 : 0] ringToMac_3_readReqFifo_D_IN, ringToMac_3_readReqFifo_D_OUT;
  wire ringToMac_3_readReqFifo_CLR,
       ringToMac_3_readReqFifo_DEQ,
       ringToMac_3_readReqFifo_EMPTY_N,
       ringToMac_3_readReqFifo_ENQ,
       ringToMac_3_readReqFifo_FULL_N;

  // ports of submodule ringToMac_3_tx_fifo
  wire [177 : 0] ringToMac_3_tx_fifo_dD_OUT, ringToMac_3_tx_fifo_sD_IN;
  wire ringToMac_3_tx_fifo_dDEQ,
       ringToMac_3_tx_fifo_dEMPTY_N,
       ringToMac_3_tx_fifo_sENQ,
       ringToMac_3_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_3_writeMacFifo
  wire [105 : 0] ringToMac_3_writeMacFifo_D_IN,
		 ringToMac_3_writeMacFifo_D_OUT;
  wire ringToMac_3_writeMacFifo_CLR,
       ringToMac_3_writeMacFifo_DEQ,
       ringToMac_3_writeMacFifo_EMPTY_N,
       ringToMac_3_writeMacFifo_ENQ,
       ringToMac_3_writeMacFifo_FULL_N;

  // ports of submodule verbose_ff_0
  wire [31 : 0] verbose_ff_0_D_IN, verbose_ff_0_D_OUT;
  wire verbose_ff_0_CLR,
       verbose_ff_0_DEQ,
       verbose_ff_0_EMPTY_N,
       verbose_ff_0_ENQ,
       verbose_ff_0_FULL_N;

  // ports of submodule verbose_ff_0_1
  wire [31 : 0] verbose_ff_0_1_D_IN, verbose_ff_0_1_D_OUT;
  wire verbose_ff_0_1_CLR,
       verbose_ff_0_1_DEQ,
       verbose_ff_0_1_EMPTY_N,
       verbose_ff_0_1_ENQ,
       verbose_ff_0_1_FULL_N;

  // ports of submodule verbose_ff_0_2
  wire [31 : 0] verbose_ff_0_2_D_IN, verbose_ff_0_2_D_OUT;
  wire verbose_ff_0_2_CLR,
       verbose_ff_0_2_DEQ,
       verbose_ff_0_2_EMPTY_N,
       verbose_ff_0_2_ENQ,
       verbose_ff_0_2_FULL_N;

  // ports of submodule verbose_ff_0_3
  wire [31 : 0] verbose_ff_0_3_D_IN;
  wire verbose_ff_0_3_CLR,
       verbose_ff_0_3_DEQ,
       verbose_ff_0_3_ENQ,
       verbose_ff_0_3_FULL_N;

  // ports of submodule verbose_ff_1
  wire [31 : 0] verbose_ff_1_D_IN, verbose_ff_1_D_OUT;
  wire verbose_ff_1_CLR,
       verbose_ff_1_DEQ,
       verbose_ff_1_EMPTY_N,
       verbose_ff_1_ENQ,
       verbose_ff_1_FULL_N;

  // ports of submodule verbose_ff_1_1
  wire [31 : 0] verbose_ff_1_1_D_IN, verbose_ff_1_1_D_OUT;
  wire verbose_ff_1_1_CLR,
       verbose_ff_1_1_DEQ,
       verbose_ff_1_1_EMPTY_N,
       verbose_ff_1_1_ENQ,
       verbose_ff_1_1_FULL_N;

  // ports of submodule verbose_ff_1_2
  wire [31 : 0] verbose_ff_1_2_D_IN;
  wire verbose_ff_1_2_CLR,
       verbose_ff_1_2_DEQ,
       verbose_ff_1_2_ENQ,
       verbose_ff_1_2_FULL_N;

  // ports of submodule verbose_ff_2
  wire [31 : 0] verbose_ff_2_D_IN, verbose_ff_2_D_OUT;
  wire verbose_ff_2_CLR,
       verbose_ff_2_DEQ,
       verbose_ff_2_EMPTY_N,
       verbose_ff_2_ENQ,
       verbose_ff_2_FULL_N;

  // ports of submodule verbose_ff_2_1
  wire [31 : 0] verbose_ff_2_1_D_IN, verbose_ff_2_1_D_OUT;
  wire verbose_ff_2_1_CLR,
       verbose_ff_2_1_DEQ,
       verbose_ff_2_1_EMPTY_N,
       verbose_ff_2_1_ENQ,
       verbose_ff_2_1_FULL_N;

  // ports of submodule verbose_ff_2_2
  wire [31 : 0] verbose_ff_2_2_D_IN;
  wire verbose_ff_2_2_CLR,
       verbose_ff_2_2_DEQ,
       verbose_ff_2_2_ENQ,
       verbose_ff_2_2_FULL_N;

  // ports of submodule verbose_ff_3
  wire [31 : 0] verbose_ff_3_D_IN, verbose_ff_3_D_OUT;
  wire verbose_ff_3_CLR,
       verbose_ff_3_DEQ,
       verbose_ff_3_EMPTY_N,
       verbose_ff_3_ENQ,
       verbose_ff_3_FULL_N;

  // ports of submodule verbose_ff_3_1
  wire [31 : 0] verbose_ff_3_1_D_IN, verbose_ff_3_1_D_OUT;
  wire verbose_ff_3_1_CLR,
       verbose_ff_3_1_DEQ,
       verbose_ff_3_1_EMPTY_N,
       verbose_ff_3_1_ENQ,
       verbose_ff_3_1_FULL_N;

  // ports of submodule verbose_ff_3_2
  wire [31 : 0] verbose_ff_3_2_D_IN;
  wire verbose_ff_3_2_CLR,
       verbose_ff_3_2_DEQ,
       verbose_ff_3_2_ENQ,
       verbose_ff_3_2_FULL_N;

  // ports of submodule verbose_ff_4
  wire [31 : 0] verbose_ff_4_D_IN, verbose_ff_4_D_OUT;
  wire verbose_ff_4_CLR,
       verbose_ff_4_DEQ,
       verbose_ff_4_EMPTY_N,
       verbose_ff_4_ENQ,
       verbose_ff_4_FULL_N;

  // ports of submodule writeDataFifo_0
  wire [177 : 0] writeDataFifo_0_D_IN, writeDataFifo_0_D_OUT;
  wire writeDataFifo_0_CLR,
       writeDataFifo_0_DEQ,
       writeDataFifo_0_EMPTY_N,
       writeDataFifo_0_ENQ,
       writeDataFifo_0_FULL_N;

  // ports of submodule xbar_lower_lower_lower_f
  wire [609 : 0] xbar_lower_lower_lower_f_D_IN,
		 xbar_lower_lower_lower_f_D_OUT;
  wire xbar_lower_lower_lower_f_CLR,
       xbar_lower_lower_lower_f_DEQ,
       xbar_lower_lower_lower_f_EMPTY_N,
       xbar_lower_lower_lower_f_ENQ;

  // ports of submodule xbar_lower_lower_merges_1_fi0
  wire [609 : 0] xbar_lower_lower_merges_1_fi0_D_IN,
		 xbar_lower_lower_merges_1_fi0_D_OUT;
  wire xbar_lower_lower_merges_1_fi0_CLR,
       xbar_lower_lower_merges_1_fi0_DEQ,
       xbar_lower_lower_merges_1_fi0_EMPTY_N,
       xbar_lower_lower_merges_1_fi0_ENQ,
       xbar_lower_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_lower_merges_1_fi1
  wire [609 : 0] xbar_lower_lower_merges_1_fi1_D_IN,
		 xbar_lower_lower_merges_1_fi1_D_OUT;
  wire xbar_lower_lower_merges_1_fi1_CLR,
       xbar_lower_lower_merges_1_fi1_DEQ,
       xbar_lower_lower_merges_1_fi1_EMPTY_N,
       xbar_lower_lower_merges_1_fi1_ENQ,
       xbar_lower_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_lower_merges_1_fo
  reg [609 : 0] xbar_lower_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_lower_merges_1_fo_D_OUT;
  wire xbar_lower_lower_merges_1_fo_CLR,
       xbar_lower_lower_merges_1_fo_DEQ,
       xbar_lower_lower_merges_1_fo_EMPTY_N,
       xbar_lower_lower_merges_1_fo_ENQ,
       xbar_lower_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fi0
  wire [609 : 0] xbar_lower_lower_merges_fi0_D_IN,
		 xbar_lower_lower_merges_fi0_D_OUT;
  wire xbar_lower_lower_merges_fi0_CLR,
       xbar_lower_lower_merges_fi0_DEQ,
       xbar_lower_lower_merges_fi0_EMPTY_N,
       xbar_lower_lower_merges_fi0_ENQ,
       xbar_lower_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fi1
  wire [609 : 0] xbar_lower_lower_merges_fi1_D_IN,
		 xbar_lower_lower_merges_fi1_D_OUT;
  wire xbar_lower_lower_merges_fi1_CLR,
       xbar_lower_lower_merges_fi1_DEQ,
       xbar_lower_lower_merges_fi1_EMPTY_N,
       xbar_lower_lower_merges_fi1_ENQ,
       xbar_lower_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_lower_merges_fo
  reg [609 : 0] xbar_lower_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_lower_merges_fo_D_OUT;
  wire xbar_lower_lower_merges_fo_CLR,
       xbar_lower_lower_merges_fo_DEQ,
       xbar_lower_lower_merges_fo_EMPTY_N,
       xbar_lower_lower_merges_fo_ENQ,
       xbar_lower_lower_merges_fo_FULL_N;

  // ports of submodule xbar_lower_lower_upper_f
  wire [609 : 0] xbar_lower_lower_upper_f_D_IN,
		 xbar_lower_lower_upper_f_D_OUT;
  wire xbar_lower_lower_upper_f_CLR,
       xbar_lower_lower_upper_f_DEQ,
       xbar_lower_lower_upper_f_EMPTY_N,
       xbar_lower_lower_upper_f_ENQ;

  // ports of submodule xbar_lower_merges_1_fi0
  wire [609 : 0] xbar_lower_merges_1_fi0_D_IN, xbar_lower_merges_1_fi0_D_OUT;
  wire xbar_lower_merges_1_fi0_CLR,
       xbar_lower_merges_1_fi0_DEQ,
       xbar_lower_merges_1_fi0_EMPTY_N,
       xbar_lower_merges_1_fi0_ENQ,
       xbar_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_1_fi1
  wire [609 : 0] xbar_lower_merges_1_fi1_D_IN, xbar_lower_merges_1_fi1_D_OUT;
  wire xbar_lower_merges_1_fi1_CLR,
       xbar_lower_merges_1_fi1_DEQ,
       xbar_lower_merges_1_fi1_EMPTY_N,
       xbar_lower_merges_1_fi1_ENQ,
       xbar_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_1_fo
  reg [609 : 0] xbar_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_1_fo_D_OUT;
  wire xbar_lower_merges_1_fo_CLR,
       xbar_lower_merges_1_fo_DEQ,
       xbar_lower_merges_1_fo_EMPTY_N,
       xbar_lower_merges_1_fo_ENQ,
       xbar_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_merges_2_fi0
  wire [609 : 0] xbar_lower_merges_2_fi0_D_IN, xbar_lower_merges_2_fi0_D_OUT;
  wire xbar_lower_merges_2_fi0_CLR,
       xbar_lower_merges_2_fi0_DEQ,
       xbar_lower_merges_2_fi0_EMPTY_N,
       xbar_lower_merges_2_fi0_ENQ,
       xbar_lower_merges_2_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_2_fi1
  wire [609 : 0] xbar_lower_merges_2_fi1_D_IN, xbar_lower_merges_2_fi1_D_OUT;
  wire xbar_lower_merges_2_fi1_CLR,
       xbar_lower_merges_2_fi1_DEQ,
       xbar_lower_merges_2_fi1_EMPTY_N,
       xbar_lower_merges_2_fi1_ENQ,
       xbar_lower_merges_2_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_2_fo
  reg [609 : 0] xbar_lower_merges_2_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_2_fo_D_OUT;
  wire xbar_lower_merges_2_fo_CLR,
       xbar_lower_merges_2_fo_DEQ,
       xbar_lower_merges_2_fo_EMPTY_N,
       xbar_lower_merges_2_fo_ENQ,
       xbar_lower_merges_2_fo_FULL_N;

  // ports of submodule xbar_lower_merges_3_fi0
  wire [609 : 0] xbar_lower_merges_3_fi0_D_IN, xbar_lower_merges_3_fi0_D_OUT;
  wire xbar_lower_merges_3_fi0_CLR,
       xbar_lower_merges_3_fi0_DEQ,
       xbar_lower_merges_3_fi0_EMPTY_N,
       xbar_lower_merges_3_fi0_ENQ,
       xbar_lower_merges_3_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_3_fi1
  wire [609 : 0] xbar_lower_merges_3_fi1_D_IN, xbar_lower_merges_3_fi1_D_OUT;
  wire xbar_lower_merges_3_fi1_CLR,
       xbar_lower_merges_3_fi1_DEQ,
       xbar_lower_merges_3_fi1_EMPTY_N,
       xbar_lower_merges_3_fi1_ENQ,
       xbar_lower_merges_3_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_3_fo
  reg [609 : 0] xbar_lower_merges_3_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_3_fo_D_OUT;
  wire xbar_lower_merges_3_fo_CLR,
       xbar_lower_merges_3_fo_DEQ,
       xbar_lower_merges_3_fo_EMPTY_N,
       xbar_lower_merges_3_fo_ENQ,
       xbar_lower_merges_3_fo_FULL_N;

  // ports of submodule xbar_lower_merges_fi0
  wire [609 : 0] xbar_lower_merges_fi0_D_IN, xbar_lower_merges_fi0_D_OUT;
  wire xbar_lower_merges_fi0_CLR,
       xbar_lower_merges_fi0_DEQ,
       xbar_lower_merges_fi0_EMPTY_N,
       xbar_lower_merges_fi0_ENQ,
       xbar_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_fi1
  wire [609 : 0] xbar_lower_merges_fi1_D_IN, xbar_lower_merges_fi1_D_OUT;
  wire xbar_lower_merges_fi1_CLR,
       xbar_lower_merges_fi1_DEQ,
       xbar_lower_merges_fi1_EMPTY_N,
       xbar_lower_merges_fi1_ENQ,
       xbar_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_fo
  reg [609 : 0] xbar_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_fo_D_OUT;
  wire xbar_lower_merges_fo_CLR,
       xbar_lower_merges_fo_DEQ,
       xbar_lower_merges_fo_EMPTY_N,
       xbar_lower_merges_fo_ENQ,
       xbar_lower_merges_fo_FULL_N;

  // ports of submodule xbar_lower_upper_lower_f
  wire [609 : 0] xbar_lower_upper_lower_f_D_IN,
		 xbar_lower_upper_lower_f_D_OUT;
  wire xbar_lower_upper_lower_f_CLR,
       xbar_lower_upper_lower_f_DEQ,
       xbar_lower_upper_lower_f_EMPTY_N,
       xbar_lower_upper_lower_f_ENQ;

  // ports of submodule xbar_lower_upper_merges_1_fi0
  wire [609 : 0] xbar_lower_upper_merges_1_fi0_D_IN,
		 xbar_lower_upper_merges_1_fi0_D_OUT;
  wire xbar_lower_upper_merges_1_fi0_CLR,
       xbar_lower_upper_merges_1_fi0_DEQ,
       xbar_lower_upper_merges_1_fi0_EMPTY_N,
       xbar_lower_upper_merges_1_fi0_ENQ,
       xbar_lower_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_upper_merges_1_fi1
  wire [609 : 0] xbar_lower_upper_merges_1_fi1_D_IN,
		 xbar_lower_upper_merges_1_fi1_D_OUT;
  wire xbar_lower_upper_merges_1_fi1_CLR,
       xbar_lower_upper_merges_1_fi1_DEQ,
       xbar_lower_upper_merges_1_fi1_EMPTY_N,
       xbar_lower_upper_merges_1_fi1_ENQ,
       xbar_lower_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_upper_merges_1_fo
  reg [609 : 0] xbar_lower_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_upper_merges_1_fo_D_OUT;
  wire xbar_lower_upper_merges_1_fo_CLR,
       xbar_lower_upper_merges_1_fo_DEQ,
       xbar_lower_upper_merges_1_fo_EMPTY_N,
       xbar_lower_upper_merges_1_fo_ENQ,
       xbar_lower_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fi0
  wire [609 : 0] xbar_lower_upper_merges_fi0_D_IN,
		 xbar_lower_upper_merges_fi0_D_OUT;
  wire xbar_lower_upper_merges_fi0_CLR,
       xbar_lower_upper_merges_fi0_DEQ,
       xbar_lower_upper_merges_fi0_EMPTY_N,
       xbar_lower_upper_merges_fi0_ENQ,
       xbar_lower_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fi1
  wire [609 : 0] xbar_lower_upper_merges_fi1_D_IN,
		 xbar_lower_upper_merges_fi1_D_OUT;
  wire xbar_lower_upper_merges_fi1_CLR,
       xbar_lower_upper_merges_fi1_DEQ,
       xbar_lower_upper_merges_fi1_EMPTY_N,
       xbar_lower_upper_merges_fi1_ENQ,
       xbar_lower_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_upper_merges_fo
  reg [609 : 0] xbar_lower_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_upper_merges_fo_D_OUT;
  wire xbar_lower_upper_merges_fo_CLR,
       xbar_lower_upper_merges_fo_DEQ,
       xbar_lower_upper_merges_fo_EMPTY_N,
       xbar_lower_upper_merges_fo_ENQ,
       xbar_lower_upper_merges_fo_FULL_N;

  // ports of submodule xbar_lower_upper_upper_f
  wire [609 : 0] xbar_lower_upper_upper_f_D_IN,
		 xbar_lower_upper_upper_f_D_OUT;
  wire xbar_lower_upper_upper_f_CLR,
       xbar_lower_upper_upper_f_DEQ,
       xbar_lower_upper_upper_f_EMPTY_N,
       xbar_lower_upper_upper_f_ENQ,
       xbar_lower_upper_upper_f_FULL_N;

  // ports of submodule xbar_merges_1_fi0
  wire [609 : 0] xbar_merges_1_fi0_D_IN, xbar_merges_1_fi0_D_OUT;
  wire xbar_merges_1_fi0_CLR,
       xbar_merges_1_fi0_DEQ,
       xbar_merges_1_fi0_EMPTY_N,
       xbar_merges_1_fi0_ENQ,
       xbar_merges_1_fi0_FULL_N;

  // ports of submodule xbar_merges_1_fi1
  wire [609 : 0] xbar_merges_1_fi1_D_IN, xbar_merges_1_fi1_D_OUT;
  wire xbar_merges_1_fi1_CLR,
       xbar_merges_1_fi1_DEQ,
       xbar_merges_1_fi1_EMPTY_N,
       xbar_merges_1_fi1_ENQ,
       xbar_merges_1_fi1_FULL_N;

  // ports of submodule xbar_merges_1_fo
  reg [609 : 0] xbar_merges_1_fo_D_IN;
  wire [609 : 0] xbar_merges_1_fo_D_OUT;
  wire xbar_merges_1_fo_CLR,
       xbar_merges_1_fo_DEQ,
       xbar_merges_1_fo_EMPTY_N,
       xbar_merges_1_fo_ENQ,
       xbar_merges_1_fo_FULL_N;

  // ports of submodule xbar_merges_2_fi0
  wire [609 : 0] xbar_merges_2_fi0_D_IN, xbar_merges_2_fi0_D_OUT;
  wire xbar_merges_2_fi0_CLR,
       xbar_merges_2_fi0_DEQ,
       xbar_merges_2_fi0_EMPTY_N,
       xbar_merges_2_fi0_ENQ,
       xbar_merges_2_fi0_FULL_N;

  // ports of submodule xbar_merges_2_fi1
  wire [609 : 0] xbar_merges_2_fi1_D_IN, xbar_merges_2_fi1_D_OUT;
  wire xbar_merges_2_fi1_CLR,
       xbar_merges_2_fi1_DEQ,
       xbar_merges_2_fi1_EMPTY_N,
       xbar_merges_2_fi1_ENQ,
       xbar_merges_2_fi1_FULL_N;

  // ports of submodule xbar_merges_2_fo
  reg [609 : 0] xbar_merges_2_fo_D_IN;
  wire [609 : 0] xbar_merges_2_fo_D_OUT;
  wire xbar_merges_2_fo_CLR,
       xbar_merges_2_fo_DEQ,
       xbar_merges_2_fo_EMPTY_N,
       xbar_merges_2_fo_ENQ,
       xbar_merges_2_fo_FULL_N;

  // ports of submodule xbar_merges_3_fi0
  wire [609 : 0] xbar_merges_3_fi0_D_IN, xbar_merges_3_fi0_D_OUT;
  wire xbar_merges_3_fi0_CLR,
       xbar_merges_3_fi0_DEQ,
       xbar_merges_3_fi0_EMPTY_N,
       xbar_merges_3_fi0_ENQ,
       xbar_merges_3_fi0_FULL_N;

  // ports of submodule xbar_merges_3_fi1
  wire [609 : 0] xbar_merges_3_fi1_D_IN, xbar_merges_3_fi1_D_OUT;
  wire xbar_merges_3_fi1_CLR,
       xbar_merges_3_fi1_DEQ,
       xbar_merges_3_fi1_EMPTY_N,
       xbar_merges_3_fi1_ENQ,
       xbar_merges_3_fi1_FULL_N;

  // ports of submodule xbar_merges_3_fo
  reg [609 : 0] xbar_merges_3_fo_D_IN;
  wire [609 : 0] xbar_merges_3_fo_D_OUT;
  wire xbar_merges_3_fo_CLR,
       xbar_merges_3_fo_DEQ,
       xbar_merges_3_fo_EMPTY_N,
       xbar_merges_3_fo_ENQ,
       xbar_merges_3_fo_FULL_N;

  // ports of submodule xbar_merges_4_fi0
  wire [609 : 0] xbar_merges_4_fi0_D_IN, xbar_merges_4_fi0_D_OUT;
  wire xbar_merges_4_fi0_CLR,
       xbar_merges_4_fi0_DEQ,
       xbar_merges_4_fi0_EMPTY_N,
       xbar_merges_4_fi0_ENQ,
       xbar_merges_4_fi0_FULL_N;

  // ports of submodule xbar_merges_4_fi1
  wire [609 : 0] xbar_merges_4_fi1_D_IN, xbar_merges_4_fi1_D_OUT;
  wire xbar_merges_4_fi1_CLR,
       xbar_merges_4_fi1_DEQ,
       xbar_merges_4_fi1_EMPTY_N,
       xbar_merges_4_fi1_ENQ,
       xbar_merges_4_fi1_FULL_N;

  // ports of submodule xbar_merges_4_fo
  reg [609 : 0] xbar_merges_4_fo_D_IN;
  wire [609 : 0] xbar_merges_4_fo_D_OUT;
  wire xbar_merges_4_fo_CLR,
       xbar_merges_4_fo_DEQ,
       xbar_merges_4_fo_EMPTY_N,
       xbar_merges_4_fo_ENQ,
       xbar_merges_4_fo_FULL_N;

  // ports of submodule xbar_merges_5_fi0
  wire [609 : 0] xbar_merges_5_fi0_D_IN, xbar_merges_5_fi0_D_OUT;
  wire xbar_merges_5_fi0_CLR,
       xbar_merges_5_fi0_DEQ,
       xbar_merges_5_fi0_EMPTY_N,
       xbar_merges_5_fi0_ENQ,
       xbar_merges_5_fi0_FULL_N;

  // ports of submodule xbar_merges_5_fi1
  wire [609 : 0] xbar_merges_5_fi1_D_IN, xbar_merges_5_fi1_D_OUT;
  wire xbar_merges_5_fi1_CLR,
       xbar_merges_5_fi1_DEQ,
       xbar_merges_5_fi1_EMPTY_N,
       xbar_merges_5_fi1_ENQ,
       xbar_merges_5_fi1_FULL_N;

  // ports of submodule xbar_merges_5_fo
  reg [609 : 0] xbar_merges_5_fo_D_IN;
  wire [609 : 0] xbar_merges_5_fo_D_OUT;
  wire xbar_merges_5_fo_CLR,
       xbar_merges_5_fo_DEQ,
       xbar_merges_5_fo_EMPTY_N,
       xbar_merges_5_fo_ENQ,
       xbar_merges_5_fo_FULL_N;

  // ports of submodule xbar_merges_6_fi0
  wire [609 : 0] xbar_merges_6_fi0_D_IN, xbar_merges_6_fi0_D_OUT;
  wire xbar_merges_6_fi0_CLR,
       xbar_merges_6_fi0_DEQ,
       xbar_merges_6_fi0_EMPTY_N,
       xbar_merges_6_fi0_ENQ,
       xbar_merges_6_fi0_FULL_N;

  // ports of submodule xbar_merges_6_fi1
  wire [609 : 0] xbar_merges_6_fi1_D_IN, xbar_merges_6_fi1_D_OUT;
  wire xbar_merges_6_fi1_CLR,
       xbar_merges_6_fi1_DEQ,
       xbar_merges_6_fi1_EMPTY_N,
       xbar_merges_6_fi1_ENQ,
       xbar_merges_6_fi1_FULL_N;

  // ports of submodule xbar_merges_6_fo
  reg [609 : 0] xbar_merges_6_fo_D_IN;
  wire [609 : 0] xbar_merges_6_fo_D_OUT;
  wire xbar_merges_6_fo_CLR,
       xbar_merges_6_fo_DEQ,
       xbar_merges_6_fo_EMPTY_N,
       xbar_merges_6_fo_ENQ,
       xbar_merges_6_fo_FULL_N;

  // ports of submodule xbar_merges_7_fi0
  wire [609 : 0] xbar_merges_7_fi0_D_IN, xbar_merges_7_fi0_D_OUT;
  wire xbar_merges_7_fi0_CLR,
       xbar_merges_7_fi0_DEQ,
       xbar_merges_7_fi0_EMPTY_N,
       xbar_merges_7_fi0_ENQ,
       xbar_merges_7_fi0_FULL_N;

  // ports of submodule xbar_merges_7_fi1
  wire [609 : 0] xbar_merges_7_fi1_D_IN, xbar_merges_7_fi1_D_OUT;
  wire xbar_merges_7_fi1_CLR,
       xbar_merges_7_fi1_DEQ,
       xbar_merges_7_fi1_EMPTY_N,
       xbar_merges_7_fi1_ENQ,
       xbar_merges_7_fi1_FULL_N;

  // ports of submodule xbar_merges_7_fo
  reg [609 : 0] xbar_merges_7_fo_D_IN;
  wire [609 : 0] xbar_merges_7_fo_D_OUT;
  wire xbar_merges_7_fo_CLR,
       xbar_merges_7_fo_DEQ,
       xbar_merges_7_fo_EMPTY_N,
       xbar_merges_7_fo_ENQ,
       xbar_merges_7_fo_FULL_N;

  // ports of submodule xbar_merges_fi0
  wire [609 : 0] xbar_merges_fi0_D_IN, xbar_merges_fi0_D_OUT;
  wire xbar_merges_fi0_CLR,
       xbar_merges_fi0_DEQ,
       xbar_merges_fi0_EMPTY_N,
       xbar_merges_fi0_ENQ,
       xbar_merges_fi0_FULL_N;

  // ports of submodule xbar_merges_fi1
  wire [609 : 0] xbar_merges_fi1_D_IN, xbar_merges_fi1_D_OUT;
  wire xbar_merges_fi1_CLR,
       xbar_merges_fi1_DEQ,
       xbar_merges_fi1_EMPTY_N,
       xbar_merges_fi1_ENQ,
       xbar_merges_fi1_FULL_N;

  // ports of submodule xbar_merges_fo
  reg [609 : 0] xbar_merges_fo_D_IN;
  wire [609 : 0] xbar_merges_fo_D_OUT;
  wire xbar_merges_fo_CLR,
       xbar_merges_fo_DEQ,
       xbar_merges_fo_EMPTY_N,
       xbar_merges_fo_ENQ,
       xbar_merges_fo_FULL_N;

  // ports of submodule xbar_upper_lower_lower_f
  wire [609 : 0] xbar_upper_lower_lower_f_D_IN,
		 xbar_upper_lower_lower_f_D_OUT;
  wire xbar_upper_lower_lower_f_CLR,
       xbar_upper_lower_lower_f_DEQ,
       xbar_upper_lower_lower_f_EMPTY_N,
       xbar_upper_lower_lower_f_ENQ,
       xbar_upper_lower_lower_f_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fi0
  wire [609 : 0] xbar_upper_lower_merges_1_fi0_D_IN,
		 xbar_upper_lower_merges_1_fi0_D_OUT;
  wire xbar_upper_lower_merges_1_fi0_CLR,
       xbar_upper_lower_merges_1_fi0_DEQ,
       xbar_upper_lower_merges_1_fi0_EMPTY_N,
       xbar_upper_lower_merges_1_fi0_ENQ,
       xbar_upper_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fi1
  wire [609 : 0] xbar_upper_lower_merges_1_fi1_D_IN,
		 xbar_upper_lower_merges_1_fi1_D_OUT;
  wire xbar_upper_lower_merges_1_fi1_CLR,
       xbar_upper_lower_merges_1_fi1_DEQ,
       xbar_upper_lower_merges_1_fi1_EMPTY_N,
       xbar_upper_lower_merges_1_fi1_ENQ,
       xbar_upper_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_lower_merges_1_fo
  reg [609 : 0] xbar_upper_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_lower_merges_1_fo_D_OUT;
  wire xbar_upper_lower_merges_1_fo_CLR,
       xbar_upper_lower_merges_1_fo_DEQ,
       xbar_upper_lower_merges_1_fo_EMPTY_N,
       xbar_upper_lower_merges_1_fo_ENQ,
       xbar_upper_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fi0
  wire [609 : 0] xbar_upper_lower_merges_fi0_D_IN,
		 xbar_upper_lower_merges_fi0_D_OUT;
  wire xbar_upper_lower_merges_fi0_CLR,
       xbar_upper_lower_merges_fi0_DEQ,
       xbar_upper_lower_merges_fi0_EMPTY_N,
       xbar_upper_lower_merges_fi0_ENQ,
       xbar_upper_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fi1
  wire [609 : 0] xbar_upper_lower_merges_fi1_D_IN,
		 xbar_upper_lower_merges_fi1_D_OUT;
  wire xbar_upper_lower_merges_fi1_CLR,
       xbar_upper_lower_merges_fi1_DEQ,
       xbar_upper_lower_merges_fi1_EMPTY_N,
       xbar_upper_lower_merges_fi1_ENQ,
       xbar_upper_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_lower_merges_fo
  reg [609 : 0] xbar_upper_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_lower_merges_fo_D_OUT;
  wire xbar_upper_lower_merges_fo_CLR,
       xbar_upper_lower_merges_fo_DEQ,
       xbar_upper_lower_merges_fo_EMPTY_N,
       xbar_upper_lower_merges_fo_ENQ,
       xbar_upper_lower_merges_fo_FULL_N;

  // ports of submodule xbar_upper_lower_upper_f
  wire [609 : 0] xbar_upper_lower_upper_f_D_IN,
		 xbar_upper_lower_upper_f_D_OUT;
  wire xbar_upper_lower_upper_f_CLR,
       xbar_upper_lower_upper_f_DEQ,
       xbar_upper_lower_upper_f_EMPTY_N,
       xbar_upper_lower_upper_f_ENQ,
       xbar_upper_lower_upper_f_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi0
  wire [609 : 0] xbar_upper_merges_1_fi0_D_IN, xbar_upper_merges_1_fi0_D_OUT;
  wire xbar_upper_merges_1_fi0_CLR,
       xbar_upper_merges_1_fi0_DEQ,
       xbar_upper_merges_1_fi0_EMPTY_N,
       xbar_upper_merges_1_fi0_ENQ,
       xbar_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi1
  wire [609 : 0] xbar_upper_merges_1_fi1_D_IN, xbar_upper_merges_1_fi1_D_OUT;
  wire xbar_upper_merges_1_fi1_CLR,
       xbar_upper_merges_1_fi1_DEQ,
       xbar_upper_merges_1_fi1_EMPTY_N,
       xbar_upper_merges_1_fi1_ENQ,
       xbar_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_1_fo
  reg [609 : 0] xbar_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_1_fo_D_OUT;
  wire xbar_upper_merges_1_fo_CLR,
       xbar_upper_merges_1_fo_DEQ,
       xbar_upper_merges_1_fo_EMPTY_N,
       xbar_upper_merges_1_fo_ENQ,
       xbar_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_merges_2_fi0
  wire [609 : 0] xbar_upper_merges_2_fi0_D_IN, xbar_upper_merges_2_fi0_D_OUT;
  wire xbar_upper_merges_2_fi0_CLR,
       xbar_upper_merges_2_fi0_DEQ,
       xbar_upper_merges_2_fi0_EMPTY_N,
       xbar_upper_merges_2_fi0_ENQ,
       xbar_upper_merges_2_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_2_fi1
  wire [609 : 0] xbar_upper_merges_2_fi1_D_IN, xbar_upper_merges_2_fi1_D_OUT;
  wire xbar_upper_merges_2_fi1_CLR,
       xbar_upper_merges_2_fi1_DEQ,
       xbar_upper_merges_2_fi1_EMPTY_N,
       xbar_upper_merges_2_fi1_ENQ,
       xbar_upper_merges_2_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_2_fo
  reg [609 : 0] xbar_upper_merges_2_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_2_fo_D_OUT;
  wire xbar_upper_merges_2_fo_CLR,
       xbar_upper_merges_2_fo_DEQ,
       xbar_upper_merges_2_fo_EMPTY_N,
       xbar_upper_merges_2_fo_ENQ,
       xbar_upper_merges_2_fo_FULL_N;

  // ports of submodule xbar_upper_merges_3_fi0
  wire [609 : 0] xbar_upper_merges_3_fi0_D_IN, xbar_upper_merges_3_fi0_D_OUT;
  wire xbar_upper_merges_3_fi0_CLR,
       xbar_upper_merges_3_fi0_DEQ,
       xbar_upper_merges_3_fi0_EMPTY_N,
       xbar_upper_merges_3_fi0_ENQ,
       xbar_upper_merges_3_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_3_fi1
  wire [609 : 0] xbar_upper_merges_3_fi1_D_IN, xbar_upper_merges_3_fi1_D_OUT;
  wire xbar_upper_merges_3_fi1_CLR,
       xbar_upper_merges_3_fi1_DEQ,
       xbar_upper_merges_3_fi1_EMPTY_N,
       xbar_upper_merges_3_fi1_ENQ,
       xbar_upper_merges_3_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_3_fo
  reg [609 : 0] xbar_upper_merges_3_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_3_fo_D_OUT;
  wire xbar_upper_merges_3_fo_CLR,
       xbar_upper_merges_3_fo_DEQ,
       xbar_upper_merges_3_fo_EMPTY_N,
       xbar_upper_merges_3_fo_ENQ,
       xbar_upper_merges_3_fo_FULL_N;

  // ports of submodule xbar_upper_merges_fi0
  wire [609 : 0] xbar_upper_merges_fi0_D_IN, xbar_upper_merges_fi0_D_OUT;
  wire xbar_upper_merges_fi0_CLR,
       xbar_upper_merges_fi0_DEQ,
       xbar_upper_merges_fi0_EMPTY_N,
       xbar_upper_merges_fi0_ENQ,
       xbar_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_fi1
  wire [609 : 0] xbar_upper_merges_fi1_D_IN, xbar_upper_merges_fi1_D_OUT;
  wire xbar_upper_merges_fi1_CLR,
       xbar_upper_merges_fi1_DEQ,
       xbar_upper_merges_fi1_EMPTY_N,
       xbar_upper_merges_fi1_ENQ,
       xbar_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_fo
  reg [609 : 0] xbar_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_fo_D_OUT;
  wire xbar_upper_merges_fo_CLR,
       xbar_upper_merges_fo_DEQ,
       xbar_upper_merges_fo_EMPTY_N,
       xbar_upper_merges_fo_ENQ,
       xbar_upper_merges_fo_FULL_N;

  // ports of submodule xbar_upper_upper_lower_f
  wire [609 : 0] xbar_upper_upper_lower_f_D_IN,
		 xbar_upper_upper_lower_f_D_OUT;
  wire xbar_upper_upper_lower_f_CLR,
       xbar_upper_upper_lower_f_DEQ,
       xbar_upper_upper_lower_f_EMPTY_N,
       xbar_upper_upper_lower_f_ENQ,
       xbar_upper_upper_lower_f_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fi0
  wire [609 : 0] xbar_upper_upper_merges_1_fi0_D_IN,
		 xbar_upper_upper_merges_1_fi0_D_OUT;
  wire xbar_upper_upper_merges_1_fi0_CLR,
       xbar_upper_upper_merges_1_fi0_DEQ,
       xbar_upper_upper_merges_1_fi0_EMPTY_N,
       xbar_upper_upper_merges_1_fi0_ENQ,
       xbar_upper_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fi1
  wire [609 : 0] xbar_upper_upper_merges_1_fi1_D_IN,
		 xbar_upper_upper_merges_1_fi1_D_OUT;
  wire xbar_upper_upper_merges_1_fi1_CLR,
       xbar_upper_upper_merges_1_fi1_DEQ,
       xbar_upper_upper_merges_1_fi1_EMPTY_N,
       xbar_upper_upper_merges_1_fi1_ENQ,
       xbar_upper_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_upper_merges_1_fo
  reg [609 : 0] xbar_upper_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_upper_merges_1_fo_D_OUT;
  wire xbar_upper_upper_merges_1_fo_CLR,
       xbar_upper_upper_merges_1_fo_DEQ,
       xbar_upper_upper_merges_1_fo_EMPTY_N,
       xbar_upper_upper_merges_1_fo_ENQ,
       xbar_upper_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fi0
  wire [609 : 0] xbar_upper_upper_merges_fi0_D_IN,
		 xbar_upper_upper_merges_fi0_D_OUT;
  wire xbar_upper_upper_merges_fi0_CLR,
       xbar_upper_upper_merges_fi0_DEQ,
       xbar_upper_upper_merges_fi0_EMPTY_N,
       xbar_upper_upper_merges_fi0_ENQ,
       xbar_upper_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fi1
  wire [609 : 0] xbar_upper_upper_merges_fi1_D_IN,
		 xbar_upper_upper_merges_fi1_D_OUT;
  wire xbar_upper_upper_merges_fi1_CLR,
       xbar_upper_upper_merges_fi1_DEQ,
       xbar_upper_upper_merges_fi1_EMPTY_N,
       xbar_upper_upper_merges_fi1_ENQ,
       xbar_upper_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_upper_merges_fo
  reg [609 : 0] xbar_upper_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_upper_merges_fo_D_OUT;
  wire xbar_upper_upper_merges_fo_CLR,
       xbar_upper_upper_merges_fo_DEQ,
       xbar_upper_upper_merges_fo_EMPTY_N,
       xbar_upper_upper_merges_fo_ENQ,
       xbar_upper_upper_merges_fo_FULL_N;

  // ports of submodule xbar_upper_upper_upper_f
  wire [609 : 0] xbar_upper_upper_upper_f_D_IN,
		 xbar_upper_upper_upper_f_D_OUT;
  wire xbar_upper_upper_upper_f_CLR,
       xbar_upper_upper_upper_f_DEQ,
       xbar_upper_upper_upper_f_EMPTY_N,
       xbar_upper_upper_upper_f_ENQ,
       xbar_upper_upper_upper_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut_15,
       CAN_FIRE_RL_mkConnectionGetPut_16,
       CAN_FIRE_RL_mkConnectionGetPut_17,
       CAN_FIRE_RL_mkConnectionGetPut_18,
       CAN_FIRE_RL_mkConnectionGetPut_19,
       CAN_FIRE_RL_mkConnectionGetPut_69,
       CAN_FIRE_RL_mkConnectionGetPut_70,
       CAN_FIRE_RL_mkConnectionGetPut_71,
       CAN_FIRE_RL_mkConnectionGetPut_72,
       WILL_FIRE_RL_hostchan_0_packetReadInProgress,
       WILL_FIRE_RL_hostchan_1_packetReadInProgress,
       WILL_FIRE_RL_hostchan_2_packetReadInProgress,
       WILL_FIRE_RL_hostchan_3_packetReadInProgress,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_0_writeData,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_1_writeData,
       WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_2_writeData,
       WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_3_writeData,
       WILL_FIRE_RL_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_0_commit_packet,
       WILL_FIRE_RL_pktBuff_0_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_0_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_0_enq_stage1,
       WILL_FIRE_RL_pktBuff_0_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_0_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_1_commit_packet,
       WILL_FIRE_RL_pktBuff_1_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_1_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_1_enq_stage1,
       WILL_FIRE_RL_pktBuff_1_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_1_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_2_commit_packet,
       WILL_FIRE_RL_pktBuff_2_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_2_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_2_enq_stage1,
       WILL_FIRE_RL_pktBuff_2_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_2_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_3_commit_packet,
       WILL_FIRE_RL_pktBuff_3_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_3_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_3_enq_stage1,
       WILL_FIRE_RL_pktBuff_3_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_3_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_4_packetReadInProgress,
       WILL_FIRE_RL_ringToMac_0_cross_clocking,
       WILL_FIRE_RL_ringToMac_0_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_0_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_1_cross_clocking,
       WILL_FIRE_RL_ringToMac_1_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_1_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_2_cross_clocking,
       WILL_FIRE_RL_ringToMac_2_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_2_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_3_cross_clocking,
       WILL_FIRE_RL_ringToMac_3_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_3_process_outgoing_packet,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_lower_route,
       WILL_FIRE_RL_xbar_lower_lower_route_1,
       WILL_FIRE_RL_xbar_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_route,
       WILL_FIRE_RL_xbar_lower_route_1,
       WILL_FIRE_RL_xbar_lower_route_2,
       WILL_FIRE_RL_xbar_lower_route_3,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_upper_route,
       WILL_FIRE_RL_xbar_lower_upper_route_1,
       WILL_FIRE_RL_xbar_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_4_both_have_data,
       WILL_FIRE_RL_xbar_merges_4_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_4_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_5_both_have_data,
       WILL_FIRE_RL_xbar_merges_5_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_5_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_6_both_have_data,
       WILL_FIRE_RL_xbar_merges_6_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_6_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_7_both_have_data,
       WILL_FIRE_RL_xbar_merges_7_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_7_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_both_have_data,
       WILL_FIRE_RL_xbar_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_route,
       WILL_FIRE_RL_xbar_route_1,
       WILL_FIRE_RL_xbar_route_2,
       WILL_FIRE_RL_xbar_route_3,
       WILL_FIRE_RL_xbar_route_4,
       WILL_FIRE_RL_xbar_route_5,
       WILL_FIRE_RL_xbar_route_6,
       WILL_FIRE_RL_xbar_route_7,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_lower_route,
       WILL_FIRE_RL_xbar_upper_lower_route_1,
       WILL_FIRE_RL_xbar_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_route,
       WILL_FIRE_RL_xbar_upper_route_1,
       WILL_FIRE_RL_xbar_upper_route_2,
       WILL_FIRE_RL_xbar_upper_route_3,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_upper_route,
       WILL_FIRE_RL_xbar_upper_upper_route_1;

  // inputs to muxes for submodule ports
  wire [609 : 0] MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1,
		 MUX_xbar_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_merges_4_fo_enq_1__VAL_1,
		 MUX_xbar_merges_5_fo_enq_1__VAL_1,
		 MUX_xbar_merges_6_fo_enq_1__VAL_1,
		 MUX_xbar_merges_7_fo_enq_1__VAL_1,
		 MUX_xbar_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1;
  wire [177 : 0] MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2;
  wire [63 : 0] MUX_ringToMac_0_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_1_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_2_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_3_idle_cycles_write_1__VAL_1;
  wire [7 : 0] MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1;
  wire MUX_hostchan_0_readStarted_write_1__SEL_1,
       MUX_hostchan_0_readStarted_write_1__SEL_2,
       MUX_hostchan_1_readStarted_write_1__SEL_1,
       MUX_hostchan_1_readStarted_write_1__SEL_2,
       MUX_hostchan_2_readStarted_write_1__SEL_1,
       MUX_hostchan_2_readStarted_write_1__SEL_2,
       MUX_hostchan_3_readStarted_write_1__SEL_1,
       MUX_hostchan_3_readStarted_write_1__SEL_2,
       MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1,
       MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_0_outPacket_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_2,
       MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_1_outPacket_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_2,
       MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_2_outPacket_write_1__SEL_1,
       MUX_pktBuff_2_readStarted_write_1__SEL_1,
       MUX_pktBuff_2_readStarted_write_1__SEL_2,
       MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_3_outPacket_write_1__SEL_1,
       MUX_pktBuff_3_readStarted_write_1__SEL_1,
       MUX_pktBuff_3_readStarted_write_1__SEL_2,
       MUX_pktBuff_4_readStarted_write_1__SEL_1,
       MUX_pktBuff_4_readStarted_write_1__SEL_2,
       MUX_readStarted_0_write_1__SEL_1,
       MUX_readStarted_0_write_1__SEL_2,
       MUX_ringToMac_0_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_1_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_2_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_3_idle_cycles_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1,
       MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_4_fo_enq_1__SEL_1,
       MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_5_fo_enq_1__SEL_1,
       MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_6_fo_enq_1__SEL_1,
       MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_7_fo_enq_1__SEL_1,
       MUX_xbar_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v___1__h223601,
	       v___1__h223858,
	       v___1__h224118,
	       v___1__h224378,
	       v__h13766,
	       v__h175717,
	       v__h175784,
	       v__h176764,
	       v__h176830,
	       v__h177413,
	       v__h177472,
	       v__h177829,
	       v__h177882,
	       v__h178924,
	       v__h178990,
	       v__h179970,
	       v__h180036,
	       v__h180619,
	       v__h180678,
	       v__h181035,
	       v__h181088,
	       v__h181892,
	       v__h181958,
	       v__h182938,
	       v__h183004,
	       v__h183984,
	       v__h184050,
	       v__h185030,
	       v__h185096,
	       v__h185710,
	       v__h185769,
	       v__h186143,
	       v__h186197,
	       v__h186591,
	       v__h186644,
	       v__h187017,
	       v__h187070,
	       v__h188137,
	       v__h188203,
	       v__h189183,
	       v__h189249,
	       v__h189832,
	       v__h189891,
	       v__h190248,
	       v__h190301,
	       v__h191343,
	       v__h191409,
	       v__h192389,
	       v__h192455,
	       v__h193038,
	       v__h193097,
	       v__h193454,
	       v__h193507,
	       v__h194311,
	       v__h194377,
	       v__h195357,
	       v__h195423,
	       v__h196403,
	       v__h196469,
	       v__h197449,
	       v__h197515,
	       v__h198129,
	       v__h198188,
	       v__h198562,
	       v__h198616,
	       v__h199010,
	       v__h199063,
	       v__h199436,
	       v__h199489,
	       v__h200302,
	       v__h200368,
	       v__h201348,
	       v__h201414,
	       v__h202394,
	       v__h202460,
	       v__h203440,
	       v__h203506,
	       v__h204486,
	       v__h204552,
	       v__h205532,
	       v__h205598,
	       v__h206578,
	       v__h206644,
	       v__h207624,
	       v__h207690,
	       v__h208328,
	       v__h208387,
	       v__h208767,
	       v__h208821,
	       v__h209213,
	       v__h209267,
	       v__h209671,
	       v__h209725,
	       v__h210155,
	       v__h210208,
	       v__h210593,
	       v__h210646,
	       v__h211043,
	       v__h211096,
	       v__h211505,
	       v__h211558,
	       v__h22008,
	       v__h256636,
	       v__h30250,
	       v__h38492;
  wire [127 : 0] x_data__h12076,
		 x_data__h13034,
		 x_data__h20318,
		 x_data__h21276,
		 x_data__h28560,
		 x_data__h29518,
		 x_data__h36802,
		 x_data__h37760;
  wire [63 : 0] y__h103534,
		y__h103621,
		y__h110566,
		y__h11652,
		y__h122168,
		y__h122255,
		y__h129200,
		y__h140802,
		y__h140889,
		y__h147834,
		y__h19894,
		y__h28136,
		y__h36378,
		y__h84897,
		y__h84984,
		y__h91932;
  wire [15 : 0] newPacketLen__h116713,
		newPacketLen__h135347,
		newPacketLen__h79442,
		newPacketLen__h98079,
		x_mask__h13035,
		x_mask__h21277,
		x_mask__h29519,
		x_mask__h37761;
  wire [7 : 0] IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499,
	       mask__h110204,
	       mask__h110313,
	       mask__h128838,
	       mask__h128947,
	       mask__h147472,
	       mask__h147581,
	       mask__h91570,
	       mask__h91679;
  wire [4 : 0] x__h116802,
	       x__h116817,
	       x__h116829,
	       x__h116841,
	       x__h116853,
	       x__h116865,
	       x__h116877,
	       x__h116889,
	       x__h116901,
	       x__h116913,
	       x__h116925,
	       x__h116937,
	       x__h116949,
	       x__h116961,
	       x__h116973,
	       x__h116985,
	       x__h135436,
	       x__h135451,
	       x__h135463,
	       x__h135475,
	       x__h135487,
	       x__h135499,
	       x__h135511,
	       x__h135523,
	       x__h135535,
	       x__h135547,
	       x__h135559,
	       x__h135571,
	       x__h135583,
	       x__h135595,
	       x__h135607,
	       x__h135619,
	       x__h79531,
	       x__h79546,
	       x__h79558,
	       x__h79570,
	       x__h79582,
	       x__h79594,
	       x__h79606,
	       x__h79618,
	       x__h79630,
	       x__h79642,
	       x__h79654,
	       x__h79666,
	       x__h79678,
	       x__h79690,
	       x__h79702,
	       x__h79714,
	       x__h98168,
	       x__h98183,
	       x__h98195,
	       x__h98207,
	       x__h98219,
	       x__h98231,
	       x__h98243,
	       x__h98255,
	       x__h98267,
	       x__h98279,
	       x__h98291,
	       x__h98303,
	       x__h98315,
	       x__h98327,
	       x__h98339,
	       x__h98351,
	       y__h116818,
	       y__h116830,
	       y__h116842,
	       y__h116854,
	       y__h116866,
	       y__h116878,
	       y__h116890,
	       y__h116902,
	       y__h116914,
	       y__h116926,
	       y__h116938,
	       y__h116950,
	       y__h116962,
	       y__h116974,
	       y__h116986,
	       y__h135452,
	       y__h135464,
	       y__h135476,
	       y__h135488,
	       y__h135500,
	       y__h135512,
	       y__h135524,
	       y__h135536,
	       y__h135548,
	       y__h135560,
	       y__h135572,
	       y__h135584,
	       y__h135596,
	       y__h135608,
	       y__h135620,
	       y__h79547,
	       y__h79559,
	       y__h79571,
	       y__h79583,
	       y__h79595,
	       y__h79607,
	       y__h79619,
	       y__h79631,
	       y__h79643,
	       y__h79655,
	       y__h79667,
	       y__h79679,
	       y__h79691,
	       y__h79703,
	       y__h79715,
	       y__h98184,
	       y__h98196,
	       y__h98208,
	       y__h98220,
	       y__h98232,
	       y__h98244,
	       y__h98256,
	       y__h98268,
	       y__h98280,
	       y__h98292,
	       y__h98304,
	       y__h98316,
	       y__h98328,
	       y__h98340,
	       y__h98352;
  wire [3 : 0] x__h110570,
	       x__h110586,
	       x__h110598,
	       x__h110610,
	       x__h110622,
	       x__h110634,
	       x__h110646,
	       x__h110658,
	       x__h11655,
	       x__h11670,
	       x__h11682,
	       x__h11694,
	       x__h11706,
	       x__h11718,
	       x__h11730,
	       x__h11742,
	       x__h129204,
	       x__h129220,
	       x__h129232,
	       x__h129244,
	       x__h129256,
	       x__h129268,
	       x__h129280,
	       x__h129292,
	       x__h147838,
	       x__h147854,
	       x__h147866,
	       x__h147878,
	       x__h147890,
	       x__h147902,
	       x__h147914,
	       x__h147926,
	       x__h19897,
	       x__h19912,
	       x__h19924,
	       x__h19936,
	       x__h19948,
	       x__h19960,
	       x__h19972,
	       x__h19984,
	       x__h28139,
	       x__h28154,
	       x__h28166,
	       x__h28178,
	       x__h28190,
	       x__h28202,
	       x__h28214,
	       x__h28226,
	       x__h36381,
	       x__h36396,
	       x__h36408,
	       x__h36420,
	       x__h36432,
	       x__h36444,
	       x__h36456,
	       x__h36468,
	       x__h91936,
	       x__h91952,
	       x__h91964,
	       x__h91976,
	       x__h91988,
	       x__h92000,
	       x__h92012,
	       x__h92024,
	       y__h110587,
	       y__h110599,
	       y__h110611,
	       y__h110623,
	       y__h110635,
	       y__h110647,
	       y__h110659,
	       y__h11671,
	       y__h11683,
	       y__h11695,
	       y__h11707,
	       y__h11719,
	       y__h11731,
	       y__h11743,
	       y__h129221,
	       y__h129233,
	       y__h129245,
	       y__h129257,
	       y__h129269,
	       y__h129281,
	       y__h129293,
	       y__h147855,
	       y__h147867,
	       y__h147879,
	       y__h147891,
	       y__h147903,
	       y__h147915,
	       y__h147927,
	       y__h19913,
	       y__h19925,
	       y__h19937,
	       y__h19949,
	       y__h19961,
	       y__h19973,
	       y__h19985,
	       y__h28155,
	       y__h28167,
	       y__h28179,
	       y__h28191,
	       y__h28203,
	       y__h28215,
	       y__h28227,
	       y__h36397,
	       y__h36409,
	       y__h36421,
	       y__h36433,
	       y__h36445,
	       y__h36457,
	       y__h36469,
	       y__h91953,
	       y__h91965,
	       y__h91977,
	       y__h91989,
	       y__h92001,
	       y__h92013,
	       y__h92025;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_909_PLU_ETC___d1915,
	       pktBuff_1_memBuffer_serverAdapterB_cnt_353_PLU_ETC___d2359,
	       pktBuff_2_memBuffer_serverAdapterB_cnt_797_PLU_ETC___d2803,
	       pktBuff_3_memBuffer_serverAdapterB_cnt_241_PLU_ETC___d3247;
  wire [1 : 0] ab__h115743,
	       ab__h134377,
	       ab__h78472,
	       ab__h97109,
	       x__h103706,
	       x__h104158,
	       x__h107951,
	       x__h108330,
	       x__h122340,
	       x__h122792,
	       x__h126585,
	       x__h126964,
	       x__h140974,
	       x__h141426,
	       x__h145219,
	       x__h145598,
	       x__h85069,
	       x__h85524,
	       x__h89317,
	       x__h89696;
  wire IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5234,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5235,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5260,
       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5265,
       IF_xbar_lower_lower_merges_1_routeFrom_222_BIT_ETC___d5255,
       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5159,
       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5160,
       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173,
       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5185,
       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5190,
       IF_xbar_lower_lower_merges_routeFrom_147_BIT_0_ETC___d5180,
       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_NOT_ETC___d5406,
       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5407,
       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420,
       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5432,
       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5437,
       IF_xbar_lower_merges_1_routeFrom_394_BIT_0_396_ETC___d5427,
       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_NOT_ETC___d5481,
       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5482,
       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495,
       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5507,
       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5512,
       IF_xbar_lower_merges_2_routeFrom_469_BIT_0_471_ETC___d5502,
       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_NOT_ETC___d5556,
       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5557,
       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570,
       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5582,
       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5587,
       IF_xbar_lower_merges_3_routeFrom_544_BIT_0_546_ETC___d5577,
       IF_xbar_lower_merges_fi0HasPrio_324_THEN_NOT_x_ETC___d5331,
       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5332,
       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345,
       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5357,
       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5362,
       IF_xbar_lower_merges_routeFrom_319_BIT_0_321_T_ETC___d5352,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5062,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5063,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5088,
       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5093,
       IF_xbar_lower_upper_merges_1_routeFrom_050_BIT_ETC___d5083,
       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4987,
       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4988,
       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001,
       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5013,
       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5018,
       IF_xbar_lower_upper_merges_routeFrom_975_BIT_0_ETC___d5008,
       IF_xbar_merges_1_fi0HasPrio_743_THEN_NOT_xbar__ETC___d5750,
       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5751,
       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764,
       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5776,
       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5781,
       IF_xbar_merges_1_routeFrom_738_BIT_0_740_THEN__ETC___d5771,
       IF_xbar_merges_2_fi0HasPrio_818_THEN_NOT_xbar__ETC___d5825,
       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5826,
       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839,
       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5851,
       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5856,
       IF_xbar_merges_2_routeFrom_813_BIT_0_815_THEN__ETC___d5846,
       IF_xbar_merges_3_fi0HasPrio_893_THEN_NOT_xbar__ETC___d5900,
       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5901,
       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914,
       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5926,
       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5931,
       IF_xbar_merges_3_routeFrom_888_BIT_0_890_THEN__ETC___d5921,
       IF_xbar_merges_4_fi0HasPrio_968_THEN_NOT_xbar__ETC___d5975,
       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5976,
       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989,
       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6001,
       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6006,
       IF_xbar_merges_4_routeFrom_963_BIT_0_965_THEN__ETC___d5996,
       IF_xbar_merges_5_fi0HasPrio_043_THEN_NOT_xbar__ETC___d6050,
       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6051,
       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064,
       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6076,
       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6081,
       IF_xbar_merges_5_routeFrom_038_BIT_0_040_THEN__ETC___d6071,
       IF_xbar_merges_6_fi0HasPrio_118_THEN_NOT_xbar__ETC___d6125,
       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6126,
       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139,
       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6151,
       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6156,
       IF_xbar_merges_6_routeFrom_113_BIT_0_115_THEN__ETC___d6146,
       IF_xbar_merges_7_fi0HasPrio_193_THEN_NOT_xbar__ETC___d6200,
       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6201,
       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214,
       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6226,
       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6231,
       IF_xbar_merges_7_routeFrom_188_BIT_0_190_THEN__ETC___d6221,
       IF_xbar_merges_fi0HasPrio_668_THEN_NOT_xbar_me_ETC___d5675,
       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5676,
       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689,
       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5701,
       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5706,
       IF_xbar_merges_routeFrom_663_BIT_0_665_THEN_xb_ETC___d5696,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4544,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4545,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4570,
       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4575,
       IF_xbar_upper_lower_merges_1_routeFrom_532_BIT_ETC___d4565,
       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4469,
       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4470,
       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483,
       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4495,
       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4500,
       IF_xbar_upper_lower_merges_routeFrom_457_BIT_0_ETC___d4490,
       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_NOT_ETC___d4716,
       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4717,
       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730,
       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4742,
       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4747,
       IF_xbar_upper_merges_1_routeFrom_704_BIT_0_706_ETC___d4737,
       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_NOT_ETC___d4791,
       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4792,
       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805,
       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4817,
       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4822,
       IF_xbar_upper_merges_2_routeFrom_779_BIT_0_781_ETC___d4812,
       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_NOT_ETC___d4866,
       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4867,
       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880,
       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4892,
       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4897,
       IF_xbar_upper_merges_3_routeFrom_854_BIT_0_856_ETC___d4887,
       IF_xbar_upper_merges_fi0HasPrio_634_THEN_NOT_x_ETC___d4641,
       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4642,
       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655,
       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4667,
       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4672,
       IF_xbar_upper_merges_routeFrom_629_BIT_0_631_T_ETC___d4662,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4370,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4371,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4396,
       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4401,
       IF_xbar_upper_upper_merges_1_routeFrom_358_BIT_ETC___d4391,
       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4295,
       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4296,
       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309,
       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4321,
       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4326,
       IF_xbar_upper_upper_merges_routeFrom_283_BIT_0_ETC___d4316,
       NOT_IF_ringToMac_0_fifoTxData_read_block_129_T_ETC___d2224,
       NOT_IF_ringToMac_1_fifoTxData_read_block_573_T_ETC___d2668,
       NOT_IF_ringToMac_2_fifoTxData_read_block_017_T_ETC___d3112,
       NOT_IF_ringToMac_3_fifoTxData_read_block_461_T_ETC___d3556,
       NOT_ringToMac_0_fifoTxData_read_block_129_130__ETC___d2152,
       NOT_ringToMac_0_fifoTxData_write_block_089_090_ETC___d2110,
       NOT_ringToMac_1_fifoTxData_read_block_573_574__ETC___d2596,
       NOT_ringToMac_1_fifoTxData_write_block_533_534_ETC___d2554,
       NOT_ringToMac_2_fifoTxData_read_block_017_018__ETC___d3040,
       NOT_ringToMac_2_fifoTxData_write_block_977_978_ETC___d2998,
       NOT_ringToMac_3_fifoTxData_read_block_461_462__ETC___d3484,
       NOT_ringToMac_3_fifoTxData_write_block_421_422_ETC___d3442,
       pktBuff_0_memBuffer_serverAdapterA_cnt_844_SLT_3___d2013,
       pktBuff_0_memBuffer_serverAdapterB_cnt_909_SLT_3___d2039,
       pktBuff_1_memBuffer_serverAdapterA_cnt_288_SLT_3___d2457,
       pktBuff_1_memBuffer_serverAdapterB_cnt_353_SLT_3___d2483,
       pktBuff_2_memBuffer_serverAdapterA_cnt_732_SLT_3___d2901,
       pktBuff_2_memBuffer_serverAdapterB_cnt_797_SLT_3___d2927,
       pktBuff_3_memBuffer_serverAdapterA_cnt_176_SLT_3___d3345,
       pktBuff_3_memBuffer_serverAdapterB_cnt_241_SLT_3___d3371,
       ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135,
       ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133,
       ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144,
       ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142,
       ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579,
       ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577,
       ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588,
       ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586,
       ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023,
       ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021,
       ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032,
       ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030,
       ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467,
       ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465,
       ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476,
       ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474,
       verbose_ff_1_i_notFull__727_AND_verbose_ff_2_i_ETC___d7628,
       verbose_ff_2_2_i_notFull__063_AND_verbose_ff_3_ETC___d7622,
       xbar_lower_lower_merges_1_fo_i_notFull__210_AN_ETC___d5226,
       xbar_lower_lower_merges_1_routeFrom_222_BIT_1__ETC___d5268,
       xbar_lower_lower_merges_fo_i_notFull__135_AND__ETC___d5151,
       xbar_lower_lower_merges_routeFrom_147_BIT_1_14_ETC___d5193,
       xbar_lower_merges_1_fo_i_notFull__382_AND_IF_x_ETC___d5398,
       xbar_lower_merges_1_routeFrom_394_BIT_1_395_AN_ETC___d5440,
       xbar_lower_merges_2_fo_i_notFull__457_AND_IF_x_ETC___d5473,
       xbar_lower_merges_2_routeFrom_469_BIT_1_470_AN_ETC___d5515,
       xbar_lower_merges_3_fo_i_notFull__532_AND_IF_x_ETC___d5548,
       xbar_lower_merges_3_routeFrom_544_BIT_1_545_AN_ETC___d5590,
       xbar_lower_merges_fo_i_notFull__307_AND_IF_xba_ETC___d5323,
       xbar_lower_merges_routeFrom_319_BIT_1_320_AND__ETC___d5365,
       xbar_lower_upper_merges_1_fo_i_notFull__038_AN_ETC___d5054,
       xbar_lower_upper_merges_1_routeFrom_050_BIT_1__ETC___d5096,
       xbar_lower_upper_merges_fo_i_notFull__963_AND__ETC___d4979,
       xbar_lower_upper_merges_routeFrom_975_BIT_1_97_ETC___d5021,
       xbar_merges_1_fo_i_notFull__726_AND_IF_xbar_me_ETC___d5742,
       xbar_merges_1_routeFrom_738_BIT_1_739_AND_IF_x_ETC___d5784,
       xbar_merges_2_fo_i_notFull__801_AND_IF_xbar_me_ETC___d5817,
       xbar_merges_2_routeFrom_813_BIT_1_814_AND_IF_x_ETC___d5859,
       xbar_merges_3_fo_i_notFull__876_AND_IF_xbar_me_ETC___d5892,
       xbar_merges_3_routeFrom_888_BIT_1_889_AND_IF_x_ETC___d5934,
       xbar_merges_4_fo_i_notFull__951_AND_IF_xbar_me_ETC___d5967,
       xbar_merges_4_routeFrom_963_BIT_1_964_AND_IF_x_ETC___d6009,
       xbar_merges_5_fo_i_notFull__026_AND_IF_xbar_me_ETC___d6042,
       xbar_merges_5_routeFrom_038_BIT_1_039_AND_IF_x_ETC___d6084,
       xbar_merges_6_fo_i_notFull__101_AND_IF_xbar_me_ETC___d6117,
       xbar_merges_6_routeFrom_113_BIT_1_114_AND_IF_x_ETC___d6159,
       xbar_merges_7_fo_i_notFull__176_AND_IF_xbar_me_ETC___d6192,
       xbar_merges_7_routeFrom_188_BIT_1_189_AND_IF_x_ETC___d6234,
       xbar_merges_fo_i_notFull__651_AND_IF_xbar_merg_ETC___d5667,
       xbar_merges_routeFrom_663_BIT_1_664_AND_IF_xba_ETC___d5709,
       xbar_upper_lower_merges_1_fo_i_notFull__520_AN_ETC___d4536,
       xbar_upper_lower_merges_1_routeFrom_532_BIT_1__ETC___d4578,
       xbar_upper_lower_merges_fo_i_notFull__445_AND__ETC___d4461,
       xbar_upper_lower_merges_routeFrom_457_BIT_1_45_ETC___d4503,
       xbar_upper_merges_1_fo_i_notFull__692_AND_IF_x_ETC___d4708,
       xbar_upper_merges_1_routeFrom_704_BIT_1_705_AN_ETC___d4750,
       xbar_upper_merges_2_fo_i_notFull__767_AND_IF_x_ETC___d4783,
       xbar_upper_merges_2_routeFrom_779_BIT_1_780_AN_ETC___d4825,
       xbar_upper_merges_3_fo_i_notFull__842_AND_IF_x_ETC___d4858,
       xbar_upper_merges_3_routeFrom_854_BIT_1_855_AN_ETC___d4900,
       xbar_upper_merges_fo_i_notFull__617_AND_IF_xba_ETC___d4633,
       xbar_upper_merges_routeFrom_629_BIT_1_630_AND__ETC___d4675,
       xbar_upper_upper_merges_1_fo_i_notFull__346_AN_ETC___d4362,
       xbar_upper_upper_merges_1_routeFrom_358_BIT_1__ETC___d4404,
       xbar_upper_upper_merges_fo_i_notFull__271_AND__ETC___d4287,
       xbar_upper_upper_merges_routeFrom_283_BIT_1_28_ETC___d4329;

  // action method rxchan_0_macRx_put
  assign RDY_rxchan_0_macRx_put = macToRing_0_gearbox_in_ff_FULL_N ;

  // value method rxchan_0_writeClient_first
  assign rxchan_0_writeClient_first = hostchan_0_writeDataFifo_D_OUT ;
  assign RDY_rxchan_0_writeClient_first = hostchan_0_writeDataFifo_EMPTY_N ;

  // action method rxchan_0_writeClient_deq
  assign RDY_rxchan_0_writeClient_deq = hostchan_0_writeDataFifo_EMPTY_N ;

  // value method rxchan_0_writeClient_notEmpty
  assign rxchan_0_writeClient_notEmpty = hostchan_0_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_0_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_0_next_first
  assign rxchan_0_next_first = hostchan_0_outReqFifo_D_OUT ;
  assign RDY_rxchan_0_next_first = hostchan_0_outReqFifo_EMPTY_N ;

  // action method rxchan_0_next_deq
  assign RDY_rxchan_0_next_deq = hostchan_0_outReqFifo_EMPTY_N ;

  // value method rxchan_0_next_notEmpty
  assign rxchan_0_next_notEmpty = hostchan_0_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_0_next_notEmpty = 1'd1 ;

  // action method rxchan_0_verbose_enq
  assign RDY_rxchan_0_verbose_enq = verbose_ff_0_1_FULL_N ;

  // value method rxchan_0_verbose_notFull
  assign rxchan_0_verbose_notFull = verbose_ff_0_1_FULL_N ;
  assign RDY_rxchan_0_verbose_notFull = 1'd1 ;

  // action method rxchan_1_macRx_put
  assign RDY_rxchan_1_macRx_put = macToRing_1_gearbox_in_ff_FULL_N ;

  // value method rxchan_1_writeClient_first
  assign rxchan_1_writeClient_first = hostchan_1_writeDataFifo_D_OUT ;
  assign RDY_rxchan_1_writeClient_first = hostchan_1_writeDataFifo_EMPTY_N ;

  // action method rxchan_1_writeClient_deq
  assign RDY_rxchan_1_writeClient_deq = hostchan_1_writeDataFifo_EMPTY_N ;

  // value method rxchan_1_writeClient_notEmpty
  assign rxchan_1_writeClient_notEmpty = hostchan_1_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_1_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_1_next_first
  assign rxchan_1_next_first = hostchan_1_outReqFifo_D_OUT ;
  assign RDY_rxchan_1_next_first = hostchan_1_outReqFifo_EMPTY_N ;

  // action method rxchan_1_next_deq
  assign RDY_rxchan_1_next_deq = hostchan_1_outReqFifo_EMPTY_N ;

  // value method rxchan_1_next_notEmpty
  assign rxchan_1_next_notEmpty = hostchan_1_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_1_next_notEmpty = 1'd1 ;

  // action method rxchan_1_verbose_enq
  assign RDY_rxchan_1_verbose_enq = verbose_ff_1_FULL_N ;

  // value method rxchan_1_verbose_notFull
  assign rxchan_1_verbose_notFull = verbose_ff_1_FULL_N ;
  assign RDY_rxchan_1_verbose_notFull = 1'd1 ;

  // action method rxchan_2_macRx_put
  assign RDY_rxchan_2_macRx_put = macToRing_2_gearbox_in_ff_FULL_N ;

  // value method rxchan_2_writeClient_first
  assign rxchan_2_writeClient_first = hostchan_2_writeDataFifo_D_OUT ;
  assign RDY_rxchan_2_writeClient_first = hostchan_2_writeDataFifo_EMPTY_N ;

  // action method rxchan_2_writeClient_deq
  assign RDY_rxchan_2_writeClient_deq = hostchan_2_writeDataFifo_EMPTY_N ;

  // value method rxchan_2_writeClient_notEmpty
  assign rxchan_2_writeClient_notEmpty = hostchan_2_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_2_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_2_next_first
  assign rxchan_2_next_first = hostchan_2_outReqFifo_D_OUT ;
  assign RDY_rxchan_2_next_first = hostchan_2_outReqFifo_EMPTY_N ;

  // action method rxchan_2_next_deq
  assign RDY_rxchan_2_next_deq = hostchan_2_outReqFifo_EMPTY_N ;

  // value method rxchan_2_next_notEmpty
  assign rxchan_2_next_notEmpty = hostchan_2_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_2_next_notEmpty = 1'd1 ;

  // action method rxchan_2_verbose_enq
  assign RDY_rxchan_2_verbose_enq = verbose_ff_2_FULL_N ;

  // value method rxchan_2_verbose_notFull
  assign rxchan_2_verbose_notFull = verbose_ff_2_FULL_N ;
  assign RDY_rxchan_2_verbose_notFull = 1'd1 ;

  // action method rxchan_3_macRx_put
  assign RDY_rxchan_3_macRx_put = macToRing_3_gearbox_in_ff_FULL_N ;

  // value method rxchan_3_writeClient_first
  assign rxchan_3_writeClient_first = hostchan_3_writeDataFifo_D_OUT ;
  assign RDY_rxchan_3_writeClient_first = hostchan_3_writeDataFifo_EMPTY_N ;

  // action method rxchan_3_writeClient_deq
  assign RDY_rxchan_3_writeClient_deq = hostchan_3_writeDataFifo_EMPTY_N ;

  // value method rxchan_3_writeClient_notEmpty
  assign rxchan_3_writeClient_notEmpty = hostchan_3_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_3_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_3_next_first
  assign rxchan_3_next_first = hostchan_3_outReqFifo_D_OUT ;
  assign RDY_rxchan_3_next_first = hostchan_3_outReqFifo_EMPTY_N ;

  // action method rxchan_3_next_deq
  assign RDY_rxchan_3_next_deq = hostchan_3_outReqFifo_EMPTY_N ;

  // value method rxchan_3_next_notEmpty
  assign rxchan_3_next_notEmpty = hostchan_3_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_3_next_notEmpty = 1'd1 ;

  // action method rxchan_3_verbose_enq
  assign RDY_rxchan_3_verbose_enq = verbose_ff_3_FULL_N ;

  // value method rxchan_3_verbose_notFull
  assign rxchan_3_verbose_notFull = verbose_ff_3_FULL_N ;
  assign RDY_rxchan_3_verbose_notFull = 1'd1 ;

  // action method hostchan_0_writeServer_enq
  assign RDY_hostchan_0_writeServer_enq = pktBuff_0_RDY_writeServer_enq ;

  // value method hostchan_0_writeServer_notFull
  assign hostchan_0_writeServer_notFull = pktBuff_0_writeServer_notFull ;
  assign RDY_hostchan_0_writeServer_notFull = 1'd1 ;

  // value method hostchan_0_writeClient_first
  assign hostchan_0_writeClient_first = writeDataFifo_0_D_OUT ;
  assign RDY_hostchan_0_writeClient_first = writeDataFifo_0_EMPTY_N ;

  // action method hostchan_0_writeClient_deq
  assign RDY_hostchan_0_writeClient_deq = writeDataFifo_0_EMPTY_N ;

  // value method hostchan_0_writeClient_notEmpty
  assign hostchan_0_writeClient_notEmpty = writeDataFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_writeClient_notEmpty = 1'd1 ;

  // value method hostchan_0_next_first
  assign hostchan_0_next_first = outReqFifo_0_D_OUT ;
  assign RDY_hostchan_0_next_first = outReqFifo_0_EMPTY_N ;

  // action method hostchan_0_next_deq
  assign RDY_hostchan_0_next_deq = outReqFifo_0_EMPTY_N ;

  // value method hostchan_0_next_notEmpty
  assign hostchan_0_next_notEmpty = outReqFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_next_notEmpty = 1'd1 ;

  // action method hostchan_0_verbose_enq
  assign RDY_hostchan_0_verbose_enq = verbose_ff_0_FULL_N ;

  // value method hostchan_0_verbose_notFull
  assign hostchan_0_verbose_notFull = verbose_ff_0_FULL_N ;
  assign RDY_hostchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_0_writeServer_enq
  assign RDY_txchan_0_writeServer_enq = pktBuff_0_fifoWriteData_FULL_N ;

  // value method txchan_0_writeServer_notFull
  assign txchan_0_writeServer_notFull = pktBuff_0_fifoWriteData_FULL_N ;
  assign RDY_txchan_0_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_0_macTx_get
  assign txchan_0_macTx_get = ringToMac_0_writeMacFifo_D_OUT ;
  assign RDY_txchan_0_macTx_get = ringToMac_0_writeMacFifo_EMPTY_N ;

  // action method txchan_0_verbose_enq
  assign RDY_txchan_0_verbose_enq = verbose_ff_0_3_FULL_N ;

  // value method txchan_0_verbose_notFull
  assign txchan_0_verbose_notFull = verbose_ff_0_3_FULL_N ;
  assign RDY_txchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_1_writeServer_enq
  assign RDY_txchan_1_writeServer_enq = pktBuff_1_fifoWriteData_FULL_N ;

  // value method txchan_1_writeServer_notFull
  assign txchan_1_writeServer_notFull = pktBuff_1_fifoWriteData_FULL_N ;
  assign RDY_txchan_1_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_1_macTx_get
  assign txchan_1_macTx_get = ringToMac_1_writeMacFifo_D_OUT ;
  assign RDY_txchan_1_macTx_get = ringToMac_1_writeMacFifo_EMPTY_N ;

  // action method txchan_1_verbose_enq
  assign RDY_txchan_1_verbose_enq = verbose_ff_1_2_FULL_N ;

  // value method txchan_1_verbose_notFull
  assign txchan_1_verbose_notFull = verbose_ff_1_2_FULL_N ;
  assign RDY_txchan_1_verbose_notFull = 1'd1 ;

  // action method txchan_2_writeServer_enq
  assign RDY_txchan_2_writeServer_enq = pktBuff_2_fifoWriteData_FULL_N ;

  // value method txchan_2_writeServer_notFull
  assign txchan_2_writeServer_notFull = pktBuff_2_fifoWriteData_FULL_N ;
  assign RDY_txchan_2_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_2_macTx_get
  assign txchan_2_macTx_get = ringToMac_2_writeMacFifo_D_OUT ;
  assign RDY_txchan_2_macTx_get = ringToMac_2_writeMacFifo_EMPTY_N ;

  // action method txchan_2_verbose_enq
  assign RDY_txchan_2_verbose_enq = verbose_ff_2_2_FULL_N ;

  // value method txchan_2_verbose_notFull
  assign txchan_2_verbose_notFull = verbose_ff_2_2_FULL_N ;
  assign RDY_txchan_2_verbose_notFull = 1'd1 ;

  // action method txchan_3_writeServer_enq
  assign RDY_txchan_3_writeServer_enq = pktBuff_3_fifoWriteData_FULL_N ;

  // value method txchan_3_writeServer_notFull
  assign txchan_3_writeServer_notFull = pktBuff_3_fifoWriteData_FULL_N ;
  assign RDY_txchan_3_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_3_macTx_get
  assign txchan_3_macTx_get = ringToMac_3_writeMacFifo_D_OUT ;
  assign RDY_txchan_3_macTx_get = ringToMac_3_writeMacFifo_EMPTY_N ;

  // action method txchan_3_verbose_enq
  assign RDY_txchan_3_verbose_enq = verbose_ff_3_2_FULL_N ;

  // value method txchan_3_verbose_notFull
  assign txchan_3_verbose_notFull = verbose_ff_3_2_FULL_N ;
  assign RDY_txchan_3_verbose_notFull = 1'd1 ;

  // action method prev_0_enq
  assign RDY_prev_0_enq = meta_ff_0_FULL_N ;

  // value method prev_0_notFull
  assign prev_0_notFull = meta_ff_0_FULL_N ;
  assign RDY_prev_0_notFull = 1'd1 ;

  // action method prev_1_enq
  assign RDY_prev_1_enq = meta_ff_1_FULL_N ;

  // value method prev_1_notFull
  assign prev_1_notFull = meta_ff_1_FULL_N ;
  assign RDY_prev_1_notFull = 1'd1 ;

  // action method prev_2_enq
  assign RDY_prev_2_enq = meta_ff_2_FULL_N ;

  // value method prev_2_notFull
  assign prev_2_notFull = meta_ff_2_FULL_N ;
  assign RDY_prev_2_notFull = 1'd1 ;

  // action method prev_3_enq
  assign RDY_prev_3_enq = meta_ff_3_FULL_N ;

  // value method prev_3_notFull
  assign prev_3_notFull = meta_ff_3_FULL_N ;
  assign RDY_prev_3_notFull = 1'd1 ;

  // action method prev_4_enq
  assign RDY_prev_4_enq = meta_ff_4_FULL_N ;

  // value method prev_4_notFull
  assign prev_4_notFull = meta_ff_4_FULL_N ;
  assign RDY_prev_4_notFull = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity =
	     verbose_ff_0_1_FULL_N &&
	     verbose_ff_1_i_notFull__727_AND_verbose_ff_2_i_ETC___d7628 ;

  // submodule gearbox_dn_16_0
  mkStreamGearboxDn_32_16 gearbox_dn_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_0_datain_put),
					  .EN_datain_put(gearbox_dn_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_1
  mkStreamGearboxDn_32_16 gearbox_dn_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_1_datain_put),
					  .EN_datain_put(gearbox_dn_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_2
  mkStreamGearboxDn_32_16 gearbox_dn_16_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_2_datain_put),
					  .EN_datain_put(gearbox_dn_16_2_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_2_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_2_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_3
  mkStreamGearboxDn_32_16 gearbox_dn_16_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_3_datain_put),
					  .EN_datain_put(gearbox_dn_16_3_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_3_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_3_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_0
  mkStreamGearboxDn_64_32 gearbox_dn_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_0_datain_put),
					  .EN_datain_put(gearbox_dn_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_1
  mkStreamGearboxDn_64_32 gearbox_dn_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_1_datain_put),
					  .EN_datain_put(gearbox_dn_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_2
  mkStreamGearboxDn_64_32 gearbox_dn_32_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_2_datain_put),
					  .EN_datain_put(gearbox_dn_32_2_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_2_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_2_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_3
  mkStreamGearboxDn_64_32 gearbox_dn_32_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_3_datain_put),
					  .EN_datain_put(gearbox_dn_32_3_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_3_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_3_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_0
  mkStreamGearboxUp_16_32 gearbox_up_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_0_datain_put),
					  .EN_datain_put(gearbox_up_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_0_RDY_datain_put),
					  .dataout_get(gearbox_up_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_1
  mkStreamGearboxUp_16_32 gearbox_up_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_1_datain_put),
					  .EN_datain_put(gearbox_up_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_1_RDY_datain_put),
					  .dataout_get(gearbox_up_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_2
  mkStreamGearboxUp_16_32 gearbox_up_16_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_2_datain_put),
					  .EN_datain_put(gearbox_up_16_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_2_RDY_datain_put),
					  .dataout_get(gearbox_up_16_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_3
  mkStreamGearboxUp_16_32 gearbox_up_16_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_3_datain_put),
					  .EN_datain_put(gearbox_up_16_3_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_3_RDY_datain_put),
					  .dataout_get(gearbox_up_16_3_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_4
  mkStreamGearboxUp_16_32 gearbox_up_16_4(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_4_datain_put),
					  .EN_datain_put(gearbox_up_16_4_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_4_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_4_RDY_datain_put),
					  .dataout_get(gearbox_up_16_4_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_4_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_0
  mkStreamGearboxUp_32_64 gearbox_up_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_0_datain_put),
					  .EN_datain_put(gearbox_up_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_0_RDY_datain_put),
					  .dataout_get(gearbox_up_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_1
  mkStreamGearboxUp_32_64 gearbox_up_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_1_datain_put),
					  .EN_datain_put(gearbox_up_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_1_RDY_datain_put),
					  .dataout_get(gearbox_up_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_2
  mkStreamGearboxUp_32_64 gearbox_up_32_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_2_datain_put),
					  .EN_datain_put(gearbox_up_32_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_2_RDY_datain_put),
					  .dataout_get(gearbox_up_32_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_3
  mkStreamGearboxUp_32_64 gearbox_up_32_3(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_3_datain_put),
					  .EN_datain_put(gearbox_up_32_3_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_3_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_3_RDY_datain_put),
					  .dataout_get(gearbox_up_32_3_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_3_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_4
  mkStreamGearboxUp_32_64 gearbox_up_32_4(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_4_datain_put),
					  .EN_datain_put(gearbox_up_32_4_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_4_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_4_RDY_datain_put),
					  .dataout_get(gearbox_up_32_4_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_4_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule hostchan_0_outReqFifo
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) hostchan_0_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_outReqFifo_D_IN),
						 .ENQ(hostchan_0_outReqFifo_ENQ),
						 .DEQ(hostchan_0_outReqFifo_DEQ),
						 .CLR(hostchan_0_outReqFifo_CLR),
						 .D_OUT(hostchan_0_outReqFifo_D_OUT),
						 .FULL_N(hostchan_0_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_0_outReqFifo_EMPTY_N));

  // submodule hostchan_0_parser
  mkParser hostchan_0_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_0_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_0_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_0_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_0_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_0_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_0_parser_RDY_frameIn_put),
			     .meta_get(hostchan_0_parser_meta_get),
			     .RDY_meta_get(hostchan_0_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_0_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_0_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_0_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_0_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_0_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_0_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_0_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_0_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_0_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_0_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_0_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_0_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_0_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_0_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_0_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_0_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_0_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_pktLenFifo_D_IN),
						 .ENQ(hostchan_0_pktLenFifo_ENQ),
						 .DEQ(hostchan_0_pktLenFifo_DEQ),
						 .CLR(hostchan_0_pktLenFifo_CLR),
						 .D_OUT(hostchan_0_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_0_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_0_pktLenFifo_EMPTY_N));

  // submodule hostchan_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_0_readDataFifo_D_IN),
						   .ENQ(hostchan_0_readDataFifo_ENQ),
						   .DEQ(hostchan_0_readDataFifo_DEQ),
						   .CLR(hostchan_0_readDataFifo_CLR),
						   .D_OUT(hostchan_0_readDataFifo_D_OUT),
						   .FULL_N(hostchan_0_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_0_readDataFifo_EMPTY_N));

  // submodule hostchan_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readLenFifo_D_IN),
						  .ENQ(hostchan_0_readLenFifo_ENQ),
						  .DEQ(hostchan_0_readLenFifo_DEQ),
						  .CLR(hostchan_0_readLenFifo_CLR),
						  .D_OUT(hostchan_0_readLenFifo_D_OUT),
						  .FULL_N(hostchan_0_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readLenFifo_EMPTY_N));

  // submodule hostchan_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readReqFifo_D_IN),
						  .ENQ(hostchan_0_readReqFifo_ENQ),
						  .DEQ(hostchan_0_readReqFifo_DEQ),
						  .CLR(hostchan_0_readReqFifo_CLR),
						  .D_OUT(hostchan_0_readReqFifo_D_OUT),
						  .FULL_N(hostchan_0_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readReqFifo_EMPTY_N));

  // submodule hostchan_0_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_0_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_verbose_ff_D_IN),
						 .ENQ(hostchan_0_verbose_ff_ENQ),
						 .DEQ(hostchan_0_verbose_ff_DEQ),
						 .CLR(hostchan_0_verbose_ff_CLR),
						 .D_OUT(hostchan_0_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_0_verbose_ff_EMPTY_N));

  // submodule hostchan_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_0_writeDataFifo_D_IN),
						    .ENQ(hostchan_0_writeDataFifo_ENQ),
						    .DEQ(hostchan_0_writeDataFifo_DEQ),
						    .CLR(hostchan_0_writeDataFifo_CLR),
						    .D_OUT(hostchan_0_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_0_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_0_writeDataFifo_EMPTY_N));

  // submodule hostchan_1_outReqFifo
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) hostchan_1_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_outReqFifo_D_IN),
						 .ENQ(hostchan_1_outReqFifo_ENQ),
						 .DEQ(hostchan_1_outReqFifo_DEQ),
						 .CLR(hostchan_1_outReqFifo_CLR),
						 .D_OUT(hostchan_1_outReqFifo_D_OUT),
						 .FULL_N(hostchan_1_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_1_outReqFifo_EMPTY_N));

  // submodule hostchan_1_parser
  mkParser hostchan_1_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_1_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_1_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_1_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_1_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_1_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_1_parser_RDY_frameIn_put),
			     .meta_get(hostchan_1_parser_meta_get),
			     .RDY_meta_get(hostchan_1_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_1_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_1_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_1_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_1_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_1_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_1_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_1_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_1_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_1_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_1_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_1_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_1_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_1_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_1_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_1_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_1_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_1_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_pktLenFifo_D_IN),
						 .ENQ(hostchan_1_pktLenFifo_ENQ),
						 .DEQ(hostchan_1_pktLenFifo_DEQ),
						 .CLR(hostchan_1_pktLenFifo_CLR),
						 .D_OUT(hostchan_1_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_1_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_1_pktLenFifo_EMPTY_N));

  // submodule hostchan_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_1_readDataFifo_D_IN),
						   .ENQ(hostchan_1_readDataFifo_ENQ),
						   .DEQ(hostchan_1_readDataFifo_DEQ),
						   .CLR(hostchan_1_readDataFifo_CLR),
						   .D_OUT(hostchan_1_readDataFifo_D_OUT),
						   .FULL_N(hostchan_1_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_1_readDataFifo_EMPTY_N));

  // submodule hostchan_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readLenFifo_D_IN),
						  .ENQ(hostchan_1_readLenFifo_ENQ),
						  .DEQ(hostchan_1_readLenFifo_DEQ),
						  .CLR(hostchan_1_readLenFifo_CLR),
						  .D_OUT(hostchan_1_readLenFifo_D_OUT),
						  .FULL_N(hostchan_1_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readLenFifo_EMPTY_N));

  // submodule hostchan_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readReqFifo_D_IN),
						  .ENQ(hostchan_1_readReqFifo_ENQ),
						  .DEQ(hostchan_1_readReqFifo_DEQ),
						  .CLR(hostchan_1_readReqFifo_CLR),
						  .D_OUT(hostchan_1_readReqFifo_D_OUT),
						  .FULL_N(hostchan_1_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readReqFifo_EMPTY_N));

  // submodule hostchan_1_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_1_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_verbose_ff_D_IN),
						 .ENQ(hostchan_1_verbose_ff_ENQ),
						 .DEQ(hostchan_1_verbose_ff_DEQ),
						 .CLR(hostchan_1_verbose_ff_CLR),
						 .D_OUT(hostchan_1_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_1_verbose_ff_EMPTY_N));

  // submodule hostchan_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_1_writeDataFifo_D_IN),
						    .ENQ(hostchan_1_writeDataFifo_ENQ),
						    .DEQ(hostchan_1_writeDataFifo_DEQ),
						    .CLR(hostchan_1_writeDataFifo_CLR),
						    .D_OUT(hostchan_1_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_1_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_1_writeDataFifo_EMPTY_N));

  // submodule hostchan_2_outReqFifo
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) hostchan_2_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_outReqFifo_D_IN),
						 .ENQ(hostchan_2_outReqFifo_ENQ),
						 .DEQ(hostchan_2_outReqFifo_DEQ),
						 .CLR(hostchan_2_outReqFifo_CLR),
						 .D_OUT(hostchan_2_outReqFifo_D_OUT),
						 .FULL_N(hostchan_2_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_2_outReqFifo_EMPTY_N));

  // submodule hostchan_2_parser
  mkParser hostchan_2_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_2_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_2_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_2_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_2_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_2_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_2_parser_RDY_frameIn_put),
			     .meta_get(hostchan_2_parser_meta_get),
			     .RDY_meta_get(hostchan_2_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_2_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_2_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_2_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_2_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_2_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_2_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_2_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_2_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_2_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_2_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_2_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_2_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_2_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_2_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_2_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_2_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_2_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_pktLenFifo_D_IN),
						 .ENQ(hostchan_2_pktLenFifo_ENQ),
						 .DEQ(hostchan_2_pktLenFifo_DEQ),
						 .CLR(hostchan_2_pktLenFifo_CLR),
						 .D_OUT(hostchan_2_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_2_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_2_pktLenFifo_EMPTY_N));

  // submodule hostchan_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_2_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_2_readDataFifo_D_IN),
						   .ENQ(hostchan_2_readDataFifo_ENQ),
						   .DEQ(hostchan_2_readDataFifo_DEQ),
						   .CLR(hostchan_2_readDataFifo_CLR),
						   .D_OUT(hostchan_2_readDataFifo_D_OUT),
						   .FULL_N(hostchan_2_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_2_readDataFifo_EMPTY_N));

  // submodule hostchan_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_2_readLenFifo_D_IN),
						  .ENQ(hostchan_2_readLenFifo_ENQ),
						  .DEQ(hostchan_2_readLenFifo_DEQ),
						  .CLR(hostchan_2_readLenFifo_CLR),
						  .D_OUT(hostchan_2_readLenFifo_D_OUT),
						  .FULL_N(hostchan_2_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_2_readLenFifo_EMPTY_N));

  // submodule hostchan_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_2_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_2_readReqFifo_D_IN),
						  .ENQ(hostchan_2_readReqFifo_ENQ),
						  .DEQ(hostchan_2_readReqFifo_DEQ),
						  .CLR(hostchan_2_readReqFifo_CLR),
						  .D_OUT(hostchan_2_readReqFifo_D_OUT),
						  .FULL_N(hostchan_2_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_2_readReqFifo_EMPTY_N));

  // submodule hostchan_2_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_2_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_2_verbose_ff_D_IN),
						 .ENQ(hostchan_2_verbose_ff_ENQ),
						 .DEQ(hostchan_2_verbose_ff_DEQ),
						 .CLR(hostchan_2_verbose_ff_CLR),
						 .D_OUT(hostchan_2_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_2_verbose_ff_EMPTY_N));

  // submodule hostchan_2_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_2_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_2_writeDataFifo_D_IN),
						    .ENQ(hostchan_2_writeDataFifo_ENQ),
						    .DEQ(hostchan_2_writeDataFifo_DEQ),
						    .CLR(hostchan_2_writeDataFifo_CLR),
						    .D_OUT(hostchan_2_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_2_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_2_writeDataFifo_EMPTY_N));

  // submodule hostchan_3_outReqFifo
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) hostchan_3_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_outReqFifo_D_IN),
						 .ENQ(hostchan_3_outReqFifo_ENQ),
						 .DEQ(hostchan_3_outReqFifo_DEQ),
						 .CLR(hostchan_3_outReqFifo_CLR),
						 .D_OUT(hostchan_3_outReqFifo_D_OUT),
						 .FULL_N(hostchan_3_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_3_outReqFifo_EMPTY_N));

  // submodule hostchan_3_parser
  mkParser hostchan_3_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_3_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_3_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_3_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_3_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_3_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_3_parser_RDY_frameIn_put),
			     .meta_get(hostchan_3_parser_meta_get),
			     .RDY_meta_get(hostchan_3_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_3_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_3_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_3_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_3_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_3_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_3_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_3_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_3_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_3_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_3_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_3_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_3_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_3_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_3_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_3_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_3_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_3_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_pktLenFifo_D_IN),
						 .ENQ(hostchan_3_pktLenFifo_ENQ),
						 .DEQ(hostchan_3_pktLenFifo_DEQ),
						 .CLR(hostchan_3_pktLenFifo_CLR),
						 .D_OUT(hostchan_3_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_3_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_3_pktLenFifo_EMPTY_N));

  // submodule hostchan_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_3_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_3_readDataFifo_D_IN),
						   .ENQ(hostchan_3_readDataFifo_ENQ),
						   .DEQ(hostchan_3_readDataFifo_DEQ),
						   .CLR(hostchan_3_readDataFifo_CLR),
						   .D_OUT(hostchan_3_readDataFifo_D_OUT),
						   .FULL_N(hostchan_3_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_3_readDataFifo_EMPTY_N));

  // submodule hostchan_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_3_readLenFifo_D_IN),
						  .ENQ(hostchan_3_readLenFifo_ENQ),
						  .DEQ(hostchan_3_readLenFifo_DEQ),
						  .CLR(hostchan_3_readLenFifo_CLR),
						  .D_OUT(hostchan_3_readLenFifo_D_OUT),
						  .FULL_N(hostchan_3_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_3_readLenFifo_EMPTY_N));

  // submodule hostchan_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_3_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_3_readReqFifo_D_IN),
						  .ENQ(hostchan_3_readReqFifo_ENQ),
						  .DEQ(hostchan_3_readReqFifo_DEQ),
						  .CLR(hostchan_3_readReqFifo_CLR),
						  .D_OUT(hostchan_3_readReqFifo_D_OUT),
						  .FULL_N(hostchan_3_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_3_readReqFifo_EMPTY_N));

  // submodule hostchan_3_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_3_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_3_verbose_ff_D_IN),
						 .ENQ(hostchan_3_verbose_ff_ENQ),
						 .DEQ(hostchan_3_verbose_ff_DEQ),
						 .CLR(hostchan_3_verbose_ff_CLR),
						 .D_OUT(hostchan_3_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_3_verbose_ff_EMPTY_N));

  // submodule hostchan_3_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_3_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_3_writeDataFifo_D_IN),
						    .ENQ(hostchan_3_writeDataFifo_ENQ),
						    .DEQ(hostchan_3_writeDataFifo_DEQ),
						    .CLR(hostchan_3_writeDataFifo_CLR),
						    .D_OUT(hostchan_3_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_3_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_3_writeDataFifo_EMPTY_N));

  // submodule input_queues_0
  mkPacketBuffer_64 #(.param1("inputQ 0")) input_queues_0(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_0_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_0_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_0_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_0_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_0_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_0_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_0_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_0_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_0_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_0_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_0_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_0_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_0_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_0_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_1
  mkPacketBuffer_64 #(.param1("inputQ 1")) input_queues_1(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_1_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_1_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_1_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_1_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_1_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_1_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_1_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_1_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_1_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_1_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_1_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_1_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_1_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_1_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_2
  mkPacketBuffer_64 #(.param1("inputQ 2")) input_queues_2(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_2_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_2_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_2_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_2_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_2_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_2_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_2_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_2_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_2_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_2_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_2_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_2_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_2_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_2_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_3
  mkPacketBuffer_64 #(.param1("inputQ 3")) input_queues_3(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_3_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_3_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_3_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_3_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_3_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_3_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_3_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_3_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_3_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_3_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_3_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_3_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_3_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_3_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_4
  mkPacketBuffer_64 #(.param1("inputQ 4")) input_queues_4(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_4_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_4_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_4_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_4_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_4_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_4_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_4_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_4_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_4_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_4_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_4_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_4_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_4_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_4_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule localReset
  SyncReset #(.RSTDELAY(32'd1)) localReset(.CLK(CLK),
					   .IN_RST(RST_N),
					   .OUT_RST(localReset_OUT_RST));

  // submodule macToRing_0_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_0_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_0_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_0_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_0_gearbox_in_ff_DEQ),
						     .CLR(macToRing_0_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_0_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_0_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_0_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_0_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_0_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_0_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_0_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_0_gearbox_out_ff_DEQ),
						      .CLR(macToRing_0_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_0_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_0_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_0_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_0_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_0_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_0_writeDataFifo_sD_IN),
							  .sENQ(macToRing_0_writeDataFifo_sENQ),
							  .dDEQ(macToRing_0_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_0_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_0_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_0_writeDataFifo_dD_OUT));

  // submodule macToRing_1_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_1_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_1_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_1_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_1_gearbox_in_ff_DEQ),
						     .CLR(macToRing_1_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_1_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_1_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_1_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_1_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_1_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_1_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_1_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_1_gearbox_out_ff_DEQ),
						      .CLR(macToRing_1_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_1_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_1_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_1_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_1_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_1_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_1_writeDataFifo_sD_IN),
							  .sENQ(macToRing_1_writeDataFifo_sENQ),
							  .dDEQ(macToRing_1_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_1_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_1_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_1_writeDataFifo_dD_OUT));

  // submodule macToRing_2_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_2_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_2_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_2_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_2_gearbox_in_ff_DEQ),
						     .CLR(macToRing_2_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_2_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_2_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_2_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_2_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_2_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_2_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_2_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_2_gearbox_out_ff_DEQ),
						      .CLR(macToRing_2_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_2_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_2_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_2_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_2_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_2_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_2_writeDataFifo_sD_IN),
							  .sENQ(macToRing_2_writeDataFifo_sENQ),
							  .dDEQ(macToRing_2_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_2_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_2_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_2_writeDataFifo_dD_OUT));

  // submodule macToRing_3_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_3_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_3_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_3_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_3_gearbox_in_ff_DEQ),
						     .CLR(macToRing_3_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_3_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_3_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_3_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_3_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_3_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_3_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_3_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_3_gearbox_out_ff_DEQ),
						      .CLR(macToRing_3_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_3_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_3_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_3_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_3_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_3_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_3_writeDataFifo_sD_IN),
							  .sENQ(macToRing_3_writeDataFifo_sENQ),
							  .dDEQ(macToRing_3_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_3_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_3_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_3_writeDataFifo_dD_OUT));

  // submodule meta_ff_0
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_0(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_0_D_IN),
				     .ENQ(meta_ff_0_ENQ),
				     .DEQ(meta_ff_0_DEQ),
				     .CLR(meta_ff_0_CLR),
				     .D_OUT(meta_ff_0_D_OUT),
				     .FULL_N(meta_ff_0_FULL_N),
				     .EMPTY_N(meta_ff_0_EMPTY_N));

  // submodule meta_ff_0_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_0_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_0_1_D_IN),
				       .ENQ(meta_ff_0_1_ENQ),
				       .DEQ(meta_ff_0_1_DEQ),
				       .CLR(meta_ff_0_1_CLR),
				       .D_OUT(meta_ff_0_1_D_OUT),
				       .FULL_N(meta_ff_0_1_FULL_N),
				       .EMPTY_N(meta_ff_0_1_EMPTY_N));

  // submodule meta_ff_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_1(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_1_D_IN),
				     .ENQ(meta_ff_1_ENQ),
				     .DEQ(meta_ff_1_DEQ),
				     .CLR(meta_ff_1_CLR),
				     .D_OUT(meta_ff_1_D_OUT),
				     .FULL_N(meta_ff_1_FULL_N),
				     .EMPTY_N(meta_ff_1_EMPTY_N));

  // submodule meta_ff_1_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_1_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_1_1_D_IN),
				       .ENQ(meta_ff_1_1_ENQ),
				       .DEQ(meta_ff_1_1_DEQ),
				       .CLR(meta_ff_1_1_CLR),
				       .D_OUT(meta_ff_1_1_D_OUT),
				       .FULL_N(meta_ff_1_1_FULL_N),
				       .EMPTY_N(meta_ff_1_1_EMPTY_N));

  // submodule meta_ff_2
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_2(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_2_D_IN),
				     .ENQ(meta_ff_2_ENQ),
				     .DEQ(meta_ff_2_DEQ),
				     .CLR(meta_ff_2_CLR),
				     .D_OUT(meta_ff_2_D_OUT),
				     .FULL_N(meta_ff_2_FULL_N),
				     .EMPTY_N(meta_ff_2_EMPTY_N));

  // submodule meta_ff_2_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_2_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_2_1_D_IN),
				       .ENQ(meta_ff_2_1_ENQ),
				       .DEQ(meta_ff_2_1_DEQ),
				       .CLR(meta_ff_2_1_CLR),
				       .D_OUT(meta_ff_2_1_D_OUT),
				       .FULL_N(meta_ff_2_1_FULL_N),
				       .EMPTY_N(meta_ff_2_1_EMPTY_N));

  // submodule meta_ff_3
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_3(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_3_D_IN),
				     .ENQ(meta_ff_3_ENQ),
				     .DEQ(meta_ff_3_DEQ),
				     .CLR(meta_ff_3_CLR),
				     .D_OUT(meta_ff_3_D_OUT),
				     .FULL_N(meta_ff_3_FULL_N),
				     .EMPTY_N(meta_ff_3_EMPTY_N));

  // submodule meta_ff_3_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_3_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_3_1_D_IN),
				       .ENQ(meta_ff_3_1_ENQ),
				       .DEQ(meta_ff_3_1_DEQ),
				       .CLR(meta_ff_3_1_CLR),
				       .D_OUT(meta_ff_3_1_D_OUT),
				       .FULL_N(meta_ff_3_1_FULL_N),
				       .EMPTY_N(meta_ff_3_1_EMPTY_N));

  // submodule meta_ff_4
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_4(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_4_D_IN),
				     .ENQ(meta_ff_4_ENQ),
				     .DEQ(meta_ff_4_DEQ),
				     .CLR(meta_ff_4_CLR),
				     .D_OUT(meta_ff_4_D_OUT),
				     .FULL_N(meta_ff_4_FULL_N),
				     .EMPTY_N(meta_ff_4_EMPTY_N));

  // submodule meta_ff_4_1
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) meta_ff_4_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_4_1_D_IN),
				       .ENQ(meta_ff_4_1_ENQ),
				       .DEQ(meta_ff_4_1_DEQ),
				       .CLR(meta_ff_4_1_CLR),
				       .D_OUT(meta_ff_4_1_D_OUT),
				       .FULL_N(meta_ff_4_1_FULL_N),
				       .EMPTY_N(meta_ff_4_1_EMPTY_N));

  // submodule modifier_0
  mkPacketModifier modifier_0(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_0_prev_enq_v),
			      .set_verbosity_verbosity(modifier_0_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_0_writeServer_enq_v),
			      .EN_prev_enq(modifier_0_EN_prev_enq),
			      .EN_writeServer_enq(modifier_0_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_0_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_0_EN_set_verbosity),
			      .RDY_prev_enq(modifier_0_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_0_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_0_writeClient_first),
			      .RDY_writeClient_first(modifier_0_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_0_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_1
  mkPacketModifier modifier_1(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_1_prev_enq_v),
			      .set_verbosity_verbosity(modifier_1_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_1_writeServer_enq_v),
			      .EN_prev_enq(modifier_1_EN_prev_enq),
			      .EN_writeServer_enq(modifier_1_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_1_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_1_EN_set_verbosity),
			      .RDY_prev_enq(modifier_1_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_1_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_1_writeClient_first),
			      .RDY_writeClient_first(modifier_1_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_1_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_2
  mkPacketModifier modifier_2(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_2_prev_enq_v),
			      .set_verbosity_verbosity(modifier_2_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_2_writeServer_enq_v),
			      .EN_prev_enq(modifier_2_EN_prev_enq),
			      .EN_writeServer_enq(modifier_2_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_2_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_2_EN_set_verbosity),
			      .RDY_prev_enq(modifier_2_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_2_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_2_writeClient_first),
			      .RDY_writeClient_first(modifier_2_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_2_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_3
  mkPacketModifier modifier_3(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_3_prev_enq_v),
			      .set_verbosity_verbosity(modifier_3_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_3_writeServer_enq_v),
			      .EN_prev_enq(modifier_3_EN_prev_enq),
			      .EN_writeServer_enq(modifier_3_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_3_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_3_EN_set_verbosity),
			      .RDY_prev_enq(modifier_3_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_3_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_3_writeClient_first),
			      .RDY_writeClient_first(modifier_3_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_3_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_4
  mkPacketModifier modifier_4(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_4_prev_enq_v),
			      .set_verbosity_verbosity(modifier_4_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_4_writeServer_enq_v),
			      .EN_prev_enq(modifier_4_EN_prev_enq),
			      .EN_writeServer_enq(modifier_4_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_4_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_4_EN_set_verbosity),
			      .RDY_prev_enq(modifier_4_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_4_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_4_writeClient_first),
			      .RDY_writeClient_first(modifier_4_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_4_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule outReqFifo_0
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) outReqFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(outReqFifo_0_D_IN),
					.ENQ(outReqFifo_0_ENQ),
					.DEQ(outReqFifo_0_DEQ),
					.CLR(outReqFifo_0_CLR),
					.D_OUT(outReqFifo_0_D_OUT),
					.FULL_N(outReqFifo_0_FULL_N),
					.EMPTY_N(outReqFifo_0_EMPTY_N));

  // submodule output_queues_0
  mkPacketBuffer_64 #(.param1("outputQ 0")) output_queues_0(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_0_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_0_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_0_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_0_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_0_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_0_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_0_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_0_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_0_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_0_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_0_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_0_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_0_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_0_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_1
  mkPacketBuffer_64 #(.param1("outputQ 1")) output_queues_1(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_1_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_1_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_1_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_1_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_1_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_1_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_1_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_1_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_1_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_1_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_1_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_1_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_1_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_1_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_2
  mkPacketBuffer_64 #(.param1("outputQ 2")) output_queues_2(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_2_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_2_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_2_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_2_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_2_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_2_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_2_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_2_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_2_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_2_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_2_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_2_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_2_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_2_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_3
  mkPacketBuffer_64 #(.param1("outputQ 3")) output_queues_3(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_3_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_3_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_3_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_3_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_3_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_3_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_3_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_3_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_3_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_3_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_3_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_3_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_3_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_3_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_4
  mkPacketBuffer_64 #(.param1("outputQ 4")) output_queues_4(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_4_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_4_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_4_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_4_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_4_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_4_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_4_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_4_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_4_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_4_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_4_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_4_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_4_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_4_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_5
  mkPacketBuffer_64 #(.param1("outputQ 5")) output_queues_5(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_5_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_5_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_5_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_5_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_5_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_5_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_5_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_5_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_5_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_5_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_5_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_5_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_5_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_5_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_6
  mkPacketBuffer_64 #(.param1("outputQ 6")) output_queues_6(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_6_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_6_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_6_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_6_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_6_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_6_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_6_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_6_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_6_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_6_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_6_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_6_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_6_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_6_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_7
  mkPacketBuffer_64 #(.param1("outputQ 7")) output_queues_7(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_7_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_7_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_7_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_7_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_7_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_7_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_7_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_7_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_7_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_7_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_7_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_7_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_7_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_7_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule parser_0
  mkParser parser_0(.CLK(CLK),
		    .RST_N(localReset_OUT_RST),
		    .frameIn_put(parser_0_frameIn_put),
		    .set_verbosity_verbosity(parser_0_set_verbosity_verbosity),
		    .EN_frameIn_put(parser_0_EN_frameIn_put),
		    .EN_meta_get(parser_0_EN_meta_get),
		    .EN_set_verbosity(parser_0_EN_set_verbosity),
		    .RDY_frameIn_put(parser_0_RDY_frameIn_put),
		    .meta_get(parser_0_meta_get),
		    .RDY_meta_get(parser_0_RDY_meta_get),
		    .RDY_set_verbosity(),
		    .read_perf_info(),
		    .RDY_read_perf_info());

  // submodule pktBuff_0
  mkPacketBuffer_16 #(.param1("streamIn channel")) pktBuff_0(.CLK(CLK),
							     .RST_N(localReset_OUT_RST),
							     .readServer_readReq_put(pktBuff_0_readServer_readReq_put),
							     .set_verbosity_verbosity(pktBuff_0_set_verbosity_verbosity),
							     .writeServer_enq_v(pktBuff_0_writeServer_enq_v),
							     .EN_writeServer_enq(pktBuff_0_EN_writeServer_enq),
							     .EN_readServer_readData_get(pktBuff_0_EN_readServer_readData_get),
							     .EN_readServer_readLen_get(pktBuff_0_EN_readServer_readLen_get),
							     .EN_readServer_readReq_put(pktBuff_0_EN_readServer_readReq_put),
							     .EN_set_verbosity(pktBuff_0_EN_set_verbosity),
							     .RDY_writeServer_enq(pktBuff_0_RDY_writeServer_enq),
							     .writeServer_notFull(pktBuff_0_writeServer_notFull),
							     .RDY_writeServer_notFull(),
							     .readServer_readData_get(pktBuff_0_readServer_readData_get),
							     .RDY_readServer_readData_get(pktBuff_0_RDY_readServer_readData_get),
							     .readServer_readLen_get(pktBuff_0_readServer_readLen_get),
							     .RDY_readServer_readLen_get(pktBuff_0_RDY_readServer_readLen_get),
							     .RDY_readServer_readReq_put(pktBuff_0_RDY_readServer_readReq_put),
							     .dbg(),
							     .RDY_dbg(),
							     .RDY_set_verbosity());

  // submodule pktBuff_0_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_fifoEop_D_IN),
					     .ENQ(pktBuff_0_fifoEop_ENQ),
					     .DEQ(pktBuff_0_fifoEop_DEQ),
					     .CLR(pktBuff_0_fifoEop_CLR),
					     .D_OUT(pktBuff_0_fifoEop_D_OUT),
					     .FULL_N(pktBuff_0_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_0_fifoEop_EMPTY_N));

  // submodule pktBuff_0_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_0_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoLen_D_IN),
						 .ENQ(pktBuff_0_fifoLen_ENQ),
						 .DEQ(pktBuff_0_fifoLen_DEQ),
						 .CLR(pktBuff_0_fifoLen_CLR),
						 .D_OUT(pktBuff_0_fifoLen_D_OUT),
						 .FULL_N(pktBuff_0_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoLen_EMPTY_N));

  // submodule pktBuff_0_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_fifoReadData_D_IN),
						  .ENQ(pktBuff_0_fifoReadData_ENQ),
						  .DEQ(pktBuff_0_fifoReadData_DEQ),
						  .CLR(pktBuff_0_fifoReadData_CLR),
						  .D_OUT(pktBuff_0_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_0_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_0_fifoReadData_EMPTY_N));

  // submodule pktBuff_0_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoReadReq_D_IN),
						 .ENQ(pktBuff_0_fifoReadReq_ENQ),
						 .DEQ(pktBuff_0_fifoReadReq_DEQ),
						 .CLR(pktBuff_0_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_0_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoReadReq_EMPTY_N));

  // submodule pktBuff_0_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_fifoWriteData_D_IN),
						   .ENQ(pktBuff_0_fifoWriteData_ENQ),
						   .DEQ(pktBuff_0_fifoWriteData_DEQ),
						   .CLR(pktBuff_0_fifoWriteData_CLR),
						   .D_OUT(pktBuff_0_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_0_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_0_fifoWriteData_EMPTY_N));

  // submodule pktBuff_0_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_0_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_incomingReqs_D_IN),
						  .ENQ(pktBuff_0_incomingReqs_ENQ),
						  .DEQ(pktBuff_0_incomingReqs_DEQ),
						  .CLR(pktBuff_0_incomingReqs_CLR),
						  .D_OUT(pktBuff_0_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_0_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_0_incomingReqs_EMPTY_N));

  // submodule pktBuff_0_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_0_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_0_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_0_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_0_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_0_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_0_memBuffer_memory_DIA),
						       .DIB(pktBuff_0_memBuffer_memory_DIB),
						       .WEA(pktBuff_0_memBuffer_memory_WEA),
						       .WEB(pktBuff_0_memBuffer_memory_WEB),
						       .ENA(pktBuff_0_memBuffer_memory_ENA),
						       .ENB(pktBuff_0_memBuffer_memory_ENB),
						       .DOA(pktBuff_0_memBuffer_memory_DOA),
						       .DOB(pktBuff_0_memBuffer_memory_DOB));

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_0_meta_ff
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) pktBuff_0_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_meta_ff_D_IN),
					     .ENQ(pktBuff_0_meta_ff_ENQ),
					     .DEQ(pktBuff_0_meta_ff_DEQ),
					     .CLR(pktBuff_0_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_0_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_0_meta_ff_EMPTY_N));

  // submodule pktBuff_0_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 0")) pktBuff_0_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_0_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_0_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_0_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_0_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_0_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_0_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_0_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_0_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_0_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_0_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_0_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_0_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_0_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_0_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_readDataFifo_D_IN),
						  .ENQ(pktBuff_0_readDataFifo_ENQ),
						  .DEQ(pktBuff_0_readDataFifo_DEQ),
						  .CLR(pktBuff_0_readDataFifo_CLR),
						  .D_OUT(pktBuff_0_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_0_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_0_readDataFifo_EMPTY_N));

  // submodule pktBuff_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readLenFifo_D_IN),
						 .ENQ(pktBuff_0_readLenFifo_ENQ),
						 .DEQ(pktBuff_0_readLenFifo_DEQ),
						 .CLR(pktBuff_0_readLenFifo_CLR),
						 .D_OUT(pktBuff_0_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_0_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readLenFifo_EMPTY_N));

  // submodule pktBuff_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readReqFifo_D_IN),
						 .ENQ(pktBuff_0_readReqFifo_ENQ),
						 .DEQ(pktBuff_0_readReqFifo_DEQ),
						 .CLR(pktBuff_0_readReqFifo_CLR),
						 .D_OUT(pktBuff_0_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_0_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readReqFifo_EMPTY_N));

  // submodule pktBuff_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_writeDataFifo_D_IN),
						   .ENQ(pktBuff_0_writeDataFifo_ENQ),
						   .DEQ(pktBuff_0_writeDataFifo_DEQ),
						   .CLR(pktBuff_0_writeDataFifo_CLR),
						   .D_OUT(pktBuff_0_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_0_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_0_writeDataFifo_EMPTY_N));

  // submodule pktBuff_1_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_fifoEop_D_IN),
					     .ENQ(pktBuff_1_fifoEop_ENQ),
					     .DEQ(pktBuff_1_fifoEop_DEQ),
					     .CLR(pktBuff_1_fifoEop_CLR),
					     .D_OUT(pktBuff_1_fifoEop_D_OUT),
					     .FULL_N(pktBuff_1_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_1_fifoEop_EMPTY_N));

  // submodule pktBuff_1_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_1_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoLen_D_IN),
						 .ENQ(pktBuff_1_fifoLen_ENQ),
						 .DEQ(pktBuff_1_fifoLen_DEQ),
						 .CLR(pktBuff_1_fifoLen_CLR),
						 .D_OUT(pktBuff_1_fifoLen_D_OUT),
						 .FULL_N(pktBuff_1_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoLen_EMPTY_N));

  // submodule pktBuff_1_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_fifoReadData_D_IN),
						  .ENQ(pktBuff_1_fifoReadData_ENQ),
						  .DEQ(pktBuff_1_fifoReadData_DEQ),
						  .CLR(pktBuff_1_fifoReadData_CLR),
						  .D_OUT(pktBuff_1_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_1_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_1_fifoReadData_EMPTY_N));

  // submodule pktBuff_1_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoReadReq_D_IN),
						 .ENQ(pktBuff_1_fifoReadReq_ENQ),
						 .DEQ(pktBuff_1_fifoReadReq_DEQ),
						 .CLR(pktBuff_1_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_1_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoReadReq_EMPTY_N));

  // submodule pktBuff_1_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_fifoWriteData_D_IN),
						   .ENQ(pktBuff_1_fifoWriteData_ENQ),
						   .DEQ(pktBuff_1_fifoWriteData_DEQ),
						   .CLR(pktBuff_1_fifoWriteData_CLR),
						   .D_OUT(pktBuff_1_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_1_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_1_fifoWriteData_EMPTY_N));

  // submodule pktBuff_1_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_1_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_incomingReqs_D_IN),
						  .ENQ(pktBuff_1_incomingReqs_ENQ),
						  .DEQ(pktBuff_1_incomingReqs_DEQ),
						  .CLR(pktBuff_1_incomingReqs_CLR),
						  .D_OUT(pktBuff_1_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_1_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_1_incomingReqs_EMPTY_N));

  // submodule pktBuff_1_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_1_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_1_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_1_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_1_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_1_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_1_memBuffer_memory_DIA),
						       .DIB(pktBuff_1_memBuffer_memory_DIB),
						       .WEA(pktBuff_1_memBuffer_memory_WEA),
						       .WEB(pktBuff_1_memBuffer_memory_WEB),
						       .ENA(pktBuff_1_memBuffer_memory_ENA),
						       .ENB(pktBuff_1_memBuffer_memory_ENB),
						       .DOA(pktBuff_1_memBuffer_memory_DOA),
						       .DOB(pktBuff_1_memBuffer_memory_DOB));

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_1_meta_ff
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) pktBuff_1_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_meta_ff_D_IN),
					     .ENQ(pktBuff_1_meta_ff_ENQ),
					     .DEQ(pktBuff_1_meta_ff_DEQ),
					     .CLR(pktBuff_1_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_1_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_1_meta_ff_EMPTY_N));

  // submodule pktBuff_1_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 1")) pktBuff_1_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_1_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_1_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_1_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_1_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_1_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_1_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_1_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_1_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_1_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_1_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_1_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_1_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_1_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_1_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_readDataFifo_D_IN),
						  .ENQ(pktBuff_1_readDataFifo_ENQ),
						  .DEQ(pktBuff_1_readDataFifo_DEQ),
						  .CLR(pktBuff_1_readDataFifo_CLR),
						  .D_OUT(pktBuff_1_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_1_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_1_readDataFifo_EMPTY_N));

  // submodule pktBuff_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readLenFifo_D_IN),
						 .ENQ(pktBuff_1_readLenFifo_ENQ),
						 .DEQ(pktBuff_1_readLenFifo_DEQ),
						 .CLR(pktBuff_1_readLenFifo_CLR),
						 .D_OUT(pktBuff_1_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_1_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readLenFifo_EMPTY_N));

  // submodule pktBuff_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readReqFifo_D_IN),
						 .ENQ(pktBuff_1_readReqFifo_ENQ),
						 .DEQ(pktBuff_1_readReqFifo_DEQ),
						 .CLR(pktBuff_1_readReqFifo_CLR),
						 .D_OUT(pktBuff_1_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_1_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readReqFifo_EMPTY_N));

  // submodule pktBuff_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_writeDataFifo_D_IN),
						   .ENQ(pktBuff_1_writeDataFifo_ENQ),
						   .DEQ(pktBuff_1_writeDataFifo_DEQ),
						   .CLR(pktBuff_1_writeDataFifo_CLR),
						   .D_OUT(pktBuff_1_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_1_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_1_writeDataFifo_EMPTY_N));

  // submodule pktBuff_2_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_2_fifoEop_D_IN),
					     .ENQ(pktBuff_2_fifoEop_ENQ),
					     .DEQ(pktBuff_2_fifoEop_DEQ),
					     .CLR(pktBuff_2_fifoEop_CLR),
					     .D_OUT(pktBuff_2_fifoEop_D_OUT),
					     .FULL_N(pktBuff_2_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_2_fifoEop_EMPTY_N));

  // submodule pktBuff_2_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_2_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_fifoLen_D_IN),
						 .ENQ(pktBuff_2_fifoLen_ENQ),
						 .DEQ(pktBuff_2_fifoLen_DEQ),
						 .CLR(pktBuff_2_fifoLen_CLR),
						 .D_OUT(pktBuff_2_fifoLen_D_OUT),
						 .FULL_N(pktBuff_2_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_2_fifoLen_EMPTY_N));

  // submodule pktBuff_2_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_fifoReadData_D_IN),
						  .ENQ(pktBuff_2_fifoReadData_ENQ),
						  .DEQ(pktBuff_2_fifoReadData_DEQ),
						  .CLR(pktBuff_2_fifoReadData_CLR),
						  .D_OUT(pktBuff_2_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_2_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_2_fifoReadData_EMPTY_N));

  // submodule pktBuff_2_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_fifoReadReq_D_IN),
						 .ENQ(pktBuff_2_fifoReadReq_ENQ),
						 .DEQ(pktBuff_2_fifoReadReq_DEQ),
						 .CLR(pktBuff_2_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_2_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_2_fifoReadReq_EMPTY_N));

  // submodule pktBuff_2_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_2_fifoWriteData_D_IN),
						   .ENQ(pktBuff_2_fifoWriteData_ENQ),
						   .DEQ(pktBuff_2_fifoWriteData_DEQ),
						   .CLR(pktBuff_2_fifoWriteData_CLR),
						   .D_OUT(pktBuff_2_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_2_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_2_fifoWriteData_EMPTY_N));

  // submodule pktBuff_2_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_2_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_incomingReqs_D_IN),
						  .ENQ(pktBuff_2_incomingReqs_ENQ),
						  .DEQ(pktBuff_2_incomingReqs_DEQ),
						  .CLR(pktBuff_2_incomingReqs_CLR),
						  .D_OUT(pktBuff_2_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_2_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_2_incomingReqs_EMPTY_N));

  // submodule pktBuff_2_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_2_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_2_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_2_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_2_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_2_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_2_memBuffer_memory_DIA),
						       .DIB(pktBuff_2_memBuffer_memory_DIB),
						       .WEA(pktBuff_2_memBuffer_memory_WEA),
						       .WEB(pktBuff_2_memBuffer_memory_WEB),
						       .ENA(pktBuff_2_memBuffer_memory_ENA),
						       .ENB(pktBuff_2_memBuffer_memory_ENB),
						       .DOA(pktBuff_2_memBuffer_memory_DOA),
						       .DOB(pktBuff_2_memBuffer_memory_DOB));

  // submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_2_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_2_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_2_meta_ff
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) pktBuff_2_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_2_meta_ff_D_IN),
					     .ENQ(pktBuff_2_meta_ff_ENQ),
					     .DEQ(pktBuff_2_meta_ff_DEQ),
					     .CLR(pktBuff_2_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_2_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_2_meta_ff_EMPTY_N));

  // submodule pktBuff_2_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 2")) pktBuff_2_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_2_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_2_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_2_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_2_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_2_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_2_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_2_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_2_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_2_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_2_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_2_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_2_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_2_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_2_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_readDataFifo_D_IN),
						  .ENQ(pktBuff_2_readDataFifo_ENQ),
						  .DEQ(pktBuff_2_readDataFifo_DEQ),
						  .CLR(pktBuff_2_readDataFifo_CLR),
						  .D_OUT(pktBuff_2_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_2_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_2_readDataFifo_EMPTY_N));

  // submodule pktBuff_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readLenFifo_D_IN),
						 .ENQ(pktBuff_2_readLenFifo_ENQ),
						 .DEQ(pktBuff_2_readLenFifo_DEQ),
						 .CLR(pktBuff_2_readLenFifo_CLR),
						 .D_OUT(pktBuff_2_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_2_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readLenFifo_EMPTY_N));

  // submodule pktBuff_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readReqFifo_D_IN),
						 .ENQ(pktBuff_2_readReqFifo_ENQ),
						 .DEQ(pktBuff_2_readReqFifo_DEQ),
						 .CLR(pktBuff_2_readReqFifo_CLR),
						 .D_OUT(pktBuff_2_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_2_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readReqFifo_EMPTY_N));

  // submodule pktBuff_2_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_2_writeDataFifo_D_IN),
						   .ENQ(pktBuff_2_writeDataFifo_ENQ),
						   .DEQ(pktBuff_2_writeDataFifo_DEQ),
						   .CLR(pktBuff_2_writeDataFifo_CLR),
						   .D_OUT(pktBuff_2_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_2_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_2_writeDataFifo_EMPTY_N));

  // submodule pktBuff_3_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_3_fifoEop_D_IN),
					     .ENQ(pktBuff_3_fifoEop_ENQ),
					     .DEQ(pktBuff_3_fifoEop_DEQ),
					     .CLR(pktBuff_3_fifoEop_CLR),
					     .D_OUT(pktBuff_3_fifoEop_D_OUT),
					     .FULL_N(pktBuff_3_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_3_fifoEop_EMPTY_N));

  // submodule pktBuff_3_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_3_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_fifoLen_D_IN),
						 .ENQ(pktBuff_3_fifoLen_ENQ),
						 .DEQ(pktBuff_3_fifoLen_DEQ),
						 .CLR(pktBuff_3_fifoLen_CLR),
						 .D_OUT(pktBuff_3_fifoLen_D_OUT),
						 .FULL_N(pktBuff_3_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_3_fifoLen_EMPTY_N));

  // submodule pktBuff_3_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_fifoReadData_D_IN),
						  .ENQ(pktBuff_3_fifoReadData_ENQ),
						  .DEQ(pktBuff_3_fifoReadData_DEQ),
						  .CLR(pktBuff_3_fifoReadData_CLR),
						  .D_OUT(pktBuff_3_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_3_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_3_fifoReadData_EMPTY_N));

  // submodule pktBuff_3_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_fifoReadReq_D_IN),
						 .ENQ(pktBuff_3_fifoReadReq_ENQ),
						 .DEQ(pktBuff_3_fifoReadReq_DEQ),
						 .CLR(pktBuff_3_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_3_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_3_fifoReadReq_EMPTY_N));

  // submodule pktBuff_3_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_3_fifoWriteData_D_IN),
						   .ENQ(pktBuff_3_fifoWriteData_ENQ),
						   .DEQ(pktBuff_3_fifoWriteData_DEQ),
						   .CLR(pktBuff_3_fifoWriteData_CLR),
						   .D_OUT(pktBuff_3_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_3_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_3_fifoWriteData_EMPTY_N));

  // submodule pktBuff_3_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_3_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_incomingReqs_D_IN),
						  .ENQ(pktBuff_3_incomingReqs_ENQ),
						  .DEQ(pktBuff_3_incomingReqs_DEQ),
						  .CLR(pktBuff_3_incomingReqs_CLR),
						  .D_OUT(pktBuff_3_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_3_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_3_incomingReqs_EMPTY_N));

  // submodule pktBuff_3_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_3_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_3_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_3_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_3_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_3_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_3_memBuffer_memory_DIA),
						       .DIB(pktBuff_3_memBuffer_memory_DIB),
						       .WEA(pktBuff_3_memBuffer_memory_WEA),
						       .WEB(pktBuff_3_memBuffer_memory_WEB),
						       .ENA(pktBuff_3_memBuffer_memory_ENA),
						       .ENB(pktBuff_3_memBuffer_memory_ENB),
						       .DOA(pktBuff_3_memBuffer_memory_DOA),
						       .DOB(pktBuff_3_memBuffer_memory_DOB));

  // submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_3_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_3_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_3_meta_ff
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) pktBuff_3_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_3_meta_ff_D_IN),
					     .ENQ(pktBuff_3_meta_ff_ENQ),
					     .DEQ(pktBuff_3_meta_ff_DEQ),
					     .CLR(pktBuff_3_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_3_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_3_meta_ff_EMPTY_N));

  // submodule pktBuff_3_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 3")) pktBuff_3_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_3_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_3_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_3_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_3_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_3_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_3_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_3_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_3_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_3_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_3_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_3_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_3_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_3_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_3_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_3_readDataFifo_D_IN),
						  .ENQ(pktBuff_3_readDataFifo_ENQ),
						  .DEQ(pktBuff_3_readDataFifo_DEQ),
						  .CLR(pktBuff_3_readDataFifo_CLR),
						  .D_OUT(pktBuff_3_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_3_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_3_readDataFifo_EMPTY_N));

  // submodule pktBuff_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_readLenFifo_D_IN),
						 .ENQ(pktBuff_3_readLenFifo_ENQ),
						 .DEQ(pktBuff_3_readLenFifo_DEQ),
						 .CLR(pktBuff_3_readLenFifo_CLR),
						 .D_OUT(pktBuff_3_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_3_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_3_readLenFifo_EMPTY_N));

  // submodule pktBuff_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_3_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_3_readReqFifo_D_IN),
						 .ENQ(pktBuff_3_readReqFifo_ENQ),
						 .DEQ(pktBuff_3_readReqFifo_DEQ),
						 .CLR(pktBuff_3_readReqFifo_CLR),
						 .D_OUT(pktBuff_3_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_3_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_3_readReqFifo_EMPTY_N));

  // submodule pktBuff_3_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_3_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_3_writeDataFifo_D_IN),
						   .ENQ(pktBuff_3_writeDataFifo_ENQ),
						   .DEQ(pktBuff_3_writeDataFifo_DEQ),
						   .CLR(pktBuff_3_writeDataFifo_CLR),
						   .D_OUT(pktBuff_3_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_3_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_3_writeDataFifo_EMPTY_N));

  // submodule pktBuff_4_meta_ff
  FIFO2 #(.width(32'd1499),
	  .guarded(32'd1)) pktBuff_4_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_4_meta_ff_D_IN),
					     .ENQ(pktBuff_4_meta_ff_ENQ),
					     .DEQ(pktBuff_4_meta_ff_DEQ),
					     .CLR(pktBuff_4_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_4_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_4_meta_ff_EMPTY_N));

  // submodule pktBuff_4_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 4")) pktBuff_4_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_4_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_4_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_4_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_4_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_4_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_4_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_4_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_4_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_4_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_4_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_4_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_4_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_4_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_4_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_4_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_4_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_4_readDataFifo_D_IN),
						  .ENQ(pktBuff_4_readDataFifo_ENQ),
						  .DEQ(pktBuff_4_readDataFifo_DEQ),
						  .CLR(pktBuff_4_readDataFifo_CLR),
						  .D_OUT(pktBuff_4_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_4_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_4_readDataFifo_EMPTY_N));

  // submodule pktBuff_4_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_4_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_4_readLenFifo_D_IN),
						 .ENQ(pktBuff_4_readLenFifo_ENQ),
						 .DEQ(pktBuff_4_readLenFifo_DEQ),
						 .CLR(pktBuff_4_readLenFifo_CLR),
						 .D_OUT(pktBuff_4_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_4_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_4_readLenFifo_EMPTY_N));

  // submodule pktBuff_4_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_4_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_4_readReqFifo_D_IN),
						 .ENQ(pktBuff_4_readReqFifo_ENQ),
						 .DEQ(pktBuff_4_readReqFifo_DEQ),
						 .CLR(pktBuff_4_readReqFifo_CLR),
						 .D_OUT(pktBuff_4_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_4_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_4_readReqFifo_EMPTY_N));

  // submodule pktBuff_4_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_4_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_4_writeDataFifo_D_IN),
						   .ENQ(pktBuff_4_writeDataFifo_ENQ),
						   .DEQ(pktBuff_4_writeDataFifo_DEQ),
						   .CLR(pktBuff_4_writeDataFifo_CLR),
						   .D_OUT(pktBuff_4_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_4_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_4_writeDataFifo_EMPTY_N));

  // submodule pktLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktLenFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(pktLenFifo_0_D_IN),
					.ENQ(pktLenFifo_0_ENQ),
					.DEQ(pktLenFifo_0_DEQ),
					.CLR(pktLenFifo_0_CLR),
					.D_OUT(pktLenFifo_0_D_OUT),
					.FULL_N(pktLenFifo_0_FULL_N),
					.EMPTY_N(pktLenFifo_0_EMPTY_N));

  // submodule readDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) readDataFifo_0(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(readDataFifo_0_D_IN),
					  .ENQ(readDataFifo_0_ENQ),
					  .DEQ(readDataFifo_0_DEQ),
					  .CLR(readDataFifo_0_CLR),
					  .D_OUT(readDataFifo_0_D_OUT),
					  .FULL_N(readDataFifo_0_FULL_N),
					  .EMPTY_N(readDataFifo_0_EMPTY_N));

  // submodule readLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readLenFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readLenFifo_0_D_IN),
					 .ENQ(readLenFifo_0_ENQ),
					 .DEQ(readLenFifo_0_DEQ),
					 .CLR(readLenFifo_0_CLR),
					 .D_OUT(readLenFifo_0_D_OUT),
					 .FULL_N(readLenFifo_0_FULL_N),
					 .EMPTY_N(readLenFifo_0_EMPTY_N));

  // submodule readReqFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readReqFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readReqFifo_0_D_IN),
					 .ENQ(readReqFifo_0_ENQ),
					 .DEQ(readReqFifo_0_DEQ),
					 .CLR(readReqFifo_0_CLR),
					 .D_OUT(readReqFifo_0_D_OUT),
					 .FULL_N(readReqFifo_0_FULL_N),
					 .EMPTY_N(readReqFifo_0_EMPTY_N));

  // submodule ringToMac_0_fifoTxData_dCombinedReset
  ResetEither ringToMac_0_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_0_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_0_fifoTxData_sCombinedReset
  ResetEither ringToMac_0_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_0_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_0_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_0_readDataFifo_D_IN),
						    .ENQ(ringToMac_0_readDataFifo_ENQ),
						    .DEQ(ringToMac_0_readDataFifo_DEQ),
						    .CLR(ringToMac_0_readDataFifo_CLR),
						    .D_OUT(ringToMac_0_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_0_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_readDataFifo_EMPTY_N));

  // submodule ringToMac_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readLenFifo_D_IN),
						   .ENQ(ringToMac_0_readLenFifo_ENQ),
						   .DEQ(ringToMac_0_readLenFifo_DEQ),
						   .CLR(ringToMac_0_readLenFifo_CLR),
						   .D_OUT(ringToMac_0_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_0_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readLenFifo_EMPTY_N));

  // submodule ringToMac_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readReqFifo_D_IN),
						   .ENQ(ringToMac_0_readReqFifo_ENQ),
						   .DEQ(ringToMac_0_readReqFifo_DEQ),
						   .CLR(ringToMac_0_readReqFifo_CLR),
						   .D_OUT(ringToMac_0_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_0_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readReqFifo_EMPTY_N));

  // submodule ringToMac_0_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_0_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_0_tx_fifo_sD_IN),
						    .sENQ(ringToMac_0_tx_fifo_sENQ),
						    .dDEQ(ringToMac_0_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_0_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_0_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_0_tx_fifo_dD_OUT));

  // submodule ringToMac_0_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_0_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_0_writeMacFifo_D_IN),
						    .ENQ(ringToMac_0_writeMacFifo_ENQ),
						    .DEQ(ringToMac_0_writeMacFifo_DEQ),
						    .CLR(ringToMac_0_writeMacFifo_CLR),
						    .D_OUT(ringToMac_0_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_0_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_writeMacFifo_EMPTY_N));

  // submodule ringToMac_1_fifoTxData_dCombinedReset
  ResetEither ringToMac_1_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_1_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_1_fifoTxData_sCombinedReset
  ResetEither ringToMac_1_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_1_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_1_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_1_readDataFifo_D_IN),
						    .ENQ(ringToMac_1_readDataFifo_ENQ),
						    .DEQ(ringToMac_1_readDataFifo_DEQ),
						    .CLR(ringToMac_1_readDataFifo_CLR),
						    .D_OUT(ringToMac_1_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_1_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_readDataFifo_EMPTY_N));

  // submodule ringToMac_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readLenFifo_D_IN),
						   .ENQ(ringToMac_1_readLenFifo_ENQ),
						   .DEQ(ringToMac_1_readLenFifo_DEQ),
						   .CLR(ringToMac_1_readLenFifo_CLR),
						   .D_OUT(ringToMac_1_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_1_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readLenFifo_EMPTY_N));

  // submodule ringToMac_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readReqFifo_D_IN),
						   .ENQ(ringToMac_1_readReqFifo_ENQ),
						   .DEQ(ringToMac_1_readReqFifo_DEQ),
						   .CLR(ringToMac_1_readReqFifo_CLR),
						   .D_OUT(ringToMac_1_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_1_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readReqFifo_EMPTY_N));

  // submodule ringToMac_1_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_1_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_1_tx_fifo_sD_IN),
						    .sENQ(ringToMac_1_tx_fifo_sENQ),
						    .dDEQ(ringToMac_1_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_1_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_1_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_1_tx_fifo_dD_OUT));

  // submodule ringToMac_1_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_1_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_1_writeMacFifo_D_IN),
						    .ENQ(ringToMac_1_writeMacFifo_ENQ),
						    .DEQ(ringToMac_1_writeMacFifo_DEQ),
						    .CLR(ringToMac_1_writeMacFifo_CLR),
						    .D_OUT(ringToMac_1_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_1_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_writeMacFifo_EMPTY_N));

  // submodule ringToMac_2_fifoTxData_dCombinedReset
  ResetEither ringToMac_2_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_2_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_2_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_2_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_2_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_2_fifoTxData_sCombinedReset
  ResetEither ringToMac_2_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_2_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_2_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_2_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_2_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_2_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_2_readDataFifo_D_IN),
						    .ENQ(ringToMac_2_readDataFifo_ENQ),
						    .DEQ(ringToMac_2_readDataFifo_DEQ),
						    .CLR(ringToMac_2_readDataFifo_CLR),
						    .D_OUT(ringToMac_2_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_2_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_2_readDataFifo_EMPTY_N));

  // submodule ringToMac_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_2_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_2_readLenFifo_D_IN),
						   .ENQ(ringToMac_2_readLenFifo_ENQ),
						   .DEQ(ringToMac_2_readLenFifo_DEQ),
						   .CLR(ringToMac_2_readLenFifo_CLR),
						   .D_OUT(ringToMac_2_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_2_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_2_readLenFifo_EMPTY_N));

  // submodule ringToMac_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_2_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_2_readReqFifo_D_IN),
						   .ENQ(ringToMac_2_readReqFifo_ENQ),
						   .DEQ(ringToMac_2_readReqFifo_DEQ),
						   .CLR(ringToMac_2_readReqFifo_CLR),
						   .D_OUT(ringToMac_2_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_2_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_2_readReqFifo_EMPTY_N));

  // submodule ringToMac_2_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_2_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_2_tx_fifo_sD_IN),
						    .sENQ(ringToMac_2_tx_fifo_sENQ),
						    .dDEQ(ringToMac_2_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_2_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_2_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_2_tx_fifo_dD_OUT));

  // submodule ringToMac_2_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_2_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_2_writeMacFifo_D_IN),
						    .ENQ(ringToMac_2_writeMacFifo_ENQ),
						    .DEQ(ringToMac_2_writeMacFifo_DEQ),
						    .CLR(ringToMac_2_writeMacFifo_CLR),
						    .D_OUT(ringToMac_2_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_2_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_2_writeMacFifo_EMPTY_N));

  // submodule ringToMac_3_fifoTxData_dCombinedReset
  ResetEither ringToMac_3_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_3_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_3_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_3_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_3_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_3_fifoTxData_sCombinedReset
  ResetEither ringToMac_3_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_3_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_3_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_3_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_3_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_3_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_3_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_3_readDataFifo_D_IN),
						    .ENQ(ringToMac_3_readDataFifo_ENQ),
						    .DEQ(ringToMac_3_readDataFifo_DEQ),
						    .CLR(ringToMac_3_readDataFifo_CLR),
						    .D_OUT(ringToMac_3_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_3_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_3_readDataFifo_EMPTY_N));

  // submodule ringToMac_3_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_3_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_3_readLenFifo_D_IN),
						   .ENQ(ringToMac_3_readLenFifo_ENQ),
						   .DEQ(ringToMac_3_readLenFifo_DEQ),
						   .CLR(ringToMac_3_readLenFifo_CLR),
						   .D_OUT(ringToMac_3_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_3_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_3_readLenFifo_EMPTY_N));

  // submodule ringToMac_3_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_3_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_3_readReqFifo_D_IN),
						   .ENQ(ringToMac_3_readReqFifo_ENQ),
						   .DEQ(ringToMac_3_readReqFifo_DEQ),
						   .CLR(ringToMac_3_readReqFifo_CLR),
						   .D_OUT(ringToMac_3_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_3_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_3_readReqFifo_EMPTY_N));

  // submodule ringToMac_3_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_3_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_3_tx_fifo_sD_IN),
						    .sENQ(ringToMac_3_tx_fifo_sENQ),
						    .dDEQ(ringToMac_3_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_3_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_3_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_3_tx_fifo_dD_OUT));

  // submodule ringToMac_3_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_3_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_3_writeMacFifo_D_IN),
						    .ENQ(ringToMac_3_writeMacFifo_ENQ),
						    .DEQ(ringToMac_3_writeMacFifo_DEQ),
						    .CLR(ringToMac_3_writeMacFifo_CLR),
						    .D_OUT(ringToMac_3_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_3_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_3_writeMacFifo_EMPTY_N));

  // submodule verbose_ff_0
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_0_D_IN),
					.ENQ(verbose_ff_0_ENQ),
					.DEQ(verbose_ff_0_DEQ),
					.CLR(verbose_ff_0_CLR),
					.D_OUT(verbose_ff_0_D_OUT),
					.FULL_N(verbose_ff_0_FULL_N),
					.EMPTY_N(verbose_ff_0_EMPTY_N));

  // submodule verbose_ff_0_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_1_D_IN),
					  .ENQ(verbose_ff_0_1_ENQ),
					  .DEQ(verbose_ff_0_1_DEQ),
					  .CLR(verbose_ff_0_1_CLR),
					  .D_OUT(verbose_ff_0_1_D_OUT),
					  .FULL_N(verbose_ff_0_1_FULL_N),
					  .EMPTY_N(verbose_ff_0_1_EMPTY_N));

  // submodule verbose_ff_0_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_2_D_IN),
					  .ENQ(verbose_ff_0_2_ENQ),
					  .DEQ(verbose_ff_0_2_DEQ),
					  .CLR(verbose_ff_0_2_CLR),
					  .D_OUT(verbose_ff_0_2_D_OUT),
					  .FULL_N(verbose_ff_0_2_FULL_N),
					  .EMPTY_N(verbose_ff_0_2_EMPTY_N));

  // submodule verbose_ff_0_3
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_3(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_3_D_IN),
					  .ENQ(verbose_ff_0_3_ENQ),
					  .DEQ(verbose_ff_0_3_DEQ),
					  .CLR(verbose_ff_0_3_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_0_3_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_1_D_IN),
					.ENQ(verbose_ff_1_ENQ),
					.DEQ(verbose_ff_1_DEQ),
					.CLR(verbose_ff_1_CLR),
					.D_OUT(verbose_ff_1_D_OUT),
					.FULL_N(verbose_ff_1_FULL_N),
					.EMPTY_N(verbose_ff_1_EMPTY_N));

  // submodule verbose_ff_1_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_1_D_IN),
					  .ENQ(verbose_ff_1_1_ENQ),
					  .DEQ(verbose_ff_1_1_DEQ),
					  .CLR(verbose_ff_1_1_CLR),
					  .D_OUT(verbose_ff_1_1_D_OUT),
					  .FULL_N(verbose_ff_1_1_FULL_N),
					  .EMPTY_N(verbose_ff_1_1_EMPTY_N));

  // submodule verbose_ff_1_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_2_D_IN),
					  .ENQ(verbose_ff_1_2_ENQ),
					  .DEQ(verbose_ff_1_2_DEQ),
					  .CLR(verbose_ff_1_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_1_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_2_D_IN),
					.ENQ(verbose_ff_2_ENQ),
					.DEQ(verbose_ff_2_DEQ),
					.CLR(verbose_ff_2_CLR),
					.D_OUT(verbose_ff_2_D_OUT),
					.FULL_N(verbose_ff_2_FULL_N),
					.EMPTY_N(verbose_ff_2_EMPTY_N));

  // submodule verbose_ff_2_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_2_1_D_IN),
					  .ENQ(verbose_ff_2_1_ENQ),
					  .DEQ(verbose_ff_2_1_DEQ),
					  .CLR(verbose_ff_2_1_CLR),
					  .D_OUT(verbose_ff_2_1_D_OUT),
					  .FULL_N(verbose_ff_2_1_FULL_N),
					  .EMPTY_N(verbose_ff_2_1_EMPTY_N));

  // submodule verbose_ff_2_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_2_2_D_IN),
					  .ENQ(verbose_ff_2_2_ENQ),
					  .DEQ(verbose_ff_2_2_DEQ),
					  .CLR(verbose_ff_2_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_2_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_3
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_3_D_IN),
					.ENQ(verbose_ff_3_ENQ),
					.DEQ(verbose_ff_3_DEQ),
					.CLR(verbose_ff_3_CLR),
					.D_OUT(verbose_ff_3_D_OUT),
					.FULL_N(verbose_ff_3_FULL_N),
					.EMPTY_N(verbose_ff_3_EMPTY_N));

  // submodule verbose_ff_3_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_3_1_D_IN),
					  .ENQ(verbose_ff_3_1_ENQ),
					  .DEQ(verbose_ff_3_1_DEQ),
					  .CLR(verbose_ff_3_1_CLR),
					  .D_OUT(verbose_ff_3_1_D_OUT),
					  .FULL_N(verbose_ff_3_1_FULL_N),
					  .EMPTY_N(verbose_ff_3_1_EMPTY_N));

  // submodule verbose_ff_3_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_3_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_3_2_D_IN),
					  .ENQ(verbose_ff_3_2_ENQ),
					  .DEQ(verbose_ff_3_2_DEQ),
					  .CLR(verbose_ff_3_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_3_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_4
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_4(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_4_D_IN),
					.ENQ(verbose_ff_4_ENQ),
					.DEQ(verbose_ff_4_DEQ),
					.CLR(verbose_ff_4_CLR),
					.D_OUT(verbose_ff_4_D_OUT),
					.FULL_N(verbose_ff_4_FULL_N),
					.EMPTY_N(verbose_ff_4_EMPTY_N));

  // submodule writeDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) writeDataFifo_0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(writeDataFifo_0_D_IN),
					   .ENQ(writeDataFifo_0_ENQ),
					   .DEQ(writeDataFifo_0_DEQ),
					   .CLR(writeDataFifo_0_CLR),
					   .D_OUT(writeDataFifo_0_D_OUT),
					   .FULL_N(writeDataFifo_0_FULL_N),
					   .EMPTY_N(writeDataFifo_0_EMPTY_N));

  // submodule xbar_lower_lower_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_lower_lower_f_D_IN),
						    .ENQ(xbar_lower_lower_lower_f_ENQ),
						    .DEQ(xbar_lower_lower_lower_f_DEQ),
						    .CLR(xbar_lower_lower_lower_f_CLR),
						    .D_OUT(xbar_lower_lower_lower_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_lower_lower_f_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_lower_merges_1_fi0_D_IN),
							 .ENQ(xbar_lower_lower_merges_1_fi0_ENQ),
							 .DEQ(xbar_lower_lower_merges_1_fi0_DEQ),
							 .CLR(xbar_lower_lower_merges_1_fi0_CLR),
							 .D_OUT(xbar_lower_lower_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_lower_lower_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_lower_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_lower_merges_1_fi1_D_IN),
							 .ENQ(xbar_lower_lower_merges_1_fi1_ENQ),
							 .DEQ(xbar_lower_lower_merges_1_fi1_DEQ),
							 .CLR(xbar_lower_lower_merges_1_fi1_CLR),
							 .D_OUT(xbar_lower_lower_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_lower_lower_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_lower_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_lower_lower_merges_1_fo_D_IN),
							.ENQ(xbar_lower_lower_merges_1_fo_ENQ),
							.DEQ(xbar_lower_lower_merges_1_fo_DEQ),
							.CLR(xbar_lower_lower_merges_1_fo_CLR),
							.D_OUT(xbar_lower_lower_merges_1_fo_D_OUT),
							.FULL_N(xbar_lower_lower_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_lower_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_lower_merges_fi0_D_IN),
						       .ENQ(xbar_lower_lower_merges_fi0_ENQ),
						       .DEQ(xbar_lower_lower_merges_fi0_DEQ),
						       .CLR(xbar_lower_lower_merges_fi0_CLR),
						       .D_OUT(xbar_lower_lower_merges_fi0_D_OUT),
						       .FULL_N(xbar_lower_lower_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_lower_lower_merges_fi0_EMPTY_N));

  // submodule xbar_lower_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_lower_merges_fi1_D_IN),
						       .ENQ(xbar_lower_lower_merges_fi1_ENQ),
						       .DEQ(xbar_lower_lower_merges_fi1_DEQ),
						       .CLR(xbar_lower_lower_merges_fi1_CLR),
						       .D_OUT(xbar_lower_lower_merges_fi1_D_OUT),
						       .FULL_N(xbar_lower_lower_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_lower_lower_merges_fi1_EMPTY_N));

  // submodule xbar_lower_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_lower_lower_merges_fo_D_IN),
						      .ENQ(xbar_lower_lower_merges_fo_ENQ),
						      .DEQ(xbar_lower_lower_merges_fo_DEQ),
						      .CLR(xbar_lower_lower_merges_fo_CLR),
						      .D_OUT(xbar_lower_lower_merges_fo_D_OUT),
						      .FULL_N(xbar_lower_lower_merges_fo_FULL_N),
						      .EMPTY_N(xbar_lower_lower_merges_fo_EMPTY_N));

  // submodule xbar_lower_lower_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_lower_upper_f_D_IN),
						    .ENQ(xbar_lower_lower_upper_f_ENQ),
						    .DEQ(xbar_lower_lower_upper_f_DEQ),
						    .CLR(xbar_lower_lower_upper_f_CLR),
						    .D_OUT(xbar_lower_lower_upper_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_lower_upper_f_EMPTY_N));

  // submodule xbar_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi0_D_IN),
						   .ENQ(xbar_lower_merges_1_fi0_ENQ),
						   .DEQ(xbar_lower_merges_1_fi0_DEQ),
						   .CLR(xbar_lower_merges_1_fi0_CLR),
						   .D_OUT(xbar_lower_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi1_D_IN),
						   .ENQ(xbar_lower_merges_1_fi1_ENQ),
						   .DEQ(xbar_lower_merges_1_fi1_DEQ),
						   .CLR(xbar_lower_merges_1_fi1_CLR),
						   .D_OUT(xbar_lower_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_1_fo_D_IN),
						  .ENQ(xbar_lower_merges_1_fo_ENQ),
						  .DEQ(xbar_lower_merges_1_fo_DEQ),
						  .CLR(xbar_lower_merges_1_fo_CLR),
						  .D_OUT(xbar_lower_merges_1_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_2_fi0_D_IN),
						   .ENQ(xbar_lower_merges_2_fi0_ENQ),
						   .DEQ(xbar_lower_merges_2_fi0_DEQ),
						   .CLR(xbar_lower_merges_2_fi0_CLR),
						   .D_OUT(xbar_lower_merges_2_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_2_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_2_fi0_EMPTY_N));

  // submodule xbar_lower_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_2_fi1_D_IN),
						   .ENQ(xbar_lower_merges_2_fi1_ENQ),
						   .DEQ(xbar_lower_merges_2_fi1_DEQ),
						   .CLR(xbar_lower_merges_2_fi1_CLR),
						   .D_OUT(xbar_lower_merges_2_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_2_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_2_fi1_EMPTY_N));

  // submodule xbar_lower_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_2_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_2_fo_D_IN),
						  .ENQ(xbar_lower_merges_2_fo_ENQ),
						  .DEQ(xbar_lower_merges_2_fo_DEQ),
						  .CLR(xbar_lower_merges_2_fo_CLR),
						  .D_OUT(xbar_lower_merges_2_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_2_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_2_fo_EMPTY_N));

  // submodule xbar_lower_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_3_fi0_D_IN),
						   .ENQ(xbar_lower_merges_3_fi0_ENQ),
						   .DEQ(xbar_lower_merges_3_fi0_DEQ),
						   .CLR(xbar_lower_merges_3_fi0_CLR),
						   .D_OUT(xbar_lower_merges_3_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_3_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_3_fi0_EMPTY_N));

  // submodule xbar_lower_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_3_fi1_D_IN),
						   .ENQ(xbar_lower_merges_3_fi1_ENQ),
						   .DEQ(xbar_lower_merges_3_fi1_DEQ),
						   .CLR(xbar_lower_merges_3_fi1_CLR),
						   .D_OUT(xbar_lower_merges_3_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_3_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_3_fi1_EMPTY_N));

  // submodule xbar_lower_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_3_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_3_fo_D_IN),
						  .ENQ(xbar_lower_merges_3_fo_ENQ),
						  .DEQ(xbar_lower_merges_3_fo_DEQ),
						  .CLR(xbar_lower_merges_3_fo_CLR),
						  .D_OUT(xbar_lower_merges_3_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_3_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_3_fo_EMPTY_N));

  // submodule xbar_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi0_D_IN),
						 .ENQ(xbar_lower_merges_fi0_ENQ),
						 .DEQ(xbar_lower_merges_fi0_DEQ),
						 .CLR(xbar_lower_merges_fi0_CLR),
						 .D_OUT(xbar_lower_merges_fi0_D_OUT),
						 .FULL_N(xbar_lower_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi0_EMPTY_N));

  // submodule xbar_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi1_D_IN),
						 .ENQ(xbar_lower_merges_fi1_ENQ),
						 .DEQ(xbar_lower_merges_fi1_DEQ),
						 .CLR(xbar_lower_merges_fi1_CLR),
						 .D_OUT(xbar_lower_merges_fi1_D_OUT),
						 .FULL_N(xbar_lower_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi1_EMPTY_N));

  // submodule xbar_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_lower_merges_fo_D_IN),
						.ENQ(xbar_lower_merges_fo_ENQ),
						.DEQ(xbar_lower_merges_fo_DEQ),
						.CLR(xbar_lower_merges_fo_CLR),
						.D_OUT(xbar_lower_merges_fo_D_OUT),
						.FULL_N(xbar_lower_merges_fo_FULL_N),
						.EMPTY_N(xbar_lower_merges_fo_EMPTY_N));

  // submodule xbar_lower_upper_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_upper_lower_f_D_IN),
						    .ENQ(xbar_lower_upper_lower_f_ENQ),
						    .DEQ(xbar_lower_upper_lower_f_DEQ),
						    .CLR(xbar_lower_upper_lower_f_CLR),
						    .D_OUT(xbar_lower_upper_lower_f_D_OUT),
						    .FULL_N(),
						    .EMPTY_N(xbar_lower_upper_lower_f_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_upper_merges_1_fi0_D_IN),
							 .ENQ(xbar_lower_upper_merges_1_fi0_ENQ),
							 .DEQ(xbar_lower_upper_merges_1_fi0_DEQ),
							 .CLR(xbar_lower_upper_merges_1_fi0_CLR),
							 .D_OUT(xbar_lower_upper_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_lower_upper_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_lower_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_lower_upper_merges_1_fi1_D_IN),
							 .ENQ(xbar_lower_upper_merges_1_fi1_ENQ),
							 .DEQ(xbar_lower_upper_merges_1_fi1_DEQ),
							 .CLR(xbar_lower_upper_merges_1_fi1_CLR),
							 .D_OUT(xbar_lower_upper_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_lower_upper_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_lower_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_lower_upper_merges_1_fo_D_IN),
							.ENQ(xbar_lower_upper_merges_1_fo_ENQ),
							.DEQ(xbar_lower_upper_merges_1_fo_DEQ),
							.CLR(xbar_lower_upper_merges_1_fo_CLR),
							.D_OUT(xbar_lower_upper_merges_1_fo_D_OUT),
							.FULL_N(xbar_lower_upper_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_lower_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_upper_merges_fi0_D_IN),
						       .ENQ(xbar_lower_upper_merges_fi0_ENQ),
						       .DEQ(xbar_lower_upper_merges_fi0_DEQ),
						       .CLR(xbar_lower_upper_merges_fi0_CLR),
						       .D_OUT(xbar_lower_upper_merges_fi0_D_OUT),
						       .FULL_N(xbar_lower_upper_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_lower_upper_merges_fi0_EMPTY_N));

  // submodule xbar_lower_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_lower_upper_merges_fi1_D_IN),
						       .ENQ(xbar_lower_upper_merges_fi1_ENQ),
						       .DEQ(xbar_lower_upper_merges_fi1_DEQ),
						       .CLR(xbar_lower_upper_merges_fi1_CLR),
						       .D_OUT(xbar_lower_upper_merges_fi1_D_OUT),
						       .FULL_N(xbar_lower_upper_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_lower_upper_merges_fi1_EMPTY_N));

  // submodule xbar_lower_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_lower_upper_merges_fo_D_IN),
						      .ENQ(xbar_lower_upper_merges_fo_ENQ),
						      .DEQ(xbar_lower_upper_merges_fo_DEQ),
						      .CLR(xbar_lower_upper_merges_fo_CLR),
						      .D_OUT(xbar_lower_upper_merges_fo_D_OUT),
						      .FULL_N(xbar_lower_upper_merges_fo_FULL_N),
						      .EMPTY_N(xbar_lower_upper_merges_fo_EMPTY_N));

  // submodule xbar_lower_upper_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_lower_upper_upper_f_D_IN),
						    .ENQ(xbar_lower_upper_upper_f_ENQ),
						    .DEQ(xbar_lower_upper_upper_f_DEQ),
						    .CLR(xbar_lower_upper_upper_f_CLR),
						    .D_OUT(xbar_lower_upper_upper_f_D_OUT),
						    .FULL_N(xbar_lower_upper_upper_f_FULL_N),
						    .EMPTY_N(xbar_lower_upper_upper_f_EMPTY_N));

  // submodule xbar_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi0_D_IN),
					     .ENQ(xbar_merges_1_fi0_ENQ),
					     .DEQ(xbar_merges_1_fi0_DEQ),
					     .CLR(xbar_merges_1_fi0_CLR),
					     .D_OUT(xbar_merges_1_fi0_D_OUT),
					     .FULL_N(xbar_merges_1_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi0_EMPTY_N));

  // submodule xbar_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi1_D_IN),
					     .ENQ(xbar_merges_1_fi1_ENQ),
					     .DEQ(xbar_merges_1_fi1_DEQ),
					     .CLR(xbar_merges_1_fi1_CLR),
					     .D_OUT(xbar_merges_1_fi1_D_OUT),
					     .FULL_N(xbar_merges_1_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi1_EMPTY_N));

  // submodule xbar_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_1_fo_D_IN),
					    .ENQ(xbar_merges_1_fo_ENQ),
					    .DEQ(xbar_merges_1_fo_DEQ),
					    .CLR(xbar_merges_1_fo_CLR),
					    .D_OUT(xbar_merges_1_fo_D_OUT),
					    .FULL_N(xbar_merges_1_fo_FULL_N),
					    .EMPTY_N(xbar_merges_1_fo_EMPTY_N));

  // submodule xbar_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi0_D_IN),
					     .ENQ(xbar_merges_2_fi0_ENQ),
					     .DEQ(xbar_merges_2_fi0_DEQ),
					     .CLR(xbar_merges_2_fi0_CLR),
					     .D_OUT(xbar_merges_2_fi0_D_OUT),
					     .FULL_N(xbar_merges_2_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi0_EMPTY_N));

  // submodule xbar_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi1_D_IN),
					     .ENQ(xbar_merges_2_fi1_ENQ),
					     .DEQ(xbar_merges_2_fi1_DEQ),
					     .CLR(xbar_merges_2_fi1_CLR),
					     .D_OUT(xbar_merges_2_fi1_D_OUT),
					     .FULL_N(xbar_merges_2_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi1_EMPTY_N));

  // submodule xbar_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_2_fo_D_IN),
					    .ENQ(xbar_merges_2_fo_ENQ),
					    .DEQ(xbar_merges_2_fo_DEQ),
					    .CLR(xbar_merges_2_fo_CLR),
					    .D_OUT(xbar_merges_2_fo_D_OUT),
					    .FULL_N(xbar_merges_2_fo_FULL_N),
					    .EMPTY_N(xbar_merges_2_fo_EMPTY_N));

  // submodule xbar_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi0_D_IN),
					     .ENQ(xbar_merges_3_fi0_ENQ),
					     .DEQ(xbar_merges_3_fi0_DEQ),
					     .CLR(xbar_merges_3_fi0_CLR),
					     .D_OUT(xbar_merges_3_fi0_D_OUT),
					     .FULL_N(xbar_merges_3_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi0_EMPTY_N));

  // submodule xbar_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi1_D_IN),
					     .ENQ(xbar_merges_3_fi1_ENQ),
					     .DEQ(xbar_merges_3_fi1_DEQ),
					     .CLR(xbar_merges_3_fi1_CLR),
					     .D_OUT(xbar_merges_3_fi1_D_OUT),
					     .FULL_N(xbar_merges_3_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi1_EMPTY_N));

  // submodule xbar_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_3_fo_D_IN),
					    .ENQ(xbar_merges_3_fo_ENQ),
					    .DEQ(xbar_merges_3_fo_DEQ),
					    .CLR(xbar_merges_3_fo_CLR),
					    .D_OUT(xbar_merges_3_fo_D_OUT),
					    .FULL_N(xbar_merges_3_fo_FULL_N),
					    .EMPTY_N(xbar_merges_3_fo_EMPTY_N));

  // submodule xbar_merges_4_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_4_fi0_D_IN),
					     .ENQ(xbar_merges_4_fi0_ENQ),
					     .DEQ(xbar_merges_4_fi0_DEQ),
					     .CLR(xbar_merges_4_fi0_CLR),
					     .D_OUT(xbar_merges_4_fi0_D_OUT),
					     .FULL_N(xbar_merges_4_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_4_fi0_EMPTY_N));

  // submodule xbar_merges_4_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_4_fi1_D_IN),
					     .ENQ(xbar_merges_4_fi1_ENQ),
					     .DEQ(xbar_merges_4_fi1_DEQ),
					     .CLR(xbar_merges_4_fi1_CLR),
					     .D_OUT(xbar_merges_4_fi1_D_OUT),
					     .FULL_N(xbar_merges_4_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_4_fi1_EMPTY_N));

  // submodule xbar_merges_4_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_4_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_4_fo_D_IN),
					    .ENQ(xbar_merges_4_fo_ENQ),
					    .DEQ(xbar_merges_4_fo_DEQ),
					    .CLR(xbar_merges_4_fo_CLR),
					    .D_OUT(xbar_merges_4_fo_D_OUT),
					    .FULL_N(xbar_merges_4_fo_FULL_N),
					    .EMPTY_N(xbar_merges_4_fo_EMPTY_N));

  // submodule xbar_merges_5_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_5_fi0_D_IN),
					     .ENQ(xbar_merges_5_fi0_ENQ),
					     .DEQ(xbar_merges_5_fi0_DEQ),
					     .CLR(xbar_merges_5_fi0_CLR),
					     .D_OUT(xbar_merges_5_fi0_D_OUT),
					     .FULL_N(xbar_merges_5_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_5_fi0_EMPTY_N));

  // submodule xbar_merges_5_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_5_fi1_D_IN),
					     .ENQ(xbar_merges_5_fi1_ENQ),
					     .DEQ(xbar_merges_5_fi1_DEQ),
					     .CLR(xbar_merges_5_fi1_CLR),
					     .D_OUT(xbar_merges_5_fi1_D_OUT),
					     .FULL_N(xbar_merges_5_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_5_fi1_EMPTY_N));

  // submodule xbar_merges_5_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_5_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_5_fo_D_IN),
					    .ENQ(xbar_merges_5_fo_ENQ),
					    .DEQ(xbar_merges_5_fo_DEQ),
					    .CLR(xbar_merges_5_fo_CLR),
					    .D_OUT(xbar_merges_5_fo_D_OUT),
					    .FULL_N(xbar_merges_5_fo_FULL_N),
					    .EMPTY_N(xbar_merges_5_fo_EMPTY_N));

  // submodule xbar_merges_6_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_6_fi0_D_IN),
					     .ENQ(xbar_merges_6_fi0_ENQ),
					     .DEQ(xbar_merges_6_fi0_DEQ),
					     .CLR(xbar_merges_6_fi0_CLR),
					     .D_OUT(xbar_merges_6_fi0_D_OUT),
					     .FULL_N(xbar_merges_6_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_6_fi0_EMPTY_N));

  // submodule xbar_merges_6_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_6_fi1_D_IN),
					     .ENQ(xbar_merges_6_fi1_ENQ),
					     .DEQ(xbar_merges_6_fi1_DEQ),
					     .CLR(xbar_merges_6_fi1_CLR),
					     .D_OUT(xbar_merges_6_fi1_D_OUT),
					     .FULL_N(xbar_merges_6_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_6_fi1_EMPTY_N));

  // submodule xbar_merges_6_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_6_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_6_fo_D_IN),
					    .ENQ(xbar_merges_6_fo_ENQ),
					    .DEQ(xbar_merges_6_fo_DEQ),
					    .CLR(xbar_merges_6_fo_CLR),
					    .D_OUT(xbar_merges_6_fo_D_OUT),
					    .FULL_N(xbar_merges_6_fo_FULL_N),
					    .EMPTY_N(xbar_merges_6_fo_EMPTY_N));

  // submodule xbar_merges_7_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_7_fi0_D_IN),
					     .ENQ(xbar_merges_7_fi0_ENQ),
					     .DEQ(xbar_merges_7_fi0_DEQ),
					     .CLR(xbar_merges_7_fi0_CLR),
					     .D_OUT(xbar_merges_7_fi0_D_OUT),
					     .FULL_N(xbar_merges_7_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_7_fi0_EMPTY_N));

  // submodule xbar_merges_7_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_7_fi1_D_IN),
					     .ENQ(xbar_merges_7_fi1_ENQ),
					     .DEQ(xbar_merges_7_fi1_DEQ),
					     .CLR(xbar_merges_7_fi1_CLR),
					     .D_OUT(xbar_merges_7_fi1_D_OUT),
					     .FULL_N(xbar_merges_7_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_7_fi1_EMPTY_N));

  // submodule xbar_merges_7_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_7_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_7_fo_D_IN),
					    .ENQ(xbar_merges_7_fo_ENQ),
					    .DEQ(xbar_merges_7_fo_DEQ),
					    .CLR(xbar_merges_7_fo_CLR),
					    .D_OUT(xbar_merges_7_fo_D_OUT),
					    .FULL_N(xbar_merges_7_fo_FULL_N),
					    .EMPTY_N(xbar_merges_7_fo_EMPTY_N));

  // submodule xbar_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi0_D_IN),
					   .ENQ(xbar_merges_fi0_ENQ),
					   .DEQ(xbar_merges_fi0_DEQ),
					   .CLR(xbar_merges_fi0_CLR),
					   .D_OUT(xbar_merges_fi0_D_OUT),
					   .FULL_N(xbar_merges_fi0_FULL_N),
					   .EMPTY_N(xbar_merges_fi0_EMPTY_N));

  // submodule xbar_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi1(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi1_D_IN),
					   .ENQ(xbar_merges_fi1_ENQ),
					   .DEQ(xbar_merges_fi1_DEQ),
					   .CLR(xbar_merges_fi1_CLR),
					   .D_OUT(xbar_merges_fi1_D_OUT),
					   .FULL_N(xbar_merges_fi1_FULL_N),
					   .EMPTY_N(xbar_merges_fi1_EMPTY_N));

  // submodule xbar_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fo(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(xbar_merges_fo_D_IN),
					  .ENQ(xbar_merges_fo_ENQ),
					  .DEQ(xbar_merges_fo_DEQ),
					  .CLR(xbar_merges_fo_CLR),
					  .D_OUT(xbar_merges_fo_D_OUT),
					  .FULL_N(xbar_merges_fo_FULL_N),
					  .EMPTY_N(xbar_merges_fo_EMPTY_N));

  // submodule xbar_upper_lower_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_lower_lower_f_D_IN),
						    .ENQ(xbar_upper_lower_lower_f_ENQ),
						    .DEQ(xbar_upper_lower_lower_f_DEQ),
						    .CLR(xbar_upper_lower_lower_f_CLR),
						    .D_OUT(xbar_upper_lower_lower_f_D_OUT),
						    .FULL_N(xbar_upper_lower_lower_f_FULL_N),
						    .EMPTY_N(xbar_upper_lower_lower_f_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_lower_merges_1_fi0_D_IN),
							 .ENQ(xbar_upper_lower_merges_1_fi0_ENQ),
							 .DEQ(xbar_upper_lower_merges_1_fi0_DEQ),
							 .CLR(xbar_upper_lower_merges_1_fi0_CLR),
							 .D_OUT(xbar_upper_lower_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_upper_lower_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_upper_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_lower_merges_1_fi1_D_IN),
							 .ENQ(xbar_upper_lower_merges_1_fi1_ENQ),
							 .DEQ(xbar_upper_lower_merges_1_fi1_DEQ),
							 .CLR(xbar_upper_lower_merges_1_fi1_CLR),
							 .D_OUT(xbar_upper_lower_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_upper_lower_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_upper_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_upper_lower_merges_1_fo_D_IN),
							.ENQ(xbar_upper_lower_merges_1_fo_ENQ),
							.DEQ(xbar_upper_lower_merges_1_fo_DEQ),
							.CLR(xbar_upper_lower_merges_1_fo_CLR),
							.D_OUT(xbar_upper_lower_merges_1_fo_D_OUT),
							.FULL_N(xbar_upper_lower_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_upper_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_lower_merges_fi0_D_IN),
						       .ENQ(xbar_upper_lower_merges_fi0_ENQ),
						       .DEQ(xbar_upper_lower_merges_fi0_DEQ),
						       .CLR(xbar_upper_lower_merges_fi0_CLR),
						       .D_OUT(xbar_upper_lower_merges_fi0_D_OUT),
						       .FULL_N(xbar_upper_lower_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_upper_lower_merges_fi0_EMPTY_N));

  // submodule xbar_upper_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_lower_merges_fi1_D_IN),
						       .ENQ(xbar_upper_lower_merges_fi1_ENQ),
						       .DEQ(xbar_upper_lower_merges_fi1_DEQ),
						       .CLR(xbar_upper_lower_merges_fi1_CLR),
						       .D_OUT(xbar_upper_lower_merges_fi1_D_OUT),
						       .FULL_N(xbar_upper_lower_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_upper_lower_merges_fi1_EMPTY_N));

  // submodule xbar_upper_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_upper_lower_merges_fo_D_IN),
						      .ENQ(xbar_upper_lower_merges_fo_ENQ),
						      .DEQ(xbar_upper_lower_merges_fo_DEQ),
						      .CLR(xbar_upper_lower_merges_fo_CLR),
						      .D_OUT(xbar_upper_lower_merges_fo_D_OUT),
						      .FULL_N(xbar_upper_lower_merges_fo_FULL_N),
						      .EMPTY_N(xbar_upper_lower_merges_fo_EMPTY_N));

  // submodule xbar_upper_lower_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_lower_upper_f_D_IN),
						    .ENQ(xbar_upper_lower_upper_f_ENQ),
						    .DEQ(xbar_upper_lower_upper_f_DEQ),
						    .CLR(xbar_upper_lower_upper_f_CLR),
						    .D_OUT(xbar_upper_lower_upper_f_D_OUT),
						    .FULL_N(xbar_upper_lower_upper_f_FULL_N),
						    .EMPTY_N(xbar_upper_lower_upper_f_EMPTY_N));

  // submodule xbar_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi0_D_IN),
						   .ENQ(xbar_upper_merges_1_fi0_ENQ),
						   .DEQ(xbar_upper_merges_1_fi0_DEQ),
						   .CLR(xbar_upper_merges_1_fi0_CLR),
						   .D_OUT(xbar_upper_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi1_D_IN),
						   .ENQ(xbar_upper_merges_1_fi1_ENQ),
						   .DEQ(xbar_upper_merges_1_fi1_DEQ),
						   .CLR(xbar_upper_merges_1_fi1_CLR),
						   .D_OUT(xbar_upper_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_1_fo_D_IN),
						  .ENQ(xbar_upper_merges_1_fo_ENQ),
						  .DEQ(xbar_upper_merges_1_fo_DEQ),
						  .CLR(xbar_upper_merges_1_fo_CLR),
						  .D_OUT(xbar_upper_merges_1_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_2_fi0_D_IN),
						   .ENQ(xbar_upper_merges_2_fi0_ENQ),
						   .DEQ(xbar_upper_merges_2_fi0_DEQ),
						   .CLR(xbar_upper_merges_2_fi0_CLR),
						   .D_OUT(xbar_upper_merges_2_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_2_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_2_fi0_EMPTY_N));

  // submodule xbar_upper_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_2_fi1_D_IN),
						   .ENQ(xbar_upper_merges_2_fi1_ENQ),
						   .DEQ(xbar_upper_merges_2_fi1_DEQ),
						   .CLR(xbar_upper_merges_2_fi1_CLR),
						   .D_OUT(xbar_upper_merges_2_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_2_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_2_fi1_EMPTY_N));

  // submodule xbar_upper_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_2_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_2_fo_D_IN),
						  .ENQ(xbar_upper_merges_2_fo_ENQ),
						  .DEQ(xbar_upper_merges_2_fo_DEQ),
						  .CLR(xbar_upper_merges_2_fo_CLR),
						  .D_OUT(xbar_upper_merges_2_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_2_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_2_fo_EMPTY_N));

  // submodule xbar_upper_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_3_fi0_D_IN),
						   .ENQ(xbar_upper_merges_3_fi0_ENQ),
						   .DEQ(xbar_upper_merges_3_fi0_DEQ),
						   .CLR(xbar_upper_merges_3_fi0_CLR),
						   .D_OUT(xbar_upper_merges_3_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_3_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_3_fi0_EMPTY_N));

  // submodule xbar_upper_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_3_fi1_D_IN),
						   .ENQ(xbar_upper_merges_3_fi1_ENQ),
						   .DEQ(xbar_upper_merges_3_fi1_DEQ),
						   .CLR(xbar_upper_merges_3_fi1_CLR),
						   .D_OUT(xbar_upper_merges_3_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_3_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_3_fi1_EMPTY_N));

  // submodule xbar_upper_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_3_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_3_fo_D_IN),
						  .ENQ(xbar_upper_merges_3_fo_ENQ),
						  .DEQ(xbar_upper_merges_3_fo_DEQ),
						  .CLR(xbar_upper_merges_3_fo_CLR),
						  .D_OUT(xbar_upper_merges_3_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_3_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_3_fo_EMPTY_N));

  // submodule xbar_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi0_D_IN),
						 .ENQ(xbar_upper_merges_fi0_ENQ),
						 .DEQ(xbar_upper_merges_fi0_DEQ),
						 .CLR(xbar_upper_merges_fi0_CLR),
						 .D_OUT(xbar_upper_merges_fi0_D_OUT),
						 .FULL_N(xbar_upper_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi0_EMPTY_N));

  // submodule xbar_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi1_D_IN),
						 .ENQ(xbar_upper_merges_fi1_ENQ),
						 .DEQ(xbar_upper_merges_fi1_DEQ),
						 .CLR(xbar_upper_merges_fi1_CLR),
						 .D_OUT(xbar_upper_merges_fi1_D_OUT),
						 .FULL_N(xbar_upper_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi1_EMPTY_N));

  // submodule xbar_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_upper_merges_fo_D_IN),
						.ENQ(xbar_upper_merges_fo_ENQ),
						.DEQ(xbar_upper_merges_fo_DEQ),
						.CLR(xbar_upper_merges_fo_CLR),
						.D_OUT(xbar_upper_merges_fo_D_OUT),
						.FULL_N(xbar_upper_merges_fo_FULL_N),
						.EMPTY_N(xbar_upper_merges_fo_EMPTY_N));

  // submodule xbar_upper_upper_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_lower_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_upper_lower_f_D_IN),
						    .ENQ(xbar_upper_upper_lower_f_ENQ),
						    .DEQ(xbar_upper_upper_lower_f_DEQ),
						    .CLR(xbar_upper_upper_lower_f_CLR),
						    .D_OUT(xbar_upper_upper_lower_f_D_OUT),
						    .FULL_N(xbar_upper_upper_lower_f_FULL_N),
						    .EMPTY_N(xbar_upper_upper_lower_f_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fi0(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_upper_merges_1_fi0_D_IN),
							 .ENQ(xbar_upper_upper_merges_1_fi0_ENQ),
							 .DEQ(xbar_upper_upper_merges_1_fi0_DEQ),
							 .CLR(xbar_upper_upper_merges_1_fi0_CLR),
							 .D_OUT(xbar_upper_upper_merges_1_fi0_D_OUT),
							 .FULL_N(xbar_upper_upper_merges_1_fi0_FULL_N),
							 .EMPTY_N(xbar_upper_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fi1(.RST(localReset_OUT_RST),
							 .CLK(CLK),
							 .D_IN(xbar_upper_upper_merges_1_fi1_D_IN),
							 .ENQ(xbar_upper_upper_merges_1_fi1_ENQ),
							 .DEQ(xbar_upper_upper_merges_1_fi1_DEQ),
							 .CLR(xbar_upper_upper_merges_1_fi1_CLR),
							 .D_OUT(xbar_upper_upper_merges_1_fi1_D_OUT),
							 .FULL_N(xbar_upper_upper_merges_1_fi1_FULL_N),
							 .EMPTY_N(xbar_upper_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_1_fo(.RST(localReset_OUT_RST),
							.CLK(CLK),
							.D_IN(xbar_upper_upper_merges_1_fo_D_IN),
							.ENQ(xbar_upper_upper_merges_1_fo_ENQ),
							.DEQ(xbar_upper_upper_merges_1_fo_DEQ),
							.CLR(xbar_upper_upper_merges_1_fo_CLR),
							.D_OUT(xbar_upper_upper_merges_1_fo_D_OUT),
							.FULL_N(xbar_upper_upper_merges_1_fo_FULL_N),
							.EMPTY_N(xbar_upper_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fi0(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_upper_merges_fi0_D_IN),
						       .ENQ(xbar_upper_upper_merges_fi0_ENQ),
						       .DEQ(xbar_upper_upper_merges_fi0_DEQ),
						       .CLR(xbar_upper_upper_merges_fi0_CLR),
						       .D_OUT(xbar_upper_upper_merges_fi0_D_OUT),
						       .FULL_N(xbar_upper_upper_merges_fi0_FULL_N),
						       .EMPTY_N(xbar_upper_upper_merges_fi0_EMPTY_N));

  // submodule xbar_upper_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fi1(.RST(localReset_OUT_RST),
						       .CLK(CLK),
						       .D_IN(xbar_upper_upper_merges_fi1_D_IN),
						       .ENQ(xbar_upper_upper_merges_fi1_ENQ),
						       .DEQ(xbar_upper_upper_merges_fi1_DEQ),
						       .CLR(xbar_upper_upper_merges_fi1_CLR),
						       .D_OUT(xbar_upper_upper_merges_fi1_D_OUT),
						       .FULL_N(xbar_upper_upper_merges_fi1_FULL_N),
						       .EMPTY_N(xbar_upper_upper_merges_fi1_EMPTY_N));

  // submodule xbar_upper_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_merges_fo(.RST(localReset_OUT_RST),
						      .CLK(CLK),
						      .D_IN(xbar_upper_upper_merges_fo_D_IN),
						      .ENQ(xbar_upper_upper_merges_fo_ENQ),
						      .DEQ(xbar_upper_upper_merges_fo_DEQ),
						      .CLR(xbar_upper_upper_merges_fo_CLR),
						      .D_OUT(xbar_upper_upper_merges_fo_D_OUT),
						      .FULL_N(xbar_upper_upper_merges_fo_FULL_N),
						      .EMPTY_N(xbar_upper_upper_merges_fo_EMPTY_N));

  // submodule xbar_upper_upper_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_upper_f(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(xbar_upper_upper_upper_f_D_IN),
						    .ENQ(xbar_upper_upper_upper_f_ENQ),
						    .DEQ(xbar_upper_upper_upper_f_DEQ),
						    .CLR(xbar_upper_upper_upper_f_CLR),
						    .D_OUT(xbar_upper_upper_upper_f_D_OUT),
						    .FULL_N(xbar_upper_upper_upper_f_FULL_N),
						    .EMPTY_N(xbar_upper_upper_upper_f_EMPTY_N));

  // rule RL_packetReadInProgress
  assign WILL_FIRE_RL_packetReadInProgress =
	     parser_0_RDY_frameIn_put && readDataFifo_0_EMPTY_N &&
	     writeDataFifo_0_FULL_N &&
	     readStarted_0 ;

  // rule RL_mkConnectionGetPut_15
  assign CAN_FIRE_RL_mkConnectionGetPut_15 =
	     pktBuff_0_pktBuff_RDY_writeServer_enq &&
	     writeDataFifo_0_EMPTY_N ;

  // rule RL_mkConnectionGetPut_16
  assign CAN_FIRE_RL_mkConnectionGetPut_16 =
	     pktBuff_1_pktBuff_RDY_writeServer_enq &&
	     hostchan_0_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_17
  assign CAN_FIRE_RL_mkConnectionGetPut_17 =
	     pktBuff_2_pktBuff_RDY_writeServer_enq &&
	     hostchan_1_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_18
  assign CAN_FIRE_RL_mkConnectionGetPut_18 =
	     pktBuff_3_pktBuff_RDY_writeServer_enq &&
	     hostchan_2_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_19
  assign CAN_FIRE_RL_mkConnectionGetPut_19 =
	     pktBuff_4_pktBuff_RDY_writeServer_enq &&
	     hostchan_3_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_69
  assign CAN_FIRE_RL_mkConnectionGetPut_69 =
	     gearbox_dn_16_0_RDY_dataout_get &&
	     pktBuff_0_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_70
  assign CAN_FIRE_RL_mkConnectionGetPut_70 =
	     gearbox_dn_16_1_RDY_dataout_get &&
	     pktBuff_1_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_71
  assign CAN_FIRE_RL_mkConnectionGetPut_71 =
	     gearbox_dn_16_2_RDY_dataout_get &&
	     pktBuff_2_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_72
  assign CAN_FIRE_RL_mkConnectionGetPut_72 =
	     gearbox_dn_16_3_RDY_dataout_get &&
	     pktBuff_3_fifoWriteData_FULL_N ;

  // rule RL_hostchan_0_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_0_packetReadInProgress =
	     hostchan_0_parser_RDY_frameIn_put &&
	     hostchan_0_readDataFifo_EMPTY_N &&
	     hostchan_0_writeDataFifo_FULL_N &&
	     hostchan_0_readStarted ;

  // rule RL_macToRing_0_writeData
  assign WILL_FIRE_RL_macToRing_0_writeData =
	     macToRing_0_writeDataFifo_sFULL_N &&
	     macToRing_0_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_0_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_0_gearbox_in_ff_D_OUT[0] ||
	      macToRing_0_gearbox_out_ff_FULL_N) &&
	     macToRing_0_gearbox_inProgress &&
	     macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     macToRing_0_gearbox_out_ff_FULL_N &&
	     macToRing_0_gearbox_inProgress &&
	     !macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     !macToRing_0_gearbox_inProgress ;

  // rule RL_hostchan_1_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_1_packetReadInProgress =
	     hostchan_1_parser_RDY_frameIn_put &&
	     hostchan_1_readDataFifo_EMPTY_N &&
	     hostchan_1_writeDataFifo_FULL_N &&
	     hostchan_1_readStarted ;

  // rule RL_macToRing_1_writeData
  assign WILL_FIRE_RL_macToRing_1_writeData =
	     macToRing_1_writeDataFifo_sFULL_N &&
	     macToRing_1_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_1_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_1_gearbox_in_ff_D_OUT[0] ||
	      macToRing_1_gearbox_out_ff_FULL_N) &&
	     macToRing_1_gearbox_inProgress &&
	     macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     macToRing_1_gearbox_out_ff_FULL_N &&
	     macToRing_1_gearbox_inProgress &&
	     !macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     !macToRing_1_gearbox_inProgress ;

  // rule RL_hostchan_2_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_2_packetReadInProgress =
	     hostchan_2_parser_RDY_frameIn_put &&
	     hostchan_2_readDataFifo_EMPTY_N &&
	     hostchan_2_writeDataFifo_FULL_N &&
	     hostchan_2_readStarted ;

  // rule RL_macToRing_2_writeData
  assign WILL_FIRE_RL_macToRing_2_writeData =
	     macToRing_2_writeDataFifo_sFULL_N &&
	     macToRing_2_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_2_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_2_gearbox_in_ff_D_OUT[0] ||
	      macToRing_2_gearbox_out_ff_FULL_N) &&
	     macToRing_2_gearbox_inProgress &&
	     macToRing_2_gearbox_oddBeat ;

  // rule RL_macToRing_2_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     macToRing_2_gearbox_out_ff_FULL_N &&
	     macToRing_2_gearbox_inProgress &&
	     !macToRing_2_gearbox_oddBeat ;

  // rule RL_macToRing_2_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket =
	     macToRing_2_gearbox_in_ff_EMPTY_N &&
	     !macToRing_2_gearbox_inProgress ;

  // rule RL_hostchan_3_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_3_packetReadInProgress =
	     hostchan_3_parser_RDY_frameIn_put &&
	     hostchan_3_readDataFifo_EMPTY_N &&
	     hostchan_3_writeDataFifo_FULL_N &&
	     hostchan_3_readStarted ;

  // rule RL_macToRing_3_writeData
  assign WILL_FIRE_RL_macToRing_3_writeData =
	     macToRing_3_writeDataFifo_sFULL_N &&
	     macToRing_3_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_3_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_3_gearbox_in_ff_D_OUT[0] ||
	      macToRing_3_gearbox_out_ff_FULL_N) &&
	     macToRing_3_gearbox_inProgress &&
	     macToRing_3_gearbox_oddBeat ;

  // rule RL_macToRing_3_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     macToRing_3_gearbox_out_ff_FULL_N &&
	     macToRing_3_gearbox_inProgress &&
	     !macToRing_3_gearbox_oddBeat ;

  // rule RL_macToRing_3_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket =
	     macToRing_3_gearbox_in_ff_EMPTY_N &&
	     !macToRing_3_gearbox_inProgress ;

  // rule RL_pktBuff_0_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_0_packetReadInProgress =
	     pktBuff_0_readDataFifo_EMPTY_N &&
	     pktBuff_0_writeDataFifo_FULL_N &&
	     pktBuff_0_readStarted ;

  // rule RL_pktBuff_1_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_1_packetReadInProgress =
	     pktBuff_1_readDataFifo_EMPTY_N &&
	     pktBuff_1_writeDataFifo_FULL_N &&
	     pktBuff_1_readStarted ;

  // rule RL_pktBuff_2_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_2_packetReadInProgress =
	     pktBuff_2_readDataFifo_EMPTY_N &&
	     pktBuff_2_writeDataFifo_FULL_N &&
	     pktBuff_2_readStarted ;

  // rule RL_pktBuff_3_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_3_packetReadInProgress =
	     pktBuff_3_readDataFifo_EMPTY_N &&
	     pktBuff_3_writeDataFifo_FULL_N &&
	     pktBuff_3_readStarted ;

  // rule RL_pktBuff_4_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_4_packetReadInProgress =
	     pktBuff_4_readDataFifo_EMPTY_N &&
	     pktBuff_4_writeDataFifo_FULL_N &&
	     pktBuff_4_readStarted ;

  // rule RL_pktBuff_0_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_enqueue_first_beat =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_844_SLT_3___d2013 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     !pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_commit_packet
  assign WILL_FIRE_RL_pktBuff_0_commit_packet =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_844_SLT_3___d2013 &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_fifoLen_FULL_N &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_enq_stage1
  assign WILL_FIRE_RL_pktBuff_0_enq_stage1 =
	     pktBuff_0_fifoWriteData_EMPTY_N &&
	     pktBuff_0_incomingReqs_FULL_N &&
	     (!pktBuff_0_fifoWriteData_D_OUT[0] || pktBuff_0_fifoEop_FULL_N) ;

  // rule RL_pktBuff_0_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_first_beat =
	     pktBuff_0_fifoReadReq_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_cnt_909_SLT_3___d2039 &&
	     !pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_0_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_next_beat =
	     (pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_0_fifoReadData_FULL_N &&
	     (pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_cnt_909_SLT_3___d2039) &&
	     pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_0_cross_clocking
  assign WILL_FIRE_RL_ringToMac_0_cross_clocking =
	     ringToMac_0_tx_fifo_sFULL_N && ringToMac_0_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_0_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_0_process_incoming_packet =
	     NOT_ringToMac_0_fifoTxData_write_block_089_090_ETC___d2110 &&
	     ringToMac_0_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_0_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_0_process_outgoing_packet =
	     NOT_ringToMac_0_fifoTxData_read_block_129_130__ETC___d2152 &&
	     (IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 ==
	      8'd0 ||
	      ringToMac_0_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_1_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_enqueue_first_beat =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_288_SLT_3___d2457 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     !pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_commit_packet
  assign WILL_FIRE_RL_pktBuff_1_commit_packet =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_288_SLT_3___d2457 &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_fifoLen_FULL_N &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_enq_stage1
  assign WILL_FIRE_RL_pktBuff_1_enq_stage1 =
	     pktBuff_1_fifoWriteData_EMPTY_N &&
	     pktBuff_1_incomingReqs_FULL_N &&
	     (!pktBuff_1_fifoWriteData_D_OUT[0] || pktBuff_1_fifoEop_FULL_N) ;

  // rule RL_pktBuff_1_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_first_beat =
	     pktBuff_1_fifoReadReq_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_cnt_353_SLT_3___d2483 &&
	     !pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_1_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_next_beat =
	     (pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_1_fifoReadData_FULL_N &&
	     (pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_cnt_353_SLT_3___d2483) &&
	     pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_1_cross_clocking
  assign WILL_FIRE_RL_ringToMac_1_cross_clocking =
	     ringToMac_1_tx_fifo_sFULL_N && ringToMac_1_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_1_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_1_process_incoming_packet =
	     NOT_ringToMac_1_fifoTxData_write_block_533_534_ETC___d2554 &&
	     ringToMac_1_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_1_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_1_process_outgoing_packet =
	     NOT_ringToMac_1_fifoTxData_read_block_573_574__ETC___d2596 &&
	     (IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 ==
	      8'd0 ||
	      ringToMac_1_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_2_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_2_enqueue_first_beat =
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_732_SLT_3___d2901 &&
	     !pktBuff_2_fifoEop_EMPTY_N &&
	     !pktBuff_2_inPacket ;

  // rule RL_pktBuff_2_commit_packet
  assign WILL_FIRE_RL_pktBuff_2_commit_packet =
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_732_SLT_3___d2901 &&
	     pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_fifoLen_FULL_N &&
	     pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_inPacket ;

  // rule RL_pktBuff_2_enq_stage1
  assign WILL_FIRE_RL_pktBuff_2_enq_stage1 =
	     pktBuff_2_fifoWriteData_EMPTY_N &&
	     pktBuff_2_incomingReqs_FULL_N &&
	     (!pktBuff_2_fifoWriteData_D_OUT[0] || pktBuff_2_fifoEop_FULL_N) ;

  // rule RL_pktBuff_2_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_2_dequeue_first_beat =
	     pktBuff_2_fifoReadReq_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_cnt_797_SLT_3___d2927 &&
	     !pktBuff_2_outPacket ;

  // rule RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_2_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_2_dequeue_next_beat =
	     (pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_2_fifoReadData_FULL_N &&
	     (pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_2_memBuffer_serverAdapterB_cnt_797_SLT_3___d2927) &&
	     pktBuff_2_outPacket ;

  // rule RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_2_cross_clocking
  assign WILL_FIRE_RL_ringToMac_2_cross_clocking =
	     ringToMac_2_tx_fifo_sFULL_N && ringToMac_2_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_2_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_2_process_incoming_packet =
	     NOT_ringToMac_2_fifoTxData_write_block_977_978_ETC___d2998 &&
	     ringToMac_2_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_2_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_2_process_outgoing_packet =
	     NOT_ringToMac_2_fifoTxData_read_block_017_018__ETC___d3040 &&
	     (IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 ==
	      8'd0 ||
	      ringToMac_2_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_3_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_3_enqueue_first_beat =
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_176_SLT_3___d3345 &&
	     !pktBuff_3_fifoEop_EMPTY_N &&
	     !pktBuff_3_inPacket ;

  // rule RL_pktBuff_3_commit_packet
  assign WILL_FIRE_RL_pktBuff_3_commit_packet =
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_176_SLT_3___d3345 &&
	     pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_fifoLen_FULL_N &&
	     pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_inPacket ;

  // rule RL_pktBuff_3_enq_stage1
  assign WILL_FIRE_RL_pktBuff_3_enq_stage1 =
	     pktBuff_3_fifoWriteData_EMPTY_N &&
	     pktBuff_3_incomingReqs_FULL_N &&
	     (!pktBuff_3_fifoWriteData_D_OUT[0] || pktBuff_3_fifoEop_FULL_N) ;

  // rule RL_pktBuff_3_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_3_dequeue_first_beat =
	     pktBuff_3_fifoReadReq_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_cnt_241_SLT_3___d3371 &&
	     !pktBuff_3_outPacket ;

  // rule RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_3_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_3_dequeue_next_beat =
	     (pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_3_fifoReadData_FULL_N &&
	     (pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_3_memBuffer_serverAdapterB_cnt_241_SLT_3___d3371) &&
	     pktBuff_3_outPacket ;

  // rule RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_3_cross_clocking
  assign WILL_FIRE_RL_ringToMac_3_cross_clocking =
	     ringToMac_3_tx_fifo_sFULL_N && ringToMac_3_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_3_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_3_process_incoming_packet =
	     NOT_ringToMac_3_fifoTxData_write_block_421_422_ETC___d3442 &&
	     ringToMac_3_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_3_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_3_process_outgoing_packet =
	     NOT_ringToMac_3_fifoTxData_read_block_461_462__ETC___d3484 &&
	     (IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 ==
	      8'd0 ||
	      ringToMac_3_writeMacFifo_FULL_N) ;

  // rule RL_xbar_upper_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty =
	     xbar_upper_upper_merges_fi1_EMPTY_N &&
	     xbar_upper_upper_merges_fo_FULL_N &&
	     !xbar_upper_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty =
	     xbar_upper_upper_merges_fo_FULL_N &&
	     xbar_upper_upper_merges_fi0_EMPTY_N &&
	     !xbar_upper_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data =
	     (xbar_upper_upper_merges_routeFrom[1] ?
		xbar_upper_upper_merges_fo_i_notFull__271_AND__ETC___d4287 :
		IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4296) &&
	     xbar_upper_upper_merges_fi0_EMPTY_N &&
	     xbar_upper_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty =
	     xbar_upper_upper_merges_1_fi1_EMPTY_N &&
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     !xbar_upper_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty =
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     xbar_upper_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data =
	     (xbar_upper_upper_merges_1_routeFrom[1] ?
		xbar_upper_upper_merges_1_fo_i_notFull__346_AN_ETC___d4362 :
		IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4371) &&
	     xbar_upper_upper_merges_1_fi0_EMPTY_N &&
	     xbar_upper_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_upper_route
  assign WILL_FIRE_RL_xbar_upper_upper_route =
	     xbar_upper_upper_upper_f_EMPTY_N &&
	     (xbar_upper_upper_upper_f_D_OUT[578] ?
		xbar_upper_upper_merges_1_fi1_FULL_N :
		xbar_upper_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_upper_route_1
  assign WILL_FIRE_RL_xbar_upper_upper_route_1 =
	     xbar_upper_upper_lower_f_EMPTY_N &&
	     (xbar_upper_upper_lower_f_D_OUT[578] ?
		xbar_upper_upper_merges_1_fi0_FULL_N :
		xbar_upper_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty =
	     xbar_upper_lower_merges_fi1_EMPTY_N &&
	     xbar_upper_lower_merges_fo_FULL_N &&
	     !xbar_upper_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty =
	     xbar_upper_lower_merges_fo_FULL_N &&
	     xbar_upper_lower_merges_fi0_EMPTY_N &&
	     !xbar_upper_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data =
	     (xbar_upper_lower_merges_routeFrom[1] ?
		xbar_upper_lower_merges_fo_i_notFull__445_AND__ETC___d4461 :
		IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4470) &&
	     xbar_upper_lower_merges_fi0_EMPTY_N &&
	     xbar_upper_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty =
	     xbar_upper_lower_merges_1_fi1_EMPTY_N &&
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     !xbar_upper_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty =
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     xbar_upper_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data =
	     (xbar_upper_lower_merges_1_routeFrom[1] ?
		xbar_upper_lower_merges_1_fo_i_notFull__520_AN_ETC___d4536 :
		IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4545) &&
	     xbar_upper_lower_merges_1_fi0_EMPTY_N &&
	     xbar_upper_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_lower_route
  assign WILL_FIRE_RL_xbar_upper_lower_route =
	     xbar_upper_lower_upper_f_EMPTY_N &&
	     (xbar_upper_lower_upper_f_D_OUT[578] ?
		xbar_upper_lower_merges_1_fi1_FULL_N :
		xbar_upper_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_lower_route_1
  assign WILL_FIRE_RL_xbar_upper_lower_route_1 =
	     xbar_upper_lower_lower_f_EMPTY_N &&
	     (xbar_upper_lower_lower_f_D_OUT[578] ?
		xbar_upper_lower_merges_1_fi0_FULL_N :
		xbar_upper_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty =
	     xbar_upper_merges_fi1_EMPTY_N && xbar_upper_merges_fo_FULL_N &&
	     !xbar_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty =
	     xbar_upper_merges_fo_FULL_N && xbar_upper_merges_fi0_EMPTY_N &&
	     !xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_both_have_data =
	     (xbar_upper_merges_routeFrom[1] ?
		xbar_upper_merges_fo_i_notFull__617_AND_IF_xba_ETC___d4633 :
		IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4642) &&
	     xbar_upper_merges_fi0_EMPTY_N &&
	     xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty =
	     xbar_upper_merges_1_fi1_EMPTY_N &&
	     xbar_upper_merges_1_fo_FULL_N &&
	     !xbar_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty =
	     xbar_upper_merges_1_fo_FULL_N &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_1_both_have_data =
	     (xbar_upper_merges_1_routeFrom[1] ?
		xbar_upper_merges_1_fo_i_notFull__692_AND_IF_x_ETC___d4708 :
		IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4717) &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty =
	     xbar_upper_merges_2_fi1_EMPTY_N &&
	     xbar_upper_merges_2_fo_FULL_N &&
	     !xbar_upper_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty =
	     xbar_upper_merges_2_fo_FULL_N &&
	     xbar_upper_merges_2_fi0_EMPTY_N &&
	     !xbar_upper_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_2_both_have_data =
	     (xbar_upper_merges_2_routeFrom[1] ?
		xbar_upper_merges_2_fo_i_notFull__767_AND_IF_x_ETC___d4783 :
		IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4792) &&
	     xbar_upper_merges_2_fi0_EMPTY_N &&
	     xbar_upper_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_upper_route
  assign WILL_FIRE_RL_xbar_upper_route =
	     xbar_upper_upper_merges_fo_EMPTY_N &&
	     (xbar_upper_upper_merges_fo_D_OUT[579] ?
		xbar_upper_merges_2_fi1_FULL_N :
		xbar_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_route_2
  assign WILL_FIRE_RL_xbar_upper_route_2 =
	     xbar_upper_lower_merges_fo_EMPTY_N &&
	     (xbar_upper_lower_merges_fo_D_OUT[579] ?
		xbar_upper_merges_2_fi0_FULL_N :
		xbar_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_upper_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty =
	     xbar_upper_merges_3_fi1_EMPTY_N &&
	     xbar_upper_merges_3_fo_FULL_N &&
	     !xbar_upper_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty =
	     xbar_upper_merges_3_fo_FULL_N &&
	     xbar_upper_merges_3_fi0_EMPTY_N &&
	     !xbar_upper_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_3_both_have_data =
	     (xbar_upper_merges_3_routeFrom[1] ?
		xbar_upper_merges_3_fo_i_notFull__842_AND_IF_x_ETC___d4858 :
		IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4867) &&
	     xbar_upper_merges_3_fi0_EMPTY_N &&
	     xbar_upper_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_upper_route_1
  assign WILL_FIRE_RL_xbar_upper_route_1 =
	     xbar_upper_upper_merges_1_fo_EMPTY_N &&
	     (xbar_upper_upper_merges_1_fo_D_OUT[579] ?
		xbar_upper_merges_3_fi1_FULL_N :
		xbar_upper_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_upper_route_3
  assign WILL_FIRE_RL_xbar_upper_route_3 =
	     xbar_upper_lower_merges_1_fo_EMPTY_N &&
	     (xbar_upper_lower_merges_1_fo_D_OUT[579] ?
		xbar_upper_merges_3_fi0_FULL_N :
		xbar_upper_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_lower_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty =
	     xbar_lower_upper_merges_fi1_EMPTY_N &&
	     xbar_lower_upper_merges_fo_FULL_N &&
	     !xbar_lower_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty =
	     xbar_lower_upper_merges_fo_FULL_N &&
	     xbar_lower_upper_merges_fi0_EMPTY_N &&
	     !xbar_lower_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data =
	     (xbar_lower_upper_merges_routeFrom[1] ?
		xbar_lower_upper_merges_fo_i_notFull__963_AND__ETC___d4979 :
		IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4988) &&
	     xbar_lower_upper_merges_fi0_EMPTY_N &&
	     xbar_lower_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty =
	     xbar_lower_upper_merges_1_fi1_EMPTY_N &&
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     !xbar_lower_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty =
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     xbar_lower_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data =
	     (xbar_lower_upper_merges_1_routeFrom[1] ?
		xbar_lower_upper_merges_1_fo_i_notFull__038_AN_ETC___d5054 :
		IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5063) &&
	     xbar_lower_upper_merges_1_fi0_EMPTY_N &&
	     xbar_lower_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_upper_route
  assign WILL_FIRE_RL_xbar_lower_upper_route =
	     xbar_lower_upper_upper_f_EMPTY_N &&
	     (xbar_lower_upper_upper_f_D_OUT[578] ?
		xbar_lower_upper_merges_1_fi1_FULL_N :
		xbar_lower_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_upper_route_1
  assign WILL_FIRE_RL_xbar_lower_upper_route_1 =
	     xbar_lower_upper_lower_f_EMPTY_N &&
	     (xbar_lower_upper_lower_f_D_OUT[578] ?
		xbar_lower_upper_merges_1_fi0_FULL_N :
		xbar_lower_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty =
	     xbar_lower_lower_merges_fi1_EMPTY_N &&
	     xbar_lower_lower_merges_fo_FULL_N &&
	     !xbar_lower_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty =
	     xbar_lower_lower_merges_fo_FULL_N &&
	     xbar_lower_lower_merges_fi0_EMPTY_N &&
	     !xbar_lower_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data =
	     (xbar_lower_lower_merges_routeFrom[1] ?
		xbar_lower_lower_merges_fo_i_notFull__135_AND__ETC___d5151 :
		IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5160) &&
	     xbar_lower_lower_merges_fi0_EMPTY_N &&
	     xbar_lower_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty =
	     xbar_lower_lower_merges_1_fi1_EMPTY_N &&
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     !xbar_lower_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty =
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     xbar_lower_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data =
	     (xbar_lower_lower_merges_1_routeFrom[1] ?
		xbar_lower_lower_merges_1_fo_i_notFull__210_AN_ETC___d5226 :
		IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5235) &&
	     xbar_lower_lower_merges_1_fi0_EMPTY_N &&
	     xbar_lower_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_lower_route
  assign WILL_FIRE_RL_xbar_lower_lower_route =
	     xbar_lower_lower_upper_f_EMPTY_N &&
	     (xbar_lower_lower_upper_f_D_OUT[578] ?
		xbar_lower_lower_merges_1_fi1_FULL_N :
		xbar_lower_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_lower_route_1
  assign WILL_FIRE_RL_xbar_lower_lower_route_1 =
	     xbar_lower_lower_lower_f_EMPTY_N &&
	     (xbar_lower_lower_lower_f_D_OUT[578] ?
		xbar_lower_lower_merges_1_fi0_FULL_N :
		xbar_lower_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty =
	     xbar_lower_merges_fi1_EMPTY_N && xbar_lower_merges_fo_FULL_N &&
	     !xbar_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty =
	     xbar_lower_merges_fo_FULL_N && xbar_lower_merges_fi0_EMPTY_N &&
	     !xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_both_have_data =
	     (xbar_lower_merges_routeFrom[1] ?
		xbar_lower_merges_fo_i_notFull__307_AND_IF_xba_ETC___d5323 :
		IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5332) &&
	     xbar_lower_merges_fi0_EMPTY_N &&
	     xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty =
	     xbar_lower_merges_1_fi1_EMPTY_N &&
	     xbar_lower_merges_1_fo_FULL_N &&
	     !xbar_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty =
	     xbar_lower_merges_1_fo_FULL_N &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_1_both_have_data =
	     (xbar_lower_merges_1_routeFrom[1] ?
		xbar_lower_merges_1_fo_i_notFull__382_AND_IF_x_ETC___d5398 :
		IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5407) &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty =
	     xbar_lower_merges_2_fi1_EMPTY_N &&
	     xbar_lower_merges_2_fo_FULL_N &&
	     !xbar_lower_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty =
	     xbar_lower_merges_2_fo_FULL_N &&
	     xbar_lower_merges_2_fi0_EMPTY_N &&
	     !xbar_lower_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_2_both_have_data =
	     (xbar_lower_merges_2_routeFrom[1] ?
		xbar_lower_merges_2_fo_i_notFull__457_AND_IF_x_ETC___d5473 :
		IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5482) &&
	     xbar_lower_merges_2_fi0_EMPTY_N &&
	     xbar_lower_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_lower_route
  assign WILL_FIRE_RL_xbar_lower_route =
	     xbar_lower_upper_merges_fo_EMPTY_N &&
	     (xbar_lower_upper_merges_fo_D_OUT[579] ?
		xbar_lower_merges_2_fi1_FULL_N :
		xbar_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_route_2
  assign WILL_FIRE_RL_xbar_lower_route_2 =
	     xbar_lower_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_lower_merges_fo_D_OUT[579] ?
		xbar_lower_merges_2_fi0_FULL_N :
		xbar_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty =
	     xbar_lower_merges_3_fi1_EMPTY_N &&
	     xbar_lower_merges_3_fo_FULL_N &&
	     !xbar_lower_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty =
	     xbar_lower_merges_3_fo_FULL_N &&
	     xbar_lower_merges_3_fi0_EMPTY_N &&
	     !xbar_lower_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_3_both_have_data =
	     (xbar_lower_merges_3_routeFrom[1] ?
		xbar_lower_merges_3_fo_i_notFull__532_AND_IF_x_ETC___d5548 :
		IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5557) &&
	     xbar_lower_merges_3_fi0_EMPTY_N &&
	     xbar_lower_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_lower_route_1
  assign WILL_FIRE_RL_xbar_lower_route_1 =
	     xbar_lower_upper_merges_1_fo_EMPTY_N &&
	     (xbar_lower_upper_merges_1_fo_D_OUT[579] ?
		xbar_lower_merges_3_fi1_FULL_N :
		xbar_lower_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_lower_route_3
  assign WILL_FIRE_RL_xbar_lower_route_3 =
	     xbar_lower_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_lower_merges_1_fo_D_OUT[579] ?
		xbar_lower_merges_3_fi0_FULL_N :
		xbar_lower_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi0_is_empty =
	     xbar_merges_fi1_EMPTY_N && xbar_merges_fo_FULL_N &&
	     !xbar_merges_fi0_EMPTY_N ;

  // rule RL_xbar_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi1_is_empty =
	     xbar_merges_fo_FULL_N && xbar_merges_fi0_EMPTY_N &&
	     !xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_both_have_data
  assign WILL_FIRE_RL_xbar_merges_both_have_data =
	     (xbar_merges_routeFrom[1] ?
		xbar_merges_fo_i_notFull__651_AND_IF_xbar_merg_ETC___d5667 :
		IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5676) &&
	     xbar_merges_fi0_EMPTY_N &&
	     xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi0_is_empty =
	     xbar_merges_1_fi1_EMPTY_N && xbar_merges_1_fo_FULL_N &&
	     !xbar_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi1_is_empty =
	     xbar_merges_1_fo_FULL_N && xbar_merges_1_fi0_EMPTY_N &&
	     !xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_merges_1_both_have_data =
	     (xbar_merges_1_routeFrom[1] ?
		xbar_merges_1_fo_i_notFull__726_AND_IF_xbar_me_ETC___d5742 :
		IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5751) &&
	     xbar_merges_1_fi0_EMPTY_N &&
	     xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi0_is_empty =
	     xbar_merges_2_fi1_EMPTY_N && xbar_merges_2_fo_FULL_N &&
	     !xbar_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi1_is_empty =
	     xbar_merges_2_fo_FULL_N && xbar_merges_2_fi0_EMPTY_N &&
	     !xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_merges_2_both_have_data =
	     (xbar_merges_2_routeFrom[1] ?
		xbar_merges_2_fo_i_notFull__801_AND_IF_xbar_me_ETC___d5817 :
		IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5826) &&
	     xbar_merges_2_fi0_EMPTY_N &&
	     xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi0_is_empty =
	     xbar_merges_3_fi1_EMPTY_N && xbar_merges_3_fo_FULL_N &&
	     !xbar_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi1_is_empty =
	     xbar_merges_3_fo_FULL_N && xbar_merges_3_fi0_EMPTY_N &&
	     !xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_merges_3_both_have_data =
	     (xbar_merges_3_routeFrom[1] ?
		xbar_merges_3_fo_i_notFull__876_AND_IF_xbar_me_ETC___d5892 :
		IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5901) &&
	     xbar_merges_3_fi0_EMPTY_N &&
	     xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_merges_4_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_4_fi0_is_empty =
	     xbar_merges_4_fi1_EMPTY_N && xbar_merges_4_fo_FULL_N &&
	     !xbar_merges_4_fi0_EMPTY_N ;

  // rule RL_xbar_merges_4_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_4_fi1_is_empty =
	     xbar_merges_4_fo_FULL_N && xbar_merges_4_fi0_EMPTY_N &&
	     !xbar_merges_4_fi1_EMPTY_N ;

  // rule RL_xbar_merges_4_both_have_data
  assign WILL_FIRE_RL_xbar_merges_4_both_have_data =
	     (xbar_merges_4_routeFrom[1] ?
		xbar_merges_4_fo_i_notFull__951_AND_IF_xbar_me_ETC___d5967 :
		IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5976) &&
	     xbar_merges_4_fi0_EMPTY_N &&
	     xbar_merges_4_fi1_EMPTY_N ;

  // rule RL_xbar_route
  assign WILL_FIRE_RL_xbar_route =
	     xbar_upper_merges_fo_EMPTY_N &&
	     (xbar_upper_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi1_FULL_N :
		xbar_merges_fi0_FULL_N) ;

  // rule RL_xbar_route_4
  assign WILL_FIRE_RL_xbar_route_4 =
	     xbar_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi0_FULL_N :
		xbar_merges_fi1_FULL_N) ;

  // rule RL_xbar_merges_5_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_5_fi0_is_empty =
	     xbar_merges_5_fi1_EMPTY_N && xbar_merges_5_fo_FULL_N &&
	     !xbar_merges_5_fi0_EMPTY_N ;

  // rule RL_xbar_merges_5_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_5_fi1_is_empty =
	     xbar_merges_5_fo_FULL_N && xbar_merges_5_fi0_EMPTY_N &&
	     !xbar_merges_5_fi1_EMPTY_N ;

  // rule RL_xbar_merges_5_both_have_data
  assign WILL_FIRE_RL_xbar_merges_5_both_have_data =
	     (xbar_merges_5_routeFrom[1] ?
		xbar_merges_5_fo_i_notFull__026_AND_IF_xbar_me_ETC___d6042 :
		IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6051) &&
	     xbar_merges_5_fi0_EMPTY_N &&
	     xbar_merges_5_fi1_EMPTY_N ;

  // rule RL_xbar_route_1
  assign WILL_FIRE_RL_xbar_route_1 =
	     xbar_upper_merges_1_fo_EMPTY_N &&
	     (xbar_upper_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi1_FULL_N :
		xbar_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_route_5
  assign WILL_FIRE_RL_xbar_route_5 =
	     xbar_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi0_FULL_N :
		xbar_merges_1_fi1_FULL_N) ;

  // rule RL_xbar_merges_6_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_6_fi0_is_empty =
	     xbar_merges_6_fi1_EMPTY_N && xbar_merges_6_fo_FULL_N &&
	     !xbar_merges_6_fi0_EMPTY_N ;

  // rule RL_xbar_merges_6_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_6_fi1_is_empty =
	     xbar_merges_6_fo_FULL_N && xbar_merges_6_fi0_EMPTY_N &&
	     !xbar_merges_6_fi1_EMPTY_N ;

  // rule RL_xbar_merges_6_both_have_data
  assign WILL_FIRE_RL_xbar_merges_6_both_have_data =
	     (xbar_merges_6_routeFrom[1] ?
		xbar_merges_6_fo_i_notFull__101_AND_IF_xbar_me_ETC___d6117 :
		IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6126) &&
	     xbar_merges_6_fi0_EMPTY_N &&
	     xbar_merges_6_fi1_EMPTY_N ;

  // rule RL_xbar_route_2
  assign WILL_FIRE_RL_xbar_route_2 =
	     xbar_upper_merges_2_fo_EMPTY_N &&
	     (xbar_upper_merges_2_fo_D_OUT[580] ?
		xbar_merges_6_fi1_FULL_N :
		xbar_merges_2_fi0_FULL_N) ;

  // rule RL_xbar_route_6
  assign WILL_FIRE_RL_xbar_route_6 =
	     xbar_lower_merges_2_fo_EMPTY_N &&
	     (xbar_lower_merges_2_fo_D_OUT[580] ?
		xbar_merges_6_fi0_FULL_N :
		xbar_merges_2_fi1_FULL_N) ;

  // rule RL_xbar_merges_7_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_7_fi0_is_empty =
	     xbar_merges_7_fi1_EMPTY_N && xbar_merges_7_fo_FULL_N &&
	     !xbar_merges_7_fi0_EMPTY_N ;

  // rule RL_xbar_merges_7_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_7_fi1_is_empty =
	     xbar_merges_7_fo_FULL_N && xbar_merges_7_fi0_EMPTY_N &&
	     !xbar_merges_7_fi1_EMPTY_N ;

  // rule RL_xbar_merges_7_both_have_data
  assign WILL_FIRE_RL_xbar_merges_7_both_have_data =
	     (xbar_merges_7_routeFrom[1] ?
		xbar_merges_7_fo_i_notFull__176_AND_IF_xbar_me_ETC___d6192 :
		IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6201) &&
	     xbar_merges_7_fi0_EMPTY_N &&
	     xbar_merges_7_fi1_EMPTY_N ;

  // rule RL_xbar_route_3
  assign WILL_FIRE_RL_xbar_route_3 =
	     xbar_upper_merges_3_fo_EMPTY_N &&
	     (xbar_upper_merges_3_fo_D_OUT[580] ?
		xbar_merges_7_fi1_FULL_N :
		xbar_merges_3_fi0_FULL_N) ;

  // rule RL_xbar_route_7
  assign WILL_FIRE_RL_xbar_route_7 =
	     xbar_lower_merges_3_fo_EMPTY_N &&
	     (xbar_lower_merges_3_fo_D_OUT[580] ?
		xbar_merges_7_fi0_FULL_N :
		xbar_merges_3_fi1_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_hostchan_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_0_readStarted_write_1__SEL_2 =
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_2 =
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;
  assign MUX_hostchan_2_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress &&
	     hostchan_2_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_2_readStarted_write_1__SEL_2 =
	     hostchan_2_readLenFifo_EMPTY_N && hostchan_2_pktLenFifo_FULL_N &&
	     hostchan_2_readReqFifo_FULL_N &&
	     !hostchan_2_readStarted ;
  assign MUX_hostchan_3_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress &&
	     hostchan_3_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_3_readStarted_write_1__SEL_2 =
	     hostchan_3_readLenFifo_EMPTY_N && hostchan_3_pktLenFifo_FULL_N &&
	     hostchan_3_readReqFifo_FULL_N &&
	     !hostchan_3_readStarted ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;
  assign MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     !macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;
  assign MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     !macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;
  assign MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_69 &&
	     !EN_txchan_0_writeServer_enq ;
  assign MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_2 =
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;
  assign MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_70 &&
	     !EN_txchan_1_writeServer_enq ;
  assign MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_2 =
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;
  assign MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_71 &&
	     !EN_txchan_2_writeServer_enq ;
  assign MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_2_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_2 =
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;
  assign MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_72 &&
	     !EN_txchan_3_writeServer_enq ;
  assign MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_3_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_3_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress &&
	     pktBuff_3_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_3_readStarted_write_1__SEL_2 =
	     pktBuff_3_meta_ff_EMPTY_N && pktBuff_3_readLenFifo_EMPTY_N &&
	     pktBuff_3_readReqFifo_FULL_N &&
	     !pktBuff_3_readStarted ;
  assign MUX_pktBuff_4_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress &&
	     pktBuff_4_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_4_readStarted_write_1__SEL_2 =
	     pktBuff_4_meta_ff_EMPTY_N && pktBuff_4_readLenFifo_EMPTY_N &&
	     pktBuff_4_readReqFifo_FULL_N &&
	     !pktBuff_4_readStarted ;
  assign MUX_readStarted_0_write_1__SEL_1 =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ;
  assign MUX_readStarted_0_write_1__SEL_2 =
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 ==
	     8'd0 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 ==
	     8'd0 ;
  assign MUX_ringToMac_2_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 ==
	     8'd0 ;
  assign MUX_ringToMac_3_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 ==
	     8'd0 ;
  assign MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     xbar_lower_lower_merges_1_routeFrom_222_BIT_1__ETC___d5268 ;
  assign MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248) ;
  assign MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     xbar_lower_lower_merges_routeFrom_147_BIT_1_14_ETC___d5193 ;
  assign MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173) ;
  assign MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_394_BIT_1_395_AN_ETC___d5440 ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420) ;
  assign MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     xbar_lower_merges_2_routeFrom_469_BIT_1_470_AN_ETC___d5515 ;
  assign MUX_xbar_lower_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] ||
	      IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495) ;
  assign MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     xbar_lower_merges_3_routeFrom_544_BIT_1_545_AN_ETC___d5590 ;
  assign MUX_xbar_lower_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] ||
	      IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570) ;
  assign MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_319_BIT_1_320_AND__ETC___d5365 ;
  assign MUX_xbar_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345) ;
  assign MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     xbar_lower_upper_merges_1_routeFrom_050_BIT_1__ETC___d5096 ;
  assign MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076) ;
  assign MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     xbar_lower_upper_merges_routeFrom_975_BIT_1_97_ETC___d5021 ;
  assign MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001) ;
  assign MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_738_BIT_1_739_AND_IF_x_ETC___d5784 ;
  assign MUX_xbar_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764) ;
  assign MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_813_BIT_1_814_AND_IF_x_ETC___d5859 ;
  assign MUX_xbar_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839) ;
  assign MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_888_BIT_1_889_AND_IF_x_ETC___d5934 ;
  assign MUX_xbar_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914) ;
  assign MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     xbar_merges_4_routeFrom_963_BIT_1_964_AND_IF_x_ETC___d6009 ;
  assign MUX_xbar_merges_4_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] ||
	      IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989) ;
  assign MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     xbar_merges_5_routeFrom_038_BIT_1_039_AND_IF_x_ETC___d6084 ;
  assign MUX_xbar_merges_5_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] ||
	      IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064) ;
  assign MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     xbar_merges_6_routeFrom_113_BIT_1_114_AND_IF_x_ETC___d6159 ;
  assign MUX_xbar_merges_6_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] ||
	      IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139) ;
  assign MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     xbar_merges_7_routeFrom_188_BIT_1_189_AND_IF_x_ETC___d6234 ;
  assign MUX_xbar_merges_7_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] ||
	      IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214) ;
  assign MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_663_BIT_1_664_AND_IF_xba_ETC___d5709 ;
  assign MUX_xbar_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689) ;
  assign MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     xbar_upper_lower_merges_1_routeFrom_532_BIT_1__ETC___d4578 ;
  assign MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558) ;
  assign MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     xbar_upper_lower_merges_routeFrom_457_BIT_1_45_ETC___d4503 ;
  assign MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483) ;
  assign MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_704_BIT_1_705_AN_ETC___d4750 ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730) ;
  assign MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     xbar_upper_merges_2_routeFrom_779_BIT_1_780_AN_ETC___d4825 ;
  assign MUX_xbar_upper_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] ||
	      IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805) ;
  assign MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     xbar_upper_merges_3_routeFrom_854_BIT_1_855_AN_ETC___d4900 ;
  assign MUX_xbar_upper_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] ||
	      IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880) ;
  assign MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_629_BIT_1_630_AND__ETC___d4675 ;
  assign MUX_xbar_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655) ;
  assign MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     xbar_upper_upper_merges_1_routeFrom_358_BIT_1__ETC___d4404 ;
  assign MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384) ;
  assign MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     xbar_upper_upper_merges_routeFrom_283_BIT_1_28_ETC___d4329 ;
  assign MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309) ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_0_gearbox_in_ff_D_OUT[105:74],
	       x_data__h12076,
	       8'd0,
	       macToRing_0_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_0_gearbox_v_prev[105:74],
	       x_data__h13034,
	       x_mask__h13035,
	       macToRing_0_gearbox_v_prev[1],
	       macToRing_0_gearbox_v_prev[0] ||
	       macToRing_0_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_1_gearbox_in_ff_D_OUT[105:74],
	       x_data__h20318,
	       8'd0,
	       macToRing_1_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_1_gearbox_v_prev[105:74],
	       x_data__h21276,
	       x_mask__h21277,
	       macToRing_1_gearbox_v_prev[1],
	       macToRing_1_gearbox_v_prev[0] ||
	       macToRing_1_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_2_gearbox_in_ff_D_OUT[105:74],
	       x_data__h28560,
	       8'd0,
	       macToRing_2_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_2_gearbox_v_prev[105:74],
	       x_data__h29518,
	       x_mask__h29519,
	       macToRing_2_gearbox_v_prev[1],
	       macToRing_2_gearbox_v_prev[0] ||
	       macToRing_2_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_3_gearbox_in_ff_D_OUT[105:74],
	       x_data__h36802,
	       8'd0,
	       macToRing_3_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_3_gearbox_v_prev[105:74],
	       x_data__h37760,
	       x_mask__h37761,
	       macToRing_3_gearbox_v_prev[1],
	       macToRing_3_gearbox_v_prev[0] ||
	       macToRing_3_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 = pktBuff_0_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 = pktBuff_1_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 = pktBuff_2_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 = pktBuff_3_rdCurrPtr + 8'd1 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__VAL_1 =
	     ringToMac_0_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__VAL_1 =
	     ringToMac_1_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_2_idle_cycles_write_1__VAL_1 =
	     ringToMac_2_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_3_idle_cycles_write_1__VAL_1 =
	     ringToMac_3_idle_cycles + 64'd1 ;
  assign MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_lower_merges_1_routeFrom[1] ?
	       (xbar_lower_lower_merges_1_routeFrom[0] ?
		  xbar_lower_lower_merges_1_fi1_D_OUT :
		  xbar_lower_lower_merges_1_fi0_D_OUT) :
	       (xbar_lower_lower_merges_1_fi0HasPrio ?
		  xbar_lower_lower_merges_1_fi0_D_OUT :
		  xbar_lower_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1 =
	     xbar_lower_lower_merges_routeFrom[1] ?
	       (xbar_lower_lower_merges_routeFrom[0] ?
		  xbar_lower_lower_merges_fi1_D_OUT :
		  xbar_lower_lower_merges_fi0_D_OUT) :
	       (xbar_lower_lower_merges_fi0HasPrio ?
		  xbar_lower_lower_merges_fi0_D_OUT :
		  xbar_lower_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_merges_1_routeFrom[1] ?
	       (xbar_lower_merges_1_routeFrom[0] ?
		  xbar_lower_merges_1_fi1_D_OUT :
		  xbar_lower_merges_1_fi0_D_OUT) :
	       (xbar_lower_merges_1_fi0HasPrio ?
		  xbar_lower_merges_1_fi0_D_OUT :
		  xbar_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_2_fo_enq_1__VAL_1 =
	     xbar_lower_merges_2_routeFrom[1] ?
	       (xbar_lower_merges_2_routeFrom[0] ?
		  xbar_lower_merges_2_fi1_D_OUT :
		  xbar_lower_merges_2_fi0_D_OUT) :
	       (xbar_lower_merges_2_fi0HasPrio ?
		  xbar_lower_merges_2_fi0_D_OUT :
		  xbar_lower_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_3_fo_enq_1__VAL_1 =
	     xbar_lower_merges_3_routeFrom[1] ?
	       (xbar_lower_merges_3_routeFrom[0] ?
		  xbar_lower_merges_3_fi1_D_OUT :
		  xbar_lower_merges_3_fi0_D_OUT) :
	       (xbar_lower_merges_3_fi0HasPrio ?
		  xbar_lower_merges_3_fi0_D_OUT :
		  xbar_lower_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_fo_enq_1__VAL_1 =
	     xbar_lower_merges_routeFrom[1] ?
	       (xbar_lower_merges_routeFrom[0] ?
		  xbar_lower_merges_fi1_D_OUT :
		  xbar_lower_merges_fi0_D_OUT) :
	       (xbar_lower_merges_fi0HasPrio ?
		  xbar_lower_merges_fi0_D_OUT :
		  xbar_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_upper_merges_1_routeFrom[1] ?
	       (xbar_lower_upper_merges_1_routeFrom[0] ?
		  xbar_lower_upper_merges_1_fi1_D_OUT :
		  xbar_lower_upper_merges_1_fi0_D_OUT) :
	       (xbar_lower_upper_merges_1_fi0HasPrio ?
		  xbar_lower_upper_merges_1_fi0_D_OUT :
		  xbar_lower_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1 =
	     xbar_lower_upper_merges_routeFrom[1] ?
	       (xbar_lower_upper_merges_routeFrom[0] ?
		  xbar_lower_upper_merges_fi1_D_OUT :
		  xbar_lower_upper_merges_fi0_D_OUT) :
	       (xbar_lower_upper_merges_fi0HasPrio ?
		  xbar_lower_upper_merges_fi0_D_OUT :
		  xbar_lower_upper_merges_fi1_D_OUT) ;
  assign MUX_xbar_merges_1_fo_enq_1__VAL_1 =
	     xbar_merges_1_routeFrom[1] ?
	       (xbar_merges_1_routeFrom[0] ?
		  xbar_merges_1_fi1_D_OUT :
		  xbar_merges_1_fi0_D_OUT) :
	       (xbar_merges_1_fi0HasPrio ?
		  xbar_merges_1_fi0_D_OUT :
		  xbar_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_merges_2_fo_enq_1__VAL_1 =
	     xbar_merges_2_routeFrom[1] ?
	       (xbar_merges_2_routeFrom[0] ?
		  xbar_merges_2_fi1_D_OUT :
		  xbar_merges_2_fi0_D_OUT) :
	       (xbar_merges_2_fi0HasPrio ?
		  xbar_merges_2_fi0_D_OUT :
		  xbar_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_merges_3_fo_enq_1__VAL_1 =
	     xbar_merges_3_routeFrom[1] ?
	       (xbar_merges_3_routeFrom[0] ?
		  xbar_merges_3_fi1_D_OUT :
		  xbar_merges_3_fi0_D_OUT) :
	       (xbar_merges_3_fi0HasPrio ?
		  xbar_merges_3_fi0_D_OUT :
		  xbar_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_merges_4_fo_enq_1__VAL_1 =
	     xbar_merges_4_routeFrom[1] ?
	       (xbar_merges_4_routeFrom[0] ?
		  xbar_merges_4_fi1_D_OUT :
		  xbar_merges_4_fi0_D_OUT) :
	       (xbar_merges_4_fi0HasPrio ?
		  xbar_merges_4_fi0_D_OUT :
		  xbar_merges_4_fi1_D_OUT) ;
  assign MUX_xbar_merges_5_fo_enq_1__VAL_1 =
	     xbar_merges_5_routeFrom[1] ?
	       (xbar_merges_5_routeFrom[0] ?
		  xbar_merges_5_fi1_D_OUT :
		  xbar_merges_5_fi0_D_OUT) :
	       (xbar_merges_5_fi0HasPrio ?
		  xbar_merges_5_fi0_D_OUT :
		  xbar_merges_5_fi1_D_OUT) ;
  assign MUX_xbar_merges_6_fo_enq_1__VAL_1 =
	     xbar_merges_6_routeFrom[1] ?
	       (xbar_merges_6_routeFrom[0] ?
		  xbar_merges_6_fi1_D_OUT :
		  xbar_merges_6_fi0_D_OUT) :
	       (xbar_merges_6_fi0HasPrio ?
		  xbar_merges_6_fi0_D_OUT :
		  xbar_merges_6_fi1_D_OUT) ;
  assign MUX_xbar_merges_7_fo_enq_1__VAL_1 =
	     xbar_merges_7_routeFrom[1] ?
	       (xbar_merges_7_routeFrom[0] ?
		  xbar_merges_7_fi1_D_OUT :
		  xbar_merges_7_fi0_D_OUT) :
	       (xbar_merges_7_fi0HasPrio ?
		  xbar_merges_7_fi0_D_OUT :
		  xbar_merges_7_fi1_D_OUT) ;
  assign MUX_xbar_merges_fo_enq_1__VAL_1 =
	     xbar_merges_routeFrom[1] ?
	       (xbar_merges_routeFrom[0] ?
		  xbar_merges_fi1_D_OUT :
		  xbar_merges_fi0_D_OUT) :
	       (xbar_merges_fi0HasPrio ?
		  xbar_merges_fi0_D_OUT :
		  xbar_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_lower_merges_1_routeFrom[1] ?
	       (xbar_upper_lower_merges_1_routeFrom[0] ?
		  xbar_upper_lower_merges_1_fi1_D_OUT :
		  xbar_upper_lower_merges_1_fi0_D_OUT) :
	       (xbar_upper_lower_merges_1_fi0HasPrio ?
		  xbar_upper_lower_merges_1_fi0_D_OUT :
		  xbar_upper_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1 =
	     xbar_upper_lower_merges_routeFrom[1] ?
	       (xbar_upper_lower_merges_routeFrom[0] ?
		  xbar_upper_lower_merges_fi1_D_OUT :
		  xbar_upper_lower_merges_fi0_D_OUT) :
	       (xbar_upper_lower_merges_fi0HasPrio ?
		  xbar_upper_lower_merges_fi0_D_OUT :
		  xbar_upper_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_merges_1_routeFrom[1] ?
	       (xbar_upper_merges_1_routeFrom[0] ?
		  xbar_upper_merges_1_fi1_D_OUT :
		  xbar_upper_merges_1_fi0_D_OUT) :
	       (xbar_upper_merges_1_fi0HasPrio ?
		  xbar_upper_merges_1_fi0_D_OUT :
		  xbar_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_2_fo_enq_1__VAL_1 =
	     xbar_upper_merges_2_routeFrom[1] ?
	       (xbar_upper_merges_2_routeFrom[0] ?
		  xbar_upper_merges_2_fi1_D_OUT :
		  xbar_upper_merges_2_fi0_D_OUT) :
	       (xbar_upper_merges_2_fi0HasPrio ?
		  xbar_upper_merges_2_fi0_D_OUT :
		  xbar_upper_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_3_fo_enq_1__VAL_1 =
	     xbar_upper_merges_3_routeFrom[1] ?
	       (xbar_upper_merges_3_routeFrom[0] ?
		  xbar_upper_merges_3_fi1_D_OUT :
		  xbar_upper_merges_3_fi0_D_OUT) :
	       (xbar_upper_merges_3_fi0HasPrio ?
		  xbar_upper_merges_3_fi0_D_OUT :
		  xbar_upper_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_fo_enq_1__VAL_1 =
	     xbar_upper_merges_routeFrom[1] ?
	       (xbar_upper_merges_routeFrom[0] ?
		  xbar_upper_merges_fi1_D_OUT :
		  xbar_upper_merges_fi0_D_OUT) :
	       (xbar_upper_merges_fi0HasPrio ?
		  xbar_upper_merges_fi0_D_OUT :
		  xbar_upper_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_upper_merges_1_routeFrom[1] ?
	       (xbar_upper_upper_merges_1_routeFrom[0] ?
		  xbar_upper_upper_merges_1_fi1_D_OUT :
		  xbar_upper_upper_merges_1_fi0_D_OUT) :
	       (xbar_upper_upper_merges_1_fi0HasPrio ?
		  xbar_upper_upper_merges_1_fi0_D_OUT :
		  xbar_upper_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1 =
	     xbar_upper_upper_merges_routeFrom[1] ?
	       (xbar_upper_upper_merges_routeFrom[0] ?
		  xbar_upper_upper_merges_fi1_D_OUT :
		  xbar_upper_upper_merges_fi0_D_OUT) :
	       (xbar_upper_upper_merges_fi0HasPrio ?
		  xbar_upper_upper_merges_fi0_D_OUT :
		  xbar_upper_upper_merges_fi1_D_OUT) ;

  // inlined wires
  assign pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_844_SLT_3___d2013 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ||
	     WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_0_memBuffer_memory_DOB :
	       pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_0_dequeue_first_beat) &&
	     (!ab__h78472[1] || ab__h78472[0]) ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h78472[1] || ab__h78472[0] } ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_1_whas =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_288_SLT_3___d2457 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ||
	     WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_1_memBuffer_memory_DOB :
	       pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_1_dequeue_first_beat) &&
	     (!ab__h97109[1] || ab__h97109[0]) ;
  assign pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h97109[1] || ab__h97109[0] } ;
  assign pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_2_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_2_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_2_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_2_commit_packet ||
	     pktBuff_2_incomingReqs_EMPTY_N &&
	     pktBuff_2_memBuffer_serverAdapterA_cnt_732_SLT_3___d2901 &&
	     !pktBuff_2_fifoEop_EMPTY_N &&
	     pktBuff_2_inPacket ||
	     WILL_FIRE_RL_pktBuff_2_enqueue_first_beat ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_2_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_2_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_2_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_2_memBuffer_memory_DOB :
	       pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_2_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_2_dequeue_first_beat) &&
	     (!ab__h115743[1] || ab__h115743[0]) ;
  assign pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;
  assign pktBuff_2_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h115743[1] || ab__h115743[0] } ;
  assign pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_3_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_3_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_3_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_3_commit_packet ||
	     pktBuff_3_incomingReqs_EMPTY_N &&
	     pktBuff_3_memBuffer_serverAdapterA_cnt_176_SLT_3___d3345 &&
	     !pktBuff_3_fifoEop_EMPTY_N &&
	     pktBuff_3_inPacket ||
	     WILL_FIRE_RL_pktBuff_3_enqueue_first_beat ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_3_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_3_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_3_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_3_memBuffer_memory_DOB :
	       pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_3_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_3_dequeue_first_beat) &&
	     (!ab__h134377[1] || ab__h134377[0]) ;
  assign pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;
  assign pktBuff_3_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h134377[1] || ab__h134377[0] } ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register cf_verbosity_0
  assign cf_verbosity_0_D_IN = 32'h0 ;
  assign cf_verbosity_0_EN = 1'b0 ;

  // register cf_verbosity_0_1
  assign cf_verbosity_0_1_D_IN = verbose_ff_0_1_D_OUT ;
  assign cf_verbosity_0_1_EN = verbose_ff_0_1_EMPTY_N ;

  // register cf_verbosity_0_2
  assign cf_verbosity_0_2_D_IN = 32'h0 ;
  assign cf_verbosity_0_2_EN = 1'b0 ;

  // register cf_verbosity_0_3
  assign cf_verbosity_0_3_D_IN = 32'h0 ;
  assign cf_verbosity_0_3_EN = 1'b0 ;

  // register cf_verbosity_1
  assign cf_verbosity_1_D_IN = verbose_ff_1_D_OUT ;
  assign cf_verbosity_1_EN = verbose_ff_1_EMPTY_N ;

  // register cf_verbosity_1_1
  assign cf_verbosity_1_1_D_IN = 32'h0 ;
  assign cf_verbosity_1_1_EN = 1'b0 ;

  // register cf_verbosity_1_2
  assign cf_verbosity_1_2_D_IN = 32'h0 ;
  assign cf_verbosity_1_2_EN = 1'b0 ;

  // register cf_verbosity_2
  assign cf_verbosity_2_D_IN = verbose_ff_2_D_OUT ;
  assign cf_verbosity_2_EN = verbose_ff_2_EMPTY_N ;

  // register cf_verbosity_2_1
  assign cf_verbosity_2_1_D_IN = 32'h0 ;
  assign cf_verbosity_2_1_EN = 1'b0 ;

  // register cf_verbosity_2_2
  assign cf_verbosity_2_2_D_IN = 32'h0 ;
  assign cf_verbosity_2_2_EN = 1'b0 ;

  // register cf_verbosity_3
  assign cf_verbosity_3_D_IN = verbose_ff_3_D_OUT ;
  assign cf_verbosity_3_EN = verbose_ff_3_EMPTY_N ;

  // register cf_verbosity_3_1
  assign cf_verbosity_3_1_D_IN = 32'h0 ;
  assign cf_verbosity_3_1_EN = 1'b0 ;

  // register cf_verbosity_3_2
  assign cf_verbosity_3_2_D_IN = 32'h0 ;
  assign cf_verbosity_3_2_EN = 1'b0 ;

  // register cf_verbosity_4
  assign cf_verbosity_4_D_IN = 32'h0 ;
  assign cf_verbosity_4_EN = 1'b0 ;

  // register hostchan_0_cf_verbosity
  assign hostchan_0_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_0_cf_verbosity_EN = 1'b0 ;

  // register hostchan_0_readStarted
  assign hostchan_0_readStarted_D_IN =
	     !MUX_hostchan_0_readStarted_write_1__SEL_1 ;
  assign hostchan_0_readStarted_EN =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ||
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;

  // register hostchan_1_cf_verbosity
  assign hostchan_1_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_1_cf_verbosity_EN = 1'b0 ;

  // register hostchan_1_readStarted
  assign hostchan_1_readStarted_D_IN =
	     !MUX_hostchan_1_readStarted_write_1__SEL_1 ;
  assign hostchan_1_readStarted_EN =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ||
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;

  // register hostchan_2_cf_verbosity
  assign hostchan_2_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_2_cf_verbosity_EN = 1'b0 ;

  // register hostchan_2_readStarted
  assign hostchan_2_readStarted_D_IN =
	     !MUX_hostchan_2_readStarted_write_1__SEL_1 ;
  assign hostchan_2_readStarted_EN =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress &&
	     hostchan_2_readDataFifo_D_OUT[0] ||
	     hostchan_2_readLenFifo_EMPTY_N && hostchan_2_pktLenFifo_FULL_N &&
	     hostchan_2_readReqFifo_FULL_N &&
	     !hostchan_2_readStarted ;

  // register hostchan_3_cf_verbosity
  assign hostchan_3_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_3_cf_verbosity_EN = 1'b0 ;

  // register hostchan_3_readStarted
  assign hostchan_3_readStarted_D_IN =
	     !MUX_hostchan_3_readStarted_write_1__SEL_1 ;
  assign hostchan_3_readStarted_EN =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress &&
	     hostchan_3_readDataFifo_D_OUT[0] ||
	     hostchan_3_readLenFifo_EMPTY_N && hostchan_3_pktLenFifo_FULL_N &&
	     hostchan_3_readReqFifo_FULL_N &&
	     !hostchan_3_readStarted ;

  // register macToRing_0_data_bytes
  assign macToRing_0_data_bytes_D_IN = 64'h0 ;
  assign macToRing_0_data_bytes_EN = 1'b0 ;

  // register macToRing_0_gearbox_data_bytes
  assign macToRing_0_gearbox_data_bytes_D_IN =
	     macToRing_0_gearbox_data_bytes + y__h11652 ;
  assign macToRing_0_gearbox_data_bytes_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_0_gearbox_eopCount
  assign macToRing_0_gearbox_eopCount_D_IN =
	     macToRing_0_gearbox_eopCount + 64'd1 ;
  assign macToRing_0_gearbox_eopCount_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_0_gearbox_idle_cycles
  assign macToRing_0_gearbox_idle_cycles_D_IN =
	     macToRing_0_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_0_gearbox_idle_cycles_EN =
	     !macToRing_0_gearbox_inProgress ;

  // register macToRing_0_gearbox_inProgress
  assign macToRing_0_gearbox_inProgress_D_IN =
	     !MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_0_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd) &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket ;

  // register macToRing_0_gearbox_oddBeat
  assign macToRing_0_gearbox_oddBeat_D_IN =
	     MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_0_gearbox_oddBeat :
	       !macToRing_0_gearbox_oddBeat ;
  assign macToRing_0_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;

  // register macToRing_0_gearbox_sopCount
  assign macToRing_0_gearbox_sopCount_D_IN =
	     macToRing_0_gearbox_sopCount + 64'd1 ;
  assign macToRing_0_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_0_gearbox_v_prev
  assign macToRing_0_gearbox_v_prev_D_IN = macToRing_0_gearbox_in_ff_D_OUT ;
  assign macToRing_0_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;

  // register macToRing_0_total_cycles
  assign macToRing_0_total_cycles_D_IN = macToRing_0_total_cycles + 64'd1 ;
  assign macToRing_0_total_cycles_EN = 1'd1 ;

  // register macToRing_1_data_bytes
  assign macToRing_1_data_bytes_D_IN = 64'h0 ;
  assign macToRing_1_data_bytes_EN = 1'b0 ;

  // register macToRing_1_gearbox_data_bytes
  assign macToRing_1_gearbox_data_bytes_D_IN =
	     macToRing_1_gearbox_data_bytes + y__h19894 ;
  assign macToRing_1_gearbox_data_bytes_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_1_gearbox_eopCount
  assign macToRing_1_gearbox_eopCount_D_IN =
	     macToRing_1_gearbox_eopCount + 64'd1 ;
  assign macToRing_1_gearbox_eopCount_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_1_gearbox_idle_cycles
  assign macToRing_1_gearbox_idle_cycles_D_IN =
	     macToRing_1_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_1_gearbox_idle_cycles_EN =
	     !macToRing_1_gearbox_inProgress ;

  // register macToRing_1_gearbox_inProgress
  assign macToRing_1_gearbox_inProgress_D_IN =
	     !MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_1_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd) &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket ;

  // register macToRing_1_gearbox_oddBeat
  assign macToRing_1_gearbox_oddBeat_D_IN =
	     MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_1_gearbox_oddBeat :
	       !macToRing_1_gearbox_oddBeat ;
  assign macToRing_1_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;

  // register macToRing_1_gearbox_sopCount
  assign macToRing_1_gearbox_sopCount_D_IN =
	     macToRing_1_gearbox_sopCount + 64'd1 ;
  assign macToRing_1_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_1_gearbox_v_prev
  assign macToRing_1_gearbox_v_prev_D_IN = macToRing_1_gearbox_in_ff_D_OUT ;
  assign macToRing_1_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;

  // register macToRing_1_total_cycles
  assign macToRing_1_total_cycles_D_IN = macToRing_1_total_cycles + 64'd1 ;
  assign macToRing_1_total_cycles_EN = 1'd1 ;

  // register macToRing_2_data_bytes
  assign macToRing_2_data_bytes_D_IN = 64'h0 ;
  assign macToRing_2_data_bytes_EN = 1'b0 ;

  // register macToRing_2_gearbox_data_bytes
  assign macToRing_2_gearbox_data_bytes_D_IN =
	     macToRing_2_gearbox_data_bytes + y__h28136 ;
  assign macToRing_2_gearbox_data_bytes_EN =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_2_gearbox_eopCount
  assign macToRing_2_gearbox_eopCount_D_IN =
	     macToRing_2_gearbox_eopCount + 64'd1 ;
  assign macToRing_2_gearbox_eopCount_EN =
	     MUX_macToRing_2_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_2_gearbox_idle_cycles
  assign macToRing_2_gearbox_idle_cycles_D_IN =
	     macToRing_2_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_2_gearbox_idle_cycles_EN =
	     !macToRing_2_gearbox_inProgress ;

  // register macToRing_2_gearbox_inProgress
  assign macToRing_2_gearbox_inProgress_D_IN =
	     !MUX_macToRing_2_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_2_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_2_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd) &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket ;

  // register macToRing_2_gearbox_oddBeat
  assign macToRing_2_gearbox_oddBeat_D_IN =
	     MUX_macToRing_2_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_2_gearbox_oddBeat :
	       !macToRing_2_gearbox_oddBeat ;
  assign macToRing_2_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     !macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ;

  // register macToRing_2_gearbox_sopCount
  assign macToRing_2_gearbox_sopCount_D_IN =
	     macToRing_2_gearbox_sopCount + 64'd1 ;
  assign macToRing_2_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket &&
	     macToRing_2_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_2_gearbox_v_prev
  assign macToRing_2_gearbox_v_prev_D_IN = macToRing_2_gearbox_in_ff_D_OUT ;
  assign macToRing_2_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;

  // register macToRing_2_total_cycles
  assign macToRing_2_total_cycles_D_IN = macToRing_2_total_cycles + 64'd1 ;
  assign macToRing_2_total_cycles_EN = 1'd1 ;

  // register macToRing_3_data_bytes
  assign macToRing_3_data_bytes_D_IN = 64'h0 ;
  assign macToRing_3_data_bytes_EN = 1'b0 ;

  // register macToRing_3_gearbox_data_bytes
  assign macToRing_3_gearbox_data_bytes_D_IN =
	     macToRing_3_gearbox_data_bytes + y__h36378 ;
  assign macToRing_3_gearbox_data_bytes_EN =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_3_gearbox_eopCount
  assign macToRing_3_gearbox_eopCount_D_IN =
	     macToRing_3_gearbox_eopCount + 64'd1 ;
  assign macToRing_3_gearbox_eopCount_EN =
	     MUX_macToRing_3_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_3_gearbox_idle_cycles
  assign macToRing_3_gearbox_idle_cycles_D_IN =
	     macToRing_3_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_3_gearbox_idle_cycles_EN =
	     !macToRing_3_gearbox_inProgress ;

  // register macToRing_3_gearbox_inProgress
  assign macToRing_3_gearbox_inProgress_D_IN =
	     !MUX_macToRing_3_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_3_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_3_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd) &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket ;

  // register macToRing_3_gearbox_oddBeat
  assign macToRing_3_gearbox_oddBeat_D_IN =
	     MUX_macToRing_3_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_3_gearbox_oddBeat :
	       !macToRing_3_gearbox_oddBeat ;
  assign macToRing_3_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     !macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ;

  // register macToRing_3_gearbox_sopCount
  assign macToRing_3_gearbox_sopCount_D_IN =
	     macToRing_3_gearbox_sopCount + 64'd1 ;
  assign macToRing_3_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket &&
	     macToRing_3_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_3_gearbox_v_prev
  assign macToRing_3_gearbox_v_prev_D_IN = macToRing_3_gearbox_in_ff_D_OUT ;
  assign macToRing_3_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;

  // register macToRing_3_total_cycles
  assign macToRing_3_total_cycles_D_IN = macToRing_3_total_cycles + 64'd1 ;
  assign macToRing_3_total_cycles_EN = 1'd1 ;

  // register pktBuff_0_cf_verbosity
  assign pktBuff_0_cf_verbosity_D_IN = verbose_ff_0_2_D_OUT ;
  assign pktBuff_0_cf_verbosity_EN = verbose_ff_0_2_EMPTY_N ;

  // register pktBuff_0_cf_verbosity_1
  assign pktBuff_0_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_0_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_0_eopDeq
  assign pktBuff_0_eopDeq_D_IN = pktBuff_0_eopDeq + 64'd1 ;
  assign pktBuff_0_eopDeq_EN = MUX_pktBuff_0_outPacket_write_1__SEL_1 ;

  // register pktBuff_0_eopEnq
  assign pktBuff_0_eopEnq_D_IN = pktBuff_0_eopEnq + 64'd1 ;
  assign pktBuff_0_eopEnq_EN = WILL_FIRE_RL_pktBuff_0_commit_packet ;

  // register pktBuff_0_inPacket
  assign pktBuff_0_inPacket_D_IN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  assign pktBuff_0_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  assign pktBuff_0_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_909_PLU_ETC___d1915 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  assign pktBuff_0_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterB_s1_1_whas &&
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  assign pktBuff_0_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_0_outPacket
  assign pktBuff_0_outPacket_D_IN = !MUX_pktBuff_0_outPacket_write_1__SEL_1 ;
  assign pktBuff_0_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_packetLen
  assign pktBuff_0_packetLen_D_IN =
	     pktBuff_0_fifoWriteData_D_OUT[0] ? 16'd0 : newPacketLen__h79442 ;
  assign pktBuff_0_packetLen_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_rdCurrPtr
  assign pktBuff_0_rdCurrPtr_D_IN =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_0_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_readStarted
  assign pktBuff_0_readStarted_D_IN =
	     !MUX_pktBuff_0_readStarted_write_1__SEL_1 ;
  assign pktBuff_0_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ||
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;

  // register pktBuff_0_sopDeq
  assign pktBuff_0_sopDeq_D_IN = pktBuff_0_sopDeq + 64'd1 ;
  assign pktBuff_0_sopDeq_EN = WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_sopEnq
  assign pktBuff_0_sopEnq_D_IN = pktBuff_0_sopEnq + 64'd1 ;
  assign pktBuff_0_sopEnq_EN = WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;

  // register pktBuff_0_wrCurrPtr
  assign pktBuff_0_wrCurrPtr_D_IN = pktBuff_0_wrCurrPtr + 8'd1 ;
  assign pktBuff_0_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_1_cf_verbosity
  assign pktBuff_1_cf_verbosity_D_IN = verbose_ff_1_1_D_OUT ;
  assign pktBuff_1_cf_verbosity_EN = verbose_ff_1_1_EMPTY_N ;

  // register pktBuff_1_cf_verbosity_1
  assign pktBuff_1_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_1_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_1_eopDeq
  assign pktBuff_1_eopDeq_D_IN = pktBuff_1_eopDeq + 64'd1 ;
  assign pktBuff_1_eopDeq_EN = MUX_pktBuff_1_outPacket_write_1__SEL_1 ;

  // register pktBuff_1_eopEnq
  assign pktBuff_1_eopEnq_D_IN = pktBuff_1_eopEnq + 64'd1 ;
  assign pktBuff_1_eopEnq_EN = WILL_FIRE_RL_pktBuff_1_commit_packet ;

  // register pktBuff_1_inPacket
  assign pktBuff_1_inPacket_D_IN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  assign pktBuff_1_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_1_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  assign pktBuff_1_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_353_PLU_ETC___d2359 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  assign pktBuff_1_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  assign pktBuff_1_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_1_outPacket
  assign pktBuff_1_outPacket_D_IN = !MUX_pktBuff_1_outPacket_write_1__SEL_1 ;
  assign pktBuff_1_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_packetLen
  assign pktBuff_1_packetLen_D_IN =
	     pktBuff_1_fifoWriteData_D_OUT[0] ? 16'd0 : newPacketLen__h98079 ;
  assign pktBuff_1_packetLen_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_rdCurrPtr
  assign pktBuff_1_rdCurrPtr_D_IN =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_1_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_readStarted
  assign pktBuff_1_readStarted_D_IN =
	     !MUX_pktBuff_1_readStarted_write_1__SEL_1 ;
  assign pktBuff_1_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ||
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;

  // register pktBuff_1_sopDeq
  assign pktBuff_1_sopDeq_D_IN = pktBuff_1_sopDeq + 64'd1 ;
  assign pktBuff_1_sopDeq_EN = WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_sopEnq
  assign pktBuff_1_sopEnq_D_IN = pktBuff_1_sopEnq + 64'd1 ;
  assign pktBuff_1_sopEnq_EN = WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;

  // register pktBuff_1_wrCurrPtr
  assign pktBuff_1_wrCurrPtr_D_IN = pktBuff_1_wrCurrPtr + 8'd1 ;
  assign pktBuff_1_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_2_cf_verbosity
  assign pktBuff_2_cf_verbosity_D_IN = verbose_ff_2_1_D_OUT ;
  assign pktBuff_2_cf_verbosity_EN = verbose_ff_2_1_EMPTY_N ;

  // register pktBuff_2_cf_verbosity_1
  assign pktBuff_2_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_2_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_2_eopDeq
  assign pktBuff_2_eopDeq_D_IN = pktBuff_2_eopDeq + 64'd1 ;
  assign pktBuff_2_eopDeq_EN = MUX_pktBuff_2_outPacket_write_1__SEL_1 ;

  // register pktBuff_2_eopEnq
  assign pktBuff_2_eopEnq_D_IN = pktBuff_2_eopEnq + 64'd1 ;
  assign pktBuff_2_eopEnq_EN = WILL_FIRE_RL_pktBuff_2_commit_packet ;

  // register pktBuff_2_inPacket
  assign pktBuff_2_inPacket_D_IN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_2_commit_packet ||
	     WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_2_memBuffer_serverAdapterA_cnt
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_2_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_2_memBuffer_serverAdapterA_s1
  assign pktBuff_2_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_2_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_2_memBuffer_serverAdapterA_s2
  assign pktBuff_2_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_2_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_2_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_2_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_2_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_2_memBuffer_serverAdapterB_cnt
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_cnt_797_PLU_ETC___d2803 ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ;

  // register pktBuff_2_memBuffer_serverAdapterB_s1
  assign pktBuff_2_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_2_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_2_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_2_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_2_memBuffer_serverAdapterB_s2
  assign pktBuff_2_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_2_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_2_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_2_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_2_outPacket
  assign pktBuff_2_outPacket_D_IN = !MUX_pktBuff_2_outPacket_write_1__SEL_1 ;
  assign pktBuff_2_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_packetLen
  assign pktBuff_2_packetLen_D_IN =
	     pktBuff_2_fifoWriteData_D_OUT[0] ?
	       16'd0 :
	       newPacketLen__h116713 ;
  assign pktBuff_2_packetLen_EN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_2_rdCurrPtr
  assign pktBuff_2_rdCurrPtr_D_IN =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_2_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_2_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_readStarted
  assign pktBuff_2_readStarted_D_IN =
	     !MUX_pktBuff_2_readStarted_write_1__SEL_1 ;
  assign pktBuff_2_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ||
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;

  // register pktBuff_2_sopDeq
  assign pktBuff_2_sopDeq_D_IN = pktBuff_2_sopDeq + 64'd1 ;
  assign pktBuff_2_sopDeq_EN = WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // register pktBuff_2_sopEnq
  assign pktBuff_2_sopEnq_D_IN = pktBuff_2_sopEnq + 64'd1 ;
  assign pktBuff_2_sopEnq_EN = WILL_FIRE_RL_pktBuff_2_enqueue_first_beat ;

  // register pktBuff_2_wrCurrPtr
  assign pktBuff_2_wrCurrPtr_D_IN = pktBuff_2_wrCurrPtr + 8'd1 ;
  assign pktBuff_2_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;

  // register pktBuff_3_cf_verbosity
  assign pktBuff_3_cf_verbosity_D_IN = verbose_ff_3_1_D_OUT ;
  assign pktBuff_3_cf_verbosity_EN = verbose_ff_3_1_EMPTY_N ;

  // register pktBuff_3_cf_verbosity_1
  assign pktBuff_3_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_3_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_3_eopDeq
  assign pktBuff_3_eopDeq_D_IN = pktBuff_3_eopDeq + 64'd1 ;
  assign pktBuff_3_eopDeq_EN = MUX_pktBuff_3_outPacket_write_1__SEL_1 ;

  // register pktBuff_3_eopEnq
  assign pktBuff_3_eopEnq_D_IN = pktBuff_3_eopEnq + 64'd1 ;
  assign pktBuff_3_eopEnq_EN = WILL_FIRE_RL_pktBuff_3_commit_packet ;

  // register pktBuff_3_inPacket
  assign pktBuff_3_inPacket_D_IN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_3_commit_packet ||
	     WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_3_memBuffer_serverAdapterA_cnt
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_3_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_3_memBuffer_serverAdapterA_s1
  assign pktBuff_3_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_3_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_3_memBuffer_serverAdapterA_s2
  assign pktBuff_3_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_3_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_3_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_3_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_3_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_3_memBuffer_serverAdapterB_cnt
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_cnt_241_PLU_ETC___d3247 ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ;

  // register pktBuff_3_memBuffer_serverAdapterB_s1
  assign pktBuff_3_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_3_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_3_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_3_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_3_memBuffer_serverAdapterB_s2
  assign pktBuff_3_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_3_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_3_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_3_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_3_outPacket
  assign pktBuff_3_outPacket_D_IN = !MUX_pktBuff_3_outPacket_write_1__SEL_1 ;
  assign pktBuff_3_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_packetLen
  assign pktBuff_3_packetLen_D_IN =
	     pktBuff_3_fifoWriteData_D_OUT[0] ?
	       16'd0 :
	       newPacketLen__h135347 ;
  assign pktBuff_3_packetLen_EN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_3_rdCurrPtr
  assign pktBuff_3_rdCurrPtr_D_IN =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_3_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_3_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_readStarted
  assign pktBuff_3_readStarted_D_IN =
	     !MUX_pktBuff_3_readStarted_write_1__SEL_1 ;
  assign pktBuff_3_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress &&
	     pktBuff_3_readDataFifo_D_OUT[0] ||
	     pktBuff_3_meta_ff_EMPTY_N && pktBuff_3_readLenFifo_EMPTY_N &&
	     pktBuff_3_readReqFifo_FULL_N &&
	     !pktBuff_3_readStarted ;

  // register pktBuff_3_sopDeq
  assign pktBuff_3_sopDeq_D_IN = pktBuff_3_sopDeq + 64'd1 ;
  assign pktBuff_3_sopDeq_EN = WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // register pktBuff_3_sopEnq
  assign pktBuff_3_sopEnq_D_IN = pktBuff_3_sopEnq + 64'd1 ;
  assign pktBuff_3_sopEnq_EN = WILL_FIRE_RL_pktBuff_3_enqueue_first_beat ;

  // register pktBuff_3_wrCurrPtr
  assign pktBuff_3_wrCurrPtr_D_IN = pktBuff_3_wrCurrPtr + 8'd1 ;
  assign pktBuff_3_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;

  // register pktBuff_4_cf_verbosity
  assign pktBuff_4_cf_verbosity_D_IN = verbose_ff_4_D_OUT ;
  assign pktBuff_4_cf_verbosity_EN = verbose_ff_4_EMPTY_N ;

  // register pktBuff_4_readStarted
  assign pktBuff_4_readStarted_D_IN =
	     !MUX_pktBuff_4_readStarted_write_1__SEL_1 ;
  assign pktBuff_4_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress &&
	     pktBuff_4_readDataFifo_D_OUT[0] ||
	     pktBuff_4_meta_ff_EMPTY_N && pktBuff_4_readLenFifo_EMPTY_N &&
	     pktBuff_4_readReqFifo_FULL_N &&
	     !pktBuff_4_readStarted ;

  // register readStarted_0
  assign readStarted_0_D_IN = !MUX_readStarted_0_write_1__SEL_1 ;
  assign readStarted_0_EN =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ||
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;

  // register ringToMac_0_cycle_cnt
  assign ringToMac_0_cycle_cnt_D_IN = ringToMac_0_cycle_cnt + 64'd1 ;
  assign ringToMac_0_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_0_data_bytes
  assign ringToMac_0_data_bytes_D_IN = ringToMac_0_data_bytes + y__h91932 ;
  assign ringToMac_0_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet ;

  // register ringToMac_0_eopCount
  assign ringToMac_0_eopCount_D_IN = ringToMac_0_eopCount + 64'd1 ;
  assign ringToMac_0_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     NOT_IF_ringToMac_0_fifoTxData_read_block_129_T_ETC___d2224 ;

  // register ringToMac_0_fifoTxData_block0
  assign ringToMac_0_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block0_status
  assign ringToMac_0_fifoTxData_block0_status_D_IN =
	     !ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1
  assign ringToMac_0_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1_status
  assign ringToMac_0_fifoTxData_block1_status_D_IN =
	     !ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_elem0_status_0
  assign ringToMac_0_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem0_status_1
  assign ringToMac_0_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem0_status_0 ;
  assign ringToMac_0_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_0
  assign ringToMac_0_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_1
  assign ringToMac_0_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem1_status_0 ;
  assign ringToMac_0_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_read_block
  assign ringToMac_0_fifoTxData_read_block_D_IN =
	     !ringToMac_0_fifoTxData_read_block ;
  assign ringToMac_0_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144 ||
	      !ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135) ;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_write_block
  assign ringToMac_0_fifoTxData_write_block_D_IN =
	     ~ringToMac_0_fifoTxData_write_block ;
  assign ringToMac_0_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // register ringToMac_0_goodputCount
  assign ringToMac_0_goodputCount_D_IN =
	     (ringToMac_0_last_startofpacket == 64'd0) ?
	       ringToMac_0_last_startofpacket :
	       ringToMac_0_goodputCount + y__h84984 ;
  assign ringToMac_0_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_idleCount
  assign ringToMac_0_idleCount_D_IN =
	     (ringToMac_0_last_endofpacket == 64'd0) ?
	       ringToMac_0_last_endofpacket :
	       ringToMac_0_idleCount + y__h84897 ;
  assign ringToMac_0_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_idle_cycles
  assign ringToMac_0_idle_cycles_D_IN =
	     MUX_ringToMac_0_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_0_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 ==
	     8'd0 ||
	     (ringToMac_0_fifoTxData_read_block || x__h89317 == 2'd3) &&
	     (!ringToMac_0_fifoTxData_read_block || x__h89696 == 2'd3) ;

  // register ringToMac_0_last_endofpacket
  assign ringToMac_0_last_endofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_last_startofpacket
  assign ringToMac_0_last_startofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_sopCount
  assign ringToMac_0_sopCount_D_IN = ringToMac_0_sopCount + 64'd1 ;
  assign ringToMac_0_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144) ?
		   ringToMac_0_fifoTxData_block1[107] :
		   ringToMac_0_fifoTxData_block1[1]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135) ?
		   ringToMac_0_fifoTxData_block0[107] :
		   ringToMac_0_fifoTxData_block0[1])) ;

  // register ringToMac_0_total_cycles
  assign ringToMac_0_total_cycles_D_IN = ringToMac_0_total_cycles + 64'd1 ;
  assign ringToMac_0_total_cycles_EN = 1'd1 ;

  // register ringToMac_1_cycle_cnt
  assign ringToMac_1_cycle_cnt_D_IN = ringToMac_1_cycle_cnt + 64'd1 ;
  assign ringToMac_1_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_1_data_bytes
  assign ringToMac_1_data_bytes_D_IN = ringToMac_1_data_bytes + y__h110566 ;
  assign ringToMac_1_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet ;

  // register ringToMac_1_eopCount
  assign ringToMac_1_eopCount_D_IN = ringToMac_1_eopCount + 64'd1 ;
  assign ringToMac_1_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     NOT_IF_ringToMac_1_fifoTxData_read_block_573_T_ETC___d2668 ;

  // register ringToMac_1_fifoTxData_block0
  assign ringToMac_1_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block0_status
  assign ringToMac_1_fifoTxData_block0_status_D_IN =
	     !ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1
  assign ringToMac_1_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1_status
  assign ringToMac_1_fifoTxData_block1_status_D_IN =
	     !ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_elem0_status_0
  assign ringToMac_1_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem0_status_1
  assign ringToMac_1_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem0_status_0 ;
  assign ringToMac_1_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_0
  assign ringToMac_1_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_1
  assign ringToMac_1_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem1_status_0 ;
  assign ringToMac_1_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_read_block
  assign ringToMac_1_fifoTxData_read_block_D_IN =
	     !ringToMac_1_fifoTxData_read_block ;
  assign ringToMac_1_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588 ||
	      !ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579) ;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_write_block
  assign ringToMac_1_fifoTxData_write_block_D_IN =
	     ~ringToMac_1_fifoTxData_write_block ;
  assign ringToMac_1_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // register ringToMac_1_goodputCount
  assign ringToMac_1_goodputCount_D_IN =
	     (ringToMac_1_last_startofpacket == 64'd0) ?
	       ringToMac_1_last_startofpacket :
	       ringToMac_1_goodputCount + y__h103621 ;
  assign ringToMac_1_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_idleCount
  assign ringToMac_1_idleCount_D_IN =
	     (ringToMac_1_last_endofpacket == 64'd0) ?
	       ringToMac_1_last_endofpacket :
	       ringToMac_1_idleCount + y__h103534 ;
  assign ringToMac_1_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_idle_cycles
  assign ringToMac_1_idle_cycles_D_IN =
	     MUX_ringToMac_1_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_1_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 ==
	     8'd0 ||
	     (ringToMac_1_fifoTxData_read_block || x__h107951 == 2'd3) &&
	     (!ringToMac_1_fifoTxData_read_block || x__h108330 == 2'd3) ;

  // register ringToMac_1_last_endofpacket
  assign ringToMac_1_last_endofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_last_startofpacket
  assign ringToMac_1_last_startofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_sopCount
  assign ringToMac_1_sopCount_D_IN = ringToMac_1_sopCount + 64'd1 ;
  assign ringToMac_1_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588) ?
		   ringToMac_1_fifoTxData_block1[107] :
		   ringToMac_1_fifoTxData_block1[1]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579) ?
		   ringToMac_1_fifoTxData_block0[107] :
		   ringToMac_1_fifoTxData_block0[1])) ;

  // register ringToMac_1_total_cycles
  assign ringToMac_1_total_cycles_D_IN = ringToMac_1_total_cycles + 64'd1 ;
  assign ringToMac_1_total_cycles_EN = 1'd1 ;

  // register ringToMac_2_cycle_cnt
  assign ringToMac_2_cycle_cnt_D_IN = ringToMac_2_cycle_cnt + 64'd1 ;
  assign ringToMac_2_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_2_data_bytes
  assign ringToMac_2_data_bytes_D_IN = ringToMac_2_data_bytes + y__h129200 ;
  assign ringToMac_2_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet ;

  // register ringToMac_2_eopCount
  assign ringToMac_2_eopCount_D_IN = ringToMac_2_eopCount + 64'd1 ;
  assign ringToMac_2_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     NOT_IF_ringToMac_2_fifoTxData_read_block_017_T_ETC___d3112 ;

  // register ringToMac_2_fifoTxData_block0
  assign ringToMac_2_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[145:82],
	       ringToMac_2_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_2_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[81:18],
	       ringToMac_2_tx_fifo_dD_OUT[9:1],
	       ringToMac_2_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_2_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_2_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     !ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block0_status
  assign ringToMac_2_fifoTxData_block0_status_D_IN =
	     !ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     !ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block1
  assign ringToMac_2_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[145:82],
	       ringToMac_2_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_2_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_2_tx_fifo_dD_OUT[81:18],
	       ringToMac_2_tx_fifo_dD_OUT[9:1],
	       ringToMac_2_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_2_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_2_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_block1_status
  assign ringToMac_2_fifoTxData_block1_status_D_IN =
	     !ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet &&
	     ringToMac_2_fifoTxData_write_block ;

  // register ringToMac_2_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_2_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_2_fifoTxData_elem0_status_0
  assign ringToMac_2_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     !ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem0_status_1
  assign ringToMac_2_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_2_fifoTxData_elem0_status_0 ;
  assign ringToMac_2_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     !ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem1_status_0
  assign ringToMac_2_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_elem1_status_1
  assign ringToMac_2_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_2_fifoTxData_elem1_status_0 ;
  assign ringToMac_2_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     ringToMac_2_fifoTxData_read_block ;

  // register ringToMac_2_fifoTxData_read_block
  assign ringToMac_2_fifoTxData_read_block_D_IN =
	     !ringToMac_2_fifoTxData_read_block ;
  assign ringToMac_2_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     (ringToMac_2_fifoTxData_read_block &&
	      ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032 ||
	      !ringToMac_2_fifoTxData_read_block &&
	      ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023) ;

  // register ringToMac_2_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_2_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_2_fifoTxData_write_block
  assign ringToMac_2_fifoTxData_write_block_D_IN =
	     ~ringToMac_2_fifoTxData_write_block ;
  assign ringToMac_2_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet ;

  // register ringToMac_2_goodputCount
  assign ringToMac_2_goodputCount_D_IN =
	     (ringToMac_2_last_startofpacket == 64'd0) ?
	       ringToMac_2_last_startofpacket :
	       ringToMac_2_goodputCount + y__h122255 ;
  assign ringToMac_2_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[0] ;

  // register ringToMac_2_idleCount
  assign ringToMac_2_idleCount_D_IN =
	     (ringToMac_2_last_endofpacket == 64'd0) ?
	       ringToMac_2_last_endofpacket :
	       ringToMac_2_idleCount + y__h122168 ;
  assign ringToMac_2_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[1] ;

  // register ringToMac_2_idle_cycles
  assign ringToMac_2_idle_cycles_D_IN =
	     MUX_ringToMac_2_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_2_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_2_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_2_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 ==
	     8'd0 ||
	     (ringToMac_2_fifoTxData_read_block || x__h126585 == 2'd3) &&
	     (!ringToMac_2_fifoTxData_read_block || x__h126964 == 2'd3) ;

  // register ringToMac_2_last_endofpacket
  assign ringToMac_2_last_endofpacket_D_IN = ringToMac_2_cycle_cnt ;
  assign ringToMac_2_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[0] ;

  // register ringToMac_2_last_startofpacket
  assign ringToMac_2_last_startofpacket_D_IN = ringToMac_2_cycle_cnt ;
  assign ringToMac_2_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking &&
	     ringToMac_2_readDataFifo_D_OUT[1] ;

  // register ringToMac_2_sopCount
  assign ringToMac_2_sopCount_D_IN = ringToMac_2_sopCount + 64'd1 ;
  assign ringToMac_2_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     (ringToMac_2_fifoTxData_read_block ?
		((!ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030 &&
		  ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032) ?
		   ringToMac_2_fifoTxData_block1[107] :
		   ringToMac_2_fifoTxData_block1[1]) :
		((!ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021 &&
		  ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023) ?
		   ringToMac_2_fifoTxData_block0[107] :
		   ringToMac_2_fifoTxData_block0[1])) ;

  // register ringToMac_2_total_cycles
  assign ringToMac_2_total_cycles_D_IN = ringToMac_2_total_cycles + 64'd1 ;
  assign ringToMac_2_total_cycles_EN = 1'd1 ;

  // register ringToMac_3_cycle_cnt
  assign ringToMac_3_cycle_cnt_D_IN = ringToMac_3_cycle_cnt + 64'd1 ;
  assign ringToMac_3_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_3_data_bytes
  assign ringToMac_3_data_bytes_D_IN = ringToMac_3_data_bytes + y__h147834 ;
  assign ringToMac_3_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet ;

  // register ringToMac_3_eopCount
  assign ringToMac_3_eopCount_D_IN = ringToMac_3_eopCount + 64'd1 ;
  assign ringToMac_3_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     NOT_IF_ringToMac_3_fifoTxData_read_block_461_T_ETC___d3556 ;

  // register ringToMac_3_fifoTxData_block0
  assign ringToMac_3_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[145:82],
	       ringToMac_3_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_3_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[81:18],
	       ringToMac_3_tx_fifo_dD_OUT[9:1],
	       ringToMac_3_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_3_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_3_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     !ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block0_status
  assign ringToMac_3_fifoTxData_block0_status_D_IN =
	     !ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     !ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block1
  assign ringToMac_3_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[145:82],
	       ringToMac_3_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_3_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_3_tx_fifo_dD_OUT[81:18],
	       ringToMac_3_tx_fifo_dD_OUT[9:1],
	       ringToMac_3_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_3_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_3_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_block1_status
  assign ringToMac_3_fifoTxData_block1_status_D_IN =
	     !ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet &&
	     ringToMac_3_fifoTxData_write_block ;

  // register ringToMac_3_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_3_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_3_fifoTxData_elem0_status_0
  assign ringToMac_3_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     !ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem0_status_1
  assign ringToMac_3_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_3_fifoTxData_elem0_status_0 ;
  assign ringToMac_3_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     !ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem1_status_0
  assign ringToMac_3_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_elem1_status_1
  assign ringToMac_3_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_3_fifoTxData_elem1_status_0 ;
  assign ringToMac_3_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     ringToMac_3_fifoTxData_read_block ;

  // register ringToMac_3_fifoTxData_read_block
  assign ringToMac_3_fifoTxData_read_block_D_IN =
	     !ringToMac_3_fifoTxData_read_block ;
  assign ringToMac_3_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     (ringToMac_3_fifoTxData_read_block &&
	      ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476 ||
	      !ringToMac_3_fifoTxData_read_block &&
	      ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467) ;

  // register ringToMac_3_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_3_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_3_fifoTxData_write_block
  assign ringToMac_3_fifoTxData_write_block_D_IN =
	     ~ringToMac_3_fifoTxData_write_block ;
  assign ringToMac_3_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet ;

  // register ringToMac_3_goodputCount
  assign ringToMac_3_goodputCount_D_IN =
	     (ringToMac_3_last_startofpacket == 64'd0) ?
	       ringToMac_3_last_startofpacket :
	       ringToMac_3_goodputCount + y__h140889 ;
  assign ringToMac_3_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[0] ;

  // register ringToMac_3_idleCount
  assign ringToMac_3_idleCount_D_IN =
	     (ringToMac_3_last_endofpacket == 64'd0) ?
	       ringToMac_3_last_endofpacket :
	       ringToMac_3_idleCount + y__h140802 ;
  assign ringToMac_3_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[1] ;

  // register ringToMac_3_idle_cycles
  assign ringToMac_3_idle_cycles_D_IN =
	     MUX_ringToMac_3_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_3_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_3_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_3_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 ==
	     8'd0 ||
	     (ringToMac_3_fifoTxData_read_block || x__h145219 == 2'd3) &&
	     (!ringToMac_3_fifoTxData_read_block || x__h145598 == 2'd3) ;

  // register ringToMac_3_last_endofpacket
  assign ringToMac_3_last_endofpacket_D_IN = ringToMac_3_cycle_cnt ;
  assign ringToMac_3_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[0] ;

  // register ringToMac_3_last_startofpacket
  assign ringToMac_3_last_startofpacket_D_IN = ringToMac_3_cycle_cnt ;
  assign ringToMac_3_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking &&
	     ringToMac_3_readDataFifo_D_OUT[1] ;

  // register ringToMac_3_sopCount
  assign ringToMac_3_sopCount_D_IN = ringToMac_3_sopCount + 64'd1 ;
  assign ringToMac_3_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     (ringToMac_3_fifoTxData_read_block ?
		((!ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474 &&
		  ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476) ?
		   ringToMac_3_fifoTxData_block1[107] :
		   ringToMac_3_fifoTxData_block1[1]) :
		((!ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465 &&
		  ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467) ?
		   ringToMac_3_fifoTxData_block0[107] :
		   ringToMac_3_fifoTxData_block0[1])) ;

  // register ringToMac_3_total_cycles
  assign ringToMac_3_total_cycles_D_IN = ringToMac_3_total_cycles + 64'd1 ;
  assign ringToMac_3_total_cycles_EN = 1'd1 ;

  // register xbar_lower_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty:
	  xbar_lower_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     xbar_lower_lower_merges_1_routeFrom_222_BIT_1__ETC___d5268 ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;

  // register xbar_lower_lower_merges_1_routeFrom
  assign xbar_lower_lower_merges_1_routeFrom_D_IN =
	     { !xbar_lower_lower_merges_1_routeFrom[1],
	       !xbar_lower_lower_merges_1_fi0HasPrio } ;
  assign xbar_lower_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_1_routeFrom_222_BIT_ETC___d5255 ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5260) ;

  // register xbar_lower_lower_merges_fi0HasPrio
  always@(MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN =
	      !xbar_lower_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty:
	  xbar_lower_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     xbar_lower_lower_merges_routeFrom_147_BIT_1_14_ETC___d5193 ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;

  // register xbar_lower_lower_merges_routeFrom
  assign xbar_lower_lower_merges_routeFrom_D_IN =
	     { !xbar_lower_lower_merges_routeFrom[1],
	       !xbar_lower_lower_merges_fi0HasPrio } ;
  assign xbar_lower_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_routeFrom_147_BIT_0_ETC___d5180 ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5185) ;

  // register xbar_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_394_BIT_1_395_AN_ETC___d5440 ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;

  // register xbar_lower_merges_1_routeFrom
  assign xbar_lower_merges_1_routeFrom_D_IN =
	     { !xbar_lower_merges_1_routeFrom[1],
	       !xbar_lower_merges_1_fi0HasPrio } ;
  assign xbar_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_routeFrom_394_BIT_0_396_ETC___d5427 ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5432) ;

  // register xbar_lower_merges_2_fi0HasPrio
  always@(MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_2_fi0HasPrio_D_IN =
	      !xbar_lower_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty:
	  xbar_lower_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty:
	  xbar_lower_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_2_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     xbar_lower_merges_2_routeFrom_469_BIT_1_470_AN_ETC___d5515 ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;

  // register xbar_lower_merges_2_routeFrom
  assign xbar_lower_merges_2_routeFrom_D_IN =
	     { !xbar_lower_merges_2_routeFrom[1],
	       !xbar_lower_merges_2_fi0HasPrio } ;
  assign xbar_lower_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      IF_xbar_lower_merges_2_routeFrom_469_BIT_0_471_ETC___d5502 ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5507) ;

  // register xbar_lower_merges_3_fi0HasPrio
  always@(MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_3_fi0HasPrio_D_IN =
	      !xbar_lower_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty:
	  xbar_lower_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty:
	  xbar_lower_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_3_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     xbar_lower_merges_3_routeFrom_544_BIT_1_545_AN_ETC___d5590 ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;

  // register xbar_lower_merges_3_routeFrom
  assign xbar_lower_merges_3_routeFrom_D_IN =
	     { !xbar_lower_merges_3_routeFrom[1],
	       !xbar_lower_merges_3_fi0HasPrio } ;
  assign xbar_lower_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      IF_xbar_lower_merges_3_routeFrom_544_BIT_0_546_ETC___d5577 ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5582) ;

  // register xbar_lower_merges_fi0HasPrio
  always@(MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_fi0HasPrio_D_IN = !xbar_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_319_BIT_1_320_AND__ETC___d5365 ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;

  // register xbar_lower_merges_routeFrom
  assign xbar_lower_merges_routeFrom_D_IN =
	     { !xbar_lower_merges_routeFrom[1],
	       !xbar_lower_merges_fi0HasPrio } ;
  assign xbar_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_routeFrom_319_BIT_0_321_T_ETC___d5352 ||
	      !xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5357) ;

  // register xbar_lower_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty:
	  xbar_lower_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     xbar_lower_upper_merges_1_routeFrom_050_BIT_1__ETC___d5096 ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;

  // register xbar_lower_upper_merges_1_routeFrom
  assign xbar_lower_upper_merges_1_routeFrom_D_IN =
	     { !xbar_lower_upper_merges_1_routeFrom[1],
	       !xbar_lower_upper_merges_1_fi0HasPrio } ;
  assign xbar_lower_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_1_routeFrom_050_BIT_ETC___d5083 ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5088) ;

  // register xbar_lower_upper_merges_fi0HasPrio
  always@(MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN =
	      !xbar_lower_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty:
	  xbar_lower_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     xbar_lower_upper_merges_routeFrom_975_BIT_1_97_ETC___d5021 ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;

  // register xbar_lower_upper_merges_routeFrom
  assign xbar_lower_upper_merges_routeFrom_D_IN =
	     { !xbar_lower_upper_merges_routeFrom[1],
	       !xbar_lower_upper_merges_fi0HasPrio } ;
  assign xbar_lower_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_routeFrom_975_BIT_0_ETC___d5008 ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5013) ;

  // register xbar_merges_1_fi0HasPrio
  always@(MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_1_fi0HasPrio_D_IN = !xbar_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_1_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_738_BIT_1_739_AND_IF_x_ETC___d5784 ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;

  // register xbar_merges_1_routeFrom
  assign xbar_merges_1_routeFrom_D_IN =
	     { !xbar_merges_1_routeFrom[1], !xbar_merges_1_fi0HasPrio } ;
  assign xbar_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_routeFrom_738_BIT_0_740_THEN__ETC___d5771 ||
	      !xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5776) ;

  // register xbar_merges_2_fi0HasPrio
  always@(MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_2_fi0HasPrio_D_IN = !xbar_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_2_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_813_BIT_1_814_AND_IF_x_ETC___d5859 ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;

  // register xbar_merges_2_routeFrom
  assign xbar_merges_2_routeFrom_D_IN =
	     { !xbar_merges_2_routeFrom[1], !xbar_merges_2_fi0HasPrio } ;
  assign xbar_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_routeFrom_813_BIT_0_815_THEN__ETC___d5846 ||
	      !xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5851) ;

  // register xbar_merges_3_fi0HasPrio
  always@(MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_3_fi0HasPrio_D_IN = !xbar_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_3_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_888_BIT_1_889_AND_IF_x_ETC___d5934 ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;

  // register xbar_merges_3_routeFrom
  assign xbar_merges_3_routeFrom_D_IN =
	     { !xbar_merges_3_routeFrom[1], !xbar_merges_3_fi0HasPrio } ;
  assign xbar_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_routeFrom_888_BIT_0_890_THEN__ETC___d5921 ||
	      !xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5926) ;

  // register xbar_merges_4_fi0HasPrio
  always@(MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_4_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_4_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_4_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_4_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_4_fi0HasPrio_D_IN = !xbar_merges_4_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_4_fi1_is_empty:
	  xbar_merges_4_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_4_fi0_is_empty:
	  xbar_merges_4_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_4_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_4_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     xbar_merges_4_routeFrom_963_BIT_1_964_AND_IF_x_ETC___d6009 ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;

  // register xbar_merges_4_routeFrom
  assign xbar_merges_4_routeFrom_D_IN =
	     { !xbar_merges_4_routeFrom[1], !xbar_merges_4_fi0HasPrio } ;
  assign xbar_merges_4_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] &&
	      IF_xbar_merges_4_routeFrom_963_BIT_0_965_THEN__ETC___d5996 ||
	      !xbar_merges_4_routeFrom[1] &&
	      IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6001) ;

  // register xbar_merges_5_fi0HasPrio
  always@(MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_5_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_5_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_5_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_5_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_5_fi0HasPrio_D_IN = !xbar_merges_5_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_5_fi1_is_empty:
	  xbar_merges_5_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_5_fi0_is_empty:
	  xbar_merges_5_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_5_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_5_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     xbar_merges_5_routeFrom_038_BIT_1_039_AND_IF_x_ETC___d6084 ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;

  // register xbar_merges_5_routeFrom
  assign xbar_merges_5_routeFrom_D_IN =
	     { !xbar_merges_5_routeFrom[1], !xbar_merges_5_fi0HasPrio } ;
  assign xbar_merges_5_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] &&
	      IF_xbar_merges_5_routeFrom_038_BIT_0_040_THEN__ETC___d6071 ||
	      !xbar_merges_5_routeFrom[1] &&
	      IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6076) ;

  // register xbar_merges_6_fi0HasPrio
  always@(MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_6_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_6_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_6_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_6_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_6_fi0HasPrio_D_IN = !xbar_merges_6_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_6_fi1_is_empty:
	  xbar_merges_6_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_6_fi0_is_empty:
	  xbar_merges_6_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_6_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_6_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     xbar_merges_6_routeFrom_113_BIT_1_114_AND_IF_x_ETC___d6159 ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;

  // register xbar_merges_6_routeFrom
  assign xbar_merges_6_routeFrom_D_IN =
	     { !xbar_merges_6_routeFrom[1], !xbar_merges_6_fi0HasPrio } ;
  assign xbar_merges_6_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] &&
	      IF_xbar_merges_6_routeFrom_113_BIT_0_115_THEN__ETC___d6146 ||
	      !xbar_merges_6_routeFrom[1] &&
	      IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6151) ;

  // register xbar_merges_7_fi0HasPrio
  always@(MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_7_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_7_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_7_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_7_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_7_fi0HasPrio_D_IN = !xbar_merges_7_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_7_fi1_is_empty:
	  xbar_merges_7_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_7_fi0_is_empty:
	  xbar_merges_7_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_7_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_7_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     xbar_merges_7_routeFrom_188_BIT_1_189_AND_IF_x_ETC___d6234 ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;

  // register xbar_merges_7_routeFrom
  assign xbar_merges_7_routeFrom_D_IN =
	     { !xbar_merges_7_routeFrom[1], !xbar_merges_7_fi0HasPrio } ;
  assign xbar_merges_7_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] &&
	      IF_xbar_merges_7_routeFrom_188_BIT_0_190_THEN__ETC___d6221 ||
	      !xbar_merges_7_routeFrom[1] &&
	      IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6226) ;

  // register xbar_merges_fi0HasPrio
  always@(MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_fi0HasPrio_D_IN = !xbar_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_663_BIT_1_664_AND_IF_xba_ETC___d5709 ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;

  // register xbar_merges_routeFrom
  assign xbar_merges_routeFrom_D_IN =
	     { !xbar_merges_routeFrom[1], !xbar_merges_fi0HasPrio } ;
  assign xbar_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_routeFrom_663_BIT_0_665_THEN_xb_ETC___d5696 ||
	      !xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5701) ;

  // register xbar_upper_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty:
	  xbar_upper_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     xbar_upper_lower_merges_1_routeFrom_532_BIT_1__ETC___d4578 ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;

  // register xbar_upper_lower_merges_1_routeFrom
  assign xbar_upper_lower_merges_1_routeFrom_D_IN =
	     { !xbar_upper_lower_merges_1_routeFrom[1],
	       !xbar_upper_lower_merges_1_fi0HasPrio } ;
  assign xbar_upper_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_1_routeFrom_532_BIT_ETC___d4565 ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4570) ;

  // register xbar_upper_lower_merges_fi0HasPrio
  always@(MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN =
	      !xbar_upper_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty:
	  xbar_upper_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     xbar_upper_lower_merges_routeFrom_457_BIT_1_45_ETC___d4503 ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;

  // register xbar_upper_lower_merges_routeFrom
  assign xbar_upper_lower_merges_routeFrom_D_IN =
	     { !xbar_upper_lower_merges_routeFrom[1],
	       !xbar_upper_lower_merges_fi0HasPrio } ;
  assign xbar_upper_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_routeFrom_457_BIT_0_ETC___d4490 ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4495) ;

  // register xbar_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_704_BIT_1_705_AN_ETC___d4750 ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;

  // register xbar_upper_merges_1_routeFrom
  assign xbar_upper_merges_1_routeFrom_D_IN =
	     { !xbar_upper_merges_1_routeFrom[1],
	       !xbar_upper_merges_1_fi0HasPrio } ;
  assign xbar_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_routeFrom_704_BIT_0_706_ETC___d4737 ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4742) ;

  // register xbar_upper_merges_2_fi0HasPrio
  always@(MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_2_fi0HasPrio_D_IN =
	      !xbar_upper_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty:
	  xbar_upper_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty:
	  xbar_upper_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_2_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     xbar_upper_merges_2_routeFrom_779_BIT_1_780_AN_ETC___d4825 ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;

  // register xbar_upper_merges_2_routeFrom
  assign xbar_upper_merges_2_routeFrom_D_IN =
	     { !xbar_upper_merges_2_routeFrom[1],
	       !xbar_upper_merges_2_fi0HasPrio } ;
  assign xbar_upper_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      IF_xbar_upper_merges_2_routeFrom_779_BIT_0_781_ETC___d4812 ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4817) ;

  // register xbar_upper_merges_3_fi0HasPrio
  always@(MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_3_fi0HasPrio_D_IN =
	      !xbar_upper_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty:
	  xbar_upper_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty:
	  xbar_upper_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_3_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     xbar_upper_merges_3_routeFrom_854_BIT_1_855_AN_ETC___d4900 ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;

  // register xbar_upper_merges_3_routeFrom
  assign xbar_upper_merges_3_routeFrom_D_IN =
	     { !xbar_upper_merges_3_routeFrom[1],
	       !xbar_upper_merges_3_fi0HasPrio } ;
  assign xbar_upper_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      IF_xbar_upper_merges_3_routeFrom_854_BIT_0_856_ETC___d4887 ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4892) ;

  // register xbar_upper_merges_fi0HasPrio
  always@(MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_fi0HasPrio_D_IN = !xbar_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_629_BIT_1_630_AND__ETC___d4675 ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;

  // register xbar_upper_merges_routeFrom
  assign xbar_upper_merges_routeFrom_D_IN =
	     { !xbar_upper_merges_routeFrom[1],
	       !xbar_upper_merges_fi0HasPrio } ;
  assign xbar_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_routeFrom_629_BIT_0_631_T_ETC___d4662 ||
	      !xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4667) ;

  // register xbar_upper_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty:
	  xbar_upper_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     xbar_upper_upper_merges_1_routeFrom_358_BIT_1__ETC___d4404 ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;

  // register xbar_upper_upper_merges_1_routeFrom
  assign xbar_upper_upper_merges_1_routeFrom_D_IN =
	     { !xbar_upper_upper_merges_1_routeFrom[1],
	       !xbar_upper_upper_merges_1_fi0HasPrio } ;
  assign xbar_upper_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_1_routeFrom_358_BIT_ETC___d4391 ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4396) ;

  // register xbar_upper_upper_merges_fi0HasPrio
  always@(MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN =
	      !xbar_upper_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty:
	  xbar_upper_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     xbar_upper_upper_merges_routeFrom_283_BIT_1_28_ETC___d4329 ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;

  // register xbar_upper_upper_merges_routeFrom
  assign xbar_upper_upper_merges_routeFrom_D_IN =
	     { !xbar_upper_upper_merges_routeFrom[1],
	       !xbar_upper_upper_merges_fi0HasPrio } ;
  assign xbar_upper_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_routeFrom_283_BIT_0_ETC___d4316 ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4321) ;

  // submodule gearbox_dn_16_0
  assign gearbox_dn_16_0_datain_put = gearbox_dn_32_0_dataout_get ;
  assign gearbox_dn_16_0_EN_datain_put =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;
  assign gearbox_dn_16_0_EN_dataout_get =
	     MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_1
  assign gearbox_dn_16_1_datain_put = gearbox_dn_32_1_dataout_get ;
  assign gearbox_dn_16_1_EN_datain_put =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;
  assign gearbox_dn_16_1_EN_dataout_get =
	     MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_2
  assign gearbox_dn_16_2_datain_put = gearbox_dn_32_2_dataout_get ;
  assign gearbox_dn_16_2_EN_datain_put =
	     gearbox_dn_16_2_RDY_datain_put &&
	     gearbox_dn_32_2_RDY_dataout_get ;
  assign gearbox_dn_16_2_EN_dataout_get =
	     MUX_pktBuff_2_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_3
  assign gearbox_dn_16_3_datain_put = gearbox_dn_32_3_dataout_get ;
  assign gearbox_dn_16_3_EN_datain_put =
	     gearbox_dn_16_3_RDY_datain_put &&
	     gearbox_dn_32_3_RDY_dataout_get ;
  assign gearbox_dn_16_3_EN_dataout_get =
	     MUX_pktBuff_3_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_32_0
  assign gearbox_dn_32_0_datain_put =
	     output_queues_1_readServer_readData_get ;
  assign gearbox_dn_32_0_EN_datain_put =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign gearbox_dn_32_0_EN_dataout_get =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;

  // submodule gearbox_dn_32_1
  assign gearbox_dn_32_1_datain_put =
	     output_queues_2_readServer_readData_get ;
  assign gearbox_dn_32_1_EN_datain_put =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign gearbox_dn_32_1_EN_dataout_get =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;

  // submodule gearbox_dn_32_2
  assign gearbox_dn_32_2_datain_put =
	     output_queues_3_readServer_readData_get ;
  assign gearbox_dn_32_2_EN_datain_put =
	     output_queues_3_RDY_readServer_readData_get &&
	     gearbox_dn_32_2_RDY_datain_put ;
  assign gearbox_dn_32_2_EN_dataout_get =
	     gearbox_dn_16_2_RDY_datain_put &&
	     gearbox_dn_32_2_RDY_dataout_get ;

  // submodule gearbox_dn_32_3
  assign gearbox_dn_32_3_datain_put =
	     output_queues_4_readServer_readData_get ;
  assign gearbox_dn_32_3_EN_datain_put =
	     output_queues_4_RDY_readServer_readData_get &&
	     gearbox_dn_32_3_RDY_datain_put ;
  assign gearbox_dn_32_3_EN_dataout_get =
	     gearbox_dn_16_3_RDY_datain_put &&
	     gearbox_dn_32_3_RDY_dataout_get ;

  // submodule gearbox_up_16_0
  assign gearbox_up_16_0_datain_put = modifier_0_writeClient_first ;
  assign gearbox_up_16_0_EN_datain_put =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign gearbox_up_16_0_EN_dataout_get =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;

  // submodule gearbox_up_16_1
  assign gearbox_up_16_1_datain_put = modifier_1_writeClient_first ;
  assign gearbox_up_16_1_EN_datain_put =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign gearbox_up_16_1_EN_dataout_get =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;

  // submodule gearbox_up_16_2
  assign gearbox_up_16_2_datain_put = modifier_2_writeClient_first ;
  assign gearbox_up_16_2_EN_datain_put =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign gearbox_up_16_2_EN_dataout_get =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;

  // submodule gearbox_up_16_3
  assign gearbox_up_16_3_datain_put = modifier_3_writeClient_first ;
  assign gearbox_up_16_3_EN_datain_put =
	     gearbox_up_16_3_RDY_datain_put &&
	     modifier_3_RDY_writeClient_first &&
	     modifier_3_RDY_writeClient_deq ;
  assign gearbox_up_16_3_EN_dataout_get =
	     gearbox_up_32_3_RDY_datain_put &&
	     gearbox_up_16_3_RDY_dataout_get ;

  // submodule gearbox_up_16_4
  assign gearbox_up_16_4_datain_put = modifier_4_writeClient_first ;
  assign gearbox_up_16_4_EN_datain_put =
	     gearbox_up_16_4_RDY_datain_put &&
	     modifier_4_RDY_writeClient_first &&
	     modifier_4_RDY_writeClient_deq ;
  assign gearbox_up_16_4_EN_dataout_get =
	     gearbox_up_32_4_RDY_datain_put &&
	     gearbox_up_16_4_RDY_dataout_get ;

  // submodule gearbox_up_32_0
  assign gearbox_up_32_0_datain_put = gearbox_up_16_0_dataout_get ;
  assign gearbox_up_32_0_EN_datain_put =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;
  assign gearbox_up_32_0_EN_dataout_get =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;

  // submodule gearbox_up_32_1
  assign gearbox_up_32_1_datain_put = gearbox_up_16_1_dataout_get ;
  assign gearbox_up_32_1_EN_datain_put =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;
  assign gearbox_up_32_1_EN_dataout_get =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;

  // submodule gearbox_up_32_2
  assign gearbox_up_32_2_datain_put = gearbox_up_16_2_dataout_get ;
  assign gearbox_up_32_2_EN_datain_put =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;
  assign gearbox_up_32_2_EN_dataout_get =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;

  // submodule gearbox_up_32_3
  assign gearbox_up_32_3_datain_put = gearbox_up_16_3_dataout_get ;
  assign gearbox_up_32_3_EN_datain_put =
	     gearbox_up_32_3_RDY_datain_put &&
	     gearbox_up_16_3_RDY_dataout_get ;
  assign gearbox_up_32_3_EN_dataout_get =
	     input_queues_3_RDY_writeServer_enq &&
	     gearbox_up_32_3_RDY_dataout_get ;

  // submodule gearbox_up_32_4
  assign gearbox_up_32_4_datain_put = gearbox_up_16_4_dataout_get ;
  assign gearbox_up_32_4_EN_datain_put =
	     gearbox_up_32_4_RDY_datain_put &&
	     gearbox_up_16_4_RDY_dataout_get ;
  assign gearbox_up_32_4_EN_dataout_get =
	     input_queues_4_RDY_writeServer_enq &&
	     gearbox_up_32_4_RDY_dataout_get ;

  // submodule hostchan_0_outReqFifo
  assign hostchan_0_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_0_pktLenFifo_D_OUT,
	       hostchan_0_parser_meta_get[1477:372],
	       10'd513,
	       hostchan_0_parser_meta_get[361:0] } ;
  assign hostchan_0_outReqFifo_ENQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_outReqFifo_DEQ = EN_rxchan_0_next_deq ;
  assign hostchan_0_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_parser
  assign hostchan_0_parser_frameIn_put = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_parser_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_parser_EN_meta_get =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_parser_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktBuff
  assign hostchan_0_pktBuff_readServer_readReq_put =
	     hostchan_0_readReqFifo_D_OUT ;
  assign hostchan_0_pktBuff_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_pktBuff_writeServer_enq_v =
	     macToRing_0_writeDataFifo_dD_OUT ;
  assign hostchan_0_pktBuff_EN_writeServer_enq =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;
  assign hostchan_0_pktBuff_EN_readServer_readData_get =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readLen_get =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readReq_put =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_pktBuff_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktLenFifo
  assign hostchan_0_pktLenFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_pktLenFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_pktLenFifo_DEQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readDataFifo
  assign hostchan_0_readDataFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readData_get ;
  assign hostchan_0_readDataFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readLenFifo
  assign hostchan_0_readLenFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readLen_get ;
  assign hostchan_0_readLenFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_readLenFifo_DEQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readReqFifo
  assign hostchan_0_readReqFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_readReqFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readReqFifo_DEQ =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_verbose_ff
  assign hostchan_0_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_0_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_0_verbose_ff_DEQ = hostchan_0_verbose_ff_EMPTY_N ;
  assign hostchan_0_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_0_writeDataFifo
  assign hostchan_0_writeDataFifo_D_IN = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_16 &&
	     !EN_rxchan_0_writeClient_deq ||
	     EN_rxchan_0_writeClient_deq ;
  assign hostchan_0_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_outReqFifo
  assign hostchan_1_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_1_pktLenFifo_D_OUT,
	       hostchan_1_parser_meta_get[1477:372],
	       10'd514,
	       hostchan_1_parser_meta_get[361:0] } ;
  assign hostchan_1_outReqFifo_ENQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_outReqFifo_DEQ = EN_rxchan_1_next_deq ;
  assign hostchan_1_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_parser
  assign hostchan_1_parser_frameIn_put = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_parser_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_parser_EN_meta_get =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_parser_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktBuff
  assign hostchan_1_pktBuff_readServer_readReq_put =
	     hostchan_1_readReqFifo_D_OUT ;
  assign hostchan_1_pktBuff_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_pktBuff_writeServer_enq_v =
	     macToRing_1_writeDataFifo_dD_OUT ;
  assign hostchan_1_pktBuff_EN_writeServer_enq =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;
  assign hostchan_1_pktBuff_EN_readServer_readData_get =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readLen_get =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readReq_put =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_pktBuff_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktLenFifo
  assign hostchan_1_pktLenFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_pktLenFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_pktLenFifo_DEQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readDataFifo
  assign hostchan_1_readDataFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readData_get ;
  assign hostchan_1_readDataFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readLenFifo
  assign hostchan_1_readLenFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readLen_get ;
  assign hostchan_1_readLenFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_readLenFifo_DEQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readReqFifo
  assign hostchan_1_readReqFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_readReqFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readReqFifo_DEQ =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_verbose_ff
  assign hostchan_1_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_1_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_1_verbose_ff_DEQ = hostchan_1_verbose_ff_EMPTY_N ;
  assign hostchan_1_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_1_writeDataFifo
  assign hostchan_1_writeDataFifo_D_IN = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_17 &&
	     !EN_rxchan_1_writeClient_deq ||
	     EN_rxchan_1_writeClient_deq ;
  assign hostchan_1_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_2_outReqFifo
  assign hostchan_2_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_2_pktLenFifo_D_OUT,
	       hostchan_2_parser_meta_get[1477:372],
	       10'd515,
	       hostchan_2_parser_meta_get[361:0] } ;
  assign hostchan_2_outReqFifo_ENQ =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_outReqFifo_DEQ = EN_rxchan_2_next_deq ;
  assign hostchan_2_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_2_parser
  assign hostchan_2_parser_frameIn_put = hostchan_2_readDataFifo_D_OUT ;
  assign hostchan_2_parser_set_verbosity_verbosity =
	     hostchan_2_verbose_ff_D_OUT ;
  assign hostchan_2_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_parser_EN_meta_get =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_parser_EN_set_verbosity = hostchan_2_verbose_ff_EMPTY_N ;

  // submodule hostchan_2_pktBuff
  assign hostchan_2_pktBuff_readServer_readReq_put =
	     hostchan_2_readReqFifo_D_OUT ;
  assign hostchan_2_pktBuff_set_verbosity_verbosity =
	     hostchan_2_verbose_ff_D_OUT ;
  assign hostchan_2_pktBuff_writeServer_enq_v =
	     macToRing_2_writeDataFifo_dD_OUT ;
  assign hostchan_2_pktBuff_EN_writeServer_enq =
	     macToRing_2_writeDataFifo_dEMPTY_N &&
	     hostchan_2_pktBuff_RDY_writeServer_enq ;
  assign hostchan_2_pktBuff_EN_readServer_readData_get =
	     hostchan_2_pktBuff_RDY_readServer_readData_get &&
	     hostchan_2_readDataFifo_FULL_N ;
  assign hostchan_2_pktBuff_EN_readServer_readLen_get =
	     hostchan_2_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_2_readLenFifo_FULL_N ;
  assign hostchan_2_pktBuff_EN_readServer_readReq_put =
	     hostchan_2_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_2_readReqFifo_EMPTY_N ;
  assign hostchan_2_pktBuff_EN_set_verbosity = hostchan_2_verbose_ff_EMPTY_N ;

  // submodule hostchan_2_pktLenFifo
  assign hostchan_2_pktLenFifo_D_IN = hostchan_2_readLenFifo_D_OUT ;
  assign hostchan_2_pktLenFifo_ENQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_pktLenFifo_DEQ =
	     hostchan_2_parser_RDY_meta_get &&
	     hostchan_2_pktLenFifo_EMPTY_N &&
	     hostchan_2_outReqFifo_FULL_N ;
  assign hostchan_2_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readDataFifo
  assign hostchan_2_readDataFifo_D_IN =
	     hostchan_2_pktBuff_readServer_readData_get ;
  assign hostchan_2_readDataFifo_ENQ =
	     hostchan_2_pktBuff_RDY_readServer_readData_get &&
	     hostchan_2_readDataFifo_FULL_N ;
  assign hostchan_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readLenFifo
  assign hostchan_2_readLenFifo_D_IN =
	     hostchan_2_pktBuff_readServer_readLen_get ;
  assign hostchan_2_readLenFifo_ENQ =
	     hostchan_2_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_2_readLenFifo_FULL_N ;
  assign hostchan_2_readLenFifo_DEQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_2_readReqFifo
  assign hostchan_2_readReqFifo_D_IN = hostchan_2_readLenFifo_D_OUT ;
  assign hostchan_2_readReqFifo_ENQ =
	     MUX_hostchan_2_readStarted_write_1__SEL_2 ;
  assign hostchan_2_readReqFifo_DEQ =
	     hostchan_2_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_2_readReqFifo_EMPTY_N ;
  assign hostchan_2_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_2_verbose_ff
  assign hostchan_2_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_2_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_2_verbose_ff_DEQ = hostchan_2_verbose_ff_EMPTY_N ;
  assign hostchan_2_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_2_writeDataFifo
  assign hostchan_2_writeDataFifo_D_IN = hostchan_2_readDataFifo_D_OUT ;
  assign hostchan_2_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_2_packetReadInProgress ;
  assign hostchan_2_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_18 &&
	     !EN_rxchan_2_writeClient_deq ||
	     EN_rxchan_2_writeClient_deq ;
  assign hostchan_2_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_3_outReqFifo
  assign hostchan_3_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_3_pktLenFifo_D_OUT,
	       hostchan_3_parser_meta_get[1477:372],
	       10'd516,
	       hostchan_3_parser_meta_get[361:0] } ;
  assign hostchan_3_outReqFifo_ENQ =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_outReqFifo_DEQ = EN_rxchan_3_next_deq ;
  assign hostchan_3_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_3_parser
  assign hostchan_3_parser_frameIn_put = hostchan_3_readDataFifo_D_OUT ;
  assign hostchan_3_parser_set_verbosity_verbosity =
	     hostchan_3_verbose_ff_D_OUT ;
  assign hostchan_3_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_parser_EN_meta_get =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_parser_EN_set_verbosity = hostchan_3_verbose_ff_EMPTY_N ;

  // submodule hostchan_3_pktBuff
  assign hostchan_3_pktBuff_readServer_readReq_put =
	     hostchan_3_readReqFifo_D_OUT ;
  assign hostchan_3_pktBuff_set_verbosity_verbosity =
	     hostchan_3_verbose_ff_D_OUT ;
  assign hostchan_3_pktBuff_writeServer_enq_v =
	     macToRing_3_writeDataFifo_dD_OUT ;
  assign hostchan_3_pktBuff_EN_writeServer_enq =
	     macToRing_3_writeDataFifo_dEMPTY_N &&
	     hostchan_3_pktBuff_RDY_writeServer_enq ;
  assign hostchan_3_pktBuff_EN_readServer_readData_get =
	     hostchan_3_pktBuff_RDY_readServer_readData_get &&
	     hostchan_3_readDataFifo_FULL_N ;
  assign hostchan_3_pktBuff_EN_readServer_readLen_get =
	     hostchan_3_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_3_readLenFifo_FULL_N ;
  assign hostchan_3_pktBuff_EN_readServer_readReq_put =
	     hostchan_3_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_3_readReqFifo_EMPTY_N ;
  assign hostchan_3_pktBuff_EN_set_verbosity = hostchan_3_verbose_ff_EMPTY_N ;

  // submodule hostchan_3_pktLenFifo
  assign hostchan_3_pktLenFifo_D_IN = hostchan_3_readLenFifo_D_OUT ;
  assign hostchan_3_pktLenFifo_ENQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_pktLenFifo_DEQ =
	     hostchan_3_parser_RDY_meta_get &&
	     hostchan_3_pktLenFifo_EMPTY_N &&
	     hostchan_3_outReqFifo_FULL_N ;
  assign hostchan_3_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readDataFifo
  assign hostchan_3_readDataFifo_D_IN =
	     hostchan_3_pktBuff_readServer_readData_get ;
  assign hostchan_3_readDataFifo_ENQ =
	     hostchan_3_pktBuff_RDY_readServer_readData_get &&
	     hostchan_3_readDataFifo_FULL_N ;
  assign hostchan_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readLenFifo
  assign hostchan_3_readLenFifo_D_IN =
	     hostchan_3_pktBuff_readServer_readLen_get ;
  assign hostchan_3_readLenFifo_ENQ =
	     hostchan_3_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_3_readLenFifo_FULL_N ;
  assign hostchan_3_readLenFifo_DEQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_3_readReqFifo
  assign hostchan_3_readReqFifo_D_IN = hostchan_3_readLenFifo_D_OUT ;
  assign hostchan_3_readReqFifo_ENQ =
	     MUX_hostchan_3_readStarted_write_1__SEL_2 ;
  assign hostchan_3_readReqFifo_DEQ =
	     hostchan_3_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_3_readReqFifo_EMPTY_N ;
  assign hostchan_3_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_3_verbose_ff
  assign hostchan_3_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_3_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_3_verbose_ff_DEQ = hostchan_3_verbose_ff_EMPTY_N ;
  assign hostchan_3_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_3_writeDataFifo
  assign hostchan_3_writeDataFifo_D_IN = hostchan_3_readDataFifo_D_OUT ;
  assign hostchan_3_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_3_packetReadInProgress ;
  assign hostchan_3_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_19 &&
	     !EN_rxchan_3_writeClient_deq ||
	     EN_rxchan_3_writeClient_deq ;
  assign hostchan_3_writeDataFifo_CLR = 1'b0 ;

  // submodule input_queues_0
  assign input_queues_0_readServer_readReq_put =
	     input_queues_0_readServer_readLen_get ;
  assign input_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_0_writeServer_enq_v = gearbox_up_32_0_dataout_get ;
  assign input_queues_0_EN_writeServer_enq =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;
  assign input_queues_0_EN_readServer_readData_get =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_upper_f_FULL_N ;
  assign input_queues_0_EN_readServer_readLen_get =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_readServer_readReq_put =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_1
  assign input_queues_1_readServer_readReq_put =
	     input_queues_1_readServer_readLen_get ;
  assign input_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_1_writeServer_enq_v = gearbox_up_32_1_dataout_get ;
  assign input_queues_1_EN_writeServer_enq =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;
  assign input_queues_1_EN_readServer_readData_get =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_upper_lower_f_FULL_N ;
  assign input_queues_1_EN_readServer_readLen_get =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_readServer_readReq_put =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_2
  assign input_queues_2_readServer_readReq_put =
	     input_queues_2_readServer_readLen_get ;
  assign input_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_2_writeServer_enq_v = gearbox_up_32_2_dataout_get ;
  assign input_queues_2_EN_writeServer_enq =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;
  assign input_queues_2_EN_readServer_readData_get =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_upper_lower_upper_f_FULL_N ;
  assign input_queues_2_EN_readServer_readLen_get =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_readServer_readReq_put =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_3
  assign input_queues_3_readServer_readReq_put =
	     input_queues_3_readServer_readLen_get ;
  assign input_queues_3_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_3_writeServer_enq_v = gearbox_up_32_3_dataout_get ;
  assign input_queues_3_EN_writeServer_enq =
	     input_queues_3_RDY_writeServer_enq &&
	     gearbox_up_32_3_RDY_dataout_get ;
  assign input_queues_3_EN_readServer_readData_get =
	     input_queues_3_RDY_readServer_readData_get &&
	     xbar_upper_lower_lower_f_FULL_N ;
  assign input_queues_3_EN_readServer_readLen_get =
	     input_queues_3_RDY_readServer_readLen_get &&
	     input_queues_3_RDY_readServer_readReq_put ;
  assign input_queues_3_EN_readServer_readReq_put =
	     input_queues_3_RDY_readServer_readLen_get &&
	     input_queues_3_RDY_readServer_readReq_put ;
  assign input_queues_3_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_4
  assign input_queues_4_readServer_readReq_put =
	     input_queues_4_readServer_readLen_get ;
  assign input_queues_4_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_4_writeServer_enq_v = gearbox_up_32_4_dataout_get ;
  assign input_queues_4_EN_writeServer_enq =
	     input_queues_4_RDY_writeServer_enq &&
	     gearbox_up_32_4_RDY_dataout_get ;
  assign input_queues_4_EN_readServer_readData_get =
	     input_queues_4_RDY_readServer_readData_get &&
	     xbar_lower_upper_upper_f_FULL_N ;
  assign input_queues_4_EN_readServer_readLen_get =
	     input_queues_4_RDY_readServer_readLen_get &&
	     input_queues_4_RDY_readServer_readReq_put ;
  assign input_queues_4_EN_readServer_readReq_put =
	     input_queues_4_RDY_readServer_readLen_get &&
	     input_queues_4_RDY_readServer_readReq_put ;
  assign input_queues_4_EN_set_verbosity = EN_set_verbosity ;

  // submodule macToRing_0_gearbox_in_ff
  assign macToRing_0_gearbox_in_ff_D_IN = rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_ENQ = EN_rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     !macToRing_0_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign macToRing_0_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_0_gearbox_out_ff
  assign macToRing_0_gearbox_out_ff_D_IN =
	     MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_0_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;
  assign macToRing_0_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_0_writeDataFifo
  assign macToRing_0_writeDataFifo_sD_IN = macToRing_0_gearbox_out_ff_D_OUT ;
  assign macToRing_0_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_writeDataFifo_dDEQ =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_1_gearbox_in_ff
  assign macToRing_1_gearbox_in_ff_D_IN = rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_ENQ = EN_rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     !macToRing_1_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign macToRing_1_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_1_gearbox_out_ff
  assign macToRing_1_gearbox_out_ff_D_IN =
	     MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_1_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;
  assign macToRing_1_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_1_writeDataFifo
  assign macToRing_1_writeDataFifo_sD_IN = macToRing_1_gearbox_out_ff_D_OUT ;
  assign macToRing_1_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_writeDataFifo_dDEQ =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_2_gearbox_in_ff
  assign macToRing_2_gearbox_in_ff_D_IN = rxchan_2_macRx_put ;
  assign macToRing_2_gearbox_in_ff_ENQ = EN_rxchan_2_macRx_put ;
  assign macToRing_2_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_2_gearbox_startOfPacket &&
	     !macToRing_2_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd ;
  assign macToRing_2_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_2_gearbox_out_ff
  assign macToRing_2_gearbox_out_ff_D_IN =
	     MUX_macToRing_2_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_2_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_2_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketOdd &&
	     macToRing_2_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_2_gearbox_readPacketEven ;
  assign macToRing_2_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_2_writeData ;
  assign macToRing_2_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_2_writeDataFifo
  assign macToRing_2_writeDataFifo_sD_IN = macToRing_2_gearbox_out_ff_D_OUT ;
  assign macToRing_2_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_2_writeData ;
  assign macToRing_2_writeDataFifo_dDEQ =
	     macToRing_2_writeDataFifo_dEMPTY_N &&
	     hostchan_2_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_3_gearbox_in_ff
  assign macToRing_3_gearbox_in_ff_D_IN = rxchan_3_macRx_put ;
  assign macToRing_3_gearbox_in_ff_ENQ = EN_rxchan_3_macRx_put ;
  assign macToRing_3_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_3_gearbox_startOfPacket &&
	     !macToRing_3_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd ;
  assign macToRing_3_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_3_gearbox_out_ff
  assign macToRing_3_gearbox_out_ff_D_IN =
	     MUX_macToRing_3_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_3_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_3_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketOdd &&
	     macToRing_3_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_3_gearbox_readPacketEven ;
  assign macToRing_3_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_3_writeData ;
  assign macToRing_3_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_3_writeDataFifo
  assign macToRing_3_writeDataFifo_sD_IN = macToRing_3_gearbox_out_ff_D_OUT ;
  assign macToRing_3_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_3_writeData ;
  assign macToRing_3_writeDataFifo_dDEQ =
	     macToRing_3_writeDataFifo_dEMPTY_N &&
	     hostchan_3_pktBuff_RDY_writeServer_enq ;

  // submodule meta_ff_0
  assign meta_ff_0_D_IN = prev_0_enq_v ;
  assign meta_ff_0_ENQ = EN_prev_0_enq ;
  assign meta_ff_0_DEQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_CLR = 1'b0 ;

  // submodule meta_ff_0_1
  assign meta_ff_0_1_D_IN = meta_ff_0_D_OUT ;
  assign meta_ff_0_1_ENQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_1_DEQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign meta_ff_0_1_CLR = 1'b0 ;

  // submodule meta_ff_1
  assign meta_ff_1_D_IN = prev_1_enq_v ;
  assign meta_ff_1_ENQ = EN_prev_1_enq ;
  assign meta_ff_1_DEQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_CLR = 1'b0 ;

  // submodule meta_ff_1_1
  assign meta_ff_1_1_D_IN = meta_ff_1_D_OUT ;
  assign meta_ff_1_1_ENQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_1_DEQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign meta_ff_1_1_CLR = 1'b0 ;

  // submodule meta_ff_2
  assign meta_ff_2_D_IN = prev_2_enq_v ;
  assign meta_ff_2_ENQ = EN_prev_2_enq ;
  assign meta_ff_2_DEQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_CLR = 1'b0 ;

  // submodule meta_ff_2_1
  assign meta_ff_2_1_D_IN = meta_ff_2_D_OUT ;
  assign meta_ff_2_1_ENQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_1_DEQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign meta_ff_2_1_CLR = 1'b0 ;

  // submodule meta_ff_3
  assign meta_ff_3_D_IN = prev_3_enq_v ;
  assign meta_ff_3_ENQ = EN_prev_3_enq ;
  assign meta_ff_3_DEQ = meta_ff_3_EMPTY_N && meta_ff_3_1_FULL_N ;
  assign meta_ff_3_CLR = 1'b0 ;

  // submodule meta_ff_3_1
  assign meta_ff_3_1_D_IN = meta_ff_3_D_OUT ;
  assign meta_ff_3_1_ENQ = meta_ff_3_EMPTY_N && meta_ff_3_1_FULL_N ;
  assign meta_ff_3_1_DEQ =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign meta_ff_3_1_CLR = 1'b0 ;

  // submodule meta_ff_4
  assign meta_ff_4_D_IN = prev_4_enq_v ;
  assign meta_ff_4_ENQ = EN_prev_4_enq ;
  assign meta_ff_4_DEQ = meta_ff_4_EMPTY_N && meta_ff_4_1_FULL_N ;
  assign meta_ff_4_CLR = 1'b0 ;

  // submodule meta_ff_4_1
  assign meta_ff_4_1_D_IN = meta_ff_4_D_OUT ;
  assign meta_ff_4_1_ENQ = meta_ff_4_EMPTY_N && meta_ff_4_1_FULL_N ;
  assign meta_ff_4_1_DEQ =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign meta_ff_4_1_CLR = 1'b0 ;

  // submodule modifier_0
  assign modifier_0_prev_enq_v = meta_ff_0_1_D_OUT ;
  assign modifier_0_set_verbosity_verbosity = verbose_ff_0_2_D_OUT ;
  assign modifier_0_writeServer_enq_v = pktBuff_0_writeDataFifo_D_OUT ;
  assign modifier_0_EN_prev_enq =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign modifier_0_EN_writeServer_enq =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign modifier_0_EN_writeClient_deq =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign modifier_0_EN_set_verbosity = verbose_ff_0_2_EMPTY_N ;

  // submodule modifier_1
  assign modifier_1_prev_enq_v = meta_ff_1_1_D_OUT ;
  assign modifier_1_set_verbosity_verbosity = verbose_ff_1_1_D_OUT ;
  assign modifier_1_writeServer_enq_v = pktBuff_1_writeDataFifo_D_OUT ;
  assign modifier_1_EN_prev_enq =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign modifier_1_EN_writeServer_enq =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign modifier_1_EN_writeClient_deq =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign modifier_1_EN_set_verbosity = verbose_ff_1_1_EMPTY_N ;

  // submodule modifier_2
  assign modifier_2_prev_enq_v = meta_ff_2_1_D_OUT ;
  assign modifier_2_set_verbosity_verbosity = verbose_ff_2_1_D_OUT ;
  assign modifier_2_writeServer_enq_v = pktBuff_2_writeDataFifo_D_OUT ;
  assign modifier_2_EN_prev_enq =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign modifier_2_EN_writeServer_enq =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign modifier_2_EN_writeClient_deq =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign modifier_2_EN_set_verbosity = verbose_ff_2_1_EMPTY_N ;

  // submodule modifier_3
  assign modifier_3_prev_enq_v = meta_ff_3_1_D_OUT ;
  assign modifier_3_set_verbosity_verbosity = verbose_ff_3_1_D_OUT ;
  assign modifier_3_writeServer_enq_v = pktBuff_3_writeDataFifo_D_OUT ;
  assign modifier_3_EN_prev_enq =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign modifier_3_EN_writeServer_enq =
	     modifier_3_RDY_writeServer_enq &&
	     pktBuff_3_writeDataFifo_EMPTY_N ;
  assign modifier_3_EN_writeClient_deq =
	     gearbox_up_16_3_RDY_datain_put &&
	     modifier_3_RDY_writeClient_first &&
	     modifier_3_RDY_writeClient_deq ;
  assign modifier_3_EN_set_verbosity = verbose_ff_3_1_EMPTY_N ;

  // submodule modifier_4
  assign modifier_4_prev_enq_v = meta_ff_4_1_D_OUT ;
  assign modifier_4_set_verbosity_verbosity = verbose_ff_4_D_OUT ;
  assign modifier_4_writeServer_enq_v = pktBuff_4_writeDataFifo_D_OUT ;
  assign modifier_4_EN_prev_enq =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign modifier_4_EN_writeServer_enq =
	     modifier_4_RDY_writeServer_enq &&
	     pktBuff_4_writeDataFifo_EMPTY_N ;
  assign modifier_4_EN_writeClient_deq =
	     gearbox_up_16_4_RDY_datain_put &&
	     modifier_4_RDY_writeClient_first &&
	     modifier_4_RDY_writeClient_deq ;
  assign modifier_4_EN_set_verbosity = verbose_ff_4_EMPTY_N ;

  // submodule outReqFifo_0
  assign outReqFifo_0_D_IN =
	     { 5'd0,
	       pktLenFifo_0_D_OUT,
	       parser_0_meta_get[1477:372],
	       10'd512,
	       parser_0_meta_get[361:0] } ;
  assign outReqFifo_0_ENQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign outReqFifo_0_DEQ = EN_hostchan_0_next_deq ;
  assign outReqFifo_0_CLR = 1'b0 ;

  // submodule output_queues_0
  assign output_queues_0_readServer_readReq_put =
	     output_queues_0_readServer_readLen_get ;
  assign output_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_0_writeServer_enq_v = xbar_merges_fo_D_OUT ;
  assign output_queues_0_EN_writeServer_enq =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign output_queues_0_EN_readServer_readData_get =
	     output_queues_0_RDY_readServer_readData_get ;
  assign output_queues_0_EN_readServer_readLen_get =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_readServer_readReq_put =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_1
  assign output_queues_1_readServer_readReq_put =
	     output_queues_1_readServer_readLen_get ;
  assign output_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_1_writeServer_enq_v = xbar_merges_1_fo_D_OUT ;
  assign output_queues_1_EN_writeServer_enq =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign output_queues_1_EN_readServer_readData_get =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign output_queues_1_EN_readServer_readLen_get =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_readServer_readReq_put =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_2
  assign output_queues_2_readServer_readReq_put =
	     output_queues_2_readServer_readLen_get ;
  assign output_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_2_writeServer_enq_v = xbar_merges_2_fo_D_OUT ;
  assign output_queues_2_EN_writeServer_enq =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign output_queues_2_EN_readServer_readData_get =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign output_queues_2_EN_readServer_readLen_get =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_readServer_readReq_put =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_3
  assign output_queues_3_readServer_readReq_put =
	     output_queues_3_readServer_readLen_get ;
  assign output_queues_3_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_3_writeServer_enq_v = xbar_merges_3_fo_D_OUT ;
  assign output_queues_3_EN_writeServer_enq =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign output_queues_3_EN_readServer_readData_get =
	     output_queues_3_RDY_readServer_readData_get &&
	     gearbox_dn_32_2_RDY_datain_put ;
  assign output_queues_3_EN_readServer_readLen_get =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_readServer_readReq_put =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_4
  assign output_queues_4_readServer_readReq_put =
	     output_queues_4_readServer_readLen_get ;
  assign output_queues_4_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_4_writeServer_enq_v = xbar_merges_4_fo_D_OUT ;
  assign output_queues_4_EN_writeServer_enq =
	     output_queues_4_RDY_writeServer_enq && xbar_merges_4_fo_EMPTY_N ;
  assign output_queues_4_EN_readServer_readData_get =
	     output_queues_4_RDY_readServer_readData_get &&
	     gearbox_dn_32_3_RDY_datain_put ;
  assign output_queues_4_EN_readServer_readLen_get =
	     output_queues_4_RDY_readServer_readLen_get &&
	     output_queues_4_RDY_readServer_readReq_put ;
  assign output_queues_4_EN_readServer_readReq_put =
	     output_queues_4_RDY_readServer_readLen_get &&
	     output_queues_4_RDY_readServer_readReq_put ;
  assign output_queues_4_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_5
  assign output_queues_5_readServer_readReq_put =
	     output_queues_5_readServer_readLen_get ;
  assign output_queues_5_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_5_writeServer_enq_v = xbar_merges_5_fo_D_OUT ;
  assign output_queues_5_EN_writeServer_enq =
	     output_queues_5_RDY_writeServer_enq && xbar_merges_5_fo_EMPTY_N ;
  assign output_queues_5_EN_readServer_readData_get =
	     output_queues_5_RDY_readServer_readData_get ;
  assign output_queues_5_EN_readServer_readLen_get =
	     output_queues_5_RDY_readServer_readLen_get &&
	     output_queues_5_RDY_readServer_readReq_put ;
  assign output_queues_5_EN_readServer_readReq_put =
	     output_queues_5_RDY_readServer_readLen_get &&
	     output_queues_5_RDY_readServer_readReq_put ;
  assign output_queues_5_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_6
  assign output_queues_6_readServer_readReq_put =
	     output_queues_6_readServer_readLen_get ;
  assign output_queues_6_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_6_writeServer_enq_v = xbar_merges_6_fo_D_OUT ;
  assign output_queues_6_EN_writeServer_enq =
	     output_queues_6_RDY_writeServer_enq && xbar_merges_6_fo_EMPTY_N ;
  assign output_queues_6_EN_readServer_readData_get =
	     output_queues_6_RDY_readServer_readData_get ;
  assign output_queues_6_EN_readServer_readLen_get =
	     output_queues_6_RDY_readServer_readLen_get &&
	     output_queues_6_RDY_readServer_readReq_put ;
  assign output_queues_6_EN_readServer_readReq_put =
	     output_queues_6_RDY_readServer_readLen_get &&
	     output_queues_6_RDY_readServer_readReq_put ;
  assign output_queues_6_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_7
  assign output_queues_7_readServer_readReq_put =
	     output_queues_7_readServer_readLen_get ;
  assign output_queues_7_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_7_writeServer_enq_v = xbar_merges_7_fo_D_OUT ;
  assign output_queues_7_EN_writeServer_enq =
	     output_queues_7_RDY_writeServer_enq && xbar_merges_7_fo_EMPTY_N ;
  assign output_queues_7_EN_readServer_readData_get =
	     output_queues_7_RDY_readServer_readData_get ;
  assign output_queues_7_EN_readServer_readLen_get =
	     output_queues_7_RDY_readServer_readLen_get &&
	     output_queues_7_RDY_readServer_readReq_put ;
  assign output_queues_7_EN_readServer_readReq_put =
	     output_queues_7_RDY_readServer_readLen_get &&
	     output_queues_7_RDY_readServer_readReq_put ;
  assign output_queues_7_EN_set_verbosity = EN_set_verbosity ;

  // submodule parser_0
  assign parser_0_frameIn_put = readDataFifo_0_D_OUT ;
  assign parser_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign parser_0_EN_frameIn_put = WILL_FIRE_RL_packetReadInProgress ;
  assign parser_0_EN_meta_get =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign parser_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0
  assign pktBuff_0_readServer_readReq_put = readReqFifo_0_D_OUT ;
  assign pktBuff_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign pktBuff_0_writeServer_enq_v = hostchan_0_writeServer_enq_v ;
  assign pktBuff_0_EN_writeServer_enq = EN_hostchan_0_writeServer_enq ;
  assign pktBuff_0_EN_readServer_readData_get =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readLen_get =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readReq_put =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign pktBuff_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0_fifoEop
  assign pktBuff_0_fifoEop_D_IN = pktBuff_0_packetLen + { 11'd0, x__h79531 } ;
  assign pktBuff_0_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 &&
	     pktBuff_0_fifoWriteData_D_OUT[0] ;
  assign pktBuff_0_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoLen
  assign pktBuff_0_fifoLen_D_IN = pktBuff_0_fifoEop_D_OUT ;
  assign pktBuff_0_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoLen_DEQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign pktBuff_0_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadData
  assign pktBuff_0_fifoReadData_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_0_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;
  assign pktBuff_0_fifoReadData_DEQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign pktBuff_0_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadReq
  assign pktBuff_0_fifoReadReq_D_IN = ringToMac_0_readReqFifo_D_OUT ;
  assign pktBuff_0_fifoReadReq_ENQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign pktBuff_0_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_0_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoWriteData
  assign pktBuff_0_fifoWriteData_D_IN =
	     EN_txchan_0_writeServer_enq ?
	       txchan_0_writeServer_enq_v :
	       gearbox_dn_16_0_dataout_get ;
  assign pktBuff_0_fifoWriteData_ENQ =
	     EN_txchan_0_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_69 &&
	     !EN_txchan_0_writeServer_enq ;
  assign pktBuff_0_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_0_incomingReqs
  assign pktBuff_0_incomingReqs_D_IN =
	     { pktBuff_0_wrCurrPtr, pktBuff_0_fifoWriteData_D_OUT } ;
  assign pktBuff_0_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_incomingReqs_DEQ =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_memory
  assign pktBuff_0_memBuffer_memory_ADDRA =
	     pktBuff_0_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_0_memBuffer_memory_ADDRB = pktBuff_0_rdCurrPtr ;
  assign pktBuff_0_memBuffer_memory_DIA =
	     pktBuff_0_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_0_memBuffer_memory_DIB =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_0_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_0_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_0_memBuffer_memory_ENA =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOA ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOB ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_meta_ff
  assign pktBuff_0_meta_ff_D_IN = meta_ff_0_1_D_OUT ;
  assign pktBuff_0_meta_ff_ENQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign pktBuff_0_meta_ff_DEQ = MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_0_pktBuff
  assign pktBuff_0_pktBuff_readServer_readReq_put =
	     pktBuff_0_readReqFifo_D_OUT ;
  assign pktBuff_0_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_0_pktBuff_writeServer_enq_v = writeDataFifo_0_D_OUT ;
  assign pktBuff_0_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_15 &&
	     !EN_hostchan_0_writeClient_deq ;
  assign pktBuff_0_pktBuff_EN_readServer_readData_get =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readLen_get =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readReq_put =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_0_readDataFifo
  assign pktBuff_0_readDataFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readData_get ;
  assign pktBuff_0_readDataFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readLenFifo
  assign pktBuff_0_readLenFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readLen_get ;
  assign pktBuff_0_readLenFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_readLenFifo_DEQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readReqFifo
  assign pktBuff_0_readReqFifo_D_IN = pktBuff_0_readLenFifo_D_OUT ;
  assign pktBuff_0_readReqFifo_ENQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readReqFifo_DEQ =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_writeDataFifo
  assign pktBuff_0_writeDataFifo_D_IN = pktBuff_0_readDataFifo_D_OUT ;
  assign pktBuff_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_writeDataFifo_DEQ =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign pktBuff_0_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoEop
  assign pktBuff_1_fifoEop_D_IN = pktBuff_1_packetLen + { 11'd0, x__h98168 } ;
  assign pktBuff_1_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 &&
	     pktBuff_1_fifoWriteData_D_OUT[0] ;
  assign pktBuff_1_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoLen
  assign pktBuff_1_fifoLen_D_IN = pktBuff_1_fifoEop_D_OUT ;
  assign pktBuff_1_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoLen_DEQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign pktBuff_1_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadData
  assign pktBuff_1_fifoReadData_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_1_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;
  assign pktBuff_1_fifoReadData_DEQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign pktBuff_1_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadReq
  assign pktBuff_1_fifoReadReq_D_IN = ringToMac_1_readReqFifo_D_OUT ;
  assign pktBuff_1_fifoReadReq_ENQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign pktBuff_1_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoWriteData
  assign pktBuff_1_fifoWriteData_D_IN =
	     EN_txchan_1_writeServer_enq ?
	       txchan_1_writeServer_enq_v :
	       gearbox_dn_16_1_dataout_get ;
  assign pktBuff_1_fifoWriteData_ENQ =
	     EN_txchan_1_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_70 &&
	     !EN_txchan_1_writeServer_enq ;
  assign pktBuff_1_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_1_incomingReqs
  assign pktBuff_1_incomingReqs_D_IN =
	     { pktBuff_1_wrCurrPtr, pktBuff_1_fifoWriteData_D_OUT } ;
  assign pktBuff_1_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_incomingReqs_DEQ =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_memory
  assign pktBuff_1_memBuffer_memory_ADDRA =
	     pktBuff_1_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_1_memBuffer_memory_ADDRB = pktBuff_1_rdCurrPtr ;
  assign pktBuff_1_memBuffer_memory_DIA =
	     pktBuff_1_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_1_memBuffer_memory_DIB =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_1_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_1_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_1_memBuffer_memory_ENA =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOA ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOB ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_meta_ff
  assign pktBuff_1_meta_ff_D_IN = meta_ff_1_1_D_OUT ;
  assign pktBuff_1_meta_ff_ENQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign pktBuff_1_meta_ff_DEQ = MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_1_pktBuff
  assign pktBuff_1_pktBuff_readServer_readReq_put =
	     pktBuff_1_readReqFifo_D_OUT ;
  assign pktBuff_1_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_1_pktBuff_writeServer_enq_v =
	     hostchan_0_writeDataFifo_D_OUT ;
  assign pktBuff_1_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_16 &&
	     !EN_rxchan_0_writeClient_deq ;
  assign pktBuff_1_pktBuff_EN_readServer_readData_get =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readLen_get =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readReq_put =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_1_readDataFifo
  assign pktBuff_1_readDataFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readData_get ;
  assign pktBuff_1_readDataFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readLenFifo
  assign pktBuff_1_readLenFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readLen_get ;
  assign pktBuff_1_readLenFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_readLenFifo_DEQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readReqFifo
  assign pktBuff_1_readReqFifo_D_IN = pktBuff_1_readLenFifo_D_OUT ;
  assign pktBuff_1_readReqFifo_ENQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readReqFifo_DEQ =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_writeDataFifo
  assign pktBuff_1_writeDataFifo_D_IN = pktBuff_1_readDataFifo_D_OUT ;
  assign pktBuff_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_writeDataFifo_DEQ =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign pktBuff_1_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoEop
  assign pktBuff_2_fifoEop_D_IN = newPacketLen__h116713 ;
  assign pktBuff_2_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_2_enq_stage1 &&
	     pktBuff_2_fifoWriteData_D_OUT[0] ;
  assign pktBuff_2_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_2_commit_packet ;
  assign pktBuff_2_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoLen
  assign pktBuff_2_fifoLen_D_IN = pktBuff_2_fifoEop_D_OUT ;
  assign pktBuff_2_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_2_commit_packet ;
  assign pktBuff_2_fifoLen_DEQ =
	     pktBuff_2_fifoLen_EMPTY_N && ringToMac_2_readLenFifo_FULL_N ;
  assign pktBuff_2_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoReadData
  assign pktBuff_2_fifoReadData_D_IN =
	     pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_2_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ;
  assign pktBuff_2_fifoReadData_DEQ =
	     pktBuff_2_fifoReadData_EMPTY_N &&
	     ringToMac_2_readDataFifo_FULL_N ;
  assign pktBuff_2_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoReadReq
  assign pktBuff_2_fifoReadReq_D_IN = ringToMac_2_readReqFifo_D_OUT ;
  assign pktBuff_2_fifoReadReq_ENQ =
	     ringToMac_2_readReqFifo_EMPTY_N && pktBuff_2_fifoReadReq_FULL_N ;
  assign pktBuff_2_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;
  assign pktBuff_2_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_2_fifoWriteData
  assign pktBuff_2_fifoWriteData_D_IN =
	     EN_txchan_2_writeServer_enq ?
	       txchan_2_writeServer_enq_v :
	       gearbox_dn_16_2_dataout_get ;
  assign pktBuff_2_fifoWriteData_ENQ =
	     EN_txchan_2_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_71 &&
	     !EN_txchan_2_writeServer_enq ;
  assign pktBuff_2_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_2_incomingReqs
  assign pktBuff_2_incomingReqs_D_IN =
	     { pktBuff_2_wrCurrPtr, pktBuff_2_fifoWriteData_D_OUT } ;
  assign pktBuff_2_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_2_enq_stage1 ;
  assign pktBuff_2_incomingReqs_DEQ =
	     pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_2_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_2_memBuffer_memory
  assign pktBuff_2_memBuffer_memory_ADDRA =
	     pktBuff_2_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_2_memBuffer_memory_ADDRB = pktBuff_2_rdCurrPtr ;
  assign pktBuff_2_memBuffer_memory_DIA =
	     pktBuff_2_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_2_memBuffer_memory_DIB =
	     MUX_pktBuff_2_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_2_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_2_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_2_memBuffer_memory_ENA =
	     pktBuff_2_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_2_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_2_dequeue_first_beat ;

  // submodule pktBuff_2_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_2_memBuffer_memory_DOA ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_2_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_2_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_2_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_2_memBuffer_memory_DOB ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_2_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_2_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_2_dequeue_next_beat &&
	     !pktBuff_2_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_2_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_2_meta_ff
  assign pktBuff_2_meta_ff_D_IN = meta_ff_2_1_D_OUT ;
  assign pktBuff_2_meta_ff_ENQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign pktBuff_2_meta_ff_DEQ = MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_2_pktBuff
  assign pktBuff_2_pktBuff_readServer_readReq_put =
	     pktBuff_2_readReqFifo_D_OUT ;
  assign pktBuff_2_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_2_pktBuff_writeServer_enq_v =
	     hostchan_1_writeDataFifo_D_OUT ;
  assign pktBuff_2_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_17 &&
	     !EN_rxchan_1_writeClient_deq ;
  assign pktBuff_2_pktBuff_EN_readServer_readData_get =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readLen_get =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readReq_put =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_2_readDataFifo
  assign pktBuff_2_readDataFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readData_get ;
  assign pktBuff_2_readDataFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readLenFifo
  assign pktBuff_2_readLenFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readLen_get ;
  assign pktBuff_2_readLenFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_readLenFifo_DEQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readReqFifo
  assign pktBuff_2_readReqFifo_D_IN = pktBuff_2_readLenFifo_D_OUT ;
  assign pktBuff_2_readReqFifo_ENQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readReqFifo_DEQ =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_writeDataFifo
  assign pktBuff_2_writeDataFifo_D_IN = pktBuff_2_readDataFifo_D_OUT ;
  assign pktBuff_2_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_writeDataFifo_DEQ =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign pktBuff_2_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoEop
  assign pktBuff_3_fifoEop_D_IN = newPacketLen__h135347 ;
  assign pktBuff_3_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_3_enq_stage1 &&
	     pktBuff_3_fifoWriteData_D_OUT[0] ;
  assign pktBuff_3_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_3_commit_packet ;
  assign pktBuff_3_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoLen
  assign pktBuff_3_fifoLen_D_IN = pktBuff_3_fifoEop_D_OUT ;
  assign pktBuff_3_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_3_commit_packet ;
  assign pktBuff_3_fifoLen_DEQ =
	     pktBuff_3_fifoLen_EMPTY_N && ringToMac_3_readLenFifo_FULL_N ;
  assign pktBuff_3_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoReadData
  assign pktBuff_3_fifoReadData_D_IN =
	     pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_3_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ;
  assign pktBuff_3_fifoReadData_DEQ =
	     pktBuff_3_fifoReadData_EMPTY_N &&
	     ringToMac_3_readDataFifo_FULL_N ;
  assign pktBuff_3_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoReadReq
  assign pktBuff_3_fifoReadReq_D_IN = ringToMac_3_readReqFifo_D_OUT ;
  assign pktBuff_3_fifoReadReq_ENQ =
	     ringToMac_3_readReqFifo_EMPTY_N && pktBuff_3_fifoReadReq_FULL_N ;
  assign pktBuff_3_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;
  assign pktBuff_3_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_3_fifoWriteData
  assign pktBuff_3_fifoWriteData_D_IN =
	     EN_txchan_3_writeServer_enq ?
	       txchan_3_writeServer_enq_v :
	       gearbox_dn_16_3_dataout_get ;
  assign pktBuff_3_fifoWriteData_ENQ =
	     EN_txchan_3_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_72 &&
	     !EN_txchan_3_writeServer_enq ;
  assign pktBuff_3_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_3_incomingReqs
  assign pktBuff_3_incomingReqs_D_IN =
	     { pktBuff_3_wrCurrPtr, pktBuff_3_fifoWriteData_D_OUT } ;
  assign pktBuff_3_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_3_enq_stage1 ;
  assign pktBuff_3_incomingReqs_DEQ =
	     pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_3_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_3_memBuffer_memory
  assign pktBuff_3_memBuffer_memory_ADDRA =
	     pktBuff_3_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_3_memBuffer_memory_ADDRB = pktBuff_3_rdCurrPtr ;
  assign pktBuff_3_memBuffer_memory_DIA =
	     pktBuff_3_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_3_memBuffer_memory_DIB =
	     MUX_pktBuff_3_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_3_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_3_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_3_memBuffer_memory_ENA =
	     pktBuff_3_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_3_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_3_dequeue_first_beat ;

  // submodule pktBuff_3_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_3_memBuffer_memory_DOA ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_3_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_3_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_3_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_3_memBuffer_memory_DOB ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_3_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_3_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_3_dequeue_next_beat &&
	     !pktBuff_3_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_3_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_3_meta_ff
  assign pktBuff_3_meta_ff_D_IN = meta_ff_3_1_D_OUT ;
  assign pktBuff_3_meta_ff_ENQ =
	     modifier_3_RDY_prev_enq && meta_ff_3_1_EMPTY_N &&
	     pktBuff_3_meta_ff_FULL_N ;
  assign pktBuff_3_meta_ff_DEQ = MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_3_pktBuff
  assign pktBuff_3_pktBuff_readServer_readReq_put =
	     pktBuff_3_readReqFifo_D_OUT ;
  assign pktBuff_3_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_3_pktBuff_writeServer_enq_v =
	     hostchan_2_writeDataFifo_D_OUT ;
  assign pktBuff_3_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_18 &&
	     !EN_rxchan_2_writeClient_deq ;
  assign pktBuff_3_pktBuff_EN_readServer_readData_get =
	     pktBuff_3_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_3_readDataFifo_FULL_N ;
  assign pktBuff_3_pktBuff_EN_readServer_readLen_get =
	     pktBuff_3_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_3_readLenFifo_FULL_N ;
  assign pktBuff_3_pktBuff_EN_readServer_readReq_put =
	     pktBuff_3_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_3_readReqFifo_EMPTY_N ;
  assign pktBuff_3_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_3_readDataFifo
  assign pktBuff_3_readDataFifo_D_IN =
	     pktBuff_3_pktBuff_readServer_readData_get ;
  assign pktBuff_3_readDataFifo_ENQ =
	     pktBuff_3_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_3_readDataFifo_FULL_N ;
  assign pktBuff_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress ;
  assign pktBuff_3_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_readLenFifo
  assign pktBuff_3_readLenFifo_D_IN =
	     pktBuff_3_pktBuff_readServer_readLen_get ;
  assign pktBuff_3_readLenFifo_ENQ =
	     pktBuff_3_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_3_readLenFifo_FULL_N ;
  assign pktBuff_3_readLenFifo_DEQ =
	     MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_readReqFifo
  assign pktBuff_3_readReqFifo_D_IN = pktBuff_3_readLenFifo_D_OUT ;
  assign pktBuff_3_readReqFifo_ENQ =
	     MUX_pktBuff_3_readStarted_write_1__SEL_2 ;
  assign pktBuff_3_readReqFifo_DEQ =
	     pktBuff_3_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_3_readReqFifo_EMPTY_N ;
  assign pktBuff_3_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_3_writeDataFifo
  assign pktBuff_3_writeDataFifo_D_IN = pktBuff_3_readDataFifo_D_OUT ;
  assign pktBuff_3_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_3_packetReadInProgress ;
  assign pktBuff_3_writeDataFifo_DEQ =
	     modifier_3_RDY_writeServer_enq &&
	     pktBuff_3_writeDataFifo_EMPTY_N ;
  assign pktBuff_3_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_meta_ff
  assign pktBuff_4_meta_ff_D_IN = meta_ff_4_1_D_OUT ;
  assign pktBuff_4_meta_ff_ENQ =
	     modifier_4_RDY_prev_enq && meta_ff_4_1_EMPTY_N &&
	     pktBuff_4_meta_ff_FULL_N ;
  assign pktBuff_4_meta_ff_DEQ = MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_4_pktBuff
  assign pktBuff_4_pktBuff_readServer_readReq_put =
	     pktBuff_4_readReqFifo_D_OUT ;
  assign pktBuff_4_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_4_pktBuff_writeServer_enq_v =
	     hostchan_3_writeDataFifo_D_OUT ;
  assign pktBuff_4_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_19 &&
	     !EN_rxchan_3_writeClient_deq ;
  assign pktBuff_4_pktBuff_EN_readServer_readData_get =
	     pktBuff_4_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_4_readDataFifo_FULL_N ;
  assign pktBuff_4_pktBuff_EN_readServer_readLen_get =
	     pktBuff_4_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_4_readLenFifo_FULL_N ;
  assign pktBuff_4_pktBuff_EN_readServer_readReq_put =
	     pktBuff_4_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_4_readReqFifo_EMPTY_N ;
  assign pktBuff_4_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_4_readDataFifo
  assign pktBuff_4_readDataFifo_D_IN =
	     pktBuff_4_pktBuff_readServer_readData_get ;
  assign pktBuff_4_readDataFifo_ENQ =
	     pktBuff_4_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_4_readDataFifo_FULL_N ;
  assign pktBuff_4_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress ;
  assign pktBuff_4_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_readLenFifo
  assign pktBuff_4_readLenFifo_D_IN =
	     pktBuff_4_pktBuff_readServer_readLen_get ;
  assign pktBuff_4_readLenFifo_ENQ =
	     pktBuff_4_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_4_readLenFifo_FULL_N ;
  assign pktBuff_4_readLenFifo_DEQ =
	     MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_readReqFifo
  assign pktBuff_4_readReqFifo_D_IN = pktBuff_4_readLenFifo_D_OUT ;
  assign pktBuff_4_readReqFifo_ENQ =
	     MUX_pktBuff_4_readStarted_write_1__SEL_2 ;
  assign pktBuff_4_readReqFifo_DEQ =
	     pktBuff_4_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_4_readReqFifo_EMPTY_N ;
  assign pktBuff_4_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_4_writeDataFifo
  assign pktBuff_4_writeDataFifo_D_IN = pktBuff_4_readDataFifo_D_OUT ;
  assign pktBuff_4_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_4_packetReadInProgress ;
  assign pktBuff_4_writeDataFifo_DEQ =
	     modifier_4_RDY_writeServer_enq &&
	     pktBuff_4_writeDataFifo_EMPTY_N ;
  assign pktBuff_4_writeDataFifo_CLR = 1'b0 ;

  // submodule pktLenFifo_0
  assign pktLenFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign pktLenFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign pktLenFifo_0_DEQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign pktLenFifo_0_CLR = 1'b0 ;

  // submodule readDataFifo_0
  assign readDataFifo_0_D_IN = pktBuff_0_readServer_readData_get ;
  assign readDataFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign readDataFifo_0_DEQ = WILL_FIRE_RL_packetReadInProgress ;
  assign readDataFifo_0_CLR = 1'b0 ;

  // submodule readLenFifo_0
  assign readLenFifo_0_D_IN = pktBuff_0_readServer_readLen_get ;
  assign readLenFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign readLenFifo_0_DEQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readLenFifo_0_CLR = 1'b0 ;

  // submodule readReqFifo_0
  assign readReqFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign readReqFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readReqFifo_0_DEQ =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign readReqFifo_0_CLR = 1'b0 ;

  // submodule ringToMac_0_readDataFifo
  assign ringToMac_0_readDataFifo_D_IN = pktBuff_0_fifoReadData_D_OUT ;
  assign ringToMac_0_readDataFifo_ENQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign ringToMac_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readLenFifo
  assign ringToMac_0_readLenFifo_D_IN = pktBuff_0_fifoLen_D_OUT ;
  assign ringToMac_0_readLenFifo_ENQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_DEQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readReqFifo
  assign ringToMac_0_readReqFifo_D_IN = ringToMac_0_readLenFifo_D_OUT ;
  assign ringToMac_0_readReqFifo_ENQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readReqFifo_DEQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign ringToMac_0_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_tx_fifo
  assign ringToMac_0_tx_fifo_sD_IN = ringToMac_0_readDataFifo_D_OUT ;
  assign ringToMac_0_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // submodule ringToMac_0_writeMacFifo
  assign ringToMac_0_writeMacFifo_D_IN =
	     ringToMac_0_fifoTxData_read_block ?
	       ((!ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142 &&
		 ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144) ?
		  ringToMac_0_fifoTxData_block1[211:106] :
		  ringToMac_0_fifoTxData_block1[105:0]) :
	       ((!ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133 &&
		 ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135) ?
		  ringToMac_0_fifoTxData_block0[211:106] :
		  ringToMac_0_fifoTxData_block0[105:0]) ;
  assign ringToMac_0_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 !=
	     8'd0 ;
  assign ringToMac_0_writeMacFifo_DEQ = EN_txchan_0_macTx_get ;
  assign ringToMac_0_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readDataFifo
  assign ringToMac_1_readDataFifo_D_IN = pktBuff_1_fifoReadData_D_OUT ;
  assign ringToMac_1_readDataFifo_ENQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign ringToMac_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readLenFifo
  assign ringToMac_1_readLenFifo_D_IN = pktBuff_1_fifoLen_D_OUT ;
  assign ringToMac_1_readLenFifo_ENQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_DEQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readReqFifo
  assign ringToMac_1_readReqFifo_D_IN = ringToMac_1_readLenFifo_D_OUT ;
  assign ringToMac_1_readReqFifo_ENQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readReqFifo_DEQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign ringToMac_1_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_tx_fifo
  assign ringToMac_1_tx_fifo_sD_IN = ringToMac_1_readDataFifo_D_OUT ;
  assign ringToMac_1_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // submodule ringToMac_1_writeMacFifo
  assign ringToMac_1_writeMacFifo_D_IN =
	     ringToMac_1_fifoTxData_read_block ?
	       ((!ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586 &&
		 ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588) ?
		  ringToMac_1_fifoTxData_block1[211:106] :
		  ringToMac_1_fifoTxData_block1[105:0]) :
	       ((!ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577 &&
		 ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579) ?
		  ringToMac_1_fifoTxData_block0[211:106] :
		  ringToMac_1_fifoTxData_block0[105:0]) ;
  assign ringToMac_1_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 !=
	     8'd0 ;
  assign ringToMac_1_writeMacFifo_DEQ = EN_txchan_1_macTx_get ;
  assign ringToMac_1_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readDataFifo
  assign ringToMac_2_readDataFifo_D_IN = pktBuff_2_fifoReadData_D_OUT ;
  assign ringToMac_2_readDataFifo_ENQ =
	     pktBuff_2_fifoReadData_EMPTY_N &&
	     ringToMac_2_readDataFifo_FULL_N ;
  assign ringToMac_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_2_cross_clocking ;
  assign ringToMac_2_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readLenFifo
  assign ringToMac_2_readLenFifo_D_IN = pktBuff_2_fifoLen_D_OUT ;
  assign ringToMac_2_readLenFifo_ENQ =
	     pktBuff_2_fifoLen_EMPTY_N && ringToMac_2_readLenFifo_FULL_N ;
  assign ringToMac_2_readLenFifo_DEQ =
	     ringToMac_2_readLenFifo_EMPTY_N &&
	     ringToMac_2_readReqFifo_FULL_N ;
  assign ringToMac_2_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_readReqFifo
  assign ringToMac_2_readReqFifo_D_IN = ringToMac_2_readLenFifo_D_OUT ;
  assign ringToMac_2_readReqFifo_ENQ =
	     ringToMac_2_readLenFifo_EMPTY_N &&
	     ringToMac_2_readReqFifo_FULL_N ;
  assign ringToMac_2_readReqFifo_DEQ =
	     ringToMac_2_readReqFifo_EMPTY_N && pktBuff_2_fifoReadReq_FULL_N ;
  assign ringToMac_2_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_2_tx_fifo
  assign ringToMac_2_tx_fifo_sD_IN = ringToMac_2_readDataFifo_D_OUT ;
  assign ringToMac_2_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_2_cross_clocking ;
  assign ringToMac_2_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_2_process_incoming_packet ;

  // submodule ringToMac_2_writeMacFifo
  assign ringToMac_2_writeMacFifo_D_IN =
	     ringToMac_2_fifoTxData_read_block ?
	       ((!ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030 &&
		 ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032) ?
		  ringToMac_2_fifoTxData_block1[211:106] :
		  ringToMac_2_fifoTxData_block1[105:0]) :
	       ((!ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021 &&
		 ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023) ?
		  ringToMac_2_fifoTxData_block0[211:106] :
		  ringToMac_2_fifoTxData_block0[105:0]) ;
  assign ringToMac_2_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_2_process_outgoing_packet &&
	     IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 !=
	     8'd0 ;
  assign ringToMac_2_writeMacFifo_DEQ = EN_txchan_2_macTx_get ;
  assign ringToMac_2_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readDataFifo
  assign ringToMac_3_readDataFifo_D_IN = pktBuff_3_fifoReadData_D_OUT ;
  assign ringToMac_3_readDataFifo_ENQ =
	     pktBuff_3_fifoReadData_EMPTY_N &&
	     ringToMac_3_readDataFifo_FULL_N ;
  assign ringToMac_3_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_3_cross_clocking ;
  assign ringToMac_3_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readLenFifo
  assign ringToMac_3_readLenFifo_D_IN = pktBuff_3_fifoLen_D_OUT ;
  assign ringToMac_3_readLenFifo_ENQ =
	     pktBuff_3_fifoLen_EMPTY_N && ringToMac_3_readLenFifo_FULL_N ;
  assign ringToMac_3_readLenFifo_DEQ =
	     ringToMac_3_readLenFifo_EMPTY_N &&
	     ringToMac_3_readReqFifo_FULL_N ;
  assign ringToMac_3_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_readReqFifo
  assign ringToMac_3_readReqFifo_D_IN = ringToMac_3_readLenFifo_D_OUT ;
  assign ringToMac_3_readReqFifo_ENQ =
	     ringToMac_3_readLenFifo_EMPTY_N &&
	     ringToMac_3_readReqFifo_FULL_N ;
  assign ringToMac_3_readReqFifo_DEQ =
	     ringToMac_3_readReqFifo_EMPTY_N && pktBuff_3_fifoReadReq_FULL_N ;
  assign ringToMac_3_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_3_tx_fifo
  assign ringToMac_3_tx_fifo_sD_IN = ringToMac_3_readDataFifo_D_OUT ;
  assign ringToMac_3_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_3_cross_clocking ;
  assign ringToMac_3_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_3_process_incoming_packet ;

  // submodule ringToMac_3_writeMacFifo
  assign ringToMac_3_writeMacFifo_D_IN =
	     ringToMac_3_fifoTxData_read_block ?
	       ((!ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474 &&
		 ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476) ?
		  ringToMac_3_fifoTxData_block1[211:106] :
		  ringToMac_3_fifoTxData_block1[105:0]) :
	       ((!ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465 &&
		 ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467) ?
		  ringToMac_3_fifoTxData_block0[211:106] :
		  ringToMac_3_fifoTxData_block0[105:0]) ;
  assign ringToMac_3_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_3_process_outgoing_packet &&
	     IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 !=
	     8'd0 ;
  assign ringToMac_3_writeMacFifo_DEQ = EN_txchan_3_macTx_get ;
  assign ringToMac_3_writeMacFifo_CLR = 1'b0 ;

  // submodule verbose_ff_0
  assign verbose_ff_0_D_IN =
	     EN_hostchan_0_verbose_enq ?
	       hostchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_ENQ = EN_hostchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_DEQ = verbose_ff_0_EMPTY_N ;
  assign verbose_ff_0_CLR = 1'b0 ;

  // submodule verbose_ff_0_1
  assign verbose_ff_0_1_D_IN =
	     EN_rxchan_0_verbose_enq ?
	       rxchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_1_ENQ = EN_rxchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_1_DEQ = verbose_ff_0_1_EMPTY_N ;
  assign verbose_ff_0_1_CLR = 1'b0 ;

  // submodule verbose_ff_0_2
  assign verbose_ff_0_2_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_0_2_ENQ = EN_set_verbosity ;
  assign verbose_ff_0_2_DEQ = verbose_ff_0_2_EMPTY_N ;
  assign verbose_ff_0_2_CLR = 1'b0 ;

  // submodule verbose_ff_0_3
  assign verbose_ff_0_3_D_IN =
	     EN_txchan_0_verbose_enq ?
	       txchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_3_ENQ = EN_txchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_3_DEQ = 1'b0 ;
  assign verbose_ff_0_3_CLR = 1'b0 ;

  // submodule verbose_ff_1
  assign verbose_ff_1_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_1_verbose_enq_v ;
  assign verbose_ff_1_ENQ = EN_set_verbosity || EN_rxchan_1_verbose_enq ;
  assign verbose_ff_1_DEQ = verbose_ff_1_EMPTY_N ;
  assign verbose_ff_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_1
  assign verbose_ff_1_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_1_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_1_1_DEQ = verbose_ff_1_1_EMPTY_N ;
  assign verbose_ff_1_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_2
  assign verbose_ff_1_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_1_verbose_enq_v ;
  assign verbose_ff_1_2_ENQ = EN_set_verbosity || EN_txchan_1_verbose_enq ;
  assign verbose_ff_1_2_DEQ = 1'b0 ;
  assign verbose_ff_1_2_CLR = 1'b0 ;

  // submodule verbose_ff_2
  assign verbose_ff_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_2_verbose_enq_v ;
  assign verbose_ff_2_ENQ = EN_set_verbosity || EN_rxchan_2_verbose_enq ;
  assign verbose_ff_2_DEQ = verbose_ff_2_EMPTY_N ;
  assign verbose_ff_2_CLR = 1'b0 ;

  // submodule verbose_ff_2_1
  assign verbose_ff_2_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_2_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_2_1_DEQ = verbose_ff_2_1_EMPTY_N ;
  assign verbose_ff_2_1_CLR = 1'b0 ;

  // submodule verbose_ff_2_2
  assign verbose_ff_2_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_2_verbose_enq_v ;
  assign verbose_ff_2_2_ENQ = EN_set_verbosity || EN_txchan_2_verbose_enq ;
  assign verbose_ff_2_2_DEQ = 1'b0 ;
  assign verbose_ff_2_2_CLR = 1'b0 ;

  // submodule verbose_ff_3
  assign verbose_ff_3_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_3_verbose_enq_v ;
  assign verbose_ff_3_ENQ = EN_set_verbosity || EN_rxchan_3_verbose_enq ;
  assign verbose_ff_3_DEQ = verbose_ff_3_EMPTY_N ;
  assign verbose_ff_3_CLR = 1'b0 ;

  // submodule verbose_ff_3_1
  assign verbose_ff_3_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_3_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_3_1_DEQ = verbose_ff_3_1_EMPTY_N ;
  assign verbose_ff_3_1_CLR = 1'b0 ;

  // submodule verbose_ff_3_2
  assign verbose_ff_3_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_3_verbose_enq_v ;
  assign verbose_ff_3_2_ENQ = EN_set_verbosity || EN_txchan_3_verbose_enq ;
  assign verbose_ff_3_2_DEQ = 1'b0 ;
  assign verbose_ff_3_2_CLR = 1'b0 ;

  // submodule verbose_ff_4
  assign verbose_ff_4_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_4_ENQ = EN_set_verbosity ;
  assign verbose_ff_4_DEQ = verbose_ff_4_EMPTY_N ;
  assign verbose_ff_4_CLR = 1'b0 ;

  // submodule writeDataFifo_0
  assign writeDataFifo_0_D_IN = readDataFifo_0_D_OUT ;
  assign writeDataFifo_0_ENQ = WILL_FIRE_RL_packetReadInProgress ;
  assign writeDataFifo_0_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_15 &&
	     !EN_hostchan_0_writeClient_deq ||
	     EN_hostchan_0_writeClient_deq ;
  assign writeDataFifo_0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_lower_f
  assign xbar_lower_lower_lower_f_D_IN = 610'h0 ;
  assign xbar_lower_lower_lower_f_ENQ = 1'b0 ;
  assign xbar_lower_lower_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 ;
  assign xbar_lower_lower_lower_f_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fi0
  assign xbar_lower_lower_merges_1_fi0_D_IN = xbar_lower_lower_lower_f_D_OUT ;
  assign xbar_lower_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	     xbar_lower_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      xbar_lower_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ;
  assign xbar_lower_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fi1
  assign xbar_lower_lower_merges_1_fi1_D_IN = xbar_lower_lower_upper_f_D_OUT ;
  assign xbar_lower_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route &&
	     xbar_lower_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] &&
	      xbar_lower_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_1_fo
  always@(MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty or
	  xbar_lower_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty or
	  xbar_lower_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      MUX_xbar_lower_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      xbar_lower_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty:
	  xbar_lower_lower_merges_1_fo_D_IN =
	      xbar_lower_lower_merges_1_fi1_D_OUT;
      default: xbar_lower_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	     (xbar_lower_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_lower_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_3 ;
  assign xbar_lower_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fi0
  assign xbar_lower_lower_merges_fi0_D_IN = xbar_lower_lower_upper_f_D_OUT ;
  assign xbar_lower_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route &&
	     !xbar_lower_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      !xbar_lower_lower_merges_routeFrom[0] ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      xbar_lower_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ;
  assign xbar_lower_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fi1
  assign xbar_lower_lower_merges_fi1_D_IN = xbar_lower_lower_lower_f_D_OUT ;
  assign xbar_lower_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	     !xbar_lower_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] &&
	      xbar_lower_lower_merges_routeFrom[0] ||
	      !xbar_lower_lower_merges_routeFrom[1] &&
	      !xbar_lower_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;
  assign xbar_lower_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_lower_merges_fo
  always@(MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty or
	  xbar_lower_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty or
	  xbar_lower_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_lower_merges_fo_enq_1__SEL_1:
	  xbar_lower_lower_merges_fo_D_IN =
	      MUX_xbar_lower_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty:
	  xbar_lower_lower_merges_fo_D_IN = xbar_lower_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty:
	  xbar_lower_lower_merges_fo_D_IN = xbar_lower_lower_merges_fi1_D_OUT;
      default: xbar_lower_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	     (xbar_lower_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173) ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_lower_merges_fi0_is_empty ;
  assign xbar_lower_lower_merges_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_2 ;
  assign xbar_lower_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_lower_upper_f
  assign xbar_lower_lower_upper_f_D_IN = 610'h0 ;
  assign xbar_lower_lower_upper_f_ENQ = 1'b0 ;
  assign xbar_lower_lower_upper_f_DEQ = WILL_FIRE_RL_xbar_lower_lower_route ;
  assign xbar_lower_lower_upper_f_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi0
  assign xbar_lower_merges_1_fi0_D_IN = xbar_lower_upper_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     !xbar_lower_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ;
  assign xbar_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi1
  assign xbar_lower_merges_1_fi1_D_IN = xbar_lower_lower_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_3 &&
	     !xbar_lower_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fo
  always@(MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  xbar_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty or
	  xbar_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_merges_1_fo_D_IN =
	      MUX_xbar_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi1_D_OUT;
      default: xbar_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fo_DEQ =
	     xbar_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_merges_1_fo_D_OUT[580] ?
		xbar_merges_5_fi0_FULL_N :
		xbar_merges_1_fi1_FULL_N) ;
  assign xbar_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fi0
  assign xbar_lower_merges_2_fi0_D_IN = xbar_lower_lower_merges_fo_D_OUT ;
  assign xbar_lower_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_2 &&
	     xbar_lower_lower_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      !xbar_lower_merges_2_routeFrom[0] ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      xbar_lower_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ;
  assign xbar_lower_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fi1
  assign xbar_lower_merges_2_fi1_D_IN = xbar_lower_upper_merges_fo_D_OUT ;
  assign xbar_lower_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route &&
	     xbar_lower_upper_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] &&
	      xbar_lower_merges_2_routeFrom[0] ||
	      !xbar_lower_merges_2_routeFrom[1] &&
	      !xbar_lower_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;
  assign xbar_lower_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_2_fo
  always@(MUX_xbar_lower_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty or
	  xbar_lower_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty or
	  xbar_lower_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_2_fo_enq_1__SEL_1:
	  xbar_lower_merges_2_fo_D_IN =
	      MUX_xbar_lower_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty:
	  xbar_lower_merges_2_fo_D_IN = xbar_lower_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty:
	  xbar_lower_merges_2_fo_D_IN = xbar_lower_merges_2_fi1_D_OUT;
      default: xbar_lower_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	     (xbar_lower_merges_2_routeFrom[1] ||
	      IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495) ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_2_fi0_is_empty ;
  assign xbar_lower_merges_2_fo_DEQ = WILL_FIRE_RL_xbar_route_6 ;
  assign xbar_lower_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fi0
  assign xbar_lower_merges_3_fi0_D_IN = xbar_lower_lower_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_3 &&
	     xbar_lower_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      !xbar_lower_merges_3_routeFrom[0] ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      xbar_lower_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ;
  assign xbar_lower_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fi1
  assign xbar_lower_merges_3_fi1_D_IN = xbar_lower_upper_merges_1_fo_D_OUT ;
  assign xbar_lower_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     xbar_lower_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_lower_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] &&
	      xbar_lower_merges_3_routeFrom[0] ||
	      !xbar_lower_merges_3_routeFrom[1] &&
	      !xbar_lower_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;
  assign xbar_lower_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_3_fo
  always@(MUX_xbar_lower_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty or
	  xbar_lower_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty or
	  xbar_lower_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_3_fo_enq_1__SEL_1:
	  xbar_lower_merges_3_fo_D_IN =
	      MUX_xbar_lower_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty:
	  xbar_lower_merges_3_fo_D_IN = xbar_lower_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty:
	  xbar_lower_merges_3_fo_D_IN = xbar_lower_merges_3_fi1_D_OUT;
      default: xbar_lower_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	     (xbar_lower_merges_3_routeFrom[1] ||
	      IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570) ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_3_fi0_is_empty ;
  assign xbar_lower_merges_3_fo_DEQ = WILL_FIRE_RL_xbar_route_7 ;
  assign xbar_lower_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi0
  assign xbar_lower_merges_fi0_D_IN = xbar_lower_upper_merges_fo_D_OUT ;
  assign xbar_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route &&
	     !xbar_lower_upper_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ;
  assign xbar_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi1
  assign xbar_lower_merges_fi1_D_IN = xbar_lower_lower_merges_fo_D_OUT ;
  assign xbar_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_2 &&
	     !xbar_lower_lower_merges_fo_D_OUT[579] ;
  assign xbar_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fo
  always@(MUX_xbar_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  xbar_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty or
	  xbar_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fo_enq_1__SEL_1:
	  xbar_lower_merges_fo_D_IN = MUX_xbar_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi1_D_OUT;
      default: xbar_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fo_DEQ =
	     xbar_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_merges_fo_D_OUT[580] ?
		xbar_merges_4_fi0_FULL_N :
		xbar_merges_fi1_FULL_N) ;
  assign xbar_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_lower_f
  assign xbar_lower_upper_lower_f_D_IN = 610'h0 ;
  assign xbar_lower_upper_lower_f_ENQ = 1'b0 ;
  assign xbar_lower_upper_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 ;
  assign xbar_lower_upper_lower_f_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fi0
  assign xbar_lower_upper_merges_1_fi0_D_IN = xbar_lower_upper_lower_f_D_OUT ;
  assign xbar_lower_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	     xbar_lower_upper_lower_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      !xbar_lower_upper_merges_1_routeFrom[0] ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      xbar_lower_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ;
  assign xbar_lower_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fi1
  assign xbar_lower_upper_merges_1_fi1_D_IN = xbar_lower_upper_upper_f_D_OUT ;
  assign xbar_lower_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route &&
	     xbar_lower_upper_upper_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] &&
	      xbar_lower_upper_merges_1_routeFrom[0] ||
	      !xbar_lower_upper_merges_1_routeFrom[1] &&
	      !xbar_lower_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;
  assign xbar_lower_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_1_fo
  always@(MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty or
	  xbar_lower_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty or
	  xbar_lower_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      MUX_xbar_lower_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      xbar_lower_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty:
	  xbar_lower_upper_merges_1_fo_D_IN =
	      xbar_lower_upper_merges_1_fi1_D_OUT;
      default: xbar_lower_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	     (xbar_lower_upper_merges_1_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_1_fi0_is_empty ;
  assign xbar_lower_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_lower_route_1 ;
  assign xbar_lower_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fi0
  assign xbar_lower_upper_merges_fi0_D_IN = xbar_lower_upper_upper_f_D_OUT ;
  assign xbar_lower_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route &&
	     !xbar_lower_upper_upper_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      !xbar_lower_upper_merges_routeFrom[0] ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      xbar_lower_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ;
  assign xbar_lower_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fi1
  assign xbar_lower_upper_merges_fi1_D_IN = xbar_lower_upper_lower_f_D_OUT ;
  assign xbar_lower_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	     !xbar_lower_upper_lower_f_D_OUT[578] ;
  assign xbar_lower_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] &&
	      xbar_lower_upper_merges_routeFrom[0] ||
	      !xbar_lower_upper_merges_routeFrom[1] &&
	      !xbar_lower_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;
  assign xbar_lower_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_upper_merges_fo
  always@(MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty or
	  xbar_lower_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty or
	  xbar_lower_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_upper_merges_fo_enq_1__SEL_1:
	  xbar_lower_upper_merges_fo_D_IN =
	      MUX_xbar_lower_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty:
	  xbar_lower_upper_merges_fo_D_IN = xbar_lower_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty:
	  xbar_lower_upper_merges_fo_D_IN = xbar_lower_upper_merges_fi1_D_OUT;
      default: xbar_lower_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	     (xbar_lower_upper_merges_routeFrom[1] ||
	      IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001) ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_upper_merges_fi0_is_empty ;
  assign xbar_lower_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_lower_route ;
  assign xbar_lower_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_upper_f
  assign xbar_lower_upper_upper_f_D_IN =
	     input_queues_4_readServer_readData_get ;
  assign xbar_lower_upper_upper_f_ENQ =
	     input_queues_4_RDY_readServer_readData_get &&
	     xbar_lower_upper_upper_f_FULL_N ;
  assign xbar_lower_upper_upper_f_DEQ = WILL_FIRE_RL_xbar_lower_upper_route ;
  assign xbar_lower_upper_upper_f_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi0
  assign xbar_merges_1_fi0_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && !xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ;
  assign xbar_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi1
  assign xbar_merges_1_fi1_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && !xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_1_fo
  always@(MUX_xbar_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  xbar_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty or xbar_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fo_enq_1__SEL_1:
	  xbar_merges_1_fo_D_IN = MUX_xbar_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi1_D_OUT;
      default: xbar_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fo_DEQ =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign xbar_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi0
  assign xbar_merges_2_fi0_D_IN = xbar_upper_merges_2_fo_D_OUT ;
  assign xbar_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && !xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ;
  assign xbar_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi1
  assign xbar_merges_2_fi1_D_IN = xbar_lower_merges_2_fo_D_OUT ;
  assign xbar_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && !xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_2_fo
  always@(MUX_xbar_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  xbar_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty or xbar_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fo_enq_1__SEL_1:
	  xbar_merges_2_fo_D_IN = MUX_xbar_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi1_D_OUT;
      default: xbar_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fo_DEQ =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign xbar_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi0
  assign xbar_merges_3_fi0_D_IN = xbar_upper_merges_3_fo_D_OUT ;
  assign xbar_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && !xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ;
  assign xbar_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi1
  assign xbar_merges_3_fi1_D_IN = xbar_lower_merges_3_fo_D_OUT ;
  assign xbar_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && !xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_3_fo
  always@(MUX_xbar_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  xbar_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty or xbar_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fo_enq_1__SEL_1:
	  xbar_merges_3_fo_D_IN = MUX_xbar_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi1_D_OUT;
      default: xbar_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fo_DEQ =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign xbar_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_merges_4_fi0
  assign xbar_merges_4_fi0_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_4_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580] ;
  assign xbar_merges_4_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] && !xbar_merges_4_routeFrom[0] ||
	      !xbar_merges_4_routeFrom[1] && xbar_merges_4_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ;
  assign xbar_merges_4_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_4_fi1
  assign xbar_merges_4_fi1_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_4_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580] ;
  assign xbar_merges_4_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] && xbar_merges_4_routeFrom[0] ||
	      !xbar_merges_4_routeFrom[1] && !xbar_merges_4_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;
  assign xbar_merges_4_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_4_fo
  always@(MUX_xbar_merges_4_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_4_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_4_fi1_is_empty or
	  xbar_merges_4_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_4_fi0_is_empty or xbar_merges_4_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_4_fo_enq_1__SEL_1:
	  xbar_merges_4_fo_D_IN = MUX_xbar_merges_4_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_4_fi1_is_empty:
	  xbar_merges_4_fo_D_IN = xbar_merges_4_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_4_fi0_is_empty:
	  xbar_merges_4_fo_D_IN = xbar_merges_4_fi1_D_OUT;
      default: xbar_merges_4_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_4_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	     (xbar_merges_4_routeFrom[1] ||
	      IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989) ||
	     WILL_FIRE_RL_xbar_merges_4_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_4_fi0_is_empty ;
  assign xbar_merges_4_fo_DEQ =
	     output_queues_4_RDY_writeServer_enq && xbar_merges_4_fo_EMPTY_N ;
  assign xbar_merges_4_fo_CLR = 1'b0 ;

  // submodule xbar_merges_5_fi0
  assign xbar_merges_5_fi0_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_5_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_5_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] && !xbar_merges_5_routeFrom[0] ||
	      !xbar_merges_5_routeFrom[1] && xbar_merges_5_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ;
  assign xbar_merges_5_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_5_fi1
  assign xbar_merges_5_fi1_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_5_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580] ;
  assign xbar_merges_5_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] && xbar_merges_5_routeFrom[0] ||
	      !xbar_merges_5_routeFrom[1] && !xbar_merges_5_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;
  assign xbar_merges_5_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_5_fo
  always@(MUX_xbar_merges_5_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_5_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_5_fi1_is_empty or
	  xbar_merges_5_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_5_fi0_is_empty or xbar_merges_5_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_5_fo_enq_1__SEL_1:
	  xbar_merges_5_fo_D_IN = MUX_xbar_merges_5_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_5_fi1_is_empty:
	  xbar_merges_5_fo_D_IN = xbar_merges_5_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_5_fi0_is_empty:
	  xbar_merges_5_fo_D_IN = xbar_merges_5_fi1_D_OUT;
      default: xbar_merges_5_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_5_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	     (xbar_merges_5_routeFrom[1] ||
	      IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064) ||
	     WILL_FIRE_RL_xbar_merges_5_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_5_fi0_is_empty ;
  assign xbar_merges_5_fo_DEQ =
	     output_queues_5_RDY_writeServer_enq && xbar_merges_5_fo_EMPTY_N ;
  assign xbar_merges_5_fo_CLR = 1'b0 ;

  // submodule xbar_merges_6_fi0
  assign xbar_merges_6_fi0_D_IN = xbar_lower_merges_2_fo_D_OUT ;
  assign xbar_merges_6_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_6_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] && !xbar_merges_6_routeFrom[0] ||
	      !xbar_merges_6_routeFrom[1] && xbar_merges_6_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ;
  assign xbar_merges_6_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_6_fi1
  assign xbar_merges_6_fi1_D_IN = xbar_upper_merges_2_fo_D_OUT ;
  assign xbar_merges_6_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580] ;
  assign xbar_merges_6_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] && xbar_merges_6_routeFrom[0] ||
	      !xbar_merges_6_routeFrom[1] && !xbar_merges_6_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;
  assign xbar_merges_6_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_6_fo
  always@(MUX_xbar_merges_6_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_6_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_6_fi1_is_empty or
	  xbar_merges_6_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_6_fi0_is_empty or xbar_merges_6_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_6_fo_enq_1__SEL_1:
	  xbar_merges_6_fo_D_IN = MUX_xbar_merges_6_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_6_fi1_is_empty:
	  xbar_merges_6_fo_D_IN = xbar_merges_6_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_6_fi0_is_empty:
	  xbar_merges_6_fo_D_IN = xbar_merges_6_fi1_D_OUT;
      default: xbar_merges_6_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_6_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	     (xbar_merges_6_routeFrom[1] ||
	      IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139) ||
	     WILL_FIRE_RL_xbar_merges_6_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_6_fi0_is_empty ;
  assign xbar_merges_6_fo_DEQ =
	     output_queues_6_RDY_writeServer_enq && xbar_merges_6_fo_EMPTY_N ;
  assign xbar_merges_6_fo_CLR = 1'b0 ;

  // submodule xbar_merges_7_fi0
  assign xbar_merges_7_fi0_D_IN = xbar_lower_merges_3_fo_D_OUT ;
  assign xbar_merges_7_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_7_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] && !xbar_merges_7_routeFrom[0] ||
	      !xbar_merges_7_routeFrom[1] && xbar_merges_7_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ;
  assign xbar_merges_7_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_7_fi1
  assign xbar_merges_7_fi1_D_IN = xbar_upper_merges_3_fo_D_OUT ;
  assign xbar_merges_7_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580] ;
  assign xbar_merges_7_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] && xbar_merges_7_routeFrom[0] ||
	      !xbar_merges_7_routeFrom[1] && !xbar_merges_7_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;
  assign xbar_merges_7_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_7_fo
  always@(MUX_xbar_merges_7_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_7_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_7_fi1_is_empty or
	  xbar_merges_7_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_7_fi0_is_empty or xbar_merges_7_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_7_fo_enq_1__SEL_1:
	  xbar_merges_7_fo_D_IN = MUX_xbar_merges_7_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_7_fi1_is_empty:
	  xbar_merges_7_fo_D_IN = xbar_merges_7_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_7_fi0_is_empty:
	  xbar_merges_7_fo_D_IN = xbar_merges_7_fi1_D_OUT;
      default: xbar_merges_7_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_7_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	     (xbar_merges_7_routeFrom[1] ||
	      IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214) ||
	     WILL_FIRE_RL_xbar_merges_7_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_7_fi0_is_empty ;
  assign xbar_merges_7_fo_DEQ =
	     output_queues_7_RDY_writeServer_enq && xbar_merges_7_fo_EMPTY_N ;
  assign xbar_merges_7_fo_CLR = 1'b0 ;

  // submodule xbar_merges_fi0
  assign xbar_merges_fi0_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580] ;
  assign xbar_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && !xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ;
  assign xbar_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_fi1
  assign xbar_merges_fi1_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580] ;
  assign xbar_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && !xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_fo
  always@(MUX_xbar_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  xbar_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty or xbar_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fo_enq_1__SEL_1:
	  xbar_merges_fo_D_IN = MUX_xbar_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi1_D_OUT;
      default: xbar_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fo_DEQ =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign xbar_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_lower_f
  assign xbar_upper_lower_lower_f_D_IN =
	     input_queues_3_readServer_readData_get ;
  assign xbar_upper_lower_lower_f_ENQ =
	     input_queues_3_RDY_readServer_readData_get &&
	     xbar_upper_lower_lower_f_FULL_N ;
  assign xbar_upper_lower_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 ;
  assign xbar_upper_lower_lower_f_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fi0
  assign xbar_upper_lower_merges_1_fi0_D_IN = xbar_upper_lower_lower_f_D_OUT ;
  assign xbar_upper_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	     xbar_upper_lower_lower_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      !xbar_upper_lower_merges_1_routeFrom[0] ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      xbar_upper_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ;
  assign xbar_upper_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fi1
  assign xbar_upper_lower_merges_1_fi1_D_IN = xbar_upper_lower_upper_f_D_OUT ;
  assign xbar_upper_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route &&
	     xbar_upper_lower_upper_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] &&
	      xbar_upper_lower_merges_1_routeFrom[0] ||
	      !xbar_upper_lower_merges_1_routeFrom[1] &&
	      !xbar_upper_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;
  assign xbar_upper_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_1_fo
  always@(MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty or
	  xbar_upper_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty or
	  xbar_upper_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      MUX_xbar_upper_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      xbar_upper_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty:
	  xbar_upper_lower_merges_1_fo_D_IN =
	      xbar_upper_lower_merges_1_fi1_D_OUT;
      default: xbar_upper_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	     (xbar_upper_lower_merges_1_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_1_fi0_is_empty ;
  assign xbar_upper_lower_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_3 ;
  assign xbar_upper_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fi0
  assign xbar_upper_lower_merges_fi0_D_IN = xbar_upper_lower_upper_f_D_OUT ;
  assign xbar_upper_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route &&
	     !xbar_upper_lower_upper_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      !xbar_upper_lower_merges_routeFrom[0] ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      xbar_upper_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ;
  assign xbar_upper_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fi1
  assign xbar_upper_lower_merges_fi1_D_IN = xbar_upper_lower_lower_f_D_OUT ;
  assign xbar_upper_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	     !xbar_upper_lower_lower_f_D_OUT[578] ;
  assign xbar_upper_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] &&
	      xbar_upper_lower_merges_routeFrom[0] ||
	      !xbar_upper_lower_merges_routeFrom[1] &&
	      !xbar_upper_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;
  assign xbar_upper_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_lower_merges_fo
  always@(MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty or
	  xbar_upper_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty or
	  xbar_upper_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_lower_merges_fo_enq_1__SEL_1:
	  xbar_upper_lower_merges_fo_D_IN =
	      MUX_xbar_upper_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty:
	  xbar_upper_lower_merges_fo_D_IN = xbar_upper_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty:
	  xbar_upper_lower_merges_fo_D_IN = xbar_upper_lower_merges_fi1_D_OUT;
      default: xbar_upper_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	     (xbar_upper_lower_merges_routeFrom[1] ||
	      IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483) ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_lower_merges_fi0_is_empty ;
  assign xbar_upper_lower_merges_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_2 ;
  assign xbar_upper_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_upper_f
  assign xbar_upper_lower_upper_f_D_IN =
	     input_queues_2_readServer_readData_get ;
  assign xbar_upper_lower_upper_f_ENQ =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_upper_lower_upper_f_FULL_N ;
  assign xbar_upper_lower_upper_f_DEQ = WILL_FIRE_RL_xbar_upper_lower_route ;
  assign xbar_upper_lower_upper_f_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi0
  assign xbar_upper_merges_1_fi0_D_IN = xbar_upper_upper_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     !xbar_upper_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ;
  assign xbar_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi1
  assign xbar_upper_merges_1_fi1_D_IN = xbar_upper_lower_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_3 &&
	     !xbar_upper_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fo
  always@(MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  xbar_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty or
	  xbar_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_merges_1_fo_D_IN =
	      MUX_xbar_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi1_D_OUT;
      default: xbar_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_route_1 ;
  assign xbar_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fi0
  assign xbar_upper_merges_2_fi0_D_IN = xbar_upper_lower_merges_fo_D_OUT ;
  assign xbar_upper_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_2 &&
	     xbar_upper_lower_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      !xbar_upper_merges_2_routeFrom[0] ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      xbar_upper_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ;
  assign xbar_upper_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fi1
  assign xbar_upper_merges_2_fi1_D_IN = xbar_upper_upper_merges_fo_D_OUT ;
  assign xbar_upper_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route &&
	     xbar_upper_upper_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] &&
	      xbar_upper_merges_2_routeFrom[0] ||
	      !xbar_upper_merges_2_routeFrom[1] &&
	      !xbar_upper_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;
  assign xbar_upper_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_2_fo
  always@(MUX_xbar_upper_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty or
	  xbar_upper_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty or
	  xbar_upper_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_2_fo_enq_1__SEL_1:
	  xbar_upper_merges_2_fo_D_IN =
	      MUX_xbar_upper_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty:
	  xbar_upper_merges_2_fo_D_IN = xbar_upper_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty:
	  xbar_upper_merges_2_fo_D_IN = xbar_upper_merges_2_fi1_D_OUT;
      default: xbar_upper_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	     (xbar_upper_merges_2_routeFrom[1] ||
	      IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805) ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_2_fi0_is_empty ;
  assign xbar_upper_merges_2_fo_DEQ = WILL_FIRE_RL_xbar_route_2 ;
  assign xbar_upper_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fi0
  assign xbar_upper_merges_3_fi0_D_IN = xbar_upper_lower_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_3 &&
	     xbar_upper_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      !xbar_upper_merges_3_routeFrom[0] ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      xbar_upper_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ;
  assign xbar_upper_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fi1
  assign xbar_upper_merges_3_fi1_D_IN = xbar_upper_upper_merges_1_fo_D_OUT ;
  assign xbar_upper_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     xbar_upper_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_upper_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] &&
	      xbar_upper_merges_3_routeFrom[0] ||
	      !xbar_upper_merges_3_routeFrom[1] &&
	      !xbar_upper_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;
  assign xbar_upper_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_3_fo
  always@(MUX_xbar_upper_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty or
	  xbar_upper_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty or
	  xbar_upper_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_3_fo_enq_1__SEL_1:
	  xbar_upper_merges_3_fo_D_IN =
	      MUX_xbar_upper_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty:
	  xbar_upper_merges_3_fo_D_IN = xbar_upper_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty:
	  xbar_upper_merges_3_fo_D_IN = xbar_upper_merges_3_fi1_D_OUT;
      default: xbar_upper_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	     (xbar_upper_merges_3_routeFrom[1] ||
	      IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880) ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_3_fi0_is_empty ;
  assign xbar_upper_merges_3_fo_DEQ = WILL_FIRE_RL_xbar_route_3 ;
  assign xbar_upper_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi0
  assign xbar_upper_merges_fi0_D_IN = xbar_upper_upper_merges_fo_D_OUT ;
  assign xbar_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route &&
	     !xbar_upper_upper_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ;
  assign xbar_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi1
  assign xbar_upper_merges_fi1_D_IN = xbar_upper_lower_merges_fo_D_OUT ;
  assign xbar_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_2 &&
	     !xbar_upper_lower_merges_fo_D_OUT[579] ;
  assign xbar_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fo
  always@(MUX_xbar_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  xbar_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty or
	  xbar_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fo_enq_1__SEL_1:
	  xbar_upper_merges_fo_D_IN = MUX_xbar_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi1_D_OUT;
      default: xbar_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_route ;
  assign xbar_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_lower_f
  assign xbar_upper_upper_lower_f_D_IN =
	     input_queues_1_readServer_readData_get ;
  assign xbar_upper_upper_lower_f_ENQ =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_upper_lower_f_FULL_N ;
  assign xbar_upper_upper_lower_f_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 ;
  assign xbar_upper_upper_lower_f_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fi0
  assign xbar_upper_upper_merges_1_fi0_D_IN = xbar_upper_upper_lower_f_D_OUT ;
  assign xbar_upper_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	     xbar_upper_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      xbar_upper_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ;
  assign xbar_upper_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fi1
  assign xbar_upper_upper_merges_1_fi1_D_IN = xbar_upper_upper_upper_f_D_OUT ;
  assign xbar_upper_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route &&
	     xbar_upper_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] &&
	      xbar_upper_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_1_fo
  always@(MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty or
	  xbar_upper_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty or
	  xbar_upper_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      MUX_xbar_upper_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      xbar_upper_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty:
	  xbar_upper_upper_merges_1_fo_D_IN =
	      xbar_upper_upper_merges_1_fi1_D_OUT;
      default: xbar_upper_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	     (xbar_upper_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_upper_route_1 ;
  assign xbar_upper_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fi0
  assign xbar_upper_upper_merges_fi0_D_IN = xbar_upper_upper_upper_f_D_OUT ;
  assign xbar_upper_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route &&
	     !xbar_upper_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      !xbar_upper_upper_merges_routeFrom[0] ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      xbar_upper_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ;
  assign xbar_upper_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fi1
  assign xbar_upper_upper_merges_fi1_D_IN = xbar_upper_upper_lower_f_D_OUT ;
  assign xbar_upper_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	     !xbar_upper_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] &&
	      xbar_upper_upper_merges_routeFrom[0] ||
	      !xbar_upper_upper_merges_routeFrom[1] &&
	      !xbar_upper_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;
  assign xbar_upper_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_upper_merges_fo
  always@(MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty or
	  xbar_upper_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty or
	  xbar_upper_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_upper_merges_fo_enq_1__SEL_1:
	  xbar_upper_upper_merges_fo_D_IN =
	      MUX_xbar_upper_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty:
	  xbar_upper_upper_merges_fo_D_IN = xbar_upper_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty:
	  xbar_upper_upper_merges_fo_D_IN = xbar_upper_upper_merges_fi1_D_OUT;
      default: xbar_upper_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	     (xbar_upper_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309) ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_upper_merges_fi0_is_empty ;
  assign xbar_upper_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_upper_route ;
  assign xbar_upper_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_upper_f
  assign xbar_upper_upper_upper_f_D_IN =
	     input_queues_0_readServer_readData_get ;
  assign xbar_upper_upper_upper_f_ENQ =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_upper_f_FULL_N ;
  assign xbar_upper_upper_upper_f_DEQ = WILL_FIRE_RL_xbar_upper_upper_route ;
  assign xbar_upper_upper_upper_f_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 =
	     ringToMac_0_fifoTxData_read_block ? mask__h91679 : mask__h91570 ;
  assign IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 =
	     ringToMac_1_fifoTxData_read_block ?
	       mask__h110313 :
	       mask__h110204 ;
  assign IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 =
	     ringToMac_2_fifoTxData_read_block ?
	       mask__h128947 :
	       mask__h128838 ;
  assign IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 =
	     ringToMac_3_fifoTxData_read_block ?
	       mask__h147581 :
	       mask__h147472 ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5234 =
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		!xbar_lower_lower_merges_1_fi0_D_OUT[1] :
		!xbar_lower_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5235 =
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		xbar_lower_lower_merges_1_fi0_EMPTY_N :
		xbar_lower_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5234 ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248 =
	     xbar_lower_lower_merges_1_fi0HasPrio ?
	       xbar_lower_lower_merges_1_fi0_D_OUT[1] :
	       xbar_lower_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5260 =
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248 &&
	     (xbar_lower_lower_merges_1_fi0HasPrio ?
		!xbar_lower_lower_merges_1_fi0_D_OUT[0] :
		!xbar_lower_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5265 =
	     xbar_lower_lower_merges_1_fi0HasPrio ?
	       xbar_lower_lower_merges_1_fi0_D_OUT[0] :
	       xbar_lower_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_1_routeFrom_222_BIT_ETC___d5255 =
	     xbar_lower_lower_merges_1_routeFrom[0] ?
	       xbar_lower_lower_merges_1_fi1_D_OUT[0] :
	       xbar_lower_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5159 =
	     (xbar_lower_lower_merges_fi0HasPrio ?
		!xbar_lower_lower_merges_fi0_D_OUT[1] :
		!xbar_lower_lower_merges_fi1_D_OUT[1]) ||
	     xbar_lower_lower_merges_fo_FULL_N ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5160 =
	     (xbar_lower_lower_merges_fi0HasPrio ?
		xbar_lower_lower_merges_fi0_EMPTY_N :
		xbar_lower_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5159 ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173 =
	     xbar_lower_lower_merges_fi0HasPrio ?
	       xbar_lower_lower_merges_fi0_D_OUT[1] :
	       xbar_lower_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5185 =
	     IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173 &&
	     (xbar_lower_lower_merges_fi0HasPrio ?
		!xbar_lower_lower_merges_fi0_D_OUT[0] :
		!xbar_lower_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5190 =
	     xbar_lower_lower_merges_fi0HasPrio ?
	       xbar_lower_lower_merges_fi0_D_OUT[0] :
	       xbar_lower_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_lower_merges_routeFrom_147_BIT_0_ETC___d5180 =
	     xbar_lower_lower_merges_routeFrom[0] ?
	       xbar_lower_lower_merges_fi1_D_OUT[0] :
	       xbar_lower_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_NOT_ETC___d5406 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[1] :
		!xbar_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5407 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		xbar_lower_merges_1_fi0_EMPTY_N :
		xbar_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_NOT_ETC___d5406 ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[1] :
	       xbar_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5432 =
	     IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420 &&
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[0] :
		!xbar_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5437 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[0] :
	       xbar_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_1_routeFrom_394_BIT_0_396_ETC___d5427 =
	     xbar_lower_merges_1_routeFrom[0] ?
	       xbar_lower_merges_1_fi1_D_OUT[0] :
	       xbar_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_NOT_ETC___d5481 =
	     (xbar_lower_merges_2_fi0HasPrio ?
		!xbar_lower_merges_2_fi0_D_OUT[1] :
		!xbar_lower_merges_2_fi1_D_OUT[1]) ||
	     xbar_lower_merges_2_fo_FULL_N ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5482 =
	     (xbar_lower_merges_2_fi0HasPrio ?
		xbar_lower_merges_2_fi0_EMPTY_N :
		xbar_lower_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_NOT_ETC___d5481 ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495 =
	     xbar_lower_merges_2_fi0HasPrio ?
	       xbar_lower_merges_2_fi0_D_OUT[1] :
	       xbar_lower_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5507 =
	     IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495 &&
	     (xbar_lower_merges_2_fi0HasPrio ?
		!xbar_lower_merges_2_fi0_D_OUT[0] :
		!xbar_lower_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5512 =
	     xbar_lower_merges_2_fi0HasPrio ?
	       xbar_lower_merges_2_fi0_D_OUT[0] :
	       xbar_lower_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_2_routeFrom_469_BIT_0_471_ETC___d5502 =
	     xbar_lower_merges_2_routeFrom[0] ?
	       xbar_lower_merges_2_fi1_D_OUT[0] :
	       xbar_lower_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_NOT_ETC___d5556 =
	     (xbar_lower_merges_3_fi0HasPrio ?
		!xbar_lower_merges_3_fi0_D_OUT[1] :
		!xbar_lower_merges_3_fi1_D_OUT[1]) ||
	     xbar_lower_merges_3_fo_FULL_N ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5557 =
	     (xbar_lower_merges_3_fi0HasPrio ?
		xbar_lower_merges_3_fi0_EMPTY_N :
		xbar_lower_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_NOT_ETC___d5556 ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570 =
	     xbar_lower_merges_3_fi0HasPrio ?
	       xbar_lower_merges_3_fi0_D_OUT[1] :
	       xbar_lower_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5582 =
	     IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570 &&
	     (xbar_lower_merges_3_fi0HasPrio ?
		!xbar_lower_merges_3_fi0_D_OUT[0] :
		!xbar_lower_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5587 =
	     xbar_lower_merges_3_fi0HasPrio ?
	       xbar_lower_merges_3_fi0_D_OUT[0] :
	       xbar_lower_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_3_routeFrom_544_BIT_0_546_ETC___d5577 =
	     xbar_lower_merges_3_routeFrom[0] ?
	       xbar_lower_merges_3_fi1_D_OUT[0] :
	       xbar_lower_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_fi0HasPrio_324_THEN_NOT_x_ETC___d5331 =
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[1] :
		!xbar_lower_merges_fi1_D_OUT[1]) ||
	     xbar_lower_merges_fo_FULL_N ;
  assign IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5332 =
	     (xbar_lower_merges_fi0HasPrio ?
		xbar_lower_merges_fi0_EMPTY_N :
		xbar_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_fi0HasPrio_324_THEN_NOT_x_ETC___d5331 ;
  assign IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[1] :
	       xbar_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5357 =
	     IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345 &&
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[0] :
		!xbar_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5362 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[0] :
	       xbar_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_routeFrom_319_BIT_0_321_T_ETC___d5352 =
	     xbar_lower_merges_routeFrom[0] ?
	       xbar_lower_merges_fi1_D_OUT[0] :
	       xbar_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5062 =
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		!xbar_lower_upper_merges_1_fi0_D_OUT[1] :
		!xbar_lower_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5063 =
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		xbar_lower_upper_merges_1_fi0_EMPTY_N :
		xbar_lower_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5062 ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076 =
	     xbar_lower_upper_merges_1_fi0HasPrio ?
	       xbar_lower_upper_merges_1_fi0_D_OUT[1] :
	       xbar_lower_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5088 =
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076 &&
	     (xbar_lower_upper_merges_1_fi0HasPrio ?
		!xbar_lower_upper_merges_1_fi0_D_OUT[0] :
		!xbar_lower_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5093 =
	     xbar_lower_upper_merges_1_fi0HasPrio ?
	       xbar_lower_upper_merges_1_fi0_D_OUT[0] :
	       xbar_lower_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_1_routeFrom_050_BIT_ETC___d5083 =
	     xbar_lower_upper_merges_1_routeFrom[0] ?
	       xbar_lower_upper_merges_1_fi1_D_OUT[0] :
	       xbar_lower_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4987 =
	     (xbar_lower_upper_merges_fi0HasPrio ?
		!xbar_lower_upper_merges_fi0_D_OUT[1] :
		!xbar_lower_upper_merges_fi1_D_OUT[1]) ||
	     xbar_lower_upper_merges_fo_FULL_N ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4988 =
	     (xbar_lower_upper_merges_fi0HasPrio ?
		xbar_lower_upper_merges_fi0_EMPTY_N :
		xbar_lower_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d4987 ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001 =
	     xbar_lower_upper_merges_fi0HasPrio ?
	       xbar_lower_upper_merges_fi0_D_OUT[1] :
	       xbar_lower_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5013 =
	     IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001 &&
	     (xbar_lower_upper_merges_fi0HasPrio ?
		!xbar_lower_upper_merges_fi0_D_OUT[0] :
		!xbar_lower_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5018 =
	     xbar_lower_upper_merges_fi0HasPrio ?
	       xbar_lower_upper_merges_fi0_D_OUT[0] :
	       xbar_lower_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_upper_merges_routeFrom_975_BIT_0_ETC___d5008 =
	     xbar_lower_upper_merges_routeFrom[0] ?
	       xbar_lower_upper_merges_fi1_D_OUT[0] :
	       xbar_lower_upper_merges_fi0_D_OUT[0] ;
  assign IF_xbar_merges_1_fi0HasPrio_743_THEN_NOT_xbar__ETC___d5750 =
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[1] :
		!xbar_merges_1_fi1_D_OUT[1]) ||
	     xbar_merges_1_fo_FULL_N ;
  assign IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5751 =
	     (xbar_merges_1_fi0HasPrio ?
		xbar_merges_1_fi0_EMPTY_N :
		xbar_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_merges_1_fi0HasPrio_743_THEN_NOT_xbar__ETC___d5750 ;
  assign IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[1] :
	       xbar_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5776 =
	     IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764 &&
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[0] :
		!xbar_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5781 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[0] :
	       xbar_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_merges_1_routeFrom_738_BIT_0_740_THEN__ETC___d5771 =
	     xbar_merges_1_routeFrom[0] ?
	       xbar_merges_1_fi1_D_OUT[0] :
	       xbar_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_merges_2_fi0HasPrio_818_THEN_NOT_xbar__ETC___d5825 =
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[1] :
		!xbar_merges_2_fi1_D_OUT[1]) ||
	     xbar_merges_2_fo_FULL_N ;
  assign IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5826 =
	     (xbar_merges_2_fi0HasPrio ?
		xbar_merges_2_fi0_EMPTY_N :
		xbar_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_merges_2_fi0HasPrio_818_THEN_NOT_xbar__ETC___d5825 ;
  assign IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[1] :
	       xbar_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5851 =
	     IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839 &&
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[0] :
		!xbar_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5856 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[0] :
	       xbar_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_merges_2_routeFrom_813_BIT_0_815_THEN__ETC___d5846 =
	     xbar_merges_2_routeFrom[0] ?
	       xbar_merges_2_fi1_D_OUT[0] :
	       xbar_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_merges_3_fi0HasPrio_893_THEN_NOT_xbar__ETC___d5900 =
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[1] :
		!xbar_merges_3_fi1_D_OUT[1]) ||
	     xbar_merges_3_fo_FULL_N ;
  assign IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5901 =
	     (xbar_merges_3_fi0HasPrio ?
		xbar_merges_3_fi0_EMPTY_N :
		xbar_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_merges_3_fi0HasPrio_893_THEN_NOT_xbar__ETC___d5900 ;
  assign IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[1] :
	       xbar_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5926 =
	     IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914 &&
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[0] :
		!xbar_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5931 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[0] :
	       xbar_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_merges_3_routeFrom_888_BIT_0_890_THEN__ETC___d5921 =
	     xbar_merges_3_routeFrom[0] ?
	       xbar_merges_3_fi1_D_OUT[0] :
	       xbar_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_merges_4_fi0HasPrio_968_THEN_NOT_xbar__ETC___d5975 =
	     (xbar_merges_4_fi0HasPrio ?
		!xbar_merges_4_fi0_D_OUT[1] :
		!xbar_merges_4_fi1_D_OUT[1]) ||
	     xbar_merges_4_fo_FULL_N ;
  assign IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5976 =
	     (xbar_merges_4_fi0HasPrio ?
		xbar_merges_4_fi0_EMPTY_N :
		xbar_merges_4_fi1_EMPTY_N) &&
	     IF_xbar_merges_4_fi0HasPrio_968_THEN_NOT_xbar__ETC___d5975 ;
  assign IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989 =
	     xbar_merges_4_fi0HasPrio ?
	       xbar_merges_4_fi0_D_OUT[1] :
	       xbar_merges_4_fi1_D_OUT[1] ;
  assign IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6001 =
	     IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989 &&
	     (xbar_merges_4_fi0HasPrio ?
		!xbar_merges_4_fi0_D_OUT[0] :
		!xbar_merges_4_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6006 =
	     xbar_merges_4_fi0HasPrio ?
	       xbar_merges_4_fi0_D_OUT[0] :
	       xbar_merges_4_fi1_D_OUT[0] ;
  assign IF_xbar_merges_4_routeFrom_963_BIT_0_965_THEN__ETC___d5996 =
	     xbar_merges_4_routeFrom[0] ?
	       xbar_merges_4_fi1_D_OUT[0] :
	       xbar_merges_4_fi0_D_OUT[0] ;
  assign IF_xbar_merges_5_fi0HasPrio_043_THEN_NOT_xbar__ETC___d6050 =
	     (xbar_merges_5_fi0HasPrio ?
		!xbar_merges_5_fi0_D_OUT[1] :
		!xbar_merges_5_fi1_D_OUT[1]) ||
	     xbar_merges_5_fo_FULL_N ;
  assign IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6051 =
	     (xbar_merges_5_fi0HasPrio ?
		xbar_merges_5_fi0_EMPTY_N :
		xbar_merges_5_fi1_EMPTY_N) &&
	     IF_xbar_merges_5_fi0HasPrio_043_THEN_NOT_xbar__ETC___d6050 ;
  assign IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064 =
	     xbar_merges_5_fi0HasPrio ?
	       xbar_merges_5_fi0_D_OUT[1] :
	       xbar_merges_5_fi1_D_OUT[1] ;
  assign IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6076 =
	     IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064 &&
	     (xbar_merges_5_fi0HasPrio ?
		!xbar_merges_5_fi0_D_OUT[0] :
		!xbar_merges_5_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6081 =
	     xbar_merges_5_fi0HasPrio ?
	       xbar_merges_5_fi0_D_OUT[0] :
	       xbar_merges_5_fi1_D_OUT[0] ;
  assign IF_xbar_merges_5_routeFrom_038_BIT_0_040_THEN__ETC___d6071 =
	     xbar_merges_5_routeFrom[0] ?
	       xbar_merges_5_fi1_D_OUT[0] :
	       xbar_merges_5_fi0_D_OUT[0] ;
  assign IF_xbar_merges_6_fi0HasPrio_118_THEN_NOT_xbar__ETC___d6125 =
	     (xbar_merges_6_fi0HasPrio ?
		!xbar_merges_6_fi0_D_OUT[1] :
		!xbar_merges_6_fi1_D_OUT[1]) ||
	     xbar_merges_6_fo_FULL_N ;
  assign IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6126 =
	     (xbar_merges_6_fi0HasPrio ?
		xbar_merges_6_fi0_EMPTY_N :
		xbar_merges_6_fi1_EMPTY_N) &&
	     IF_xbar_merges_6_fi0HasPrio_118_THEN_NOT_xbar__ETC___d6125 ;
  assign IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139 =
	     xbar_merges_6_fi0HasPrio ?
	       xbar_merges_6_fi0_D_OUT[1] :
	       xbar_merges_6_fi1_D_OUT[1] ;
  assign IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6151 =
	     IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139 &&
	     (xbar_merges_6_fi0HasPrio ?
		!xbar_merges_6_fi0_D_OUT[0] :
		!xbar_merges_6_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6156 =
	     xbar_merges_6_fi0HasPrio ?
	       xbar_merges_6_fi0_D_OUT[0] :
	       xbar_merges_6_fi1_D_OUT[0] ;
  assign IF_xbar_merges_6_routeFrom_113_BIT_0_115_THEN__ETC___d6146 =
	     xbar_merges_6_routeFrom[0] ?
	       xbar_merges_6_fi1_D_OUT[0] :
	       xbar_merges_6_fi0_D_OUT[0] ;
  assign IF_xbar_merges_7_fi0HasPrio_193_THEN_NOT_xbar__ETC___d6200 =
	     (xbar_merges_7_fi0HasPrio ?
		!xbar_merges_7_fi0_D_OUT[1] :
		!xbar_merges_7_fi1_D_OUT[1]) ||
	     xbar_merges_7_fo_FULL_N ;
  assign IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6201 =
	     (xbar_merges_7_fi0HasPrio ?
		xbar_merges_7_fi0_EMPTY_N :
		xbar_merges_7_fi1_EMPTY_N) &&
	     IF_xbar_merges_7_fi0HasPrio_193_THEN_NOT_xbar__ETC___d6200 ;
  assign IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214 =
	     xbar_merges_7_fi0HasPrio ?
	       xbar_merges_7_fi0_D_OUT[1] :
	       xbar_merges_7_fi1_D_OUT[1] ;
  assign IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6226 =
	     IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214 &&
	     (xbar_merges_7_fi0HasPrio ?
		!xbar_merges_7_fi0_D_OUT[0] :
		!xbar_merges_7_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6231 =
	     xbar_merges_7_fi0HasPrio ?
	       xbar_merges_7_fi0_D_OUT[0] :
	       xbar_merges_7_fi1_D_OUT[0] ;
  assign IF_xbar_merges_7_routeFrom_188_BIT_0_190_THEN__ETC___d6221 =
	     xbar_merges_7_routeFrom[0] ?
	       xbar_merges_7_fi1_D_OUT[0] :
	       xbar_merges_7_fi0_D_OUT[0] ;
  assign IF_xbar_merges_fi0HasPrio_668_THEN_NOT_xbar_me_ETC___d5675 =
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[1] :
		!xbar_merges_fi1_D_OUT[1]) ||
	     xbar_merges_fo_FULL_N ;
  assign IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5676 =
	     (xbar_merges_fi0HasPrio ?
		xbar_merges_fi0_EMPTY_N :
		xbar_merges_fi1_EMPTY_N) &&
	     IF_xbar_merges_fi0HasPrio_668_THEN_NOT_xbar_me_ETC___d5675 ;
  assign IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[1] :
	       xbar_merges_fi1_D_OUT[1] ;
  assign IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5701 =
	     IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689 &&
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[0] :
		!xbar_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5706 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[0] :
	       xbar_merges_fi1_D_OUT[0] ;
  assign IF_xbar_merges_routeFrom_663_BIT_0_665_THEN_xb_ETC___d5696 =
	     xbar_merges_routeFrom[0] ?
	       xbar_merges_fi1_D_OUT[0] :
	       xbar_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4544 =
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		!xbar_upper_lower_merges_1_fi0_D_OUT[1] :
		!xbar_upper_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4545 =
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		xbar_upper_lower_merges_1_fi0_EMPTY_N :
		xbar_upper_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4544 ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558 =
	     xbar_upper_lower_merges_1_fi0HasPrio ?
	       xbar_upper_lower_merges_1_fi0_D_OUT[1] :
	       xbar_upper_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4570 =
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558 &&
	     (xbar_upper_lower_merges_1_fi0HasPrio ?
		!xbar_upper_lower_merges_1_fi0_D_OUT[0] :
		!xbar_upper_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4575 =
	     xbar_upper_lower_merges_1_fi0HasPrio ?
	       xbar_upper_lower_merges_1_fi0_D_OUT[0] :
	       xbar_upper_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_1_routeFrom_532_BIT_ETC___d4565 =
	     xbar_upper_lower_merges_1_routeFrom[0] ?
	       xbar_upper_lower_merges_1_fi1_D_OUT[0] :
	       xbar_upper_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4469 =
	     (xbar_upper_lower_merges_fi0HasPrio ?
		!xbar_upper_lower_merges_fi0_D_OUT[1] :
		!xbar_upper_lower_merges_fi1_D_OUT[1]) ||
	     xbar_upper_lower_merges_fo_FULL_N ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4470 =
	     (xbar_upper_lower_merges_fi0HasPrio ?
		xbar_upper_lower_merges_fi0_EMPTY_N :
		xbar_upper_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4469 ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483 =
	     xbar_upper_lower_merges_fi0HasPrio ?
	       xbar_upper_lower_merges_fi0_D_OUT[1] :
	       xbar_upper_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4495 =
	     IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483 &&
	     (xbar_upper_lower_merges_fi0HasPrio ?
		!xbar_upper_lower_merges_fi0_D_OUT[0] :
		!xbar_upper_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4500 =
	     xbar_upper_lower_merges_fi0HasPrio ?
	       xbar_upper_lower_merges_fi0_D_OUT[0] :
	       xbar_upper_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_lower_merges_routeFrom_457_BIT_0_ETC___d4490 =
	     xbar_upper_lower_merges_routeFrom[0] ?
	       xbar_upper_lower_merges_fi1_D_OUT[0] :
	       xbar_upper_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_NOT_ETC___d4716 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[1] :
		!xbar_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4717 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		xbar_upper_merges_1_fi0_EMPTY_N :
		xbar_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_NOT_ETC___d4716 ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[1] :
	       xbar_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4742 =
	     IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730 &&
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[0] :
		!xbar_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4747 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[0] :
	       xbar_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_routeFrom_704_BIT_0_706_ETC___d4737 =
	     xbar_upper_merges_1_routeFrom[0] ?
	       xbar_upper_merges_1_fi1_D_OUT[0] :
	       xbar_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_NOT_ETC___d4791 =
	     (xbar_upper_merges_2_fi0HasPrio ?
		!xbar_upper_merges_2_fi0_D_OUT[1] :
		!xbar_upper_merges_2_fi1_D_OUT[1]) ||
	     xbar_upper_merges_2_fo_FULL_N ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4792 =
	     (xbar_upper_merges_2_fi0HasPrio ?
		xbar_upper_merges_2_fi0_EMPTY_N :
		xbar_upper_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_NOT_ETC___d4791 ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805 =
	     xbar_upper_merges_2_fi0HasPrio ?
	       xbar_upper_merges_2_fi0_D_OUT[1] :
	       xbar_upper_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4817 =
	     IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805 &&
	     (xbar_upper_merges_2_fi0HasPrio ?
		!xbar_upper_merges_2_fi0_D_OUT[0] :
		!xbar_upper_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4822 =
	     xbar_upper_merges_2_fi0HasPrio ?
	       xbar_upper_merges_2_fi0_D_OUT[0] :
	       xbar_upper_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_2_routeFrom_779_BIT_0_781_ETC___d4812 =
	     xbar_upper_merges_2_routeFrom[0] ?
	       xbar_upper_merges_2_fi1_D_OUT[0] :
	       xbar_upper_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_NOT_ETC___d4866 =
	     (xbar_upper_merges_3_fi0HasPrio ?
		!xbar_upper_merges_3_fi0_D_OUT[1] :
		!xbar_upper_merges_3_fi1_D_OUT[1]) ||
	     xbar_upper_merges_3_fo_FULL_N ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4867 =
	     (xbar_upper_merges_3_fi0HasPrio ?
		xbar_upper_merges_3_fi0_EMPTY_N :
		xbar_upper_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_NOT_ETC___d4866 ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880 =
	     xbar_upper_merges_3_fi0HasPrio ?
	       xbar_upper_merges_3_fi0_D_OUT[1] :
	       xbar_upper_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4892 =
	     IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880 &&
	     (xbar_upper_merges_3_fi0HasPrio ?
		!xbar_upper_merges_3_fi0_D_OUT[0] :
		!xbar_upper_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4897 =
	     xbar_upper_merges_3_fi0HasPrio ?
	       xbar_upper_merges_3_fi0_D_OUT[0] :
	       xbar_upper_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_3_routeFrom_854_BIT_0_856_ETC___d4887 =
	     xbar_upper_merges_3_routeFrom[0] ?
	       xbar_upper_merges_3_fi1_D_OUT[0] :
	       xbar_upper_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_fi0HasPrio_634_THEN_NOT_x_ETC___d4641 =
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[1] :
		!xbar_upper_merges_fi1_D_OUT[1]) ||
	     xbar_upper_merges_fo_FULL_N ;
  assign IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4642 =
	     (xbar_upper_merges_fi0HasPrio ?
		xbar_upper_merges_fi0_EMPTY_N :
		xbar_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_fi0HasPrio_634_THEN_NOT_x_ETC___d4641 ;
  assign IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[1] :
	       xbar_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4667 =
	     IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655 &&
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[0] :
		!xbar_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4672 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[0] :
	       xbar_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_routeFrom_629_BIT_0_631_T_ETC___d4662 =
	     xbar_upper_merges_routeFrom[0] ?
	       xbar_upper_merges_fi1_D_OUT[0] :
	       xbar_upper_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4370 =
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		!xbar_upper_upper_merges_1_fi0_D_OUT[1] :
		!xbar_upper_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4371 =
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		xbar_upper_upper_merges_1_fi0_EMPTY_N :
		xbar_upper_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4370 ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384 =
	     xbar_upper_upper_merges_1_fi0HasPrio ?
	       xbar_upper_upper_merges_1_fi0_D_OUT[1] :
	       xbar_upper_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4396 =
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384 &&
	     (xbar_upper_upper_merges_1_fi0HasPrio ?
		!xbar_upper_upper_merges_1_fi0_D_OUT[0] :
		!xbar_upper_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4401 =
	     xbar_upper_upper_merges_1_fi0HasPrio ?
	       xbar_upper_upper_merges_1_fi0_D_OUT[0] :
	       xbar_upper_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_1_routeFrom_358_BIT_ETC___d4391 =
	     xbar_upper_upper_merges_1_routeFrom[0] ?
	       xbar_upper_upper_merges_1_fi1_D_OUT[0] :
	       xbar_upper_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4295 =
	     (xbar_upper_upper_merges_fi0HasPrio ?
		!xbar_upper_upper_merges_fi0_D_OUT[1] :
		!xbar_upper_upper_merges_fi1_D_OUT[1]) ||
	     xbar_upper_upper_merges_fo_FULL_N ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4296 =
	     (xbar_upper_upper_merges_fi0HasPrio ?
		xbar_upper_upper_merges_fi0_EMPTY_N :
		xbar_upper_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4295 ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309 =
	     xbar_upper_upper_merges_fi0HasPrio ?
	       xbar_upper_upper_merges_fi0_D_OUT[1] :
	       xbar_upper_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4321 =
	     IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309 &&
	     (xbar_upper_upper_merges_fi0HasPrio ?
		!xbar_upper_upper_merges_fi0_D_OUT[0] :
		!xbar_upper_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4326 =
	     xbar_upper_upper_merges_fi0HasPrio ?
	       xbar_upper_upper_merges_fi0_D_OUT[0] :
	       xbar_upper_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_upper_merges_routeFrom_283_BIT_0_ETC___d4316 =
	     xbar_upper_upper_merges_routeFrom[0] ?
	       xbar_upper_upper_merges_fi1_D_OUT[0] :
	       xbar_upper_upper_merges_fi0_D_OUT[0] ;
  assign NOT_IF_ringToMac_0_fifoTxData_read_block_129_T_ETC___d2224 =
	     IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167 !=
	     8'd0 &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144) ?
		   ringToMac_0_fifoTxData_block1[106] :
		   ringToMac_0_fifoTxData_block1[0]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135) ?
		   ringToMac_0_fifoTxData_block0[106] :
		   ringToMac_0_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_1_fifoTxData_read_block_573_T_ETC___d2668 =
	     IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611 !=
	     8'd0 &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588) ?
		   ringToMac_1_fifoTxData_block1[106] :
		   ringToMac_1_fifoTxData_block1[0]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579) ?
		   ringToMac_1_fifoTxData_block0[106] :
		   ringToMac_1_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_2_fifoTxData_read_block_017_T_ETC___d3112 =
	     IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055 !=
	     8'd0 &&
	     (ringToMac_2_fifoTxData_read_block ?
		((!ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030 &&
		  ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032) ?
		   ringToMac_2_fifoTxData_block1[106] :
		   ringToMac_2_fifoTxData_block1[0]) :
		((!ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021 &&
		  ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023) ?
		   ringToMac_2_fifoTxData_block0[106] :
		   ringToMac_2_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_3_fifoTxData_read_block_461_T_ETC___d3556 =
	     IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499 !=
	     8'd0 &&
	     (ringToMac_3_fifoTxData_read_block ?
		((!ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474 &&
		  ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476) ?
		   ringToMac_3_fifoTxData_block1[106] :
		   ringToMac_3_fifoTxData_block1[0]) :
		((!ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465 &&
		  ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467) ?
		   ringToMac_3_fifoTxData_block0[106] :
		   ringToMac_3_fifoTxData_block0[0])) ;
  assign NOT_ringToMac_0_fifoTxData_read_block_129_130__ETC___d2152 =
	     (!ringToMac_0_fifoTxData_read_block && x__h89317 != 2'd3 ||
	      ringToMac_0_fifoTxData_read_block && x__h89696 != 2'd3) &&
	     !ringToMac_0_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_0_fifoTxData_write_block_089_090_ETC___d2110 =
	     (!ringToMac_0_fifoTxData_write_block && x__h85069 == 2'd3 ||
	      ringToMac_0_fifoTxData_write_block && x__h85524 == 2'd3) &&
	     !ringToMac_0_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_read_block_573_574__ETC___d2596 =
	     (!ringToMac_1_fifoTxData_read_block && x__h107951 != 2'd3 ||
	      ringToMac_1_fifoTxData_read_block && x__h108330 != 2'd3) &&
	     !ringToMac_1_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_write_block_533_534_ETC___d2554 =
	     (!ringToMac_1_fifoTxData_write_block && x__h103706 == 2'd3 ||
	      ringToMac_1_fifoTxData_write_block && x__h104158 == 2'd3) &&
	     !ringToMac_1_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_2_fifoTxData_read_block_017_018__ETC___d3040 =
	     (!ringToMac_2_fifoTxData_read_block && x__h126585 != 2'd3 ||
	      ringToMac_2_fifoTxData_read_block && x__h126964 != 2'd3) &&
	     !ringToMac_2_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_2_fifoTxData_write_block_977_978_ETC___d2998 =
	     (!ringToMac_2_fifoTxData_write_block && x__h122340 == 2'd3 ||
	      ringToMac_2_fifoTxData_write_block && x__h122792 == 2'd3) &&
	     !ringToMac_2_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_3_fifoTxData_read_block_461_462__ETC___d3484 =
	     (!ringToMac_3_fifoTxData_read_block && x__h145219 != 2'd3 ||
	      ringToMac_3_fifoTxData_read_block && x__h145598 != 2'd3) &&
	     !ringToMac_3_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_3_fifoTxData_write_block_421_422_ETC___d3442 =
	     (!ringToMac_3_fifoTxData_write_block && x__h140974 == 2'd3 ||
	      ringToMac_3_fifoTxData_write_block && x__h141426 == 2'd3) &&
	     !ringToMac_3_fifoTxData_sInReset_pre_isInReset ;
  assign ab__h115743 = 2'd0 ;
  assign ab__h134377 = 2'd0 ;
  assign ab__h78472 = 2'd0 ;
  assign ab__h97109 = 2'd0 ;
  assign mask__h110204 =
	     (!ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577 &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579) ?
	       ringToMac_1_fifoTxData_block0[115:108] :
	       ringToMac_1_fifoTxData_block0[9:2] ;
  assign mask__h110313 =
	     (!ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586 &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588) ?
	       ringToMac_1_fifoTxData_block1[115:108] :
	       ringToMac_1_fifoTxData_block1[9:2] ;
  assign mask__h128838 =
	     (!ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021 &&
	      ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023) ?
	       ringToMac_2_fifoTxData_block0[115:108] :
	       ringToMac_2_fifoTxData_block0[9:2] ;
  assign mask__h128947 =
	     (!ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030 &&
	      ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032) ?
	       ringToMac_2_fifoTxData_block1[115:108] :
	       ringToMac_2_fifoTxData_block1[9:2] ;
  assign mask__h147472 =
	     (!ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465 &&
	      ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467) ?
	       ringToMac_3_fifoTxData_block0[115:108] :
	       ringToMac_3_fifoTxData_block0[9:2] ;
  assign mask__h147581 =
	     (!ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474 &&
	      ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476) ?
	       ringToMac_3_fifoTxData_block1[115:108] :
	       ringToMac_3_fifoTxData_block1[9:2] ;
  assign mask__h91570 =
	     (!ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133 &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135) ?
	       ringToMac_0_fifoTxData_block0[115:108] :
	       ringToMac_0_fifoTxData_block0[9:2] ;
  assign mask__h91679 =
	     (!ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142 &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144) ?
	       ringToMac_0_fifoTxData_block1[115:108] :
	       ringToMac_0_fifoTxData_block1[9:2] ;
  assign newPacketLen__h116713 = pktBuff_2_packetLen + { 11'd0, x__h116802 } ;
  assign newPacketLen__h135347 = pktBuff_3_packetLen + { 11'd0, x__h135436 } ;
  assign newPacketLen__h79442 = pktBuff_0_packetLen + { 11'd0, x__h79531 } ;
  assign newPacketLen__h98079 = pktBuff_1_packetLen + { 11'd0, x__h98168 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_844_SLT_3___d2013 =
	     (pktBuff_0_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_909_PLU_ETC___d1915 =
	     pktBuff_0_memBuffer_serverAdapterB_cnt +
	     (pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_909_SLT_3___d2039 =
	     (pktBuff_0_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_288_SLT_3___d2457 =
	     (pktBuff_1_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_353_PLU_ETC___d2359 =
	     pktBuff_1_memBuffer_serverAdapterB_cnt +
	     (pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_353_SLT_3___d2483 =
	     (pktBuff_1_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_2_memBuffer_serverAdapterA_cnt_732_SLT_3___d2901 =
	     (pktBuff_2_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_797_PLU_ETC___d2803 =
	     pktBuff_2_memBuffer_serverAdapterB_cnt +
	     (pktBuff_2_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_2_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_2_memBuffer_serverAdapterB_cnt_797_SLT_3___d2927 =
	     (pktBuff_2_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_3_memBuffer_serverAdapterA_cnt_176_SLT_3___d3345 =
	     (pktBuff_3_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_241_PLU_ETC___d3247 =
	     pktBuff_3_memBuffer_serverAdapterB_cnt +
	     (pktBuff_3_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_3_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_3_memBuffer_serverAdapterB_cnt_241_SLT_3___d3371 =
	     (pktBuff_3_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135 =
	     ringToMac_0_fifoTxData_elem0_status_0 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133 =
	     ringToMac_0_fifoTxData_elem0_status_1 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144 =
	     ringToMac_0_fifoTxData_elem1_status_0 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142 =
	     ringToMac_0_fifoTxData_elem1_status_1 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579 =
	     ringToMac_1_fifoTxData_elem0_status_0 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577 =
	     ringToMac_1_fifoTxData_elem0_status_1 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588 =
	     ringToMac_1_fifoTxData_elem1_status_0 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586 =
	     ringToMac_1_fifoTxData_elem1_status_1 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023 =
	     ringToMac_2_fifoTxData_elem0_status_0 ==
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021 =
	     ringToMac_2_fifoTxData_elem0_status_1 ==
	     ringToMac_2_fifoTxData_block0_status ;
  assign ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032 =
	     ringToMac_2_fifoTxData_elem1_status_0 ==
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030 =
	     ringToMac_2_fifoTxData_elem1_status_1 ==
	     ringToMac_2_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467 =
	     ringToMac_3_fifoTxData_elem0_status_0 ==
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465 =
	     ringToMac_3_fifoTxData_elem0_status_1 ==
	     ringToMac_3_fifoTxData_block0_status ;
  assign ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476 =
	     ringToMac_3_fifoTxData_elem1_status_0 ==
	     ringToMac_3_fifoTxData_block1_status ;
  assign ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474 =
	     ringToMac_3_fifoTxData_elem1_status_1 ==
	     ringToMac_3_fifoTxData_block1_status ;
  assign verbose_ff_1_i_notFull__727_AND_verbose_ff_2_i_ETC___d7628 =
	     verbose_ff_1_FULL_N && verbose_ff_2_FULL_N &&
	     verbose_ff_3_FULL_N &&
	     verbose_ff_0_FULL_N &&
	     verbose_ff_0_3_FULL_N &&
	     verbose_ff_1_2_FULL_N &&
	     verbose_ff_2_2_i_notFull__063_AND_verbose_ff_3_ETC___d7622 ;
  assign verbose_ff_2_2_i_notFull__063_AND_verbose_ff_3_ETC___d7622 =
	     verbose_ff_2_2_FULL_N && verbose_ff_3_2_FULL_N &&
	     verbose_ff_0_2_FULL_N &&
	     verbose_ff_1_1_FULL_N &&
	     verbose_ff_2_1_FULL_N &&
	     verbose_ff_3_1_FULL_N &&
	     verbose_ff_4_FULL_N ;
  assign x__h103706 =
	     { ringToMac_1_fifoTxData_elem0_status_1 ==
	       ringToMac_1_fifoTxData_block0_status,
	       ringToMac_1_fifoTxData_elem0_status_0 ==
	       ringToMac_1_fifoTxData_block0_status } ;
  assign x__h104158 =
	     { ringToMac_1_fifoTxData_elem1_status_1 ==
	       ringToMac_1_fifoTxData_block1_status,
	       ringToMac_1_fifoTxData_elem1_status_0 ==
	       ringToMac_1_fifoTxData_block1_status } ;
  assign x__h107951 =
	     { ringToMac_1_fifoTxData_elem0_status_1__read__5_ETC___d2577,
	       ringToMac_1_fifoTxData_elem0_status_0__read__5_ETC___d2579 } ;
  assign x__h108330 =
	     { ringToMac_1_fifoTxData_elem1_status_1__read__5_ETC___d2586,
	       ringToMac_1_fifoTxData_elem1_status_0__read__5_ETC___d2588 } ;
  assign x__h110570 = x__h110586 + y__h110587 ;
  assign x__h110586 = x__h110598 + y__h110599 ;
  assign x__h110598 = x__h110610 + y__h110611 ;
  assign x__h110610 = x__h110622 + y__h110623 ;
  assign x__h110622 = x__h110634 + y__h110635 ;
  assign x__h110634 = x__h110646 + y__h110647 ;
  assign x__h110646 = x__h110658 + y__h110659 ;
  assign x__h110658 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[7] } ;
  assign x__h11655 = x__h11670 + y__h11671 ;
  assign x__h11670 = x__h11682 + y__h11683 ;
  assign x__h116802 = x__h116817 + y__h116818 ;
  assign x__h116817 = x__h116829 + y__h116830 ;
  assign x__h11682 = x__h11694 + y__h11695 ;
  assign x__h116829 = x__h116841 + y__h116842 ;
  assign x__h116841 = x__h116853 + y__h116854 ;
  assign x__h116853 = x__h116865 + y__h116866 ;
  assign x__h116865 = x__h116877 + y__h116878 ;
  assign x__h116877 = x__h116889 + y__h116890 ;
  assign x__h116889 = x__h116901 + y__h116902 ;
  assign x__h116901 = x__h116913 + y__h116914 ;
  assign x__h116913 = x__h116925 + y__h116926 ;
  assign x__h116925 = x__h116937 + y__h116938 ;
  assign x__h116937 = x__h116949 + y__h116950 ;
  assign x__h11694 = x__h11706 + y__h11707 ;
  assign x__h116949 = x__h116961 + y__h116962 ;
  assign x__h116961 = x__h116973 + y__h116974 ;
  assign x__h116973 = x__h116985 + y__h116986 ;
  assign x__h116985 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[17] } ;
  assign x__h11706 = x__h11718 + y__h11719 ;
  assign x__h11718 = x__h11730 + y__h11731 ;
  assign x__h11730 = x__h11742 + y__h11743 ;
  assign x__h11742 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[9] } ;
  assign x__h122340 =
	     { ringToMac_2_fifoTxData_elem0_status_1 ==
	       ringToMac_2_fifoTxData_block0_status,
	       ringToMac_2_fifoTxData_elem0_status_0 ==
	       ringToMac_2_fifoTxData_block0_status } ;
  assign x__h122792 =
	     { ringToMac_2_fifoTxData_elem1_status_1 ==
	       ringToMac_2_fifoTxData_block1_status,
	       ringToMac_2_fifoTxData_elem1_status_0 ==
	       ringToMac_2_fifoTxData_block1_status } ;
  assign x__h126585 =
	     { ringToMac_2_fifoTxData_elem0_status_1__read__0_ETC___d3021,
	       ringToMac_2_fifoTxData_elem0_status_0__read__0_ETC___d3023 } ;
  assign x__h126964 =
	     { ringToMac_2_fifoTxData_elem1_status_1__read__0_ETC___d3030,
	       ringToMac_2_fifoTxData_elem1_status_0__read__0_ETC___d3032 } ;
  assign x__h129204 = x__h129220 + y__h129221 ;
  assign x__h129220 = x__h129232 + y__h129233 ;
  assign x__h129232 = x__h129244 + y__h129245 ;
  assign x__h129244 = x__h129256 + y__h129257 ;
  assign x__h129256 = x__h129268 + y__h129269 ;
  assign x__h129268 = x__h129280 + y__h129281 ;
  assign x__h129280 = x__h129292 + y__h129293 ;
  assign x__h129292 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[7] } ;
  assign x__h135436 = x__h135451 + y__h135452 ;
  assign x__h135451 = x__h135463 + y__h135464 ;
  assign x__h135463 = x__h135475 + y__h135476 ;
  assign x__h135475 = x__h135487 + y__h135488 ;
  assign x__h135487 = x__h135499 + y__h135500 ;
  assign x__h135499 = x__h135511 + y__h135512 ;
  assign x__h135511 = x__h135523 + y__h135524 ;
  assign x__h135523 = x__h135535 + y__h135536 ;
  assign x__h135535 = x__h135547 + y__h135548 ;
  assign x__h135547 = x__h135559 + y__h135560 ;
  assign x__h135559 = x__h135571 + y__h135572 ;
  assign x__h135571 = x__h135583 + y__h135584 ;
  assign x__h135583 = x__h135595 + y__h135596 ;
  assign x__h135595 = x__h135607 + y__h135608 ;
  assign x__h135607 = x__h135619 + y__h135620 ;
  assign x__h135619 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[17] } ;
  assign x__h140974 =
	     { ringToMac_3_fifoTxData_elem0_status_1 ==
	       ringToMac_3_fifoTxData_block0_status,
	       ringToMac_3_fifoTxData_elem0_status_0 ==
	       ringToMac_3_fifoTxData_block0_status } ;
  assign x__h141426 =
	     { ringToMac_3_fifoTxData_elem1_status_1 ==
	       ringToMac_3_fifoTxData_block1_status,
	       ringToMac_3_fifoTxData_elem1_status_0 ==
	       ringToMac_3_fifoTxData_block1_status } ;
  assign x__h145219 =
	     { ringToMac_3_fifoTxData_elem0_status_1__read__4_ETC___d3465,
	       ringToMac_3_fifoTxData_elem0_status_0__read__4_ETC___d3467 } ;
  assign x__h145598 =
	     { ringToMac_3_fifoTxData_elem1_status_1__read__4_ETC___d3474,
	       ringToMac_3_fifoTxData_elem1_status_0__read__4_ETC___d3476 } ;
  assign x__h147838 = x__h147854 + y__h147855 ;
  assign x__h147854 = x__h147866 + y__h147867 ;
  assign x__h147866 = x__h147878 + y__h147879 ;
  assign x__h147878 = x__h147890 + y__h147891 ;
  assign x__h147890 = x__h147902 + y__h147903 ;
  assign x__h147902 = x__h147914 + y__h147915 ;
  assign x__h147914 = x__h147926 + y__h147927 ;
  assign x__h147926 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[7] } ;
  assign x__h19897 = x__h19912 + y__h19913 ;
  assign x__h19912 = x__h19924 + y__h19925 ;
  assign x__h19924 = x__h19936 + y__h19937 ;
  assign x__h19936 = x__h19948 + y__h19949 ;
  assign x__h19948 = x__h19960 + y__h19961 ;
  assign x__h19960 = x__h19972 + y__h19973 ;
  assign x__h19972 = x__h19984 + y__h19985 ;
  assign x__h19984 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[9] } ;
  assign x__h28139 = x__h28154 + y__h28155 ;
  assign x__h28154 = x__h28166 + y__h28167 ;
  assign x__h28166 = x__h28178 + y__h28179 ;
  assign x__h28178 = x__h28190 + y__h28191 ;
  assign x__h28190 = x__h28202 + y__h28203 ;
  assign x__h28202 = x__h28214 + y__h28215 ;
  assign x__h28214 = x__h28226 + y__h28227 ;
  assign x__h28226 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[9] } ;
  assign x__h36381 = x__h36396 + y__h36397 ;
  assign x__h36396 = x__h36408 + y__h36409 ;
  assign x__h36408 = x__h36420 + y__h36421 ;
  assign x__h36420 = x__h36432 + y__h36433 ;
  assign x__h36432 = x__h36444 + y__h36445 ;
  assign x__h36444 = x__h36456 + y__h36457 ;
  assign x__h36456 = x__h36468 + y__h36469 ;
  assign x__h36468 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[9] } ;
  assign x__h79531 = x__h79546 + y__h79547 ;
  assign x__h79546 = x__h79558 + y__h79559 ;
  assign x__h79558 = x__h79570 + y__h79571 ;
  assign x__h79570 = x__h79582 + y__h79583 ;
  assign x__h79582 = x__h79594 + y__h79595 ;
  assign x__h79594 = x__h79606 + y__h79607 ;
  assign x__h79606 = x__h79618 + y__h79619 ;
  assign x__h79618 = x__h79630 + y__h79631 ;
  assign x__h79630 = x__h79642 + y__h79643 ;
  assign x__h79642 = x__h79654 + y__h79655 ;
  assign x__h79654 = x__h79666 + y__h79667 ;
  assign x__h79666 = x__h79678 + y__h79679 ;
  assign x__h79678 = x__h79690 + y__h79691 ;
  assign x__h79690 = x__h79702 + y__h79703 ;
  assign x__h79702 = x__h79714 + y__h79715 ;
  assign x__h79714 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[17] } ;
  assign x__h85069 =
	     { ringToMac_0_fifoTxData_elem0_status_1 ==
	       ringToMac_0_fifoTxData_block0_status,
	       ringToMac_0_fifoTxData_elem0_status_0 ==
	       ringToMac_0_fifoTxData_block0_status } ;
  assign x__h85524 =
	     { ringToMac_0_fifoTxData_elem1_status_1 ==
	       ringToMac_0_fifoTxData_block1_status,
	       ringToMac_0_fifoTxData_elem1_status_0 ==
	       ringToMac_0_fifoTxData_block1_status } ;
  assign x__h89317 =
	     { ringToMac_0_fifoTxData_elem0_status_1__read__1_ETC___d2133,
	       ringToMac_0_fifoTxData_elem0_status_0__read__1_ETC___d2135 } ;
  assign x__h89696 =
	     { ringToMac_0_fifoTxData_elem1_status_1__read__1_ETC___d2142,
	       ringToMac_0_fifoTxData_elem1_status_0__read__1_ETC___d2144 } ;
  assign x__h91936 = x__h91952 + y__h91953 ;
  assign x__h91952 = x__h91964 + y__h91965 ;
  assign x__h91964 = x__h91976 + y__h91977 ;
  assign x__h91976 = x__h91988 + y__h91989 ;
  assign x__h91988 = x__h92000 + y__h92001 ;
  assign x__h92000 = x__h92012 + y__h92013 ;
  assign x__h92012 = x__h92024 + y__h92025 ;
  assign x__h92024 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[7] } ;
  assign x__h98168 = x__h98183 + y__h98184 ;
  assign x__h98183 = x__h98195 + y__h98196 ;
  assign x__h98195 = x__h98207 + y__h98208 ;
  assign x__h98207 = x__h98219 + y__h98220 ;
  assign x__h98219 = x__h98231 + y__h98232 ;
  assign x__h98231 = x__h98243 + y__h98244 ;
  assign x__h98243 = x__h98255 + y__h98256 ;
  assign x__h98255 = x__h98267 + y__h98268 ;
  assign x__h98267 = x__h98279 + y__h98280 ;
  assign x__h98279 = x__h98291 + y__h98292 ;
  assign x__h98291 = x__h98303 + y__h98304 ;
  assign x__h98303 = x__h98315 + y__h98316 ;
  assign x__h98315 = x__h98327 + y__h98328 ;
  assign x__h98327 = x__h98339 + y__h98340 ;
  assign x__h98339 = x__h98351 + y__h98352 ;
  assign x__h98351 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[17] } ;
  assign x_data__h12076 = { 64'd0, macToRing_0_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h13034 =
	     { macToRing_0_gearbox_in_ff_D_OUT[73:10],
	       macToRing_0_gearbox_v_prev[73:10] } ;
  assign x_data__h20318 = { 64'd0, macToRing_1_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h21276 =
	     { macToRing_1_gearbox_in_ff_D_OUT[73:10],
	       macToRing_1_gearbox_v_prev[73:10] } ;
  assign x_data__h28560 = { 64'd0, macToRing_2_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h29518 =
	     { macToRing_2_gearbox_in_ff_D_OUT[73:10],
	       macToRing_2_gearbox_v_prev[73:10] } ;
  assign x_data__h36802 = { 64'd0, macToRing_3_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h37760 =
	     { macToRing_3_gearbox_in_ff_D_OUT[73:10],
	       macToRing_3_gearbox_v_prev[73:10] } ;
  assign x_mask__h13035 =
	     { macToRing_0_gearbox_in_ff_D_OUT[9:2],
	       macToRing_0_gearbox_v_prev[9:2] } ;
  assign x_mask__h21277 =
	     { macToRing_1_gearbox_in_ff_D_OUT[9:2],
	       macToRing_1_gearbox_v_prev[9:2] } ;
  assign x_mask__h29519 =
	     { macToRing_2_gearbox_in_ff_D_OUT[9:2],
	       macToRing_2_gearbox_v_prev[9:2] } ;
  assign x_mask__h37761 =
	     { macToRing_3_gearbox_in_ff_D_OUT[9:2],
	       macToRing_3_gearbox_v_prev[9:2] } ;
  assign xbar_lower_lower_merges_1_fo_i_notFull__210_AN_ETC___d5226 =
	     xbar_lower_lower_merges_1_fo_FULL_N &&
	     (xbar_lower_lower_merges_1_routeFrom[0] ?
		xbar_lower_lower_merges_1_fi1_EMPTY_N :
		xbar_lower_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_lower_merges_1_routeFrom_222_BIT_1__ETC___d5268 =
	     xbar_lower_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_1_routeFrom_222_BIT_ETC___d5255 ||
	     !xbar_lower_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248 &&
	     IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5265 ;
  assign xbar_lower_lower_merges_fo_i_notFull__135_AND__ETC___d5151 =
	     xbar_lower_lower_merges_fo_FULL_N &&
	     (xbar_lower_lower_merges_routeFrom[0] ?
		xbar_lower_lower_merges_fi1_EMPTY_N :
		xbar_lower_lower_merges_fi0_EMPTY_N) ;
  assign xbar_lower_lower_merges_routeFrom_147_BIT_1_14_ETC___d5193 =
	     xbar_lower_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_routeFrom_147_BIT_0_ETC___d5180 ||
	     !xbar_lower_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173 &&
	     IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5190 ;
  assign xbar_lower_merges_1_fo_i_notFull__382_AND_IF_x_ETC___d5398 =
	     xbar_lower_merges_1_fo_FULL_N &&
	     (xbar_lower_merges_1_routeFrom[0] ?
		xbar_lower_merges_1_fi1_EMPTY_N :
		xbar_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_merges_1_routeFrom_394_BIT_1_395_AN_ETC___d5440 =
	     xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_routeFrom_394_BIT_0_396_ETC___d5427 ||
	     !xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420 &&
	     IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5437 ;
  assign xbar_lower_merges_2_fo_i_notFull__457_AND_IF_x_ETC___d5473 =
	     xbar_lower_merges_2_fo_FULL_N &&
	     (xbar_lower_merges_2_routeFrom[0] ?
		xbar_lower_merges_2_fi1_EMPTY_N :
		xbar_lower_merges_2_fi0_EMPTY_N) ;
  assign xbar_lower_merges_2_routeFrom_469_BIT_1_470_AN_ETC___d5515 =
	     xbar_lower_merges_2_routeFrom[1] &&
	     IF_xbar_lower_merges_2_routeFrom_469_BIT_0_471_ETC___d5502 ||
	     !xbar_lower_merges_2_routeFrom[1] &&
	     IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495 &&
	     IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5512 ;
  assign xbar_lower_merges_3_fo_i_notFull__532_AND_IF_x_ETC___d5548 =
	     xbar_lower_merges_3_fo_FULL_N &&
	     (xbar_lower_merges_3_routeFrom[0] ?
		xbar_lower_merges_3_fi1_EMPTY_N :
		xbar_lower_merges_3_fi0_EMPTY_N) ;
  assign xbar_lower_merges_3_routeFrom_544_BIT_1_545_AN_ETC___d5590 =
	     xbar_lower_merges_3_routeFrom[1] &&
	     IF_xbar_lower_merges_3_routeFrom_544_BIT_0_546_ETC___d5577 ||
	     !xbar_lower_merges_3_routeFrom[1] &&
	     IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570 &&
	     IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5587 ;
  assign xbar_lower_merges_fo_i_notFull__307_AND_IF_xba_ETC___d5323 =
	     xbar_lower_merges_fo_FULL_N &&
	     (xbar_lower_merges_routeFrom[0] ?
		xbar_lower_merges_fi1_EMPTY_N :
		xbar_lower_merges_fi0_EMPTY_N) ;
  assign xbar_lower_merges_routeFrom_319_BIT_1_320_AND__ETC___d5365 =
	     xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_routeFrom_319_BIT_0_321_T_ETC___d5352 ||
	     !xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345 &&
	     IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5362 ;
  assign xbar_lower_upper_merges_1_fo_i_notFull__038_AN_ETC___d5054 =
	     xbar_lower_upper_merges_1_fo_FULL_N &&
	     (xbar_lower_upper_merges_1_routeFrom[0] ?
		xbar_lower_upper_merges_1_fi1_EMPTY_N :
		xbar_lower_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_upper_merges_1_routeFrom_050_BIT_1__ETC___d5096 =
	     xbar_lower_upper_merges_1_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_1_routeFrom_050_BIT_ETC___d5083 ||
	     !xbar_lower_upper_merges_1_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076 &&
	     IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5093 ;
  assign xbar_lower_upper_merges_fo_i_notFull__963_AND__ETC___d4979 =
	     xbar_lower_upper_merges_fo_FULL_N &&
	     (xbar_lower_upper_merges_routeFrom[0] ?
		xbar_lower_upper_merges_fi1_EMPTY_N :
		xbar_lower_upper_merges_fi0_EMPTY_N) ;
  assign xbar_lower_upper_merges_routeFrom_975_BIT_1_97_ETC___d5021 =
	     xbar_lower_upper_merges_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_routeFrom_975_BIT_0_ETC___d5008 ||
	     !xbar_lower_upper_merges_routeFrom[1] &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001 &&
	     IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5018 ;
  assign xbar_merges_1_fo_i_notFull__726_AND_IF_xbar_me_ETC___d5742 =
	     xbar_merges_1_fo_FULL_N &&
	     (xbar_merges_1_routeFrom[0] ?
		xbar_merges_1_fi1_EMPTY_N :
		xbar_merges_1_fi0_EMPTY_N) ;
  assign xbar_merges_1_routeFrom_738_BIT_1_739_AND_IF_x_ETC___d5784 =
	     xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_routeFrom_738_BIT_0_740_THEN__ETC___d5771 ||
	     !xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764 &&
	     IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5781 ;
  assign xbar_merges_2_fo_i_notFull__801_AND_IF_xbar_me_ETC___d5817 =
	     xbar_merges_2_fo_FULL_N &&
	     (xbar_merges_2_routeFrom[0] ?
		xbar_merges_2_fi1_EMPTY_N :
		xbar_merges_2_fi0_EMPTY_N) ;
  assign xbar_merges_2_routeFrom_813_BIT_1_814_AND_IF_x_ETC___d5859 =
	     xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_routeFrom_813_BIT_0_815_THEN__ETC___d5846 ||
	     !xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839 &&
	     IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5856 ;
  assign xbar_merges_3_fo_i_notFull__876_AND_IF_xbar_me_ETC___d5892 =
	     xbar_merges_3_fo_FULL_N &&
	     (xbar_merges_3_routeFrom[0] ?
		xbar_merges_3_fi1_EMPTY_N :
		xbar_merges_3_fi0_EMPTY_N) ;
  assign xbar_merges_3_routeFrom_888_BIT_1_889_AND_IF_x_ETC___d5934 =
	     xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_routeFrom_888_BIT_0_890_THEN__ETC___d5921 ||
	     !xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914 &&
	     IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5931 ;
  assign xbar_merges_4_fo_i_notFull__951_AND_IF_xbar_me_ETC___d5967 =
	     xbar_merges_4_fo_FULL_N &&
	     (xbar_merges_4_routeFrom[0] ?
		xbar_merges_4_fi1_EMPTY_N :
		xbar_merges_4_fi0_EMPTY_N) ;
  assign xbar_merges_4_routeFrom_963_BIT_1_964_AND_IF_x_ETC___d6009 =
	     xbar_merges_4_routeFrom[1] &&
	     IF_xbar_merges_4_routeFrom_963_BIT_0_965_THEN__ETC___d5996 ||
	     !xbar_merges_4_routeFrom[1] &&
	     IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989 &&
	     IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6006 ;
  assign xbar_merges_5_fo_i_notFull__026_AND_IF_xbar_me_ETC___d6042 =
	     xbar_merges_5_fo_FULL_N &&
	     (xbar_merges_5_routeFrom[0] ?
		xbar_merges_5_fi1_EMPTY_N :
		xbar_merges_5_fi0_EMPTY_N) ;
  assign xbar_merges_5_routeFrom_038_BIT_1_039_AND_IF_x_ETC___d6084 =
	     xbar_merges_5_routeFrom[1] &&
	     IF_xbar_merges_5_routeFrom_038_BIT_0_040_THEN__ETC___d6071 ||
	     !xbar_merges_5_routeFrom[1] &&
	     IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064 &&
	     IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6081 ;
  assign xbar_merges_6_fo_i_notFull__101_AND_IF_xbar_me_ETC___d6117 =
	     xbar_merges_6_fo_FULL_N &&
	     (xbar_merges_6_routeFrom[0] ?
		xbar_merges_6_fi1_EMPTY_N :
		xbar_merges_6_fi0_EMPTY_N) ;
  assign xbar_merges_6_routeFrom_113_BIT_1_114_AND_IF_x_ETC___d6159 =
	     xbar_merges_6_routeFrom[1] &&
	     IF_xbar_merges_6_routeFrom_113_BIT_0_115_THEN__ETC___d6146 ||
	     !xbar_merges_6_routeFrom[1] &&
	     IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139 &&
	     IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6156 ;
  assign xbar_merges_7_fo_i_notFull__176_AND_IF_xbar_me_ETC___d6192 =
	     xbar_merges_7_fo_FULL_N &&
	     (xbar_merges_7_routeFrom[0] ?
		xbar_merges_7_fi1_EMPTY_N :
		xbar_merges_7_fi0_EMPTY_N) ;
  assign xbar_merges_7_routeFrom_188_BIT_1_189_AND_IF_x_ETC___d6234 =
	     xbar_merges_7_routeFrom[1] &&
	     IF_xbar_merges_7_routeFrom_188_BIT_0_190_THEN__ETC___d6221 ||
	     !xbar_merges_7_routeFrom[1] &&
	     IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214 &&
	     IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6231 ;
  assign xbar_merges_fo_i_notFull__651_AND_IF_xbar_merg_ETC___d5667 =
	     xbar_merges_fo_FULL_N &&
	     (xbar_merges_routeFrom[0] ?
		xbar_merges_fi1_EMPTY_N :
		xbar_merges_fi0_EMPTY_N) ;
  assign xbar_merges_routeFrom_663_BIT_1_664_AND_IF_xba_ETC___d5709 =
	     xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_routeFrom_663_BIT_0_665_THEN_xb_ETC___d5696 ||
	     !xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689 &&
	     IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5706 ;
  assign xbar_upper_lower_merges_1_fo_i_notFull__520_AN_ETC___d4536 =
	     xbar_upper_lower_merges_1_fo_FULL_N &&
	     (xbar_upper_lower_merges_1_routeFrom[0] ?
		xbar_upper_lower_merges_1_fi1_EMPTY_N :
		xbar_upper_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_lower_merges_1_routeFrom_532_BIT_1__ETC___d4578 =
	     xbar_upper_lower_merges_1_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_1_routeFrom_532_BIT_ETC___d4565 ||
	     !xbar_upper_lower_merges_1_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558 &&
	     IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4575 ;
  assign xbar_upper_lower_merges_fo_i_notFull__445_AND__ETC___d4461 =
	     xbar_upper_lower_merges_fo_FULL_N &&
	     (xbar_upper_lower_merges_routeFrom[0] ?
		xbar_upper_lower_merges_fi1_EMPTY_N :
		xbar_upper_lower_merges_fi0_EMPTY_N) ;
  assign xbar_upper_lower_merges_routeFrom_457_BIT_1_45_ETC___d4503 =
	     xbar_upper_lower_merges_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_routeFrom_457_BIT_0_ETC___d4490 ||
	     !xbar_upper_lower_merges_routeFrom[1] &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483 &&
	     IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4500 ;
  assign xbar_upper_merges_1_fo_i_notFull__692_AND_IF_x_ETC___d4708 =
	     xbar_upper_merges_1_fo_FULL_N &&
	     (xbar_upper_merges_1_routeFrom[0] ?
		xbar_upper_merges_1_fi1_EMPTY_N :
		xbar_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_merges_1_routeFrom_704_BIT_1_705_AN_ETC___d4750 =
	     xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_routeFrom_704_BIT_0_706_ETC___d4737 ||
	     !xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730 &&
	     IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4747 ;
  assign xbar_upper_merges_2_fo_i_notFull__767_AND_IF_x_ETC___d4783 =
	     xbar_upper_merges_2_fo_FULL_N &&
	     (xbar_upper_merges_2_routeFrom[0] ?
		xbar_upper_merges_2_fi1_EMPTY_N :
		xbar_upper_merges_2_fi0_EMPTY_N) ;
  assign xbar_upper_merges_2_routeFrom_779_BIT_1_780_AN_ETC___d4825 =
	     xbar_upper_merges_2_routeFrom[1] &&
	     IF_xbar_upper_merges_2_routeFrom_779_BIT_0_781_ETC___d4812 ||
	     !xbar_upper_merges_2_routeFrom[1] &&
	     IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805 &&
	     IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4822 ;
  assign xbar_upper_merges_3_fo_i_notFull__842_AND_IF_x_ETC___d4858 =
	     xbar_upper_merges_3_fo_FULL_N &&
	     (xbar_upper_merges_3_routeFrom[0] ?
		xbar_upper_merges_3_fi1_EMPTY_N :
		xbar_upper_merges_3_fi0_EMPTY_N) ;
  assign xbar_upper_merges_3_routeFrom_854_BIT_1_855_AN_ETC___d4900 =
	     xbar_upper_merges_3_routeFrom[1] &&
	     IF_xbar_upper_merges_3_routeFrom_854_BIT_0_856_ETC___d4887 ||
	     !xbar_upper_merges_3_routeFrom[1] &&
	     IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880 &&
	     IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4897 ;
  assign xbar_upper_merges_fo_i_notFull__617_AND_IF_xba_ETC___d4633 =
	     xbar_upper_merges_fo_FULL_N &&
	     (xbar_upper_merges_routeFrom[0] ?
		xbar_upper_merges_fi1_EMPTY_N :
		xbar_upper_merges_fi0_EMPTY_N) ;
  assign xbar_upper_merges_routeFrom_629_BIT_1_630_AND__ETC___d4675 =
	     xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_routeFrom_629_BIT_0_631_T_ETC___d4662 ||
	     !xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655 &&
	     IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4672 ;
  assign xbar_upper_upper_merges_1_fo_i_notFull__346_AN_ETC___d4362 =
	     xbar_upper_upper_merges_1_fo_FULL_N &&
	     (xbar_upper_upper_merges_1_routeFrom[0] ?
		xbar_upper_upper_merges_1_fi1_EMPTY_N :
		xbar_upper_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_upper_merges_1_routeFrom_358_BIT_1__ETC___d4404 =
	     xbar_upper_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_1_routeFrom_358_BIT_ETC___d4391 ||
	     !xbar_upper_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384 &&
	     IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4401 ;
  assign xbar_upper_upper_merges_fo_i_notFull__271_AND__ETC___d4287 =
	     xbar_upper_upper_merges_fo_FULL_N &&
	     (xbar_upper_upper_merges_routeFrom[0] ?
		xbar_upper_upper_merges_fi1_EMPTY_N :
		xbar_upper_upper_merges_fi0_EMPTY_N) ;
  assign xbar_upper_upper_merges_routeFrom_283_BIT_1_28_ETC___d4329 =
	     xbar_upper_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_routeFrom_283_BIT_0_ETC___d4316 ||
	     !xbar_upper_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309 &&
	     IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4326 ;
  assign y__h103534 = ringToMac_1_cycle_cnt - ringToMac_1_last_endofpacket ;
  assign y__h103621 = ringToMac_1_cycle_cnt - ringToMac_1_last_startofpacket ;
  assign y__h110566 = { 60'd0, x__h110570 } ;
  assign y__h110587 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[0] } ;
  assign y__h110599 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[1] } ;
  assign y__h110611 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[2] } ;
  assign y__h110623 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[3] } ;
  assign y__h110635 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[4] } ;
  assign y__h110647 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[5] } ;
  assign y__h110659 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_573_THEN__ETC___d2611[6] } ;
  assign y__h11652 = { 60'd0, x__h11655 } ;
  assign y__h11671 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[2] } ;
  assign y__h116818 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[2] } ;
  assign y__h11683 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[3] } ;
  assign y__h116830 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[3] } ;
  assign y__h116842 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[4] } ;
  assign y__h116854 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[5] } ;
  assign y__h116866 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[6] } ;
  assign y__h116878 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[7] } ;
  assign y__h116890 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[8] } ;
  assign y__h116902 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[9] } ;
  assign y__h116914 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[10] } ;
  assign y__h116926 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[11] } ;
  assign y__h116938 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[12] } ;
  assign y__h11695 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[4] } ;
  assign y__h116950 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[13] } ;
  assign y__h116962 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[14] } ;
  assign y__h116974 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[15] } ;
  assign y__h116986 = { 4'd0, pktBuff_2_fifoWriteData_D_OUT[16] } ;
  assign y__h11707 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[5] } ;
  assign y__h11719 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[6] } ;
  assign y__h11731 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[7] } ;
  assign y__h11743 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[8] } ;
  assign y__h122168 = ringToMac_2_cycle_cnt - ringToMac_2_last_endofpacket ;
  assign y__h122255 = ringToMac_2_cycle_cnt - ringToMac_2_last_startofpacket ;
  assign y__h129200 = { 60'd0, x__h129204 } ;
  assign y__h129221 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[0] } ;
  assign y__h129233 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[1] } ;
  assign y__h129245 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[2] } ;
  assign y__h129257 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[3] } ;
  assign y__h129269 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[4] } ;
  assign y__h129281 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[5] } ;
  assign y__h129293 =
	     { 3'd0,
	       IF_ringToMac_2_fifoTxData_read_block_017_THEN__ETC___d3055[6] } ;
  assign y__h135452 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[2] } ;
  assign y__h135464 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[3] } ;
  assign y__h135476 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[4] } ;
  assign y__h135488 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[5] } ;
  assign y__h135500 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[6] } ;
  assign y__h135512 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[7] } ;
  assign y__h135524 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[8] } ;
  assign y__h135536 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[9] } ;
  assign y__h135548 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[10] } ;
  assign y__h135560 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[11] } ;
  assign y__h135572 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[12] } ;
  assign y__h135584 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[13] } ;
  assign y__h135596 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[14] } ;
  assign y__h135608 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[15] } ;
  assign y__h135620 = { 4'd0, pktBuff_3_fifoWriteData_D_OUT[16] } ;
  assign y__h140802 = ringToMac_3_cycle_cnt - ringToMac_3_last_endofpacket ;
  assign y__h140889 = ringToMac_3_cycle_cnt - ringToMac_3_last_startofpacket ;
  assign y__h147834 = { 60'd0, x__h147838 } ;
  assign y__h147855 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[0] } ;
  assign y__h147867 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[1] } ;
  assign y__h147879 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[2] } ;
  assign y__h147891 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[3] } ;
  assign y__h147903 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[4] } ;
  assign y__h147915 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[5] } ;
  assign y__h147927 =
	     { 3'd0,
	       IF_ringToMac_3_fifoTxData_read_block_461_THEN__ETC___d3499[6] } ;
  assign y__h19894 = { 60'd0, x__h19897 } ;
  assign y__h19913 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[2] } ;
  assign y__h19925 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[3] } ;
  assign y__h19937 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[4] } ;
  assign y__h19949 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[5] } ;
  assign y__h19961 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[6] } ;
  assign y__h19973 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[7] } ;
  assign y__h19985 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[8] } ;
  assign y__h28136 = { 60'd0, x__h28139 } ;
  assign y__h28155 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[2] } ;
  assign y__h28167 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[3] } ;
  assign y__h28179 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[4] } ;
  assign y__h28191 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[5] } ;
  assign y__h28203 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[6] } ;
  assign y__h28215 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[7] } ;
  assign y__h28227 = { 3'd0, macToRing_2_gearbox_in_ff_D_OUT[8] } ;
  assign y__h36378 = { 60'd0, x__h36381 } ;
  assign y__h36397 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[2] } ;
  assign y__h36409 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[3] } ;
  assign y__h36421 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[4] } ;
  assign y__h36433 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[5] } ;
  assign y__h36445 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[6] } ;
  assign y__h36457 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[7] } ;
  assign y__h36469 = { 3'd0, macToRing_3_gearbox_in_ff_D_OUT[8] } ;
  assign y__h79547 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[2] } ;
  assign y__h79559 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[3] } ;
  assign y__h79571 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[4] } ;
  assign y__h79583 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[5] } ;
  assign y__h79595 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[6] } ;
  assign y__h79607 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[7] } ;
  assign y__h79619 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[8] } ;
  assign y__h79631 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[9] } ;
  assign y__h79643 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[10] } ;
  assign y__h79655 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[11] } ;
  assign y__h79667 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[12] } ;
  assign y__h79679 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[13] } ;
  assign y__h79691 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[14] } ;
  assign y__h79703 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[15] } ;
  assign y__h79715 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[16] } ;
  assign y__h84897 = ringToMac_0_cycle_cnt - ringToMac_0_last_endofpacket ;
  assign y__h84984 = ringToMac_0_cycle_cnt - ringToMac_0_last_startofpacket ;
  assign y__h91932 = { 60'd0, x__h91936 } ;
  assign y__h91953 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[0] } ;
  assign y__h91965 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[1] } ;
  assign y__h91977 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[2] } ;
  assign y__h91989 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[3] } ;
  assign y__h92001 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[4] } ;
  assign y__h92013 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[5] } ;
  assign y__h92025 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_129_THEN__ETC___d2167[6] } ;
  assign y__h98184 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[2] } ;
  assign y__h98196 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[3] } ;
  assign y__h98208 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[4] } ;
  assign y__h98220 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[5] } ;
  assign y__h98232 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[6] } ;
  assign y__h98244 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[7] } ;
  assign y__h98256 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[8] } ;
  assign y__h98268 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[9] } ;
  assign y__h98280 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[10] } ;
  assign y__h98292 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[11] } ;
  assign y__h98304 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[12] } ;
  assign y__h98316 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[13] } ;
  assign y__h98328 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[14] } ;
  assign y__h98340 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[15] } ;
  assign y__h98352 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[16] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (localReset_OUT_RST == `BSV_RESET_VALUE)
      begin
        hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_2_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_3_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_2_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_2_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_2_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_2_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_2_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_2_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_2_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_3_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_3_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_3_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_3_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_3_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_3_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_3_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_3_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_4_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readStarted_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	xbar_lower_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_4_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_4_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_5_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_5_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_6_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_6_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_7_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_7_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (hostchan_0_readStarted_EN)
	  hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_0_readStarted_D_IN;
	if (hostchan_1_readStarted_EN)
	  hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_1_readStarted_D_IN;
	if (hostchan_2_readStarted_EN)
	  hostchan_2_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_2_readStarted_D_IN;
	if (hostchan_3_readStarted_EN)
	  hostchan_3_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_3_readStarted_D_IN;
	if (pktBuff_0_eopDeq_EN)
	  pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopDeq_D_IN;
	if (pktBuff_0_eopEnq_EN)
	  pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopEnq_D_IN;
	if (pktBuff_0_inPacket_EN)
	  pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_0_inPacket_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_0_outPacket_EN)
	  pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_outPacket_D_IN;
	if (pktBuff_0_packetLen_EN)
	  pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_packetLen_D_IN;
	if (pktBuff_0_rdCurrPtr_EN)
	  pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_rdCurrPtr_D_IN;
	if (pktBuff_0_readStarted_EN)
	  pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_readStarted_D_IN;
	if (pktBuff_0_sopDeq_EN)
	  pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopDeq_D_IN;
	if (pktBuff_0_sopEnq_EN)
	  pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopEnq_D_IN;
	if (pktBuff_0_wrCurrPtr_EN)
	  pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_wrCurrPtr_D_IN;
	if (pktBuff_1_eopDeq_EN)
	  pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopDeq_D_IN;
	if (pktBuff_1_eopEnq_EN)
	  pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopEnq_D_IN;
	if (pktBuff_1_inPacket_EN)
	  pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_1_inPacket_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_1_outPacket_EN)
	  pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_outPacket_D_IN;
	if (pktBuff_1_packetLen_EN)
	  pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_packetLen_D_IN;
	if (pktBuff_1_rdCurrPtr_EN)
	  pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_rdCurrPtr_D_IN;
	if (pktBuff_1_readStarted_EN)
	  pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_readStarted_D_IN;
	if (pktBuff_1_sopDeq_EN)
	  pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopDeq_D_IN;
	if (pktBuff_1_sopEnq_EN)
	  pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopEnq_D_IN;
	if (pktBuff_1_wrCurrPtr_EN)
	  pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_wrCurrPtr_D_IN;
	if (pktBuff_2_eopDeq_EN)
	  pktBuff_2_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_eopDeq_D_IN;
	if (pktBuff_2_eopEnq_EN)
	  pktBuff_2_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_eopEnq_D_IN;
	if (pktBuff_2_inPacket_EN)
	  pktBuff_2_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_2_inPacket_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_2_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_2_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_2_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_2_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_2_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_2_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_2_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_2_outPacket_EN)
	  pktBuff_2_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_outPacket_D_IN;
	if (pktBuff_2_packetLen_EN)
	  pktBuff_2_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_packetLen_D_IN;
	if (pktBuff_2_rdCurrPtr_EN)
	  pktBuff_2_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_rdCurrPtr_D_IN;
	if (pktBuff_2_readStarted_EN)
	  pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_readStarted_D_IN;
	if (pktBuff_2_sopDeq_EN)
	  pktBuff_2_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_sopDeq_D_IN;
	if (pktBuff_2_sopEnq_EN)
	  pktBuff_2_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_2_sopEnq_D_IN;
	if (pktBuff_2_wrCurrPtr_EN)
	  pktBuff_2_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_wrCurrPtr_D_IN;
	if (pktBuff_3_eopDeq_EN)
	  pktBuff_3_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_eopDeq_D_IN;
	if (pktBuff_3_eopEnq_EN)
	  pktBuff_3_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_eopEnq_D_IN;
	if (pktBuff_3_inPacket_EN)
	  pktBuff_3_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_3_inPacket_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_3_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_3_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_3_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_3_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_3_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_3_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_3_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_3_outPacket_EN)
	  pktBuff_3_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_outPacket_D_IN;
	if (pktBuff_3_packetLen_EN)
	  pktBuff_3_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_packetLen_D_IN;
	if (pktBuff_3_rdCurrPtr_EN)
	  pktBuff_3_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_rdCurrPtr_D_IN;
	if (pktBuff_3_readStarted_EN)
	  pktBuff_3_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_readStarted_D_IN;
	if (pktBuff_3_sopDeq_EN)
	  pktBuff_3_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_sopDeq_D_IN;
	if (pktBuff_3_sopEnq_EN)
	  pktBuff_3_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_3_sopEnq_D_IN;
	if (pktBuff_3_wrCurrPtr_EN)
	  pktBuff_3_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_3_wrCurrPtr_D_IN;
	if (pktBuff_4_readStarted_EN)
	  pktBuff_4_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_4_readStarted_D_IN;
	if (readStarted_0_EN)
	  readStarted_0 <= `BSV_ASSIGNMENT_DELAY readStarted_0_D_IN;
	if (ringToMac_0_cycle_cnt_EN)
	  ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_cycle_cnt_D_IN;
	if (ringToMac_0_goodputCount_EN)
	  ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_goodputCount_D_IN;
	if (ringToMac_0_idleCount_EN)
	  ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idleCount_D_IN;
	if (ringToMac_0_last_endofpacket_EN)
	  ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_endofpacket_D_IN;
	if (ringToMac_0_last_startofpacket_EN)
	  ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_startofpacket_D_IN;
	if (ringToMac_1_cycle_cnt_EN)
	  ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_cycle_cnt_D_IN;
	if (ringToMac_1_goodputCount_EN)
	  ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_goodputCount_D_IN;
	if (ringToMac_1_idleCount_EN)
	  ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idleCount_D_IN;
	if (ringToMac_1_last_endofpacket_EN)
	  ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_endofpacket_D_IN;
	if (ringToMac_1_last_startofpacket_EN)
	  ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_startofpacket_D_IN;
	if (ringToMac_2_cycle_cnt_EN)
	  ringToMac_2_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_cycle_cnt_D_IN;
	if (ringToMac_2_goodputCount_EN)
	  ringToMac_2_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_goodputCount_D_IN;
	if (ringToMac_2_idleCount_EN)
	  ringToMac_2_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_idleCount_D_IN;
	if (ringToMac_2_last_endofpacket_EN)
	  ringToMac_2_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_last_endofpacket_D_IN;
	if (ringToMac_2_last_startofpacket_EN)
	  ringToMac_2_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_last_startofpacket_D_IN;
	if (ringToMac_3_cycle_cnt_EN)
	  ringToMac_3_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_cycle_cnt_D_IN;
	if (ringToMac_3_goodputCount_EN)
	  ringToMac_3_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_goodputCount_D_IN;
	if (ringToMac_3_idleCount_EN)
	  ringToMac_3_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_idleCount_D_IN;
	if (ringToMac_3_last_endofpacket_EN)
	  ringToMac_3_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_last_endofpacket_D_IN;
	if (ringToMac_3_last_startofpacket_EN)
	  ringToMac_3_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_last_startofpacket_D_IN;
	if (xbar_lower_lower_merges_1_fi0HasPrio_EN)
	  xbar_lower_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_lower_merges_1_routeFrom_EN)
	  xbar_lower_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_1_routeFrom_D_IN;
	if (xbar_lower_lower_merges_fi0HasPrio_EN)
	  xbar_lower_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_fi0HasPrio_D_IN;
	if (xbar_lower_lower_merges_routeFrom_EN)
	  xbar_lower_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_lower_merges_routeFrom_D_IN;
	if (xbar_lower_merges_1_fi0HasPrio_EN)
	  xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_merges_1_routeFrom_EN)
	  xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_routeFrom_D_IN;
	if (xbar_lower_merges_2_fi0HasPrio_EN)
	  xbar_lower_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_2_fi0HasPrio_D_IN;
	if (xbar_lower_merges_2_routeFrom_EN)
	  xbar_lower_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_2_routeFrom_D_IN;
	if (xbar_lower_merges_3_fi0HasPrio_EN)
	  xbar_lower_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_3_fi0HasPrio_D_IN;
	if (xbar_lower_merges_3_routeFrom_EN)
	  xbar_lower_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_3_routeFrom_D_IN;
	if (xbar_lower_merges_fi0HasPrio_EN)
	  xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_fi0HasPrio_D_IN;
	if (xbar_lower_merges_routeFrom_EN)
	  xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_routeFrom_D_IN;
	if (xbar_lower_upper_merges_1_fi0HasPrio_EN)
	  xbar_lower_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_upper_merges_1_routeFrom_EN)
	  xbar_lower_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_1_routeFrom_D_IN;
	if (xbar_lower_upper_merges_fi0HasPrio_EN)
	  xbar_lower_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_fi0HasPrio_D_IN;
	if (xbar_lower_upper_merges_routeFrom_EN)
	  xbar_lower_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_upper_merges_routeFrom_D_IN;
	if (xbar_merges_1_fi0HasPrio_EN)
	  xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_fi0HasPrio_D_IN;
	if (xbar_merges_1_routeFrom_EN)
	  xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_routeFrom_D_IN;
	if (xbar_merges_2_fi0HasPrio_EN)
	  xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_fi0HasPrio_D_IN;
	if (xbar_merges_2_routeFrom_EN)
	  xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_routeFrom_D_IN;
	if (xbar_merges_3_fi0HasPrio_EN)
	  xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_fi0HasPrio_D_IN;
	if (xbar_merges_3_routeFrom_EN)
	  xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_routeFrom_D_IN;
	if (xbar_merges_4_fi0HasPrio_EN)
	  xbar_merges_4_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_4_fi0HasPrio_D_IN;
	if (xbar_merges_4_routeFrom_EN)
	  xbar_merges_4_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_4_routeFrom_D_IN;
	if (xbar_merges_5_fi0HasPrio_EN)
	  xbar_merges_5_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_5_fi0HasPrio_D_IN;
	if (xbar_merges_5_routeFrom_EN)
	  xbar_merges_5_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_5_routeFrom_D_IN;
	if (xbar_merges_6_fi0HasPrio_EN)
	  xbar_merges_6_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_6_fi0HasPrio_D_IN;
	if (xbar_merges_6_routeFrom_EN)
	  xbar_merges_6_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_6_routeFrom_D_IN;
	if (xbar_merges_7_fi0HasPrio_EN)
	  xbar_merges_7_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_7_fi0HasPrio_D_IN;
	if (xbar_merges_7_routeFrom_EN)
	  xbar_merges_7_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_7_routeFrom_D_IN;
	if (xbar_merges_fi0HasPrio_EN)
	  xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_fi0HasPrio_D_IN;
	if (xbar_merges_routeFrom_EN)
	  xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_routeFrom_D_IN;
	if (xbar_upper_lower_merges_1_fi0HasPrio_EN)
	  xbar_upper_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_lower_merges_1_routeFrom_EN)
	  xbar_upper_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_1_routeFrom_D_IN;
	if (xbar_upper_lower_merges_fi0HasPrio_EN)
	  xbar_upper_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_fi0HasPrio_D_IN;
	if (xbar_upper_lower_merges_routeFrom_EN)
	  xbar_upper_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_lower_merges_routeFrom_D_IN;
	if (xbar_upper_merges_1_fi0HasPrio_EN)
	  xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_merges_1_routeFrom_EN)
	  xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_routeFrom_D_IN;
	if (xbar_upper_merges_2_fi0HasPrio_EN)
	  xbar_upper_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_2_fi0HasPrio_D_IN;
	if (xbar_upper_merges_2_routeFrom_EN)
	  xbar_upper_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_2_routeFrom_D_IN;
	if (xbar_upper_merges_3_fi0HasPrio_EN)
	  xbar_upper_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_3_fi0HasPrio_D_IN;
	if (xbar_upper_merges_3_routeFrom_EN)
	  xbar_upper_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_3_routeFrom_D_IN;
	if (xbar_upper_merges_fi0HasPrio_EN)
	  xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_fi0HasPrio_D_IN;
	if (xbar_upper_merges_routeFrom_EN)
	  xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_routeFrom_D_IN;
	if (xbar_upper_upper_merges_1_fi0HasPrio_EN)
	  xbar_upper_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_upper_merges_1_routeFrom_EN)
	  xbar_upper_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_1_routeFrom_D_IN;
	if (xbar_upper_upper_merges_fi0HasPrio_EN)
	  xbar_upper_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_fi0HasPrio_D_IN;
	if (xbar_upper_upper_merges_routeFrom_EN)
	  xbar_upper_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_upper_merges_routeFrom_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
    if (cf_verbosity_0_EN)
      cf_verbosity_0 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_D_IN;
    if (cf_verbosity_0_1_EN)
      cf_verbosity_0_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_1_D_IN;
    if (cf_verbosity_0_2_EN)
      cf_verbosity_0_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_2_D_IN;
    if (cf_verbosity_0_3_EN)
      cf_verbosity_0_3 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_3_D_IN;
    if (cf_verbosity_1_EN)
      cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_D_IN;
    if (cf_verbosity_1_1_EN)
      cf_verbosity_1_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_1_D_IN;
    if (cf_verbosity_1_2_EN)
      cf_verbosity_1_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_2_D_IN;
    if (cf_verbosity_2_EN)
      cf_verbosity_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_D_IN;
    if (cf_verbosity_2_1_EN)
      cf_verbosity_2_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_1_D_IN;
    if (cf_verbosity_2_2_EN)
      cf_verbosity_2_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_2_D_IN;
    if (cf_verbosity_3_EN)
      cf_verbosity_3 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_D_IN;
    if (cf_verbosity_3_1_EN)
      cf_verbosity_3_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_1_D_IN;
    if (cf_verbosity_3_2_EN)
      cf_verbosity_3_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_3_2_D_IN;
    if (cf_verbosity_4_EN)
      cf_verbosity_4 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_4_D_IN;
    if (hostchan_0_cf_verbosity_EN)
      hostchan_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_0_cf_verbosity_D_IN;
    if (hostchan_1_cf_verbosity_EN)
      hostchan_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_1_cf_verbosity_D_IN;
    if (hostchan_2_cf_verbosity_EN)
      hostchan_2_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_2_cf_verbosity_D_IN;
    if (hostchan_3_cf_verbosity_EN)
      hostchan_3_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_3_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_EN)
      pktBuff_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_1_EN)
      pktBuff_0_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_1_D_IN;
    if (pktBuff_1_cf_verbosity_EN)
      pktBuff_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_D_IN;
    if (pktBuff_1_cf_verbosity_1_EN)
      pktBuff_1_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_1_D_IN;
    if (pktBuff_2_cf_verbosity_EN)
      pktBuff_2_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_2_cf_verbosity_D_IN;
    if (pktBuff_2_cf_verbosity_1_EN)
      pktBuff_2_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_2_cf_verbosity_1_D_IN;
    if (pktBuff_3_cf_verbosity_EN)
      pktBuff_3_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_3_cf_verbosity_D_IN;
    if (pktBuff_3_cf_verbosity_1_EN)
      pktBuff_3_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_3_cf_verbosity_1_D_IN;
    if (pktBuff_4_cf_verbosity_EN)
      pktBuff_4_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_4_cf_verbosity_D_IN;
  end

  always@(posedge CLK_p0)
  begin
    if (RST_N_p1 == `BSV_RESET_VALUE)
      begin
        macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_2_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_2_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_2_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_2_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_3_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_3_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_3_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_3_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (macToRing_0_data_bytes_EN)
	  macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_data_bytes_D_IN;
	if (macToRing_0_gearbox_data_bytes_EN)
	  macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_data_bytes_D_IN;
	if (macToRing_0_gearbox_eopCount_EN)
	  macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_eopCount_D_IN;
	if (macToRing_0_gearbox_idle_cycles_EN)
	  macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_idle_cycles_D_IN;
	if (macToRing_0_gearbox_inProgress_EN)
	  macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_inProgress_D_IN;
	if (macToRing_0_gearbox_oddBeat_EN)
	  macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_oddBeat_D_IN;
	if (macToRing_0_gearbox_sopCount_EN)
	  macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_sopCount_D_IN;
	if (macToRing_0_gearbox_v_prev_EN)
	  macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_v_prev_D_IN;
	if (macToRing_0_total_cycles_EN)
	  macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_total_cycles_D_IN;
	if (macToRing_1_data_bytes_EN)
	  macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_data_bytes_D_IN;
	if (macToRing_1_gearbox_data_bytes_EN)
	  macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_data_bytes_D_IN;
	if (macToRing_1_gearbox_eopCount_EN)
	  macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_eopCount_D_IN;
	if (macToRing_1_gearbox_idle_cycles_EN)
	  macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_idle_cycles_D_IN;
	if (macToRing_1_gearbox_inProgress_EN)
	  macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_inProgress_D_IN;
	if (macToRing_1_gearbox_oddBeat_EN)
	  macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_oddBeat_D_IN;
	if (macToRing_1_gearbox_sopCount_EN)
	  macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_sopCount_D_IN;
	if (macToRing_1_gearbox_v_prev_EN)
	  macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_v_prev_D_IN;
	if (macToRing_1_total_cycles_EN)
	  macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_total_cycles_D_IN;
	if (macToRing_2_data_bytes_EN)
	  macToRing_2_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_data_bytes_D_IN;
	if (macToRing_2_gearbox_data_bytes_EN)
	  macToRing_2_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_data_bytes_D_IN;
	if (macToRing_2_gearbox_eopCount_EN)
	  macToRing_2_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_eopCount_D_IN;
	if (macToRing_2_gearbox_idle_cycles_EN)
	  macToRing_2_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_idle_cycles_D_IN;
	if (macToRing_2_gearbox_inProgress_EN)
	  macToRing_2_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_inProgress_D_IN;
	if (macToRing_2_gearbox_oddBeat_EN)
	  macToRing_2_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_oddBeat_D_IN;
	if (macToRing_2_gearbox_sopCount_EN)
	  macToRing_2_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_sopCount_D_IN;
	if (macToRing_2_gearbox_v_prev_EN)
	  macToRing_2_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_gearbox_v_prev_D_IN;
	if (macToRing_2_total_cycles_EN)
	  macToRing_2_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_2_total_cycles_D_IN;
	if (macToRing_3_data_bytes_EN)
	  macToRing_3_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_data_bytes_D_IN;
	if (macToRing_3_gearbox_data_bytes_EN)
	  macToRing_3_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_data_bytes_D_IN;
	if (macToRing_3_gearbox_eopCount_EN)
	  macToRing_3_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_eopCount_D_IN;
	if (macToRing_3_gearbox_idle_cycles_EN)
	  macToRing_3_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_idle_cycles_D_IN;
	if (macToRing_3_gearbox_inProgress_EN)
	  macToRing_3_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_inProgress_D_IN;
	if (macToRing_3_gearbox_oddBeat_EN)
	  macToRing_3_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_oddBeat_D_IN;
	if (macToRing_3_gearbox_sopCount_EN)
	  macToRing_3_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_sopCount_D_IN;
	if (macToRing_3_gearbox_v_prev_EN)
	  macToRing_3_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_gearbox_v_prev_D_IN;
	if (macToRing_3_total_cycles_EN)
	  macToRing_3_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_3_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2)
  begin
    if (RST_N_p3 == `BSV_RESET_VALUE)
      begin
        ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_2_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_2_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_2_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_2_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_3_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_3_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_3_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_3_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (ringToMac_0_data_bytes_EN)
	  ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_data_bytes_D_IN;
	if (ringToMac_0_eopCount_EN)
	  ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_eopCount_D_IN;
	if (ringToMac_0_fifoTxData_block0_EN)
	  ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_D_IN;
	if (ringToMac_0_fifoTxData_block0_status_EN)
	  ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_status_D_IN;
	if (ringToMac_0_fifoTxData_block1_EN)
	  ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_D_IN;
	if (ringToMac_0_fifoTxData_block1_status_EN)
	  ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_status_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_0_EN)
	  ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_1_EN)
	  ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_0_EN)
	  ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_1_EN)
	  ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_0_fifoTxData_read_block_EN)
	  ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_read_block_D_IN;
	if (ringToMac_0_fifoTxData_write_block_EN)
	  ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_write_block_D_IN;
	if (ringToMac_0_idle_cycles_EN)
	  ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idle_cycles_D_IN;
	if (ringToMac_0_sopCount_EN)
	  ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_sopCount_D_IN;
	if (ringToMac_0_total_cycles_EN)
	  ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_total_cycles_D_IN;
	if (ringToMac_1_data_bytes_EN)
	  ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_data_bytes_D_IN;
	if (ringToMac_1_eopCount_EN)
	  ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_eopCount_D_IN;
	if (ringToMac_1_fifoTxData_block0_EN)
	  ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_D_IN;
	if (ringToMac_1_fifoTxData_block0_status_EN)
	  ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_status_D_IN;
	if (ringToMac_1_fifoTxData_block1_EN)
	  ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_D_IN;
	if (ringToMac_1_fifoTxData_block1_status_EN)
	  ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_status_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_0_EN)
	  ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_1_EN)
	  ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_0_EN)
	  ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_1_EN)
	  ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_1_fifoTxData_read_block_EN)
	  ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_read_block_D_IN;
	if (ringToMac_1_fifoTxData_write_block_EN)
	  ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_write_block_D_IN;
	if (ringToMac_1_idle_cycles_EN)
	  ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idle_cycles_D_IN;
	if (ringToMac_1_sopCount_EN)
	  ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_sopCount_D_IN;
	if (ringToMac_1_total_cycles_EN)
	  ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_total_cycles_D_IN;
	if (ringToMac_2_data_bytes_EN)
	  ringToMac_2_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_data_bytes_D_IN;
	if (ringToMac_2_eopCount_EN)
	  ringToMac_2_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_eopCount_D_IN;
	if (ringToMac_2_fifoTxData_block0_EN)
	  ringToMac_2_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block0_D_IN;
	if (ringToMac_2_fifoTxData_block0_status_EN)
	  ringToMac_2_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block0_status_D_IN;
	if (ringToMac_2_fifoTxData_block1_EN)
	  ringToMac_2_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block1_D_IN;
	if (ringToMac_2_fifoTxData_block1_status_EN)
	  ringToMac_2_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_block1_status_D_IN;
	if (ringToMac_2_fifoTxData_elem0_status_0_EN)
	  ringToMac_2_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_2_fifoTxData_elem0_status_1_EN)
	  ringToMac_2_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_2_fifoTxData_elem1_status_0_EN)
	  ringToMac_2_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_2_fifoTxData_elem1_status_1_EN)
	  ringToMac_2_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_2_fifoTxData_read_block_EN)
	  ringToMac_2_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_read_block_D_IN;
	if (ringToMac_2_fifoTxData_write_block_EN)
	  ringToMac_2_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_fifoTxData_write_block_D_IN;
	if (ringToMac_2_idle_cycles_EN)
	  ringToMac_2_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_idle_cycles_D_IN;
	if (ringToMac_2_sopCount_EN)
	  ringToMac_2_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_sopCount_D_IN;
	if (ringToMac_2_total_cycles_EN)
	  ringToMac_2_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_2_total_cycles_D_IN;
	if (ringToMac_3_data_bytes_EN)
	  ringToMac_3_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_data_bytes_D_IN;
	if (ringToMac_3_eopCount_EN)
	  ringToMac_3_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_eopCount_D_IN;
	if (ringToMac_3_fifoTxData_block0_EN)
	  ringToMac_3_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block0_D_IN;
	if (ringToMac_3_fifoTxData_block0_status_EN)
	  ringToMac_3_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block0_status_D_IN;
	if (ringToMac_3_fifoTxData_block1_EN)
	  ringToMac_3_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block1_D_IN;
	if (ringToMac_3_fifoTxData_block1_status_EN)
	  ringToMac_3_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_block1_status_D_IN;
	if (ringToMac_3_fifoTxData_elem0_status_0_EN)
	  ringToMac_3_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_3_fifoTxData_elem0_status_1_EN)
	  ringToMac_3_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_3_fifoTxData_elem1_status_0_EN)
	  ringToMac_3_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_3_fifoTxData_elem1_status_1_EN)
	  ringToMac_3_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_3_fifoTxData_read_block_EN)
	  ringToMac_3_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_read_block_D_IN;
	if (ringToMac_3_fifoTxData_write_block_EN)
	  ringToMac_3_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_fifoTxData_write_block_D_IN;
	if (ringToMac_3_idle_cycles_EN)
	  ringToMac_3_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_idle_cycles_D_IN;
	if (ringToMac_3_sopCount_EN)
	  ringToMac_3_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_sopCount_D_IN;
	if (ringToMac_3_total_cycles_EN)
	  ringToMac_3_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_3_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_3_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_3_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_3_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_3_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_3_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_3_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_3_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_3_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_3_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_3_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_3_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_3_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_2_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_2_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_2_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_2_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_2_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_2_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_2_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_2_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_2_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_2_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_2_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_2_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    cf_verbosity_0 = 32'hAAAAAAAA;
    cf_verbosity_0_1 = 32'hAAAAAAAA;
    cf_verbosity_0_2 = 32'hAAAAAAAA;
    cf_verbosity_0_3 = 32'hAAAAAAAA;
    cf_verbosity_1 = 32'hAAAAAAAA;
    cf_verbosity_1_1 = 32'hAAAAAAAA;
    cf_verbosity_1_2 = 32'hAAAAAAAA;
    cf_verbosity_2 = 32'hAAAAAAAA;
    cf_verbosity_2_1 = 32'hAAAAAAAA;
    cf_verbosity_2_2 = 32'hAAAAAAAA;
    cf_verbosity_3 = 32'hAAAAAAAA;
    cf_verbosity_3_1 = 32'hAAAAAAAA;
    cf_verbosity_3_2 = 32'hAAAAAAAA;
    cf_verbosity_4 = 32'hAAAAAAAA;
    hostchan_0_cf_verbosity = 32'hAAAAAAAA;
    hostchan_0_readStarted = 1'h0;
    hostchan_1_cf_verbosity = 32'hAAAAAAAA;
    hostchan_1_readStarted = 1'h0;
    hostchan_2_cf_verbosity = 32'hAAAAAAAA;
    hostchan_2_readStarted = 1'h0;
    hostchan_3_cf_verbosity = 32'hAAAAAAAA;
    hostchan_3_readStarted = 1'h0;
    macToRing_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_inProgress = 1'h0;
    macToRing_0_gearbox_oddBeat = 1'h0;
    macToRing_0_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_inProgress = 1'h0;
    macToRing_1_gearbox_oddBeat = 1'h0;
    macToRing_1_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_inProgress = 1'h0;
    macToRing_2_gearbox_oddBeat = 1'h0;
    macToRing_2_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_2_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_2_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_inProgress = 1'h0;
    macToRing_3_gearbox_oddBeat = 1'h0;
    macToRing_3_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_3_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_3_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_0_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_0_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_inPacket = 1'h0;
    pktBuff_0_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_0_outPacket = 1'h0;
    pktBuff_0_packetLen = 16'hAAAA;
    pktBuff_0_rdCurrPtr = 8'hAA;
    pktBuff_0_readStarted = 1'h0;
    pktBuff_0_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_wrCurrPtr = 8'hAA;
    pktBuff_1_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_1_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_1_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_inPacket = 1'h0;
    pktBuff_1_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_1_outPacket = 1'h0;
    pktBuff_1_packetLen = 16'hAAAA;
    pktBuff_1_rdCurrPtr = 8'hAA;
    pktBuff_1_readStarted = 1'h0;
    pktBuff_1_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_wrCurrPtr = 8'hAA;
    pktBuff_2_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_2_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_2_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_inPacket = 1'h0;
    pktBuff_2_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_2_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_2_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_2_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_2_outPacket = 1'h0;
    pktBuff_2_packetLen = 16'hAAAA;
    pktBuff_2_rdCurrPtr = 8'hAA;
    pktBuff_2_readStarted = 1'h0;
    pktBuff_2_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_2_wrCurrPtr = 8'hAA;
    pktBuff_3_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_3_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_3_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_inPacket = 1'h0;
    pktBuff_3_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_3_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_3_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_3_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_3_outPacket = 1'h0;
    pktBuff_3_packetLen = 16'hAAAA;
    pktBuff_3_rdCurrPtr = 8'hAA;
    pktBuff_3_readStarted = 1'h0;
    pktBuff_3_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_3_wrCurrPtr = 8'hAA;
    pktBuff_4_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_4_readStarted = 1'h0;
    readStarted_0 = 1'h0;
    ringToMac_0_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0_status = 1'h0;
    ringToMac_0_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block1_status = 1'h0;
    ringToMac_0_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_0_fifoTxData_read_block = 1'h0;
    ringToMac_0_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_write_block = 1'h0;
    ringToMac_0_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0_status = 1'h0;
    ringToMac_1_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block1_status = 1'h0;
    ringToMac_1_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_1_fifoTxData_read_block = 1'h0;
    ringToMac_1_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_write_block = 1'h0;
    ringToMac_1_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block0_status = 1'h0;
    ringToMac_2_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_2_fifoTxData_block1_status = 1'h0;
    ringToMac_2_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_2_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_2_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_2_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_2_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_2_fifoTxData_read_block = 1'h0;
    ringToMac_2_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_2_fifoTxData_write_block = 1'h0;
    ringToMac_2_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_2_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block0_status = 1'h0;
    ringToMac_3_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_3_fifoTxData_block1_status = 1'h0;
    ringToMac_3_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_3_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_3_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_3_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_3_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_3_fifoTxData_read_block = 1'h0;
    ringToMac_3_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_3_fifoTxData_write_block = 1'h0;
    ringToMac_3_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_3_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    xbar_lower_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_lower_merges_1_routeFrom = 2'h2;
    xbar_lower_lower_merges_fi0HasPrio = 1'h0;
    xbar_lower_lower_merges_routeFrom = 2'h2;
    xbar_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_merges_1_routeFrom = 2'h2;
    xbar_lower_merges_2_fi0HasPrio = 1'h0;
    xbar_lower_merges_2_routeFrom = 2'h2;
    xbar_lower_merges_3_fi0HasPrio = 1'h0;
    xbar_lower_merges_3_routeFrom = 2'h2;
    xbar_lower_merges_fi0HasPrio = 1'h0;
    xbar_lower_merges_routeFrom = 2'h2;
    xbar_lower_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_upper_merges_1_routeFrom = 2'h2;
    xbar_lower_upper_merges_fi0HasPrio = 1'h0;
    xbar_lower_upper_merges_routeFrom = 2'h2;
    xbar_merges_1_fi0HasPrio = 1'h0;
    xbar_merges_1_routeFrom = 2'h2;
    xbar_merges_2_fi0HasPrio = 1'h0;
    xbar_merges_2_routeFrom = 2'h2;
    xbar_merges_3_fi0HasPrio = 1'h0;
    xbar_merges_3_routeFrom = 2'h2;
    xbar_merges_4_fi0HasPrio = 1'h0;
    xbar_merges_4_routeFrom = 2'h2;
    xbar_merges_5_fi0HasPrio = 1'h0;
    xbar_merges_5_routeFrom = 2'h2;
    xbar_merges_6_fi0HasPrio = 1'h0;
    xbar_merges_6_routeFrom = 2'h2;
    xbar_merges_7_fi0HasPrio = 1'h0;
    xbar_merges_7_routeFrom = 2'h2;
    xbar_merges_fi0HasPrio = 1'h0;
    xbar_merges_routeFrom = 2'h2;
    xbar_upper_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_lower_merges_1_routeFrom = 2'h2;
    xbar_upper_lower_merges_fi0HasPrio = 1'h0;
    xbar_upper_lower_merges_routeFrom = 2'h2;
    xbar_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_merges_1_routeFrom = 2'h2;
    xbar_upper_merges_2_fi0HasPrio = 1'h0;
    xbar_upper_merges_2_routeFrom = 2'h2;
    xbar_upper_merges_3_fi0HasPrio = 1'h0;
    xbar_upper_merges_3_routeFrom = 2'h2;
    xbar_upper_merges_fi0HasPrio = 1'h0;
    xbar_upper_merges_routeFrom = 2'h2;
    xbar_upper_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_upper_merges_1_routeFrom = 2'h2;
    xbar_upper_upper_merges_fi0HasPrio = 1'h0;
    xbar_upper_upper_merges_routeFrom = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	begin
	  v__h256636 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	$display("(%0d) set verbosity to %d",
		 v__h256636,
		 $signed(set_verbosity_verbosity));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	begin
	  v___1__h223601 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h223601);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_0_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_0_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_0_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_0_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_0_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	begin
	  v___1__h223858 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h223858);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_5_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_5_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_5_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_5_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_5_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_5_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	begin
	  v___1__h224118 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h224118);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_6_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_6_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_6_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_6_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_6_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_6_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	begin
	  v___1__h224378 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h224378);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_7_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_7_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_7_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_7_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_7_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_7_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_2_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_2_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_2_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_2_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_3_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_3_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_3_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_3_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	begin
	  v__h175717 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h175717,
	       xbar_upper_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[577:66] :
		 xbar_upper_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[65:2] :
		 xbar_upper_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[609:578] :
		 xbar_upper_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_upper_merges_routeFrom[0] ?
		 xbar_upper_upper_merges_fi1_D_OUT[1] :
		 xbar_upper_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_routeFrom_283_BIT_0_ETC___d4316);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  xbar_upper_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	begin
	  v__h175784 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h175784);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[577:66] :
		 xbar_upper_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[65:2] :
		 xbar_upper_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_fi0HasPrio ?
		 xbar_upper_upper_merges_fi0_D_OUT[609:578] :
		 xbar_upper_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4309);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_fi0HasPrio_288_THEN_ETC___d4326);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_both_have_data &&
	  !xbar_upper_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	begin
	  v__h176764 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h176764,
	       xbar_upper_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_upper_merges_1_routeFrom[0] ?
		 xbar_upper_upper_merges_1_fi1_D_OUT[1] :
		 xbar_upper_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_1_routeFrom_358_BIT_ETC___d4391);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  xbar_upper_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	begin
	  v__h176830 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h176830);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_upper_merges_1_fi0HasPrio ?
		 xbar_upper_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4384);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_upper_merges_1_fi0HasPrio_363_TH_ETC___d4401);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_merges_1_both_have_data &&
	  !xbar_upper_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route)
	$display("%x %x %d",
		 xbar_upper_upper_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  xbar_upper_upper_upper_f_D_OUT[578])
	begin
	  v__h177472 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  xbar_upper_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h177472,
		 $signed(32'd1),
		 xbar_upper_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  !xbar_upper_upper_upper_f_D_OUT[578])
	begin
	  v__h177413 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route &&
	  !xbar_upper_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h177413,
		 $signed(32'd0),
		 xbar_upper_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1)
	$display("%x %x %d",
		 xbar_upper_upper_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  xbar_upper_upper_lower_f_D_OUT[578])
	begin
	  v__h177829 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  xbar_upper_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h177829,
		 $signed(32'd1),
		 !xbar_upper_upper_lower_f_D_OUT[578],
		 xbar_upper_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  !xbar_upper_upper_lower_f_D_OUT[578])
	begin
	  v__h177882 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_upper_route_1 &&
	  !xbar_upper_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h177882,
		 $signed(32'd0),
		 !xbar_upper_upper_lower_f_D_OUT[578],
		 xbar_upper_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	begin
	  v__h178924 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h178924,
	       xbar_upper_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[577:66] :
		 xbar_upper_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[65:2] :
		 xbar_upper_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[609:578] :
		 xbar_upper_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_lower_merges_routeFrom[0] ?
		 xbar_upper_lower_merges_fi1_D_OUT[1] :
		 xbar_upper_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_routeFrom_457_BIT_0_ETC___d4490);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  xbar_upper_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	begin
	  v__h178990 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h178990);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[577:66] :
		 xbar_upper_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[65:2] :
		 xbar_upper_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_fi0HasPrio ?
		 xbar_upper_lower_merges_fi0_D_OUT[609:578] :
		 xbar_upper_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4483);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_fi0HasPrio_462_THEN_ETC___d4500);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_both_have_data &&
	  !xbar_upper_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	begin
	  v__h179970 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h179970,
	       xbar_upper_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_lower_merges_1_routeFrom[0] ?
		 xbar_upper_lower_merges_1_fi1_D_OUT[1] :
		 xbar_upper_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_1_routeFrom_532_BIT_ETC___d4565);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  xbar_upper_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	begin
	  v__h180036 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h180036);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_lower_merges_1_fi0HasPrio ?
		 xbar_upper_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4558);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_lower_merges_1_fi0HasPrio_537_TH_ETC___d4575);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_merges_1_both_have_data &&
	  !xbar_upper_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route)
	$display("%x %x %d",
		 xbar_upper_lower_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  xbar_upper_lower_upper_f_D_OUT[578])
	begin
	  v__h180678 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  xbar_upper_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h180678,
		 $signed(32'd1),
		 xbar_upper_lower_upper_f_D_OUT[578],
		 xbar_upper_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  !xbar_upper_lower_upper_f_D_OUT[578])
	begin
	  v__h180619 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route &&
	  !xbar_upper_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h180619,
		 $signed(32'd0),
		 xbar_upper_lower_upper_f_D_OUT[578],
		 xbar_upper_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1)
	$display("%x %x %d",
		 xbar_upper_lower_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  xbar_upper_lower_lower_f_D_OUT[578])
	begin
	  v__h181035 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  xbar_upper_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h181035,
		 $signed(32'd1),
		 !xbar_upper_lower_lower_f_D_OUT[578],
		 xbar_upper_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  !xbar_upper_lower_lower_f_D_OUT[578])
	begin
	  v__h181088 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_lower_route_1 &&
	  !xbar_upper_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h181088,
		 $signed(32'd0),
		 !xbar_upper_lower_lower_f_D_OUT[578],
		 xbar_upper_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	begin
	  v__h181892 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h181892,
	       xbar_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[577:66] :
		 xbar_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[65:2] :
		 xbar_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[609:578] :
		 xbar_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[1] :
		 xbar_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_routeFrom_629_BIT_0_631_T_ETC___d4662);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	begin
	  v__h181958 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h181958);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[577:66] :
		 xbar_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[65:2] :
		 xbar_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[609:578] :
		 xbar_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4655);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_634_THEN_xbar__ETC___d4672);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h182938 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h182938,
	       xbar_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[1] :
		 xbar_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_routeFrom_704_BIT_0_706_ETC___d4737);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h183004 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h183004);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4730);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_709_THEN_xba_ETC___d4747);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	begin
	  v__h183984 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h183984,
	       xbar_upper_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[577:66] :
		 xbar_upper_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[65:2] :
		 xbar_upper_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[609:578] :
		 xbar_upper_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_2_routeFrom[0] ?
		 xbar_upper_merges_2_fi1_D_OUT[1] :
		 xbar_upper_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_2_routeFrom_779_BIT_0_781_ETC___d4812);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  xbar_upper_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	begin
	  v__h184050 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h184050);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[577:66] :
		 xbar_upper_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[65:2] :
		 xbar_upper_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_2_fi0HasPrio ?
		 xbar_upper_merges_2_fi0_D_OUT[609:578] :
		 xbar_upper_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4805);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_2_fi0HasPrio_784_THEN_xba_ETC___d4822);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_2_both_have_data &&
	  !xbar_upper_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route)
	$display("%x %x %d",
		 xbar_upper_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  xbar_upper_upper_merges_fo_D_OUT[579])
	begin
	  v__h185769 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  xbar_upper_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h185769,
		 $signed(32'd2),
		 xbar_upper_upper_merges_fo_D_OUT[579],
		 xbar_upper_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  !xbar_upper_upper_merges_fo_D_OUT[579])
	begin
	  v__h185710 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route &&
	  !xbar_upper_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h185710,
		 $signed(32'd0),
		 xbar_upper_upper_merges_fo_D_OUT[579],
		 xbar_upper_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2)
	$display("%x %x %d",
		 xbar_upper_lower_merges_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  xbar_upper_lower_merges_fo_D_OUT[579])
	begin
	  v__h186591 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  xbar_upper_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h186591,
		 $signed(32'd2),
		 !xbar_upper_lower_merges_fo_D_OUT[579],
		 xbar_upper_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  !xbar_upper_lower_merges_fo_D_OUT[579])
	begin
	  v__h186644 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_2 &&
	  !xbar_upper_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h186644,
		 $signed(32'd0),
		 !xbar_upper_lower_merges_fo_D_OUT[579],
		 xbar_upper_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	begin
	  v__h185030 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h185030,
	       xbar_upper_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[577:66] :
		 xbar_upper_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[65:2] :
		 xbar_upper_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[609:578] :
		 xbar_upper_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_3_routeFrom[0] ?
		 xbar_upper_merges_3_fi1_D_OUT[1] :
		 xbar_upper_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_3_routeFrom_854_BIT_0_856_ETC___d4887);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  xbar_upper_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	begin
	  v__h185096 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h185096);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[577:66] :
		 xbar_upper_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[65:2] :
		 xbar_upper_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_3_fi0HasPrio ?
		 xbar_upper_merges_3_fi0_D_OUT[609:578] :
		 xbar_upper_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4880);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_3_fi0HasPrio_859_THEN_xba_ETC___d4897);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_3_both_have_data &&
	  !xbar_upper_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1)
	$display("%x %x %d",
		 xbar_upper_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  xbar_upper_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h186197 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  xbar_upper_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h186197,
		 $signed(32'd3),
		 xbar_upper_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  !xbar_upper_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h186143 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 &&
	  !xbar_upper_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h186143,
		 $signed(32'd1),
		 xbar_upper_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3)
	$display("%x %x %d",
		 xbar_upper_lower_merges_1_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  xbar_upper_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h187017 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  xbar_upper_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187017,
		 $signed(32'd3),
		 !xbar_upper_lower_merges_1_fo_D_OUT[579],
		 xbar_upper_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  !xbar_upper_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h187070 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_3 &&
	  !xbar_upper_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h187070,
		 $signed(32'd1),
		 !xbar_upper_lower_merges_1_fo_D_OUT[579],
		 xbar_upper_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	begin
	  v__h188137 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h188137,
	       xbar_lower_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[577:66] :
		 xbar_lower_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[65:2] :
		 xbar_lower_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[609:578] :
		 xbar_lower_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_upper_merges_routeFrom[0] ?
		 xbar_lower_upper_merges_fi1_D_OUT[1] :
		 xbar_lower_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_routeFrom_975_BIT_0_ETC___d5008);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  xbar_lower_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	begin
	  v__h188203 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h188203);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[577:66] :
		 xbar_lower_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[65:2] :
		 xbar_lower_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_fi0HasPrio ?
		 xbar_lower_upper_merges_fi0_D_OUT[609:578] :
		 xbar_lower_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5001);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_fi0HasPrio_980_THEN_ETC___d5018);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_both_have_data &&
	  !xbar_lower_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	begin
	  v__h189183 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h189183,
	       xbar_lower_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_upper_merges_1_routeFrom[0] ?
		 xbar_lower_upper_merges_1_fi1_D_OUT[1] :
		 xbar_lower_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_1_routeFrom_050_BIT_ETC___d5083);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  xbar_lower_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	begin
	  v__h189249 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h189249);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_upper_merges_1_fi0HasPrio ?
		 xbar_lower_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5076);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_upper_merges_1_fi0HasPrio_055_TH_ETC___d5093);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_merges_1_both_have_data &&
	  !xbar_lower_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route)
	$display("%x %x %d",
		 xbar_lower_upper_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  xbar_lower_upper_upper_f_D_OUT[578])
	begin
	  v__h189891 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  xbar_lower_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h189891,
		 $signed(32'd1),
		 xbar_lower_upper_upper_f_D_OUT[578],
		 xbar_lower_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  !xbar_lower_upper_upper_f_D_OUT[578])
	begin
	  v__h189832 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route &&
	  !xbar_lower_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h189832,
		 $signed(32'd0),
		 xbar_lower_upper_upper_f_D_OUT[578],
		 xbar_lower_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1)
	$display("%x %x %d",
		 xbar_lower_upper_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  xbar_lower_upper_lower_f_D_OUT[578])
	begin
	  v__h190248 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  xbar_lower_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h190248,
		 $signed(32'd1),
		 !xbar_lower_upper_lower_f_D_OUT[578],
		 xbar_lower_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  !xbar_lower_upper_lower_f_D_OUT[578])
	begin
	  v__h190301 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_upper_route_1 &&
	  !xbar_lower_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h190301,
		 $signed(32'd0),
		 !xbar_lower_upper_lower_f_D_OUT[578],
		 xbar_lower_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	begin
	  v__h191343 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h191343,
	       xbar_lower_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[577:66] :
		 xbar_lower_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[65:2] :
		 xbar_lower_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[609:578] :
		 xbar_lower_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_lower_merges_routeFrom[0] ?
		 xbar_lower_lower_merges_fi1_D_OUT[1] :
		 xbar_lower_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_routeFrom_147_BIT_0_ETC___d5180);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  xbar_lower_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	begin
	  v__h191409 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h191409);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[577:66] :
		 xbar_lower_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[65:2] :
		 xbar_lower_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_fi0HasPrio ?
		 xbar_lower_lower_merges_fi0_D_OUT[609:578] :
		 xbar_lower_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5173);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_fi0HasPrio_152_THEN_ETC___d5190);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_both_have_data &&
	  !xbar_lower_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	begin
	  v__h192389 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h192389,
	       xbar_lower_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_lower_merges_1_routeFrom[0] ?
		 xbar_lower_lower_merges_1_fi1_D_OUT[1] :
		 xbar_lower_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_1_routeFrom_222_BIT_ETC___d5255);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  xbar_lower_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	begin
	  v__h192455 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h192455);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_lower_merges_1_fi0HasPrio ?
		 xbar_lower_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5248);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_lower_merges_1_fi0HasPrio_227_TH_ETC___d5265);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_merges_1_both_have_data &&
	  !xbar_lower_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route)
	$display("%x %x %d",
		 xbar_lower_lower_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  xbar_lower_lower_upper_f_D_OUT[578])
	begin
	  v__h193097 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  xbar_lower_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193097,
		 $signed(32'd1),
		 xbar_lower_lower_upper_f_D_OUT[578],
		 xbar_lower_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  !xbar_lower_lower_upper_f_D_OUT[578])
	begin
	  v__h193038 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route &&
	  !xbar_lower_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193038,
		 $signed(32'd0),
		 xbar_lower_lower_upper_f_D_OUT[578],
		 xbar_lower_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1)
	$display("%x %x %d",
		 xbar_lower_lower_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  xbar_lower_lower_lower_f_D_OUT[578])
	begin
	  v__h193454 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  xbar_lower_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193454,
		 $signed(32'd1),
		 !xbar_lower_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  !xbar_lower_lower_lower_f_D_OUT[578])
	begin
	  v__h193507 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_lower_route_1 &&
	  !xbar_lower_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h193507,
		 $signed(32'd0),
		 !xbar_lower_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	begin
	  v__h194311 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h194311,
	       xbar_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[577:66] :
		 xbar_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[65:2] :
		 xbar_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[609:578] :
		 xbar_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[1] :
		 xbar_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_routeFrom_319_BIT_0_321_T_ETC___d5352);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	begin
	  v__h194377 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h194377);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[577:66] :
		 xbar_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[65:2] :
		 xbar_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[609:578] :
		 xbar_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5345);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_324_THEN_xbar__ETC___d5362);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h195357 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h195357,
	       xbar_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[1] :
		 xbar_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_routeFrom_394_BIT_0_396_ETC___d5427);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h195423 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h195423);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5420);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_399_THEN_xba_ETC___d5437);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	begin
	  v__h196403 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h196403,
	       xbar_lower_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[577:66] :
		 xbar_lower_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[65:2] :
		 xbar_lower_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[609:578] :
		 xbar_lower_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_2_routeFrom[0] ?
		 xbar_lower_merges_2_fi1_D_OUT[1] :
		 xbar_lower_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_2_routeFrom_469_BIT_0_471_ETC___d5502);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  xbar_lower_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	begin
	  v__h196469 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h196469);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[577:66] :
		 xbar_lower_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[65:2] :
		 xbar_lower_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_2_fi0HasPrio ?
		 xbar_lower_merges_2_fi0_D_OUT[609:578] :
		 xbar_lower_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5495);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_2_fi0HasPrio_474_THEN_xba_ETC___d5512);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_2_both_have_data &&
	  !xbar_lower_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route)
	$display("%x %x %d",
		 xbar_lower_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  xbar_lower_upper_merges_fo_D_OUT[579])
	begin
	  v__h198188 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  xbar_lower_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h198188,
		 $signed(32'd2),
		 xbar_lower_upper_merges_fo_D_OUT[579],
		 xbar_lower_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  !xbar_lower_upper_merges_fo_D_OUT[579])
	begin
	  v__h198129 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route &&
	  !xbar_lower_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h198129,
		 $signed(32'd0),
		 xbar_lower_upper_merges_fo_D_OUT[579],
		 xbar_lower_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2)
	$display("%x %x %d",
		 xbar_lower_lower_merges_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  xbar_lower_lower_merges_fo_D_OUT[579])
	begin
	  v__h199010 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  xbar_lower_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199010,
		 $signed(32'd2),
		 !xbar_lower_lower_merges_fo_D_OUT[579],
		 xbar_lower_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  !xbar_lower_lower_merges_fo_D_OUT[579])
	begin
	  v__h199063 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_2 &&
	  !xbar_lower_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199063,
		 $signed(32'd0),
		 !xbar_lower_lower_merges_fo_D_OUT[579],
		 xbar_lower_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	begin
	  v__h197449 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h197449,
	       xbar_lower_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[577:66] :
		 xbar_lower_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[65:2] :
		 xbar_lower_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[609:578] :
		 xbar_lower_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_3_routeFrom[0] ?
		 xbar_lower_merges_3_fi1_D_OUT[1] :
		 xbar_lower_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_3_routeFrom_544_BIT_0_546_ETC___d5577);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  xbar_lower_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	begin
	  v__h197515 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h197515);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[577:66] :
		 xbar_lower_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[65:2] :
		 xbar_lower_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_3_fi0HasPrio ?
		 xbar_lower_merges_3_fi0_D_OUT[609:578] :
		 xbar_lower_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5570);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_3_fi0HasPrio_549_THEN_xba_ETC___d5587);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_3_both_have_data &&
	  !xbar_lower_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1)
	$display("%x %x %d",
		 xbar_lower_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  xbar_lower_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h198616 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  xbar_lower_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h198616,
		 $signed(32'd3),
		 xbar_lower_upper_merges_1_fo_D_OUT[579],
		 xbar_lower_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  !xbar_lower_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h198562 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 &&
	  !xbar_lower_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h198562,
		 $signed(32'd1),
		 xbar_lower_upper_merges_1_fo_D_OUT[579],
		 xbar_lower_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3)
	$display("%x %x %d",
		 xbar_lower_lower_merges_1_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  xbar_lower_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h199436 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  xbar_lower_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199436,
		 $signed(32'd3),
		 !xbar_lower_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  !xbar_lower_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h199489 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_3 &&
	  !xbar_lower_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h199489,
		 $signed(32'd1),
		 !xbar_lower_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	begin
	  v__h200302 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("(%0d) both avail %d ", v__h200302, xbar_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[577:66] :
		 xbar_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[65:2] :
		 xbar_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[609:578] :
		 xbar_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[1] :
		 xbar_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_routeFrom_663_BIT_0_665_THEN_xb_ETC___d5696);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	begin
	  v__h200368 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h200368);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[577:66] :
		 xbar_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[65:2] :
		 xbar_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[609:578] :
		 xbar_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5689);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_fi0HasPrio_668_THEN_xbar_merges_ETC___d5706);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	begin
	  v__h201348 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h201348,
	       xbar_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[577:66] :
		 xbar_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[65:2] :
		 xbar_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[609:578] :
		 xbar_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[1] :
		 xbar_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_routeFrom_738_BIT_0_740_THEN__ETC___d5771);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	begin
	  v__h201414 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h201414);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[577:66] :
		 xbar_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[65:2] :
		 xbar_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[609:578] :
		 xbar_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5764);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_fi0HasPrio_743_THEN_xbar_merg_ETC___d5781);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	begin
	  v__h202394 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h202394,
	       xbar_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[577:66] :
		 xbar_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[65:2] :
		 xbar_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[609:578] :
		 xbar_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[1] :
		 xbar_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_routeFrom_813_BIT_0_815_THEN__ETC___d5846);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	begin
	  v__h202460 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h202460);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[577:66] :
		 xbar_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[65:2] :
		 xbar_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[609:578] :
		 xbar_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5839);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_fi0HasPrio_818_THEN_xbar_merg_ETC___d5856);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	begin
	  v__h203440 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h203440,
	       xbar_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[577:66] :
		 xbar_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[65:2] :
		 xbar_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[609:578] :
		 xbar_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[1] :
		 xbar_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_routeFrom_888_BIT_0_890_THEN__ETC___d5921);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	begin
	  v__h203506 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h203506);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[577:66] :
		 xbar_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[65:2] :
		 xbar_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[609:578] :
		 xbar_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5914);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_fi0HasPrio_893_THEN_xbar_merg_ETC___d5931);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	begin
	  v__h204486 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h204486,
	       xbar_merges_4_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[577:66] :
		 xbar_merges_4_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[65:2] :
		 xbar_merges_4_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[609:578] :
		 xbar_merges_4_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_4_routeFrom[0] ?
		 xbar_merges_4_fi1_D_OUT[1] :
		 xbar_merges_4_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_4_routeFrom_963_BIT_0_965_THEN__ETC___d5996);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  xbar_merges_4_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	begin
	  v__h204552 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write("(%0d) both avail ", v__h204552);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[577:66] :
		 xbar_merges_4_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[65:2] :
		 xbar_merges_4_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_4_fi0HasPrio ?
		 xbar_merges_4_fi0_D_OUT[609:578] :
		 xbar_merges_4_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d5989);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_4_fi0HasPrio_968_THEN_xbar_merg_ETC___d6006);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_4_both_have_data &&
	  !xbar_merges_4_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route)
	$display("%x %x %d",
		 xbar_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580])
	begin
	  v__h208387 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h208387,
		 $signed(32'd4),
		 xbar_upper_merges_fo_D_OUT[580],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580])
	begin
	  v__h208328 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h208328,
		 $signed(32'd0),
		 xbar_upper_merges_fo_D_OUT[580],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4)
	$display("%x %x %d",
		 xbar_lower_merges_fo_D_OUT[609:578],
		 32'd4,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580])
	begin
	  v__h210155 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && xbar_lower_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h210155,
		 $signed(32'd4),
		 !xbar_lower_merges_fo_D_OUT[580],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580])
	begin
	  v__h210208 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_4 && !xbar_lower_merges_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h210208,
		 $signed(32'd0),
		 !xbar_lower_merges_fo_D_OUT[580],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	begin
	  v__h205532 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h205532,
	       xbar_merges_5_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[577:66] :
		 xbar_merges_5_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[65:2] :
		 xbar_merges_5_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[609:578] :
		 xbar_merges_5_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_5_routeFrom[0] ?
		 xbar_merges_5_fi1_D_OUT[1] :
		 xbar_merges_5_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_5_routeFrom_038_BIT_0_040_THEN__ETC___d6071);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  xbar_merges_5_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	begin
	  v__h205598 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write("(%0d) both avail ", v__h205598);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[577:66] :
		 xbar_merges_5_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[65:2] :
		 xbar_merges_5_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_5_fi0HasPrio ?
		 xbar_merges_5_fi0_D_OUT[609:578] :
		 xbar_merges_5_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6064);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_5_fi0HasPrio_043_THEN_xbar_merg_ETC___d6081);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_5_both_have_data &&
	  !xbar_merges_5_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1)
	$display("%x %x %d",
		 xbar_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580])
	begin
	  v__h208821 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h208821,
		 $signed(32'd5),
		 xbar_upper_merges_1_fo_D_OUT[580],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580])
	begin
	  v__h208767 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h208767,
		 $signed(32'd1),
		 xbar_upper_merges_1_fo_D_OUT[580],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5)
	$display("%x %x %d",
		 xbar_lower_merges_1_fo_D_OUT[609:578],
		 32'd5,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580])
	begin
	  v__h210593 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && xbar_lower_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h210593,
		 $signed(32'd5),
		 !xbar_lower_merges_1_fo_D_OUT[580],
		 xbar_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580])
	begin
	  v__h210646 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_5 && !xbar_lower_merges_1_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h210646,
		 $signed(32'd1),
		 !xbar_lower_merges_1_fo_D_OUT[580],
		 xbar_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	begin
	  v__h206578 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h206578,
	       xbar_merges_6_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[577:66] :
		 xbar_merges_6_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[65:2] :
		 xbar_merges_6_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[609:578] :
		 xbar_merges_6_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_6_routeFrom[0] ?
		 xbar_merges_6_fi1_D_OUT[1] :
		 xbar_merges_6_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_6_routeFrom_113_BIT_0_115_THEN__ETC___d6146);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  xbar_merges_6_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	begin
	  v__h206644 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write("(%0d) both avail ", v__h206644);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[577:66] :
		 xbar_merges_6_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[65:2] :
		 xbar_merges_6_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_6_fi0HasPrio ?
		 xbar_merges_6_fi0_D_OUT[609:578] :
		 xbar_merges_6_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6139);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_6_fi0HasPrio_118_THEN_xbar_merg_ETC___d6156);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_6_both_have_data &&
	  !xbar_merges_6_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2)
	$display("%x %x %d",
		 xbar_upper_merges_2_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580])
	begin
	  v__h209267 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_upper_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h209267,
		 $signed(32'd6),
		 xbar_upper_merges_2_fo_D_OUT[580],
		 xbar_upper_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580])
	begin
	  v__h209213 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_upper_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h209213,
		 $signed(32'd2),
		 xbar_upper_merges_2_fo_D_OUT[580],
		 xbar_upper_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6)
	$display("%x %x %d",
		 xbar_lower_merges_2_fo_D_OUT[609:578],
		 32'd6,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580])
	begin
	  v__h211043 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && xbar_lower_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h211043,
		 $signed(32'd6),
		 !xbar_lower_merges_2_fo_D_OUT[580],
		 xbar_lower_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580])
	begin
	  v__h211096 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_6 && !xbar_lower_merges_2_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h211096,
		 $signed(32'd2),
		 !xbar_lower_merges_2_fo_D_OUT[580],
		 xbar_lower_merges_2_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	begin
	  v__h207624 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h207624,
	       xbar_merges_7_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[577:66] :
		 xbar_merges_7_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[65:2] :
		 xbar_merges_7_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[609:578] :
		 xbar_merges_7_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_7_routeFrom[0] ?
		 xbar_merges_7_fi1_D_OUT[1] :
		 xbar_merges_7_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_7_routeFrom_188_BIT_0_190_THEN__ETC___d6221);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  xbar_merges_7_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	begin
	  v__h207690 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write("(%0d) both avail ", v__h207690);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[577:66] :
		 xbar_merges_7_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[65:2] :
		 xbar_merges_7_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_7_fi0HasPrio ?
		 xbar_merges_7_fi0_D_OUT[609:578] :
		 xbar_merges_7_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6214);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_7_fi0HasPrio_193_THEN_xbar_merg_ETC___d6231);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_7_both_have_data &&
	  !xbar_merges_7_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3)
	$display("%x %x %d",
		 xbar_upper_merges_3_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580])
	begin
	  v__h209725 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_upper_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h209725,
		 $signed(32'd7),
		 xbar_upper_merges_3_fo_D_OUT[580],
		 xbar_upper_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580])
	begin
	  v__h209671 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_upper_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h209671,
		 $signed(32'd3),
		 xbar_upper_merges_3_fo_D_OUT[580],
		 xbar_upper_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7)
	$display("%x %x %d",
		 xbar_lower_merges_3_fo_D_OUT[609:578],
		 32'd7,
		 $signed(32'd3));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580])
	begin
	  v__h211505 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && xbar_lower_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h211505,
		 $signed(32'd7),
		 !xbar_lower_merges_3_fo_D_OUT[580],
		 xbar_lower_merges_3_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580])
	begin
	  v__h211558 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_7 && !xbar_lower_merges_3_fo_D_OUT[580])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h211558,
		 $signed(32'd3),
		 !xbar_lower_merges_3_fo_D_OUT[580],
		 xbar_lower_merges_3_fo_D_OUT);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_p0)
  begin
    #0;
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	begin
	  v__h13766 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h13766);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	begin
	  v__h22008 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h22008);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_2_writeData &&
	  macToRing_2_gearbox_out_ff_D_OUT[1])
	begin
	  v__h30250 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_2_writeData &&
	  macToRing_2_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h30250);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_3_writeData &&
	  macToRing_3_gearbox_out_ff_D_OUT[1])
	begin
	  v__h38492 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_3_writeData &&
	  macToRing_3_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h38492);
  end
  // synopsys translate_on
endmodule  // mkRuntime_4_4_1

