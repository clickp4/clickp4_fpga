/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sun Jun  4 01:29:13 CST 2017
 * 
 */

/* Generation options: */
#ifndef __mkStreamGearboxUp_16_32_h__
#define __mkStreamGearboxUp_16_32_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkStreamGearboxUp_16_32 module */
class MOD_mkStreamGearboxUp_16_32 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt64> INST_data_bytes;
  MOD_Reg<tUInt64> INST_eopCount;
  MOD_Reg<tUInt64> INST_idle_cycles;
  MOD_Reg<tUInt8> INST_inProgress;
  MOD_Fifo<tUWide> INST_in_ff;
  MOD_Reg<tUInt8> INST_oddBeat;
  MOD_Fifo<tUWide> INST_out_ff;
  MOD_Reg<tUInt64> INST_sopCount;
  MOD_Reg<tUWide> INST_v_prev;
 
 /* Constructor */
 public:
  MOD_mkStreamGearboxUp_16_32(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_datain_put;
  tUWide PORT_dataout_get;
 
 /* Publicly accessible definitions */
 public:
  tUWide DEF_in_ff_first____d5;
  tUInt8 DEF_oddBeat__h767;
  tUInt8 DEF_in_ff_first_BIT_0___d10;
  tUInt8 DEF_NOT_in_ff_first_BIT_0_0___d11;
  tUInt8 DEF_NOT_oddBeat_5___d76;
 
 /* Local definitions */
 private:
  tUInt8 DEF_x__h954;
  tUWide DEF_v_prev___d80;
  tUInt64 DEF_x__h2201;
  tUInt64 DEF_x__h3368;
  tUInt64 DEF_x__h731;
  tUInt64 DEF_x__h3420;
  tUWide DEF__read_data__h3097;
  tUWide DEF_in_ff_first_BITS_145_TO_18___d69;
  tUInt8 DEF_b__h1058;
  tUInt8 DEF_b__h1046;
  tUInt8 DEF_b__h1034;
  tUInt8 DEF_b__h1022;
  tUInt8 DEF_b__h1010;
  tUInt8 DEF_b__h998;
  tUInt8 DEF_b__h986;
  tUInt8 DEF_b__h974;
  tUInt8 DEF_b__h962;
  tUInt8 DEF_b__h950;
  tUInt8 DEF_b__h938;
  tUInt8 DEF_b__h926;
  tUInt8 DEF_b__h914;
  tUInt8 DEF_b__h902;
  tUInt8 DEF_b__h890;
  tUInt8 DEF_b__h878;
  tUInt64 DEF_x__h3358;
  tUInt64 DEF_x__h845;
  tUInt64 DEF_y__h856;
  tUInt8 DEF_x__h859;
  tUInt8 DEF_x__h882;
  tUInt8 DEF_y__h883;
  tUInt8 DEF_x__h894;
  tUInt8 DEF_y__h895;
  tUInt8 DEF_x__h906;
  tUInt8 DEF_y__h907;
  tUInt8 DEF_x__h918;
  tUInt8 DEF_y__h919;
  tUInt8 DEF_x__h930;
  tUInt8 DEF_y__h931;
  tUInt8 DEF_x__h942;
  tUInt8 DEF_y__h943;
  tUInt8 DEF_y__h955;
  tUInt8 DEF_x__h966;
  tUInt8 DEF_y__h967;
  tUInt8 DEF_x__h978;
  tUInt8 DEF_y__h979;
  tUInt8 DEF_x__h990;
  tUInt8 DEF_y__h991;
  tUInt8 DEF_x__h1002;
  tUInt8 DEF_y__h1003;
  tUInt8 DEF_x__h1014;
  tUInt8 DEF_y__h1015;
  tUInt8 DEF_x__h1026;
  tUInt8 DEF_y__h1027;
  tUInt8 DEF_x__h1038;
  tUInt8 DEF_y__h1039;
  tUInt8 DEF_x__h1050;
  tUInt8 DEF_y__h1051;
  tUWide DEF_in_ff_first_BITS_177_TO_146_8_CONCAT_0_CONCAT__ETC___d73;
  tUWide DEF_x_data__h1616;
  tUWide DEF_v_prev_0_BITS_177_TO_146_1_CONCAT_in_ff_first__ETC___d91;
  tUWide DEF_x_data__h2908;
  tUWide DEF_dataout_get__avValue1;
 
 /* Rules */
 public:
  void RL_startOfPacket();
  void RL_readPacketOdd();
  void RL_readPacketEven();
  void RL_count_idle_cycles();
 
 /* Methods */
 public:
  void METH_datain_put(tUWide ARG_datain_put);
  tUInt8 METH_RDY_datain_put();
  tUWide METH_dataout_get();
  tUInt8 METH_RDY_dataout_get();
  tUInt64 METH_getEopCount();
  tUInt8 METH_RDY_getEopCount();
  tUInt64 METH_getSopCount();
  tUInt8 METH_RDY_getSopCount();
  tUInt64 METH_getIdleCount();
  tUInt8 METH_RDY_getIdleCount();
  tUInt64 METH_getDataCount();
  tUInt8 METH_RDY_getDataCount();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkStreamGearboxUp_16_32 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkStreamGearboxUp_16_32 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkStreamGearboxUp_16_32 &backing);
};

#endif /* ifndef __mkStreamGearboxUp_16_32_h__ */
