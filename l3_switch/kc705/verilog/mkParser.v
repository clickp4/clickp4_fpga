//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Sun Jun  4 09:44:24 CST 2017
//
// BVI format method schedule info:
// schedule frameIn_put  CF ( meta_get, set_verbosity, read_perf_info );
// schedule frameIn_put  C ( frameIn_put );
//
// schedule meta_get  CF ( frameIn_put, set_verbosity, read_perf_info );
// schedule meta_get  C ( meta_get );
//
// schedule set_verbosity  CF ( frameIn_put, meta_get, read_perf_info );
// schedule set_verbosity  SBR ( set_verbosity );
//
// schedule read_perf_info  CF ( frameIn_put,
// 			      meta_get,
// 			      set_verbosity,
// 			      read_perf_info );
//
//
// Ports:
// Name                         I/O  size props
// RDY_frameIn_put                O     1 reg
// meta_get                       O  1773 reg
// RDY_meta_get                   O     1 reg
// RDY_set_verbosity              O     1 const
// read_perf_info                 O    64 const
// RDY_read_perf_info             O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// frameIn_put                    I   178 reg
// set_verbosity_verbosity        I    32 reg
// EN_frameIn_put                 I     1
// EN_set_verbosity               I     1
// EN_meta_get                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkParser(CLK,
		RST_N,

		frameIn_put,
		EN_frameIn_put,
		RDY_frameIn_put,

		EN_meta_get,
		meta_get,
		RDY_meta_get,

		set_verbosity_verbosity,
		EN_set_verbosity,
		RDY_set_verbosity,

		read_perf_info,
		RDY_read_perf_info);
  input  CLK;
  input  RST_N;

  // action method frameIn_put
  input  [177 : 0] frameIn_put;
  input  EN_frameIn_put;
  output RDY_frameIn_put;

  // actionvalue method meta_get
  input  EN_meta_get;
  output [1772 : 0] meta_get;
  output RDY_meta_get;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // value method read_perf_info
  output [63 : 0] read_perf_info;
  output RDY_read_perf_info;

  // signals for module outputs
  wire [1772 : 0] meta_get;
  wire [63 : 0] read_perf_info;
  wire RDY_frameIn_put, RDY_meta_get, RDY_read_perf_info, RDY_set_verbosity;

  // inlined wires
  reg [3 : 0] parse_state_ff_rv_port1__write_1;
  wire [323 : 0] ipv6_out_ff_x_wire_wget;
  wire [163 : 0] ipv4_out_ff_x_wire_wget, tcp_out_ff_x_wire_wget;
  wire [115 : 0] ethernet_out_ff_x_wire_wget;
  wire [67 : 0] udp_out_ff_x_wire_wget;
  wire [9 : 0] rg_buffered_port0__write_1, rg_buffered_port2__read;
  wire [3 : 0] parse_state_ff_rv_port1__read, parse_state_ff_rv_port2__read;
  wire data_in_tmp_EN_port0__write,
       data_in_tmp_EN_port1__write,
       data_in_tmp_port1__read,
       data_in_tmp_port2__read,
       ethernet_out_ff_dequeueing_whas,
       ipv4_out_ff_dequeueing_whas,
       ipv6_out_ff_dequeueing_whas,
       parse_done_EN_port0__write,
       parse_done_port1__read,
       parse_done_port2__read,
       parse_state_ff_rv_EN_port1__write,
       rg_buffered_EN_port0__write,
       rg_next_header_len_EN_port0__write,
       tcp_out_ff_dequeueing_whas,
       udp_out_ff_dequeueing_whas,
       w_parse_done_whas,
       w_parse_ethernet_parse_ipv4_whas,
       w_parse_ethernet_parse_ipv6_whas,
       w_parse_header_done_whas,
       w_parse_ipv4_parse_tcp_whas,
       w_parse_ipv4_parse_udp_whas,
       w_parse_ipv6_parse_udp_whas;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register data_ff_cntr_r
  reg [1 : 0] data_ff_cntr_r;
  wire [1 : 0] data_ff_cntr_r_D_IN;
  wire data_ff_cntr_r_EN;

  // register data_ff_q_0
  reg [128 : 0] data_ff_q_0;
  wire [128 : 0] data_ff_q_0_D_IN;
  wire data_ff_q_0_EN;

  // register data_ff_q_1
  reg [128 : 0] data_ff_q_1;
  wire [128 : 0] data_ff_q_1_D_IN;
  wire data_ff_q_1_EN;

  // register data_in_tmp
  reg data_in_tmp;
  wire data_in_tmp_D_IN, data_in_tmp_EN;

  // register ethernet_out_ff_cntr_r
  reg [1 : 0] ethernet_out_ff_cntr_r;
  wire [1 : 0] ethernet_out_ff_cntr_r_D_IN;
  wire ethernet_out_ff_cntr_r_EN;

  // register ethernet_out_ff_q_0
  reg [115 : 0] ethernet_out_ff_q_0;
  reg [115 : 0] ethernet_out_ff_q_0_D_IN;
  wire ethernet_out_ff_q_0_EN;

  // register ethernet_out_ff_q_1
  reg [115 : 0] ethernet_out_ff_q_1;
  reg [115 : 0] ethernet_out_ff_q_1_D_IN;
  wire ethernet_out_ff_q_1_EN;

  // register ipv4_out_ff_cntr_r
  reg [1 : 0] ipv4_out_ff_cntr_r;
  wire [1 : 0] ipv4_out_ff_cntr_r_D_IN;
  wire ipv4_out_ff_cntr_r_EN;

  // register ipv4_out_ff_q_0
  reg [163 : 0] ipv4_out_ff_q_0;
  reg [163 : 0] ipv4_out_ff_q_0_D_IN;
  wire ipv4_out_ff_q_0_EN;

  // register ipv4_out_ff_q_1
  reg [163 : 0] ipv4_out_ff_q_1;
  reg [163 : 0] ipv4_out_ff_q_1_D_IN;
  wire ipv4_out_ff_q_1_EN;

  // register ipv6_out_ff_cntr_r
  reg [1 : 0] ipv6_out_ff_cntr_r;
  wire [1 : 0] ipv6_out_ff_cntr_r_D_IN;
  wire ipv6_out_ff_cntr_r_EN;

  // register ipv6_out_ff_q_0
  reg [323 : 0] ipv6_out_ff_q_0;
  reg [323 : 0] ipv6_out_ff_q_0_D_IN;
  wire ipv6_out_ff_q_0_EN;

  // register ipv6_out_ff_q_1
  reg [323 : 0] ipv6_out_ff_q_1;
  reg [323 : 0] ipv6_out_ff_q_1_D_IN;
  wire ipv6_out_ff_q_1_EN;

  // register parse_done
  reg parse_done;
  wire parse_done_D_IN, parse_done_EN;

  // register parse_state_ff_rv
  reg [3 : 0] parse_state_ff_rv;
  wire [3 : 0] parse_state_ff_rv_D_IN;
  wire parse_state_ff_rv_EN;

  // register rg_buffered
  reg [9 : 0] rg_buffered;
  wire [9 : 0] rg_buffered_D_IN;
  wire rg_buffered_EN;

  // register rg_click_metadata
  reg [112 : 0] rg_click_metadata;
  wire [112 : 0] rg_click_metadata_D_IN;
  wire rg_click_metadata_EN;

  // register rg_condition_metadata
  reg [32 : 0] rg_condition_metadata;
  wire [32 : 0] rg_condition_metadata_D_IN;
  wire rg_condition_metadata_EN;

  // register rg_for_metadata
  reg [64 : 0] rg_for_metadata;
  wire [64 : 0] rg_for_metadata_D_IN;
  wire rg_for_metadata_EN;

  // register rg_if_metadata
  reg [64 : 0] rg_if_metadata;
  wire [64 : 0] rg_if_metadata_D_IN;
  wire rg_if_metadata_EN;

  // register rg_intrinsic_metadata
  reg [104 : 0] rg_intrinsic_metadata;
  wire [104 : 0] rg_intrinsic_metadata_D_IN;
  wire rg_intrinsic_metadata_EN;

  // register rg_l3_switch_metadata
  reg [32 : 0] rg_l3_switch_metadata;
  wire [32 : 0] rg_l3_switch_metadata_D_IN;
  wire rg_l3_switch_metadata_EN;

  // register rg_next_header_len
  reg [9 : 0] rg_next_header_len;
  wire [9 : 0] rg_next_header_len_D_IN;
  wire rg_next_header_len_EN;

  // register rg_security_metadata
  reg [9 : 0] rg_security_metadata;
  wire [9 : 0] rg_security_metadata_D_IN;
  wire rg_security_metadata_EN;

  // register rg_tmp
  reg [511 : 0] rg_tmp;
  wire [511 : 0] rg_tmp_D_IN;
  wire rg_tmp_EN;

  // register rg_while_metadata
  reg [64 : 0] rg_while_metadata;
  wire [64 : 0] rg_while_metadata_D_IN;
  wire rg_while_metadata_EN;

  // register tcp_out_ff_cntr_r
  reg [1 : 0] tcp_out_ff_cntr_r;
  wire [1 : 0] tcp_out_ff_cntr_r_D_IN;
  wire tcp_out_ff_cntr_r_EN;

  // register tcp_out_ff_q_0
  reg [163 : 0] tcp_out_ff_q_0;
  reg [163 : 0] tcp_out_ff_q_0_D_IN;
  wire tcp_out_ff_q_0_EN;

  // register tcp_out_ff_q_1
  reg [163 : 0] tcp_out_ff_q_1;
  reg [163 : 0] tcp_out_ff_q_1_D_IN;
  wire tcp_out_ff_q_1_EN;

  // register udp_out_ff_cntr_r
  reg [1 : 0] udp_out_ff_cntr_r;
  wire [1 : 0] udp_out_ff_cntr_r_D_IN;
  wire udp_out_ff_cntr_r_EN;

  // register udp_out_ff_q_0
  reg [67 : 0] udp_out_ff_q_0;
  reg [67 : 0] udp_out_ff_q_0_D_IN;
  wire udp_out_ff_q_0_EN;

  // register udp_out_ff_q_1
  reg [67 : 0] udp_out_ff_q_1;
  reg [67 : 0] udp_out_ff_q_1_D_IN;
  wire udp_out_ff_q_1_EN;

  // ports of submodule data_in_ff
  wire [177 : 0] data_in_ff_D_IN, data_in_ff_D_OUT;
  wire data_in_ff_CLR,
       data_in_ff_DEQ,
       data_in_ff_EMPTY_N,
       data_in_ff_ENQ,
       data_in_ff_FULL_N;

  // ports of submodule delay_ff
  wire delay_ff_CLR,
       delay_ff_DEQ,
       delay_ff_EMPTY_N,
       delay_ff_ENQ,
       delay_ff_FULL_N;

  // ports of submodule meta_in_ff
  wire [1772 : 0] meta_in_ff_D_IN, meta_in_ff_D_OUT;
  wire meta_in_ff_CLR,
       meta_in_ff_DEQ,
       meta_in_ff_EMPTY_N,
       meta_in_ff_ENQ,
       meta_in_ff_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fsmrl_rl_extract,
       CAN_FIRE_RL_fsmrl_rl_extract_1,
       CAN_FIRE_RL_fsmrl_rl_extract_2,
       CAN_FIRE_RL_fsmrl_rl_extract_3,
       CAN_FIRE_RL_fsmrl_rl_extract_4,
       CAN_FIRE_RL_rl_start_state_deq,
       WILL_FIRE_RL_ethernet_out_ff_both,
       WILL_FIRE_RL_ethernet_out_ff_decCtr,
       WILL_FIRE_RL_ethernet_out_ff_incCtr,
       WILL_FIRE_RL_fsmrl_rl_accept,
       WILL_FIRE_RL_fsmrl_rl_accept_1,
       WILL_FIRE_RL_fsmrl_rl_accept_2,
       WILL_FIRE_RL_fsmrl_rl_cont,
       WILL_FIRE_RL_fsmrl_rl_cont_1,
       WILL_FIRE_RL_fsmrl_rl_cont_2,
       WILL_FIRE_RL_fsmrl_rl_cont_3,
       WILL_FIRE_RL_fsmrl_rl_cont_4,
       WILL_FIRE_RL_fsmrl_rl_extract,
       WILL_FIRE_RL_fsmrl_rl_extract_1,
       WILL_FIRE_RL_fsmrl_rl_extract_2,
       WILL_FIRE_RL_fsmrl_rl_extract_3,
       WILL_FIRE_RL_fsmrl_rl_extract_4,
       WILL_FIRE_RL_ipv4_out_ff_both,
       WILL_FIRE_RL_ipv4_out_ff_decCtr,
       WILL_FIRE_RL_ipv4_out_ff_incCtr,
       WILL_FIRE_RL_ipv6_out_ff_both,
       WILL_FIRE_RL_ipv6_out_ff_decCtr,
       WILL_FIRE_RL_ipv6_out_ff_incCtr,
       WILL_FIRE_RL_rl_accept,
       WILL_FIRE_RL_rl_start_state_deq,
       WILL_FIRE_RL_rl_start_state_idle,
       WILL_FIRE_RL_tcp_out_ff_both,
       WILL_FIRE_RL_tcp_out_ff_decCtr,
       WILL_FIRE_RL_tcp_out_ff_incCtr,
       WILL_FIRE_RL_udp_out_ff_both,
       WILL_FIRE_RL_udp_out_ff_decCtr,
       WILL_FIRE_RL_udp_out_ff_incCtr;

  // inputs to muxes for submodule ports
  wire [511 : 0] MUX_rg_tmp_write_1__VAL_1;
  wire [323 : 0] MUX_ipv6_out_ff_q_0_write_1__VAL_2,
		 MUX_ipv6_out_ff_q_1_write_1__VAL_2;
  wire [163 : 0] MUX_ipv4_out_ff_q_0_write_1__VAL_2,
		 MUX_ipv4_out_ff_q_1_write_1__VAL_2,
		 MUX_tcp_out_ff_q_0_write_1__VAL_2,
		 MUX_tcp_out_ff_q_1_write_1__VAL_2;
  wire [115 : 0] MUX_ethernet_out_ff_q_0_write_1__VAL_2,
		 MUX_ethernet_out_ff_q_1_write_1__VAL_2;
  wire [67 : 0] MUX_udp_out_ff_q_0_write_1__VAL_2,
		MUX_udp_out_ff_q_1_write_1__VAL_2;
  wire [1 : 0] MUX_ethernet_out_ff_cntr_r_write_1__VAL_2,
	       MUX_ipv4_out_ff_cntr_r_write_1__VAL_2,
	       MUX_ipv6_out_ff_cntr_r_write_1__VAL_2,
	       MUX_tcp_out_ff_cntr_r_write_1__VAL_2,
	       MUX_udp_out_ff_cntr_r_write_1__VAL_2;
  wire MUX_ethernet_out_ff_q_0_write_1__SEL_1,
       MUX_ethernet_out_ff_q_0_write_1__SEL_2,
       MUX_ethernet_out_ff_q_1_write_1__SEL_1,
       MUX_ethernet_out_ff_q_1_write_1__SEL_2,
       MUX_ipv4_out_ff_q_0_write_1__SEL_1,
       MUX_ipv4_out_ff_q_0_write_1__SEL_2,
       MUX_ipv4_out_ff_q_1_write_1__SEL_1,
       MUX_ipv4_out_ff_q_1_write_1__SEL_2,
       MUX_ipv6_out_ff_q_0_write_1__SEL_1,
       MUX_ipv6_out_ff_q_0_write_1__SEL_2,
       MUX_ipv6_out_ff_q_1_write_1__SEL_1,
       MUX_ipv6_out_ff_q_1_write_1__SEL_2,
       MUX_parse_state_ff_rv_port1__write_1__SEL_5,
       MUX_rg_buffered_port0__write_1__SEL_1,
       MUX_tcp_out_ff_q_0_write_1__SEL_1,
       MUX_tcp_out_ff_q_0_write_1__SEL_2,
       MUX_tcp_out_ff_q_1_write_1__SEL_1,
       MUX_tcp_out_ff_q_1_write_1__SEL_2,
       MUX_udp_out_ff_q_0_write_1__SEL_1,
       MUX_udp_out_ff_q_0_write_1__SEL_2,
       MUX_udp_out_ff_q_1_write_1__SEL_1,
       MUX_udp_out_ff_q_1_write_1__SEL_2;

  // remaining internal signals
  wire [511 : 0] v__h19913, v__h19987, x__h20086, x__h20089;
  wire [277 : 0] rg_if_metadata_67_BIT_64_68_CONCAT_IF_rg_if_me_ETC___d291;
  wire [47 : 0] x__h41179, x__h43604;
  wire [31 : 0] x__h26091, x__h26095, x__h39726, x__h39730;
  wire [19 : 0] ipv6_flow_label__h27384;
  wire [15 : 0] ethernet_eth_type__h41187,
		ipv6_payload_len__h27385,
		x__h21666,
		x__h22640,
		x__h26110,
		x__h26114,
		x__h26118,
		x__h39700,
		x__h39722;
  wire [12 : 0] ipv4_frag_offset__h36262;
  wire [9 : 0] x_port1__read__h15146, x_port1__read__h15162;
  wire [7 : 0] x__h34174;
  wire [1 : 0] ethernet_out_ff_cntr_r_8_MINUS_1___d55,
	       ipv4_out_ff_cntr_r_9_MINUS_1___d86,
	       ipv6_out_ff_cntr_r_00_MINUS_1___d117,
	       tcp_out_ff_cntr_r_31_MINUS_1___d147,
	       udp_out_ff_cntr_r_61_MINUS_1___d178;
  wire _dfoo11,
       _dfoo13,
       _dfoo15,
       _dfoo17,
       _dfoo19,
       _dfoo21,
       _dfoo23,
       _dfoo5,
       _dfoo7,
       _dfoo9;

  // action method frameIn_put
  assign RDY_frameIn_put = data_in_ff_FULL_N ;

  // actionvalue method meta_get
  assign meta_get = meta_in_ff_D_OUT ;
  assign RDY_meta_get = meta_in_ff_EMPTY_N ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;

  // value method read_perf_info
  assign read_perf_info = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_read_perf_info = 1'd1 ;

  // submodule data_in_ff
  FIFO2 #(.width(32'd178), .guarded(32'd1)) data_in_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(data_in_ff_D_IN),
						       .ENQ(data_in_ff_ENQ),
						       .DEQ(data_in_ff_DEQ),
						       .CLR(data_in_ff_CLR),
						       .D_OUT(data_in_ff_D_OUT),
						       .FULL_N(data_in_ff_FULL_N),
						       .EMPTY_N(data_in_ff_EMPTY_N));

  // submodule delay_ff
  FIFO20 #(.guarded(32'd1)) delay_ff(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(delay_ff_ENQ),
				     .DEQ(delay_ff_DEQ),
				     .CLR(delay_ff_CLR),
				     .FULL_N(delay_ff_FULL_N),
				     .EMPTY_N(delay_ff_EMPTY_N));

  // submodule meta_in_ff
  FIFO2 #(.width(32'd1773), .guarded(32'd1)) meta_in_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(meta_in_ff_D_IN),
							.ENQ(meta_in_ff_ENQ),
							.DEQ(meta_in_ff_DEQ),
							.CLR(meta_in_ff_CLR),
							.D_OUT(meta_in_ff_D_OUT),
							.FULL_N(meta_in_ff_FULL_N),
							.EMPTY_N(meta_in_ff_EMPTY_N));

  // rule RL_rl_accept
  assign WILL_FIRE_RL_rl_accept = delay_ff_EMPTY_N && meta_in_ff_FULL_N ;

  // rule RL_fsmrl_rl_extract
  assign CAN_FIRE_RL_fsmrl_rl_extract =
	     parse_state_ff_rv[3] && udp_out_ff_cntr_r != 2'd2 &&
	     (!data_in_tmp || data_in_ff_EMPTY_N) &&
	     parse_state_ff_rv[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_fsmrl_rl_extract =
	     CAN_FIRE_RL_fsmrl_rl_extract && !WILL_FIRE_RL_rl_accept ;

  // rule RL_udp_out_ff_incCtr
  assign WILL_FIRE_RL_udp_out_ff_incCtr =
	     WILL_FIRE_RL_fsmrl_rl_extract && WILL_FIRE_RL_fsmrl_rl_extract &&
	     !udp_out_ff_dequeueing_whas ;

  // rule RL_udp_out_ff_decCtr
  assign WILL_FIRE_RL_udp_out_ff_decCtr =
	     udp_out_ff_dequeueing_whas && !WILL_FIRE_RL_fsmrl_rl_extract ;

  // rule RL_udp_out_ff_both
  assign WILL_FIRE_RL_udp_out_ff_both =
	     WILL_FIRE_RL_fsmrl_rl_extract && udp_out_ff_dequeueing_whas &&
	     WILL_FIRE_RL_fsmrl_rl_extract ;

  // rule RL_fsmrl_rl_extract_1
  assign CAN_FIRE_RL_fsmrl_rl_extract_1 =
	     parse_state_ff_rv[3] && tcp_out_ff_cntr_r != 2'd2 &&
	     (!data_in_tmp || data_in_ff_EMPTY_N) &&
	     parse_state_ff_rv[2:0] == 3'd3 ;
  assign WILL_FIRE_RL_fsmrl_rl_extract_1 =
	     CAN_FIRE_RL_fsmrl_rl_extract_1 && !WILL_FIRE_RL_rl_accept ;

  // rule RL_tcp_out_ff_incCtr
  assign WILL_FIRE_RL_tcp_out_ff_incCtr =
	     WILL_FIRE_RL_fsmrl_rl_extract_1 &&
	     WILL_FIRE_RL_fsmrl_rl_extract_1 &&
	     !tcp_out_ff_dequeueing_whas ;

  // rule RL_tcp_out_ff_decCtr
  assign WILL_FIRE_RL_tcp_out_ff_decCtr =
	     tcp_out_ff_dequeueing_whas && !WILL_FIRE_RL_fsmrl_rl_extract_1 ;

  // rule RL_tcp_out_ff_both
  assign WILL_FIRE_RL_tcp_out_ff_both =
	     WILL_FIRE_RL_fsmrl_rl_extract_1 && tcp_out_ff_dequeueing_whas &&
	     WILL_FIRE_RL_fsmrl_rl_extract_1 ;

  // rule RL_fsmrl_rl_extract_2
  assign CAN_FIRE_RL_fsmrl_rl_extract_2 =
	     parse_state_ff_rv[3] && ipv6_out_ff_cntr_r != 2'd2 &&
	     (!data_in_tmp || data_in_ff_EMPTY_N) &&
	     parse_state_ff_rv[2:0] == 3'd2 ;
  assign WILL_FIRE_RL_fsmrl_rl_extract_2 =
	     CAN_FIRE_RL_fsmrl_rl_extract_2 && !WILL_FIRE_RL_rl_accept ;

  // rule RL_ipv6_out_ff_incCtr
  assign WILL_FIRE_RL_ipv6_out_ff_incCtr =
	     WILL_FIRE_RL_fsmrl_rl_extract_2 &&
	     WILL_FIRE_RL_fsmrl_rl_extract_2 &&
	     !ipv6_out_ff_dequeueing_whas ;

  // rule RL_ipv6_out_ff_decCtr
  assign WILL_FIRE_RL_ipv6_out_ff_decCtr =
	     ipv6_out_ff_dequeueing_whas && !WILL_FIRE_RL_fsmrl_rl_extract_2 ;

  // rule RL_ipv6_out_ff_both
  assign WILL_FIRE_RL_ipv6_out_ff_both =
	     WILL_FIRE_RL_fsmrl_rl_extract_2 && ipv6_out_ff_dequeueing_whas &&
	     WILL_FIRE_RL_fsmrl_rl_extract_2 ;

  // rule RL_fsmrl_rl_accept
  assign WILL_FIRE_RL_fsmrl_rl_accept =
	     WILL_FIRE_RL_fsmrl_rl_extract_2 && v__h19913[55:48] != 8'd17 ;

  // rule RL_fsmrl_rl_extract_3
  assign CAN_FIRE_RL_fsmrl_rl_extract_3 =
	     parse_state_ff_rv[3] && ipv4_out_ff_cntr_r != 2'd2 &&
	     (!data_in_tmp || data_in_ff_EMPTY_N) &&
	     parse_state_ff_rv[2:0] == 3'd1 ;
  assign WILL_FIRE_RL_fsmrl_rl_extract_3 =
	     CAN_FIRE_RL_fsmrl_rl_extract_3 && !WILL_FIRE_RL_rl_accept ;

  // rule RL_ipv4_out_ff_incCtr
  assign WILL_FIRE_RL_ipv4_out_ff_incCtr =
	     WILL_FIRE_RL_fsmrl_rl_extract_3 &&
	     WILL_FIRE_RL_fsmrl_rl_extract_3 &&
	     !ipv4_out_ff_dequeueing_whas ;

  // rule RL_ipv4_out_ff_decCtr
  assign WILL_FIRE_RL_ipv4_out_ff_decCtr =
	     ipv4_out_ff_dequeueing_whas && !WILL_FIRE_RL_fsmrl_rl_extract_3 ;

  // rule RL_ipv4_out_ff_both
  assign WILL_FIRE_RL_ipv4_out_ff_both =
	     WILL_FIRE_RL_fsmrl_rl_extract_3 && ipv4_out_ff_dequeueing_whas &&
	     WILL_FIRE_RL_fsmrl_rl_extract_3 ;

  // rule RL_fsmrl_rl_accept_1
  assign WILL_FIRE_RL_fsmrl_rl_accept_1 =
	     WILL_FIRE_RL_fsmrl_rl_extract_3 && v__h19913[79:72] != 8'd6 &&
	     v__h19913[79:72] != 8'd17 &&
	     !WILL_FIRE_RL_fsmrl_rl_accept ;

  // rule RL_fsmrl_rl_extract_4
  assign CAN_FIRE_RL_fsmrl_rl_extract_4 =
	     parse_state_ff_rv[3] && ethernet_out_ff_cntr_r != 2'd2 &&
	     (!data_in_tmp || data_in_ff_EMPTY_N) &&
	     parse_state_ff_rv[2:0] == 3'd0 ;
  assign WILL_FIRE_RL_fsmrl_rl_extract_4 =
	     CAN_FIRE_RL_fsmrl_rl_extract_4 && !WILL_FIRE_RL_rl_accept ;

  // rule RL_ethernet_out_ff_incCtr
  assign WILL_FIRE_RL_ethernet_out_ff_incCtr =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     !ethernet_out_ff_dequeueing_whas ;

  // rule RL_ethernet_out_ff_decCtr
  assign WILL_FIRE_RL_ethernet_out_ff_decCtr =
	     ethernet_out_ff_dequeueing_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_4 ;

  // rule RL_ethernet_out_ff_both
  assign WILL_FIRE_RL_ethernet_out_ff_both =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     ethernet_out_ff_dequeueing_whas &&
	     WILL_FIRE_RL_fsmrl_rl_extract_4 ;

  // rule RL_fsmrl_rl_cont
  assign WILL_FIRE_RL_fsmrl_rl_cont =
	     !parse_state_ff_rv_port1__read[3] &&
	     w_parse_ipv6_parse_udp_whas ;

  // rule RL_fsmrl_rl_cont_1
  assign WILL_FIRE_RL_fsmrl_rl_cont_1 =
	     !parse_state_ff_rv_port1__read[3] &&
	     w_parse_ipv4_parse_udp_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_cont ;

  // rule RL_fsmrl_rl_cont_2
  assign WILL_FIRE_RL_fsmrl_rl_cont_2 =
	     !parse_state_ff_rv_port1__read[3] &&
	     w_parse_ipv4_parse_tcp_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont ;

  // rule RL_fsmrl_rl_accept_2
  assign WILL_FIRE_RL_fsmrl_rl_accept_2 =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     ethernet_eth_type__h41187 != 16'd2048 &&
	     ethernet_eth_type__h41187 != 16'd34525 &&
	     !WILL_FIRE_RL_fsmrl_rl_accept_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_accept ;

  // rule RL_fsmrl_rl_cont_3
  assign WILL_FIRE_RL_fsmrl_rl_cont_3 =
	     !parse_state_ff_rv_port1__read[3] &&
	     w_parse_ethernet_parse_ipv6_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_2 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont ;

  // rule RL_fsmrl_rl_cont_4
  assign WILL_FIRE_RL_fsmrl_rl_cont_4 =
	     !parse_state_ff_rv_port1__read[3] &&
	     w_parse_ethernet_parse_ipv4_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_3 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_2 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont ;

  // rule RL_rl_start_state_deq
  assign CAN_FIRE_RL_rl_start_state_deq =
	     !parse_state_ff_rv_port1__read[3] && data_in_ff_EMPTY_N &&
	     parse_done_port1__read &&
	     data_in_ff_D_OUT[1] &&
	     !w_parse_header_done_whas ;
  assign WILL_FIRE_RL_rl_start_state_deq =
	     CAN_FIRE_RL_rl_start_state_deq &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_4 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_3 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_2 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_cont &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_3 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_2 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract ;

  // rule RL_rl_start_state_idle
  assign WILL_FIRE_RL_rl_start_state_idle =
	     data_in_ff_EMPTY_N && parse_done_port1__read &&
	     (!data_in_ff_D_OUT[1] || w_parse_header_done_whas) &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_3 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_2 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract_1 &&
	     !WILL_FIRE_RL_fsmrl_rl_extract ;

  // inputs to muxes for submodule ports
  assign MUX_ethernet_out_ff_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_ethernet_out_ff_incCtr &&
	     ethernet_out_ff_cntr_r == 2'd0 ;
  assign MUX_ethernet_out_ff_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_ethernet_out_ff_both && _dfoo7 ;
  assign MUX_ethernet_out_ff_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_ethernet_out_ff_incCtr &&
	     ethernet_out_ff_cntr_r == 2'd1 ;
  assign MUX_ethernet_out_ff_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_ethernet_out_ff_both && _dfoo5 ;
  assign MUX_ipv4_out_ff_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_ipv4_out_ff_incCtr && ipv4_out_ff_cntr_r == 2'd0 ;
  assign MUX_ipv4_out_ff_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_ipv4_out_ff_both && _dfoo11 ;
  assign MUX_ipv4_out_ff_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_ipv4_out_ff_incCtr && ipv4_out_ff_cntr_r == 2'd1 ;
  assign MUX_ipv4_out_ff_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_ipv4_out_ff_both && _dfoo9 ;
  assign MUX_ipv6_out_ff_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_ipv6_out_ff_incCtr && ipv6_out_ff_cntr_r == 2'd0 ;
  assign MUX_ipv6_out_ff_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_ipv6_out_ff_both && _dfoo15 ;
  assign MUX_ipv6_out_ff_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_ipv6_out_ff_incCtr && ipv6_out_ff_cntr_r == 2'd1 ;
  assign MUX_ipv6_out_ff_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_ipv6_out_ff_both && _dfoo13 ;
  assign MUX_parse_state_ff_rv_port1__write_1__SEL_5 =
	     WILL_FIRE_RL_fsmrl_rl_cont_1 || WILL_FIRE_RL_fsmrl_rl_cont ;
  assign MUX_rg_buffered_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_3 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_2 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_1 ||
	     WILL_FIRE_RL_fsmrl_rl_extract ;
  assign MUX_tcp_out_ff_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_tcp_out_ff_incCtr && tcp_out_ff_cntr_r == 2'd0 ;
  assign MUX_tcp_out_ff_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_tcp_out_ff_both && _dfoo19 ;
  assign MUX_tcp_out_ff_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_tcp_out_ff_incCtr && tcp_out_ff_cntr_r == 2'd1 ;
  assign MUX_tcp_out_ff_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_tcp_out_ff_both && _dfoo17 ;
  assign MUX_udp_out_ff_q_0_write_1__SEL_1 =
	     WILL_FIRE_RL_udp_out_ff_incCtr && udp_out_ff_cntr_r == 2'd0 ;
  assign MUX_udp_out_ff_q_0_write_1__SEL_2 =
	     WILL_FIRE_RL_udp_out_ff_both && _dfoo23 ;
  assign MUX_udp_out_ff_q_1_write_1__SEL_1 =
	     WILL_FIRE_RL_udp_out_ff_incCtr && udp_out_ff_cntr_r == 2'd1 ;
  assign MUX_udp_out_ff_q_1_write_1__SEL_2 =
	     WILL_FIRE_RL_udp_out_ff_both && _dfoo21 ;
  assign MUX_ethernet_out_ff_cntr_r_write_1__VAL_2 =
	     ethernet_out_ff_cntr_r + 2'd1 ;
  assign MUX_ethernet_out_ff_q_0_write_1__VAL_2 =
	     (ethernet_out_ff_cntr_r == 2'd1) ?
	       ethernet_out_ff_x_wire_wget :
	       ethernet_out_ff_q_1 ;
  assign MUX_ethernet_out_ff_q_1_write_1__VAL_2 =
	     (ethernet_out_ff_cntr_r == 2'd2) ?
	       ethernet_out_ff_x_wire_wget :
	       116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_ipv4_out_ff_cntr_r_write_1__VAL_2 = ipv4_out_ff_cntr_r + 2'd1 ;
  assign MUX_ipv4_out_ff_q_0_write_1__VAL_2 =
	     (ipv4_out_ff_cntr_r == 2'd1) ?
	       ipv4_out_ff_x_wire_wget :
	       ipv4_out_ff_q_1 ;
  assign MUX_ipv4_out_ff_q_1_write_1__VAL_2 =
	     (ipv4_out_ff_cntr_r == 2'd2) ?
	       ipv4_out_ff_x_wire_wget :
	       164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_ipv6_out_ff_cntr_r_write_1__VAL_2 = ipv6_out_ff_cntr_r + 2'd1 ;
  assign MUX_ipv6_out_ff_q_0_write_1__VAL_2 =
	     (ipv6_out_ff_cntr_r == 2'd1) ?
	       ipv6_out_ff_x_wire_wget :
	       ipv6_out_ff_q_1 ;
  assign MUX_ipv6_out_ff_q_1_write_1__VAL_2 =
	     (ipv6_out_ff_cntr_r == 2'd2) ?
	       ipv6_out_ff_x_wire_wget :
	       324'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_rg_tmp_write_1__VAL_1 = { rg_tmp[511:1], 1'd0 } ;
  assign MUX_tcp_out_ff_cntr_r_write_1__VAL_2 = tcp_out_ff_cntr_r + 2'd1 ;
  assign MUX_tcp_out_ff_q_0_write_1__VAL_2 =
	     (tcp_out_ff_cntr_r == 2'd1) ?
	       tcp_out_ff_x_wire_wget :
	       tcp_out_ff_q_1 ;
  assign MUX_tcp_out_ff_q_1_write_1__VAL_2 =
	     (tcp_out_ff_cntr_r == 2'd2) ?
	       tcp_out_ff_x_wire_wget :
	       164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign MUX_udp_out_ff_cntr_r_write_1__VAL_2 = udp_out_ff_cntr_r + 2'd1 ;
  assign MUX_udp_out_ff_q_0_write_1__VAL_2 =
	     (udp_out_ff_cntr_r == 2'd1) ?
	       udp_out_ff_x_wire_wget :
	       udp_out_ff_q_1 ;
  assign MUX_udp_out_ff_q_1_write_1__VAL_2 =
	     (udp_out_ff_cntr_r == 2'd2) ?
	       udp_out_ff_x_wire_wget :
	       68'h2AAAAAAAAAAAAAAAA ;

  // inlined wires
  assign ethernet_out_ff_x_wire_wget =
	     { 4'd9, x__h41179, x__h43604, ethernet_eth_type__h41187 } ;
  assign ipv4_out_ff_x_wire_wget =
	     { 4'd9,
	       v__h19913[7:0],
	       v__h19913[15:8],
	       x__h39700,
	       ipv6_payload_len__h27385,
	       v__h19913[55:53],
	       ipv4_frag_offset__h36262,
	       v__h19913[71:64],
	       v__h19913[79:72],
	       x__h39722,
	       x__h39726,
	       x__h39730 } ;
  assign ipv6_out_ff_x_wire_wget =
	     { 4'd9,
	       v__h19913[7:4],
	       x__h34174,
	       ipv6_flow_label__h27384,
	       ipv6_payload_len__h27385,
	       x__h21666,
	       x__h26095,
	       v__h19913[103:96],
	       v__h19913[111:104],
	       v__h19913[119:112],
	       v__h19913[127:120],
	       x__h39730,
	       v__h19913[167:160],
	       v__h19913[175:168],
	       v__h19913[183:176],
	       v__h19913[191:184],
	       v__h19913[199:192],
	       v__h19913[207:200],
	       v__h19913[215:208],
	       v__h19913[223:216],
	       v__h19913[231:224],
	       v__h19913[239:232],
	       v__h19913[247:240],
	       v__h19913[255:248],
	       v__h19913[263:256],
	       v__h19913[271:264],
	       v__h19913[279:272],
	       v__h19913[287:280],
	       v__h19913[295:288],
	       v__h19913[303:296],
	       v__h19913[311:304],
	       v__h19913[319:312] } ;
  assign tcp_out_ff_x_wire_wget =
	     { 4'd9,
	       x__h22640,
	       x__h39700,
	       x__h26091,
	       x__h26095,
	       v__h19913[103:96],
	       v__h19913[111:104],
	       x__h26110,
	       x__h26114,
	       x__h26118 } ;
  assign udp_out_ff_x_wire_wget =
	     { 4'd9,
	       x__h22640,
	       x__h39700,
	       ipv6_payload_len__h27385,
	       x__h21666 } ;
  assign w_parse_done_whas =
	     WILL_FIRE_RL_fsmrl_rl_accept_2 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_1 ||
	     WILL_FIRE_RL_fsmrl_rl_accept ;
  assign w_parse_header_done_whas =
	     WILL_FIRE_RL_fsmrl_rl_cont_4 || WILL_FIRE_RL_fsmrl_rl_cont_3 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_2 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_2 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_1 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_1 ||
	     WILL_FIRE_RL_fsmrl_rl_cont ||
	     WILL_FIRE_RL_fsmrl_rl_accept ;
  assign w_parse_ethernet_parse_ipv4_whas =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     ethernet_eth_type__h41187 == 16'd2048 ;
  assign w_parse_ethernet_parse_ipv6_whas =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 &&
	     ethernet_eth_type__h41187 == 16'd34525 ;
  assign w_parse_ipv4_parse_tcp_whas =
	     WILL_FIRE_RL_fsmrl_rl_extract_3 && v__h19913[79:72] == 8'd6 ;
  assign w_parse_ipv4_parse_udp_whas =
	     WILL_FIRE_RL_fsmrl_rl_extract_3 && v__h19913[79:72] == 8'd17 ;
  assign w_parse_ipv6_parse_udp_whas =
	     WILL_FIRE_RL_fsmrl_rl_extract_2 && v__h19913[55:48] == 8'd17 ;
  assign ethernet_out_ff_dequeueing_whas =
	     WILL_FIRE_RL_rl_accept && ethernet_out_ff_cntr_r != 2'd0 ;
  assign ipv4_out_ff_dequeueing_whas =
	     WILL_FIRE_RL_rl_accept && ipv4_out_ff_cntr_r != 2'd0 ;
  assign ipv6_out_ff_dequeueing_whas =
	     WILL_FIRE_RL_rl_accept && ipv6_out_ff_cntr_r != 2'd0 ;
  assign tcp_out_ff_dequeueing_whas =
	     WILL_FIRE_RL_rl_accept && tcp_out_ff_cntr_r != 2'd0 ;
  assign udp_out_ff_dequeueing_whas =
	     WILL_FIRE_RL_rl_accept && udp_out_ff_cntr_r != 2'd0 ;
  assign parse_done_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_accept_2 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_1 ||
	     WILL_FIRE_RL_fsmrl_rl_accept ;
  assign parse_done_port1__read = parse_done_EN_port0__write || parse_done ;
  assign parse_done_port2__read =
	     !WILL_FIRE_RL_rl_start_state_deq && parse_done_port1__read ;
  assign parse_state_ff_rv_port1__read =
	     MUX_rg_buffered_port0__write_1__SEL_1 ?
	       4'd2 :
	       parse_state_ff_rv ;
  assign parse_state_ff_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_start_state_deq ||
	     WILL_FIRE_RL_fsmrl_rl_cont_4 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_3 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_2 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_1 ||
	     WILL_FIRE_RL_fsmrl_rl_cont ;
  always@(WILL_FIRE_RL_rl_start_state_deq or
	  WILL_FIRE_RL_fsmrl_rl_cont_4 or
	  WILL_FIRE_RL_fsmrl_rl_cont_3 or
	  WILL_FIRE_RL_fsmrl_rl_cont_2 or
	  MUX_parse_state_ff_rv_port1__write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_start_state_deq:
	  parse_state_ff_rv_port1__write_1 = 4'd8;
      WILL_FIRE_RL_fsmrl_rl_cont_4: parse_state_ff_rv_port1__write_1 = 4'd9;
      WILL_FIRE_RL_fsmrl_rl_cont_3: parse_state_ff_rv_port1__write_1 = 4'd10;
      WILL_FIRE_RL_fsmrl_rl_cont_2: parse_state_ff_rv_port1__write_1 = 4'd11;
      MUX_parse_state_ff_rv_port1__write_1__SEL_5:
	  parse_state_ff_rv_port1__write_1 = 4'd12;
      default: parse_state_ff_rv_port1__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign parse_state_ff_rv_port2__read =
	     parse_state_ff_rv_EN_port1__write ?
	       parse_state_ff_rv_port1__write_1 :
	       parse_state_ff_rv_port1__read ;
  assign rg_next_header_len_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_cont_4 || WILL_FIRE_RL_fsmrl_rl_cont_3 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_2 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_2 ||
	     WILL_FIRE_RL_fsmrl_rl_cont_1 ||
	     WILL_FIRE_RL_fsmrl_rl_accept_1 ||
	     WILL_FIRE_RL_fsmrl_rl_cont ||
	     WILL_FIRE_RL_fsmrl_rl_accept ;
  assign rg_buffered_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_extract_4 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_3 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_2 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_1 ||
	     WILL_FIRE_RL_fsmrl_rl_extract ||
	     WILL_FIRE_RL_rl_accept ;
  assign rg_buffered_port0__write_1 =
	     MUX_rg_buffered_port0__write_1__SEL_1 ? rg_buffered : 10'd0 ;
  assign rg_buffered_port2__read =
	     WILL_FIRE_RL_rl_start_state_deq ? 10'd0 : x_port1__read__h15146 ;
  assign data_in_tmp_EN_port0__write =
	     MUX_rg_buffered_port0__write_1__SEL_1 && data_in_tmp ;
  assign data_in_tmp_port1__read =
	     !data_in_tmp_EN_port0__write && data_in_tmp ;
  assign data_in_tmp_EN_port1__write =
	     WILL_FIRE_RL_rl_start_state_deq ||
	     !parse_done_port1__read &&
	     x_port1__read__h15146 < x_port1__read__h15162 &&
	     w_parse_header_done_whas ;
  assign data_in_tmp_port2__read =
	     data_in_tmp_EN_port1__write || data_in_tmp_port1__read ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register data_ff_cntr_r
  assign data_ff_cntr_r_D_IN = 2'b10 /* unspecified value */  ;
  assign data_ff_cntr_r_EN = 1'b0 ;

  // register data_ff_q_0
  assign data_ff_q_0_D_IN =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign data_ff_q_0_EN = 1'b0 ;

  // register data_ff_q_1
  assign data_ff_q_1_D_IN =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign data_ff_q_1_EN = 1'b0 ;

  // register data_in_tmp
  assign data_in_tmp_D_IN = data_in_tmp_port2__read ;
  assign data_in_tmp_EN = 1'b1 ;

  // register ethernet_out_ff_cntr_r
  assign ethernet_out_ff_cntr_r_D_IN =
	     WILL_FIRE_RL_ethernet_out_ff_decCtr ?
	       ethernet_out_ff_cntr_r_8_MINUS_1___d55 :
	       MUX_ethernet_out_ff_cntr_r_write_1__VAL_2 ;
  assign ethernet_out_ff_cntr_r_EN =
	     WILL_FIRE_RL_ethernet_out_ff_decCtr ||
	     WILL_FIRE_RL_ethernet_out_ff_incCtr ;

  // register ethernet_out_ff_q_0
  always@(MUX_ethernet_out_ff_q_0_write_1__SEL_1 or
	  ethernet_out_ff_x_wire_wget or
	  MUX_ethernet_out_ff_q_0_write_1__SEL_2 or
	  MUX_ethernet_out_ff_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_ethernet_out_ff_decCtr or ethernet_out_ff_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ethernet_out_ff_q_0_write_1__SEL_1:
	  ethernet_out_ff_q_0_D_IN = ethernet_out_ff_x_wire_wget;
      MUX_ethernet_out_ff_q_0_write_1__SEL_2:
	  ethernet_out_ff_q_0_D_IN = MUX_ethernet_out_ff_q_0_write_1__VAL_2;
      WILL_FIRE_RL_ethernet_out_ff_decCtr:
	  ethernet_out_ff_q_0_D_IN = ethernet_out_ff_q_1;
      default: ethernet_out_ff_q_0_D_IN =
		   116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ethernet_out_ff_q_0_EN =
	     WILL_FIRE_RL_ethernet_out_ff_incCtr &&
	     ethernet_out_ff_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_ethernet_out_ff_both && _dfoo7 ||
	     WILL_FIRE_RL_ethernet_out_ff_decCtr ;

  // register ethernet_out_ff_q_1
  always@(MUX_ethernet_out_ff_q_1_write_1__SEL_1 or
	  ethernet_out_ff_x_wire_wget or
	  MUX_ethernet_out_ff_q_1_write_1__SEL_2 or
	  MUX_ethernet_out_ff_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_ethernet_out_ff_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ethernet_out_ff_q_1_write_1__SEL_1:
	  ethernet_out_ff_q_1_D_IN = ethernet_out_ff_x_wire_wget;
      MUX_ethernet_out_ff_q_1_write_1__SEL_2:
	  ethernet_out_ff_q_1_D_IN = MUX_ethernet_out_ff_q_1_write_1__VAL_2;
      WILL_FIRE_RL_ethernet_out_ff_decCtr:
	  ethernet_out_ff_q_1_D_IN = 116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: ethernet_out_ff_q_1_D_IN =
		   116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ethernet_out_ff_q_1_EN =
	     WILL_FIRE_RL_ethernet_out_ff_incCtr &&
	     ethernet_out_ff_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_ethernet_out_ff_both && _dfoo5 ||
	     WILL_FIRE_RL_ethernet_out_ff_decCtr ;

  // register ipv4_out_ff_cntr_r
  assign ipv4_out_ff_cntr_r_D_IN =
	     WILL_FIRE_RL_ipv4_out_ff_decCtr ?
	       ipv4_out_ff_cntr_r_9_MINUS_1___d86 :
	       MUX_ipv4_out_ff_cntr_r_write_1__VAL_2 ;
  assign ipv4_out_ff_cntr_r_EN =
	     WILL_FIRE_RL_ipv4_out_ff_decCtr ||
	     WILL_FIRE_RL_ipv4_out_ff_incCtr ;

  // register ipv4_out_ff_q_0
  always@(MUX_ipv4_out_ff_q_0_write_1__SEL_1 or
	  ipv4_out_ff_x_wire_wget or
	  MUX_ipv4_out_ff_q_0_write_1__SEL_2 or
	  MUX_ipv4_out_ff_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_ipv4_out_ff_decCtr or ipv4_out_ff_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ipv4_out_ff_q_0_write_1__SEL_1:
	  ipv4_out_ff_q_0_D_IN = ipv4_out_ff_x_wire_wget;
      MUX_ipv4_out_ff_q_0_write_1__SEL_2:
	  ipv4_out_ff_q_0_D_IN = MUX_ipv4_out_ff_q_0_write_1__VAL_2;
      WILL_FIRE_RL_ipv4_out_ff_decCtr: ipv4_out_ff_q_0_D_IN = ipv4_out_ff_q_1;
      default: ipv4_out_ff_q_0_D_IN =
		   164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ipv4_out_ff_q_0_EN =
	     WILL_FIRE_RL_ipv4_out_ff_incCtr && ipv4_out_ff_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_ipv4_out_ff_both && _dfoo11 ||
	     WILL_FIRE_RL_ipv4_out_ff_decCtr ;

  // register ipv4_out_ff_q_1
  always@(MUX_ipv4_out_ff_q_1_write_1__SEL_1 or
	  ipv4_out_ff_x_wire_wget or
	  MUX_ipv4_out_ff_q_1_write_1__SEL_2 or
	  MUX_ipv4_out_ff_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_ipv4_out_ff_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ipv4_out_ff_q_1_write_1__SEL_1:
	  ipv4_out_ff_q_1_D_IN = ipv4_out_ff_x_wire_wget;
      MUX_ipv4_out_ff_q_1_write_1__SEL_2:
	  ipv4_out_ff_q_1_D_IN = MUX_ipv4_out_ff_q_1_write_1__VAL_2;
      WILL_FIRE_RL_ipv4_out_ff_decCtr:
	  ipv4_out_ff_q_1_D_IN =
	      164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: ipv4_out_ff_q_1_D_IN =
		   164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ipv4_out_ff_q_1_EN =
	     WILL_FIRE_RL_ipv4_out_ff_incCtr && ipv4_out_ff_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_ipv4_out_ff_both && _dfoo9 ||
	     WILL_FIRE_RL_ipv4_out_ff_decCtr ;

  // register ipv6_out_ff_cntr_r
  assign ipv6_out_ff_cntr_r_D_IN =
	     WILL_FIRE_RL_ipv6_out_ff_decCtr ?
	       ipv6_out_ff_cntr_r_00_MINUS_1___d117 :
	       MUX_ipv6_out_ff_cntr_r_write_1__VAL_2 ;
  assign ipv6_out_ff_cntr_r_EN =
	     WILL_FIRE_RL_ipv6_out_ff_decCtr ||
	     WILL_FIRE_RL_ipv6_out_ff_incCtr ;

  // register ipv6_out_ff_q_0
  always@(MUX_ipv6_out_ff_q_0_write_1__SEL_1 or
	  ipv6_out_ff_x_wire_wget or
	  MUX_ipv6_out_ff_q_0_write_1__SEL_2 or
	  MUX_ipv6_out_ff_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_ipv6_out_ff_decCtr or ipv6_out_ff_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ipv6_out_ff_q_0_write_1__SEL_1:
	  ipv6_out_ff_q_0_D_IN = ipv6_out_ff_x_wire_wget;
      MUX_ipv6_out_ff_q_0_write_1__SEL_2:
	  ipv6_out_ff_q_0_D_IN = MUX_ipv6_out_ff_q_0_write_1__VAL_2;
      WILL_FIRE_RL_ipv6_out_ff_decCtr: ipv6_out_ff_q_0_D_IN = ipv6_out_ff_q_1;
      default: ipv6_out_ff_q_0_D_IN =
		   324'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ipv6_out_ff_q_0_EN =
	     WILL_FIRE_RL_ipv6_out_ff_incCtr && ipv6_out_ff_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_ipv6_out_ff_both && _dfoo15 ||
	     WILL_FIRE_RL_ipv6_out_ff_decCtr ;

  // register ipv6_out_ff_q_1
  always@(MUX_ipv6_out_ff_q_1_write_1__SEL_1 or
	  ipv6_out_ff_x_wire_wget or
	  MUX_ipv6_out_ff_q_1_write_1__SEL_2 or
	  MUX_ipv6_out_ff_q_1_write_1__VAL_2 or
	  WILL_FIRE_RL_ipv6_out_ff_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ipv6_out_ff_q_1_write_1__SEL_1:
	  ipv6_out_ff_q_1_D_IN = ipv6_out_ff_x_wire_wget;
      MUX_ipv6_out_ff_q_1_write_1__SEL_2:
	  ipv6_out_ff_q_1_D_IN = MUX_ipv6_out_ff_q_1_write_1__VAL_2;
      WILL_FIRE_RL_ipv6_out_ff_decCtr:
	  ipv6_out_ff_q_1_D_IN =
	      324'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: ipv6_out_ff_q_1_D_IN =
		   324'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ipv6_out_ff_q_1_EN =
	     WILL_FIRE_RL_ipv6_out_ff_incCtr && ipv6_out_ff_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_ipv6_out_ff_both && _dfoo13 ||
	     WILL_FIRE_RL_ipv6_out_ff_decCtr ;

  // register parse_done
  assign parse_done_D_IN = parse_done_port2__read ;
  assign parse_done_EN = 1'b1 ;

  // register parse_state_ff_rv
  assign parse_state_ff_rv_D_IN = parse_state_ff_rv_port2__read ;
  assign parse_state_ff_rv_EN = 1'b1 ;

  // register rg_buffered
  assign rg_buffered_D_IN = rg_buffered_port2__read ;
  assign rg_buffered_EN = 1'b1 ;

  // register rg_click_metadata
  assign rg_click_metadata_D_IN = 113'h0 ;
  assign rg_click_metadata_EN = 1'b0 ;

  // register rg_condition_metadata
  assign rg_condition_metadata_D_IN = 33'h0 ;
  assign rg_condition_metadata_EN = 1'b0 ;

  // register rg_for_metadata
  assign rg_for_metadata_D_IN = 65'h0 ;
  assign rg_for_metadata_EN = 1'b0 ;

  // register rg_if_metadata
  assign rg_if_metadata_D_IN = 65'h0 ;
  assign rg_if_metadata_EN = 1'b0 ;

  // register rg_intrinsic_metadata
  assign rg_intrinsic_metadata_D_IN = 105'h0 ;
  assign rg_intrinsic_metadata_EN = 1'b0 ;

  // register rg_l3_switch_metadata
  assign rg_l3_switch_metadata_D_IN = 33'h0 ;
  assign rg_l3_switch_metadata_EN = 1'b0 ;

  // register rg_next_header_len
  assign rg_next_header_len_D_IN = x_port1__read__h15162 ;
  assign rg_next_header_len_EN = 1'b1 ;

  // register rg_security_metadata
  assign rg_security_metadata_D_IN = 10'h0 ;
  assign rg_security_metadata_EN = 1'b0 ;

  // register rg_tmp
  assign rg_tmp_D_IN =
	     WILL_FIRE_RL_rl_accept ? MUX_rg_tmp_write_1__VAL_1 : v__h19913 ;
  assign rg_tmp_EN =
	     WILL_FIRE_RL_rl_accept || WILL_FIRE_RL_fsmrl_rl_extract_4 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_3 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_2 ||
	     WILL_FIRE_RL_fsmrl_rl_extract_1 ||
	     WILL_FIRE_RL_fsmrl_rl_extract ;

  // register rg_while_metadata
  assign rg_while_metadata_D_IN = 65'h0 ;
  assign rg_while_metadata_EN = 1'b0 ;

  // register tcp_out_ff_cntr_r
  assign tcp_out_ff_cntr_r_D_IN =
	     WILL_FIRE_RL_tcp_out_ff_decCtr ?
	       tcp_out_ff_cntr_r_31_MINUS_1___d147 :
	       MUX_tcp_out_ff_cntr_r_write_1__VAL_2 ;
  assign tcp_out_ff_cntr_r_EN =
	     WILL_FIRE_RL_tcp_out_ff_decCtr ||
	     WILL_FIRE_RL_tcp_out_ff_incCtr ;

  // register tcp_out_ff_q_0
  always@(MUX_tcp_out_ff_q_0_write_1__SEL_1 or
	  tcp_out_ff_x_wire_wget or
	  MUX_tcp_out_ff_q_0_write_1__SEL_2 or
	  MUX_tcp_out_ff_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_tcp_out_ff_decCtr or tcp_out_ff_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tcp_out_ff_q_0_write_1__SEL_1:
	  tcp_out_ff_q_0_D_IN = tcp_out_ff_x_wire_wget;
      MUX_tcp_out_ff_q_0_write_1__SEL_2:
	  tcp_out_ff_q_0_D_IN = MUX_tcp_out_ff_q_0_write_1__VAL_2;
      WILL_FIRE_RL_tcp_out_ff_decCtr: tcp_out_ff_q_0_D_IN = tcp_out_ff_q_1;
      default: tcp_out_ff_q_0_D_IN =
		   164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign tcp_out_ff_q_0_EN =
	     WILL_FIRE_RL_tcp_out_ff_incCtr && tcp_out_ff_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_tcp_out_ff_both && _dfoo19 ||
	     WILL_FIRE_RL_tcp_out_ff_decCtr ;

  // register tcp_out_ff_q_1
  always@(MUX_tcp_out_ff_q_1_write_1__SEL_1 or
	  tcp_out_ff_x_wire_wget or
	  MUX_tcp_out_ff_q_1_write_1__SEL_2 or
	  MUX_tcp_out_ff_q_1_write_1__VAL_2 or WILL_FIRE_RL_tcp_out_ff_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tcp_out_ff_q_1_write_1__SEL_1:
	  tcp_out_ff_q_1_D_IN = tcp_out_ff_x_wire_wget;
      MUX_tcp_out_ff_q_1_write_1__SEL_2:
	  tcp_out_ff_q_1_D_IN = MUX_tcp_out_ff_q_1_write_1__VAL_2;
      WILL_FIRE_RL_tcp_out_ff_decCtr:
	  tcp_out_ff_q_1_D_IN =
	      164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      default: tcp_out_ff_q_1_D_IN =
		   164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign tcp_out_ff_q_1_EN =
	     WILL_FIRE_RL_tcp_out_ff_incCtr && tcp_out_ff_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_tcp_out_ff_both && _dfoo17 ||
	     WILL_FIRE_RL_tcp_out_ff_decCtr ;

  // register udp_out_ff_cntr_r
  assign udp_out_ff_cntr_r_D_IN =
	     WILL_FIRE_RL_udp_out_ff_decCtr ?
	       udp_out_ff_cntr_r_61_MINUS_1___d178 :
	       MUX_udp_out_ff_cntr_r_write_1__VAL_2 ;
  assign udp_out_ff_cntr_r_EN =
	     WILL_FIRE_RL_udp_out_ff_decCtr ||
	     WILL_FIRE_RL_udp_out_ff_incCtr ;

  // register udp_out_ff_q_0
  always@(MUX_udp_out_ff_q_0_write_1__SEL_1 or
	  udp_out_ff_x_wire_wget or
	  MUX_udp_out_ff_q_0_write_1__SEL_2 or
	  MUX_udp_out_ff_q_0_write_1__VAL_2 or
	  WILL_FIRE_RL_udp_out_ff_decCtr or udp_out_ff_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_udp_out_ff_q_0_write_1__SEL_1:
	  udp_out_ff_q_0_D_IN = udp_out_ff_x_wire_wget;
      MUX_udp_out_ff_q_0_write_1__SEL_2:
	  udp_out_ff_q_0_D_IN = MUX_udp_out_ff_q_0_write_1__VAL_2;
      WILL_FIRE_RL_udp_out_ff_decCtr: udp_out_ff_q_0_D_IN = udp_out_ff_q_1;
      default: udp_out_ff_q_0_D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign udp_out_ff_q_0_EN =
	     WILL_FIRE_RL_udp_out_ff_incCtr && udp_out_ff_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_udp_out_ff_both && _dfoo23 ||
	     WILL_FIRE_RL_udp_out_ff_decCtr ;

  // register udp_out_ff_q_1
  always@(MUX_udp_out_ff_q_1_write_1__SEL_1 or
	  udp_out_ff_x_wire_wget or
	  MUX_udp_out_ff_q_1_write_1__SEL_2 or
	  MUX_udp_out_ff_q_1_write_1__VAL_2 or WILL_FIRE_RL_udp_out_ff_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_udp_out_ff_q_1_write_1__SEL_1:
	  udp_out_ff_q_1_D_IN = udp_out_ff_x_wire_wget;
      MUX_udp_out_ff_q_1_write_1__SEL_2:
	  udp_out_ff_q_1_D_IN = MUX_udp_out_ff_q_1_write_1__VAL_2;
      WILL_FIRE_RL_udp_out_ff_decCtr:
	  udp_out_ff_q_1_D_IN = 68'h2AAAAAAAAAAAAAAAA;
      default: udp_out_ff_q_1_D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign udp_out_ff_q_1_EN =
	     WILL_FIRE_RL_udp_out_ff_incCtr && udp_out_ff_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_udp_out_ff_both && _dfoo21 ||
	     WILL_FIRE_RL_udp_out_ff_decCtr ;

  // submodule data_in_ff
  assign data_in_ff_D_IN = frameIn_put ;
  assign data_in_ff_ENQ = EN_frameIn_put ;
  assign data_in_ff_DEQ =
	     MUX_rg_buffered_port0__write_1__SEL_1 && data_in_tmp ||
	     WILL_FIRE_RL_rl_start_state_idle ;
  assign data_in_ff_CLR = 1'b0 ;

  // submodule delay_ff
  assign delay_ff_ENQ = delay_ff_FULL_N && w_parse_done_whas ;
  assign delay_ff_DEQ = WILL_FIRE_RL_rl_accept ;
  assign delay_ff_CLR = 1'b0 ;

  // submodule meta_in_ff
  assign meta_in_ff_D_IN =
	     { ethernet_out_ff_q_0,
	       ipv4_out_ff_q_0,
	       ipv6_out_ff_q_0,
	       tcp_out_ff_q_0,
	       udp_out_ff_q_0,
	       76'h2A955555554AAAAAAAA,
	       rg_click_metadata,
	       rg_condition_metadata,
	       rg_for_metadata,
	       rg_if_metadata_67_BIT_64_68_CONCAT_IF_rg_if_me_ETC___d291,
	       372'h2A8AA2A955555554AAAAAAAA15554AAAAAAAA55555555155552AAAAAAA8AAAA9555555555554AAAAAAAA55550AAAA } ;
  assign meta_in_ff_ENQ = WILL_FIRE_RL_rl_accept ;
  assign meta_in_ff_DEQ = EN_meta_get ;
  assign meta_in_ff_CLR = 1'b0 ;

  // remaining internal signals
  assign _dfoo11 =
	     ipv4_out_ff_cntr_r != 2'd1 ||
	     ipv4_out_ff_cntr_r_9_MINUS_1___d86 == 2'd0 ;
  assign _dfoo13 =
	     ipv6_out_ff_cntr_r != 2'd2 ||
	     ipv6_out_ff_cntr_r_00_MINUS_1___d117 == 2'd1 ;
  assign _dfoo15 =
	     ipv6_out_ff_cntr_r != 2'd1 ||
	     ipv6_out_ff_cntr_r_00_MINUS_1___d117 == 2'd0 ;
  assign _dfoo17 =
	     tcp_out_ff_cntr_r != 2'd2 ||
	     tcp_out_ff_cntr_r_31_MINUS_1___d147 == 2'd1 ;
  assign _dfoo19 =
	     tcp_out_ff_cntr_r != 2'd1 ||
	     tcp_out_ff_cntr_r_31_MINUS_1___d147 == 2'd0 ;
  assign _dfoo21 =
	     udp_out_ff_cntr_r != 2'd2 ||
	     udp_out_ff_cntr_r_61_MINUS_1___d178 == 2'd1 ;
  assign _dfoo23 =
	     udp_out_ff_cntr_r != 2'd1 ||
	     udp_out_ff_cntr_r_61_MINUS_1___d178 == 2'd0 ;
  assign _dfoo5 =
	     ethernet_out_ff_cntr_r != 2'd2 ||
	     ethernet_out_ff_cntr_r_8_MINUS_1___d55 == 2'd1 ;
  assign _dfoo7 =
	     ethernet_out_ff_cntr_r != 2'd1 ||
	     ethernet_out_ff_cntr_r_8_MINUS_1___d55 == 2'd0 ;
  assign _dfoo9 =
	     ipv4_out_ff_cntr_r != 2'd2 ||
	     ipv4_out_ff_cntr_r_9_MINUS_1___d86 == 2'd1 ;
  assign ethernet_eth_type__h41187 =
	     { v__h19913[103:96], v__h19913[111:104] } ;
  assign ethernet_out_ff_cntr_r_8_MINUS_1___d55 =
	     ethernet_out_ff_cntr_r - 2'd1 ;
  assign ipv4_frag_offset__h36262 = { v__h19913[52:48], v__h19913[63:56] } ;
  assign ipv4_out_ff_cntr_r_9_MINUS_1___d86 = ipv4_out_ff_cntr_r - 2'd1 ;
  assign ipv6_flow_label__h27384 =
	     { v__h19913[11:8], v__h19913[23:16], v__h19913[31:24] } ;
  assign ipv6_out_ff_cntr_r_00_MINUS_1___d117 = ipv6_out_ff_cntr_r - 2'd1 ;
  assign ipv6_payload_len__h27385 = { v__h19913[39:32], v__h19913[47:40] } ;
  assign rg_if_metadata_67_BIT_64_68_CONCAT_IF_rg_if_me_ETC___d291 =
	     { rg_if_metadata,
	       rg_intrinsic_metadata,
	       rg_l3_switch_metadata,
	       rg_security_metadata,
	       rg_while_metadata } ;
  assign tcp_out_ff_cntr_r_31_MINUS_1___d147 = tcp_out_ff_cntr_r - 2'd1 ;
  assign udp_out_ff_cntr_r_61_MINUS_1___d178 = udp_out_ff_cntr_r - 2'd1 ;
  assign v__h19913 = data_in_tmp ? v__h19987 : rg_tmp ;
  assign v__h19987 = x__h20086 | rg_tmp ;
  assign x__h20086 = x__h20089 << rg_buffered ;
  assign x__h20089 = { 384'd0, data_in_ff_D_OUT[145:18] } ;
  assign x__h21666 = { v__h19913[55:48], v__h19913[63:56] } ;
  assign x__h22640 = { v__h19913[7:0], v__h19913[15:8] } ;
  assign x__h26091 =
	     { ipv6_payload_len__h27385,
	       v__h19913[55:48],
	       v__h19913[63:56] } ;
  assign x__h26095 =
	     { v__h19913[71:64],
	       v__h19913[79:72],
	       v__h19913[87:80],
	       v__h19913[95:88] } ;
  assign x__h26110 = { v__h19913[119:112], v__h19913[127:120] } ;
  assign x__h26114 = { v__h19913[135:128], v__h19913[143:136] } ;
  assign x__h26118 = { v__h19913[151:144], v__h19913[159:152] } ;
  assign x__h34174 = { v__h19913[3:0], v__h19913[15:12] } ;
  assign x__h39700 = { v__h19913[23:16], v__h19913[31:24] } ;
  assign x__h39722 = { v__h19913[87:80], v__h19913[95:88] } ;
  assign x__h39726 =
	     { ethernet_eth_type__h41187,
	       v__h19913[119:112],
	       v__h19913[127:120] } ;
  assign x__h39730 = { x__h26114, v__h19913[151:144], v__h19913[159:152] } ;
  assign x__h41179 =
	     { x__h22640,
	       v__h19913[23:16],
	       v__h19913[31:24],
	       v__h19913[39:32],
	       v__h19913[47:40] } ;
  assign x__h43604 =
	     { x__h21666,
	       v__h19913[71:64],
	       v__h19913[79:72],
	       v__h19913[87:80],
	       v__h19913[95:88] } ;
  assign x_port1__read__h15146 =
	     rg_buffered_EN_port0__write ?
	       rg_buffered_port0__write_1 :
	       rg_buffered ;
  assign x_port1__read__h15162 =
	     rg_next_header_len_EN_port0__write ? 10'd0 : rg_next_header_len ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        data_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	data_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	data_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	data_in_tmp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ethernet_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ethernet_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	    116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ethernet_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	    116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ipv4_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ipv4_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	    164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ipv4_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	    164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ipv6_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ipv6_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	    324'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ipv6_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	    324'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	parse_done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	parse_state_ff_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_buffered <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_click_metadata <= `BSV_ASSIGNMENT_DELAY
	    113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_condition_metadata <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	rg_for_metadata <= `BSV_ASSIGNMENT_DELAY 65'h0AAAAAAAAAAAAAAAA;
	rg_if_metadata <= `BSV_ASSIGNMENT_DELAY 65'h0AAAAAAAAAAAAAAAA;
	rg_intrinsic_metadata <= `BSV_ASSIGNMENT_DELAY
	    105'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_l3_switch_metadata <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	rg_next_header_len <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_security_metadata <= `BSV_ASSIGNMENT_DELAY 10'd170;
	rg_tmp <= `BSV_ASSIGNMENT_DELAY 512'd0;
	rg_while_metadata <= `BSV_ASSIGNMENT_DELAY 65'h0AAAAAAAAAAAAAAAA;
	tcp_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	tcp_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	    164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	tcp_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	    164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	udp_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	udp_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY 68'h2AAAAAAAAAAAAAAAA;
	udp_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY 68'h2AAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (data_ff_cntr_r_EN)
	  data_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY data_ff_cntr_r_D_IN;
	if (data_ff_q_0_EN)
	  data_ff_q_0 <= `BSV_ASSIGNMENT_DELAY data_ff_q_0_D_IN;
	if (data_ff_q_1_EN)
	  data_ff_q_1 <= `BSV_ASSIGNMENT_DELAY data_ff_q_1_D_IN;
	if (data_in_tmp_EN)
	  data_in_tmp <= `BSV_ASSIGNMENT_DELAY data_in_tmp_D_IN;
	if (ethernet_out_ff_cntr_r_EN)
	  ethernet_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      ethernet_out_ff_cntr_r_D_IN;
	if (ethernet_out_ff_q_0_EN)
	  ethernet_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY
	      ethernet_out_ff_q_0_D_IN;
	if (ethernet_out_ff_q_1_EN)
	  ethernet_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY
	      ethernet_out_ff_q_1_D_IN;
	if (ipv4_out_ff_cntr_r_EN)
	  ipv4_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY ipv4_out_ff_cntr_r_D_IN;
	if (ipv4_out_ff_q_0_EN)
	  ipv4_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY ipv4_out_ff_q_0_D_IN;
	if (ipv4_out_ff_q_1_EN)
	  ipv4_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY ipv4_out_ff_q_1_D_IN;
	if (ipv6_out_ff_cntr_r_EN)
	  ipv6_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY ipv6_out_ff_cntr_r_D_IN;
	if (ipv6_out_ff_q_0_EN)
	  ipv6_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY ipv6_out_ff_q_0_D_IN;
	if (ipv6_out_ff_q_1_EN)
	  ipv6_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY ipv6_out_ff_q_1_D_IN;
	if (parse_done_EN)
	  parse_done <= `BSV_ASSIGNMENT_DELAY parse_done_D_IN;
	if (parse_state_ff_rv_EN)
	  parse_state_ff_rv <= `BSV_ASSIGNMENT_DELAY parse_state_ff_rv_D_IN;
	if (rg_buffered_EN)
	  rg_buffered <= `BSV_ASSIGNMENT_DELAY rg_buffered_D_IN;
	if (rg_click_metadata_EN)
	  rg_click_metadata <= `BSV_ASSIGNMENT_DELAY rg_click_metadata_D_IN;
	if (rg_condition_metadata_EN)
	  rg_condition_metadata <= `BSV_ASSIGNMENT_DELAY
	      rg_condition_metadata_D_IN;
	if (rg_for_metadata_EN)
	  rg_for_metadata <= `BSV_ASSIGNMENT_DELAY rg_for_metadata_D_IN;
	if (rg_if_metadata_EN)
	  rg_if_metadata <= `BSV_ASSIGNMENT_DELAY rg_if_metadata_D_IN;
	if (rg_intrinsic_metadata_EN)
	  rg_intrinsic_metadata <= `BSV_ASSIGNMENT_DELAY
	      rg_intrinsic_metadata_D_IN;
	if (rg_l3_switch_metadata_EN)
	  rg_l3_switch_metadata <= `BSV_ASSIGNMENT_DELAY
	      rg_l3_switch_metadata_D_IN;
	if (rg_next_header_len_EN)
	  rg_next_header_len <= `BSV_ASSIGNMENT_DELAY rg_next_header_len_D_IN;
	if (rg_security_metadata_EN)
	  rg_security_metadata <= `BSV_ASSIGNMENT_DELAY
	      rg_security_metadata_D_IN;
	if (rg_tmp_EN) rg_tmp <= `BSV_ASSIGNMENT_DELAY rg_tmp_D_IN;
	if (rg_while_metadata_EN)
	  rg_while_metadata <= `BSV_ASSIGNMENT_DELAY rg_while_metadata_D_IN;
	if (tcp_out_ff_cntr_r_EN)
	  tcp_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY tcp_out_ff_cntr_r_D_IN;
	if (tcp_out_ff_q_0_EN)
	  tcp_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY tcp_out_ff_q_0_D_IN;
	if (tcp_out_ff_q_1_EN)
	  tcp_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY tcp_out_ff_q_1_D_IN;
	if (udp_out_ff_cntr_r_EN)
	  udp_out_ff_cntr_r <= `BSV_ASSIGNMENT_DELAY udp_out_ff_cntr_r_D_IN;
	if (udp_out_ff_q_0_EN)
	  udp_out_ff_q_0 <= `BSV_ASSIGNMENT_DELAY udp_out_ff_q_0_D_IN;
	if (udp_out_ff_q_1_EN)
	  udp_out_ff_q_1 <= `BSV_ASSIGNMENT_DELAY udp_out_ff_q_1_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    data_ff_cntr_r = 2'h2;
    data_ff_q_0 = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_ff_q_1 = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_in_tmp = 1'h0;
    ethernet_out_ff_cntr_r = 2'h2;
    ethernet_out_ff_q_0 = 116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ethernet_out_ff_q_1 = 116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ipv4_out_ff_cntr_r = 2'h2;
    ipv4_out_ff_q_0 = 164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ipv4_out_ff_q_1 = 164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ipv6_out_ff_cntr_r = 2'h2;
    ipv6_out_ff_q_0 =
	324'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ipv6_out_ff_q_1 =
	324'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    parse_done = 1'h0;
    parse_state_ff_rv = 4'hA;
    rg_buffered = 10'h2AA;
    rg_click_metadata = 113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_condition_metadata = 33'h0AAAAAAAA;
    rg_for_metadata = 65'h0AAAAAAAAAAAAAAAA;
    rg_if_metadata = 65'h0AAAAAAAAAAAAAAAA;
    rg_intrinsic_metadata = 105'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_l3_switch_metadata = 33'h0AAAAAAAA;
    rg_next_header_len = 10'h2AA;
    rg_security_metadata = 10'h2AA;
    rg_tmp =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_while_metadata = 65'h0AAAAAAAAAAAAAAAA;
    tcp_out_ff_cntr_r = 2'h2;
    tcp_out_ff_q_0 = 164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tcp_out_ff_q_1 = 164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    udp_out_ff_cntr_r = 2'h2;
    udp_out_ff_q_0 = 68'hAAAAAAAAAAAAAAAAA;
    udp_out_ff_q_1 = 68'hAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkParser

